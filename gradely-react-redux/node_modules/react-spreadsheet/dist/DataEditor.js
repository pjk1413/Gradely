import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import React, { PureComponent } from "react";
import * as Types from "./types";
import { moveCursorToEnd } from "./util";

var DataEditor = /*#__PURE__*/function (_PureComponent) {
  _inherits(DataEditor, _PureComponent);

  function DataEditor() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, DataEditor);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DataEditor)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _this.handleChange = function (e) {
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          cell = _this$props.cell;
      onChange(_objectSpread({}, cell, {
        value: e.target.value
      }));
    };

    _this.handleInput = function (input) {
      _this.input = input;
    };

    return _this;
  }

  _createClass(DataEditor, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.input) {
        moveCursorToEnd(this.input);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          getValue = _this$props2.getValue,
          column = _this$props2.column,
          row = _this$props2.row,
          cell = _this$props2.cell;
      var value = getValue({
        column: column,
        row: row,
        data: cell
      }) || "";
      return React.createElement("div", {
        className: "DataEditor"
      }, React.createElement("input", {
        ref: this.handleInput,
        type: "text",
        onChange: this.handleChange,
        value: value,
        autoFocus: true
      }));
    }
  }]);

  return DataEditor;
}(PureComponent);

DataEditor.defaultProps = {
  value: ""
};
export { DataEditor as default };