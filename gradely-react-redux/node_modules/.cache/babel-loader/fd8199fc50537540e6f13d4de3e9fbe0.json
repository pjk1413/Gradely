{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pjk14\\\\Desktop\\\\Gradely\\\\gradely-react-redux\\\\src\\\\components\\\\utility-boxes\\\\gradeEntry\\\\Table.js\";\nimport React, { Component } from 'react';\nimport { HotTable } from '@handsontable/react';\nimport { connect } from 'react-redux';\nimport { gridHandleChange } from './../../../action/tempActions';\nimport Handsontable from \"handsontable\";\nimport 'handsontable/dist/handsontable.full.css';\n\nclass Table extends Component {\n  constructor() {\n    super();\n    this.state = {\n      changedRow: '',\n      changedProp: '',\n      newValue: ''\n    };\n  }\n\n  changeCells() {\n    console.log(\"CHANGE CELLS\");\n  }\n\n  setChanges(changes, data, settings) {\n    changes && changes.forEach(([row, prop, oldValue, newValue]) => {\n      if (oldValue !== newValue) {\n        this.setState({\n          changedRow: row,\n          changedProp: prop,\n          newValue: newValue\n        });\n      }\n    });\n    this.props.gridHandleChange(data);\n  }\n\n  componentDidUpdate() {\n    let colHeaders = [];\n    let columnSchema = [];\n    let rowHeaders = [];\n    let data = [];\n\n    if (this.props.editCourse && this.props.editCourse.students) {\n      rowHeaders = this.props.editCourse.students.map(student => {\n        //Creates an object that will be used to organize the data\n        let studentArray = [];\n        student.assignmentScores.forEach(score => {\n          studentArray.push([score.assignmentTempId, score.points]);\n        });\n        console.log(studentArray);\n        const temp = new Map(studentArray);\n        const studentObj = Object.fromEntries(temp);\n        data && data.push(studentObj); //Returns the heading\n\n        return student.user.firstName + \" \" + student.user.lastName;\n      });\n    }\n\n    if (this.props.editCourse && this.props.editCourse.assignments) {\n      //Sort by assignment ID\n      // ** Creates the column headers as well as colSchema //\n      // ***************************** //\n      colHeaders = this.props.editCourse.assignments.map(assignment => {\n        const colObj = {\n          data: assignment.id\n        };\n        columnSchema.push(colObj);\n        return assignment.name + \" (\" + assignment.totalPoints + \")\";\n      }); // ** Creates the row headers //\n    }\n\n    const settings = {\n      licenseKey: 'non-commercial-and-evaluation',\n      data: data,\n      colHeaders: colHeaders,\n      rowHeaders: rowHeaders,\n      rowHeaderWidth: 150,\n      columns: columnSchema,\n      afterChange: changes => afterChange(changes),\n      //row: rowStudentLabel,\n      // width: \"600\", \n      height: \"300\",\n      headerTooltips: {\n        rows: true,\n        columns: true,\n        onlyTrimmed: false\n      }\n    };\n    const hotTable = new Handsontable(document.getElementById(\"hot-app\"), settings);\n\n    function afterChange(changes) {}\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"hot-app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  editCourse: state.temp.editCourse,\n  data: state.temp.data\n});\n\nexport default connect(mapStateToProps, {\n  gridHandleChange\n})(Table);","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/src/components/utility-boxes/gradeEntry/Table.js"],"names":["React","Component","HotTable","connect","gridHandleChange","Handsontable","Table","constructor","state","changedRow","changedProp","newValue","changeCells","console","log","setChanges","changes","data","settings","forEach","row","prop","oldValue","setState","props","componentDidUpdate","colHeaders","columnSchema","rowHeaders","editCourse","students","map","student","studentArray","assignmentScores","score","push","assignmentTempId","points","temp","Map","studentObj","Object","fromEntries","user","firstName","lastName","assignments","assignment","colObj","id","name","totalPoints","licenseKey","rowHeaderWidth","columns","afterChange","height","headerTooltips","rows","onlyTrimmed","hotTable","document","getElementById","render","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { HotTable } from '@handsontable/react'\r\nimport { connect } from 'react-redux';\r\nimport { gridHandleChange } from './../../../action/tempActions'\r\nimport Handsontable from \"handsontable\";\r\nimport 'handsontable/dist/handsontable.full.css';\r\n\r\nclass Table extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            changedRow: '',\r\n            changedProp: '',\r\n            newValue: ''\r\n        }\r\n    }\r\n\r\n    changeCells() {\r\n        console.log(\"CHANGE CELLS\")\r\n    }\r\n\r\n    setChanges(changes, data, settings) {\r\n\r\n        changes && changes.forEach(([row, prop, oldValue, newValue]) => {\r\n            if (oldValue !== newValue) {\r\n                this.setState({\r\n                    changedRow: row,\r\n                    changedProp: prop,\r\n                    newValue: newValue\r\n                })\r\n            }\r\n        });\r\n\r\n        this.props.gridHandleChange(data)\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n\r\n        let colHeaders = []\r\n        let columnSchema = []\r\n        let rowHeaders = []\r\n        let data = []\r\n\r\n        if (this.props.editCourse && this.props.editCourse.students) {\r\n            rowHeaders = this.props.editCourse.students.map(student => {\r\n\r\n                //Creates an object that will be used to organize the data\r\n                let studentArray = []\r\n                student.assignmentScores.forEach(score => {\r\n                    studentArray.push([score.assignmentTempId, score.points])\r\n                });\r\n                console.log(studentArray)\r\n                const temp = new Map(studentArray)\r\n                const studentObj = Object.fromEntries(temp)\r\n\r\n                data && data.push(studentObj)\r\n\r\n                //Returns the heading\r\n                return student.user.firstName + \" \" + student.user.lastName\r\n            })\r\n\r\n\r\n\r\n        }\r\n\r\n        if (this.props.editCourse && this.props.editCourse.assignments) {\r\n\r\n            //Sort by assignment ID\r\n            // ** Creates the column headers as well as colSchema //\r\n            // ***************************** //\r\n            colHeaders = this.props.editCourse.assignments.map(assignment => {\r\n                const colObj = { data: assignment.id }\r\n                columnSchema.push(colObj)\r\n                return assignment.name + \" (\" + assignment.totalPoints + \")\"\r\n            })\r\n\r\n            // ** Creates the row headers //\r\n\r\n        }\r\n\r\n\r\n        const settings = {\r\n            licenseKey: 'non-commercial-and-evaluation',\r\n            data: data,\r\n            colHeaders: colHeaders,\r\n            rowHeaders: rowHeaders,\r\n            rowHeaderWidth: 150,\r\n            columns: columnSchema,\r\n            afterChange: (changes) => afterChange(changes),\r\n            //row: rowStudentLabel,\r\n            // width: \"600\", \r\n            height: \"300\",\r\n            headerTooltips: {\r\n                rows: true,\r\n                columns: true,\r\n                onlyTrimmed: false\r\n            }\r\n        }\r\n        const hotTable = new Handsontable(document.getElementById(\"hot-app\"), settings)\r\n\r\n        function afterChange(changes) {\r\n            \r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n\r\n\r\n\r\n\r\n        return (\r\n            <div id=\"hot-app\">\r\n                {/* <HotTable\r\n                    id=\"hot-table\"\r\n                    className=\"my-3\"\r\n                    settings={this.state.settings}\r\n                    afterChange={(changes, source) => { this.setChanges(changes, source) }}\r\n                    setDataAtRowProp={this.state.changes}\r\n                    licenseKey={'non-commercial-and-evaluation'}\r\n                    data={this.state.data}\r\n                    colHeaders={this.state.colHeaders}\r\n                    rowHeaders={this.state.rowHeaders}\r\n                    rowHeaderWidth={150}\r\n                    columns={this.state.columnSchema}\r\n                    // afterChange: (changes, source) => this.handleChange(changes, data, settings),\r\n                    //row: rowStudentLabel,\r\n                    // width: \"600\", \r\n                    height={\"300\"}\r\n                    headerTooltips={{ rows: true, columns: true, onlyTrimmed: false }}\r\n                /> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    editCourse: state.temp.editCourse,\r\n    data: state.temp.data,\r\n})\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, { gridHandleChange })(Table)"]},"metadata":{},"sourceType":"module"}