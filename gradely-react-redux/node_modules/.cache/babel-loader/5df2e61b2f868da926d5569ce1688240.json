{"ast":null,"code":"import { compareFunctionFactory as defaultSort, COLUMN_DATA_TYPE as DEFAULT_DATA_TYPE } from '../sortFunction/default';\nimport { compareFunctionFactory as numericSort, COLUMN_DATA_TYPE as NUMERIC_DATA_TYPE } from '../sortFunction/numeric';\nimport { compareFunctionFactory as dateSort, COLUMN_DATA_TYPE as DATE_DATA_TYPE } from '../sortFunction/date';\nimport staticRegister from '../../../utils/staticRegister';\n\nvar _staticRegister = staticRegister('sorting.compareFunctionFactory'),\n    registerCompareFunctionFactory = _staticRegister.register,\n    getGloballyCompareFunctionFactory = _staticRegister.getItem,\n    hasGloballyCompareFunctionFactory = _staticRegister.hasItem;\n\nvar _staticRegister2 = staticRegister('sorting.mainSortComparator'),\n    registerRootComparator = _staticRegister2.register,\n    getRootComparator = _staticRegister2.getItem;\n/**\n * Gets sort function for the particular column basing on it's data type.\n *\n * @param {String} dataType Data type for the particular column.\n * @returns {Function}\n */\n\n\nexport function getCompareFunctionFactory(type) {\n  if (hasGloballyCompareFunctionFactory(type)) {\n    return getGloballyCompareFunctionFactory(type);\n  }\n\n  return getGloballyCompareFunctionFactory(DEFAULT_DATA_TYPE);\n}\nregisterCompareFunctionFactory(NUMERIC_DATA_TYPE, numericSort);\nregisterCompareFunctionFactory(DATE_DATA_TYPE, dateSort);\nregisterCompareFunctionFactory(DEFAULT_DATA_TYPE, defaultSort);\nexport { registerRootComparator, getRootComparator };","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react/node_modules/handsontable/es/plugins/columnSorting/sortService/registry.js"],"names":["compareFunctionFactory","defaultSort","COLUMN_DATA_TYPE","DEFAULT_DATA_TYPE","numericSort","NUMERIC_DATA_TYPE","dateSort","DATE_DATA_TYPE","staticRegister","_staticRegister","registerCompareFunctionFactory","register","getGloballyCompareFunctionFactory","getItem","hasGloballyCompareFunctionFactory","hasItem","_staticRegister2","registerRootComparator","getRootComparator","getCompareFunctionFactory","type"],"mappings":"AAAA,SAASA,sBAAsB,IAAIC,WAAnC,EAAgDC,gBAAgB,IAAIC,iBAApE,QAA6F,yBAA7F;AACA,SAASH,sBAAsB,IAAII,WAAnC,EAAgDF,gBAAgB,IAAIG,iBAApE,QAA6F,yBAA7F;AACA,SAASL,sBAAsB,IAAIM,QAAnC,EAA6CJ,gBAAgB,IAAIK,cAAjE,QAAuF,sBAAvF;AACA,OAAOC,cAAP,MAA2B,+BAA3B;;AAEA,IAAIC,eAAe,GAAGD,cAAc,CAAC,gCAAD,CAApC;AAAA,IACIE,8BAA8B,GAAGD,eAAe,CAACE,QADrD;AAAA,IAEIC,iCAAiC,GAAGH,eAAe,CAACI,OAFxD;AAAA,IAGIC,iCAAiC,GAAGL,eAAe,CAACM,OAHxD;;AAKA,IAAIC,gBAAgB,GAAGR,cAAc,CAAC,4BAAD,CAArC;AAAA,IACIS,sBAAsB,GAAGD,gBAAgB,CAACL,QAD9C;AAAA,IAEIO,iBAAiB,GAAGF,gBAAgB,CAACH,OAFzC;AAGA;;;;;;;;AAQA,OAAO,SAASM,yBAAT,CAAmCC,IAAnC,EAAyC;AAC9C,MAAIN,iCAAiC,CAACM,IAAD,CAArC,EAA6C;AAC3C,WAAOR,iCAAiC,CAACQ,IAAD,CAAxC;AACD;;AAED,SAAOR,iCAAiC,CAACT,iBAAD,CAAxC;AACD;AACDO,8BAA8B,CAACL,iBAAD,EAAoBD,WAApB,CAA9B;AACAM,8BAA8B,CAACH,cAAD,EAAiBD,QAAjB,CAA9B;AACAI,8BAA8B,CAACP,iBAAD,EAAoBF,WAApB,CAA9B;AACA,SAASgB,sBAAT,EAAiCC,iBAAjC","sourcesContent":["import { compareFunctionFactory as defaultSort, COLUMN_DATA_TYPE as DEFAULT_DATA_TYPE } from '../sortFunction/default';\nimport { compareFunctionFactory as numericSort, COLUMN_DATA_TYPE as NUMERIC_DATA_TYPE } from '../sortFunction/numeric';\nimport { compareFunctionFactory as dateSort, COLUMN_DATA_TYPE as DATE_DATA_TYPE } from '../sortFunction/date';\nimport staticRegister from '../../../utils/staticRegister';\n\nvar _staticRegister = staticRegister('sorting.compareFunctionFactory'),\n    registerCompareFunctionFactory = _staticRegister.register,\n    getGloballyCompareFunctionFactory = _staticRegister.getItem,\n    hasGloballyCompareFunctionFactory = _staticRegister.hasItem;\n\nvar _staticRegister2 = staticRegister('sorting.mainSortComparator'),\n    registerRootComparator = _staticRegister2.register,\n    getRootComparator = _staticRegister2.getItem;\n/**\n * Gets sort function for the particular column basing on it's data type.\n *\n * @param {String} dataType Data type for the particular column.\n * @returns {Function}\n */\n\n\nexport function getCompareFunctionFactory(type) {\n  if (hasGloballyCompareFunctionFactory(type)) {\n    return getGloballyCompareFunctionFactory(type);\n  }\n\n  return getGloballyCompareFunctionFactory(DEFAULT_DATA_TYPE);\n}\nregisterCompareFunctionFactory(NUMERIC_DATA_TYPE, numericSort);\nregisterCompareFunctionFactory(DATE_DATA_TYPE, dateSort);\nregisterCompareFunctionFactory(DEFAULT_DATA_TYPE, defaultSort);\nexport { registerRootComparator, getRootComparator };"]},"metadata":{},"sourceType":"module"}