{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport BasePlugin from '../_base';\nimport { rangeEach } from '../../helpers/number';\nimport { registerPlugin } from '../../plugins';\nimport RowsMapper from './rowsMapper';\nimport { arrayMap } from '../../helpers/array';\n/**\n * @plugin TrimRows\n *\n * @description\n * The plugin allows to trim certain rows. The trimming is achieved by applying the transformation algorithm to the data\n * transformation. In this case, when the row is trimmed it is not accessible using `getData*` methods thus the trimmed\n * data is not visible to other plugins.\n *\n * @example\n * ```js\n * const container = document.getElementById('example');\n * const hot = new Handsontable(container, {\n *   date: getData(),\n *   // hide selected rows on table initialization\n *   trimRows: [1, 2, 5]\n * });\n *\n * // access the trimRows plugin instance\n * const trimRowsPlugin = hot.getPlugin('trimRows');\n *\n * // hide single row\n * trimRowsPlugin.trimRow(1);\n *\n * // hide multiple rows\n * trimRowsPlugin.trimRow(1, 2, 9);\n *\n * // or as an array\n * trimRowsPlugin.trimRows([1, 2, 9]);\n *\n * // show single row\n * trimRowsPlugin.untrimRow(1);\n *\n * // show multiple rows\n * trimRowsPlugin.untrimRow(1, 2, 9);\n *\n * // or as an array\n * trimRowsPlugin.untrimRows([1, 2, 9]);\n *\n * // rerender table to see the changes\n * hot.render();\n * ```\n */\n\nvar TrimRows = /*#__PURE__*/function (_BasePlugin) {\n  _inherits(TrimRows, _BasePlugin);\n\n  function TrimRows(hotInstance) {\n    var _this;\n\n    _classCallCheck(this, TrimRows);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TrimRows).call(this, hotInstance));\n    /**\n     * List of trimmed row indexes.\n     *\n     * @private\n     * @type {Array}\n     */\n\n    _this.trimmedRows = [];\n    /**\n     * List of last removed row indexes.\n     *\n     * @private\n     * @type {Array}\n     */\n\n    _this.removedRows = [];\n    /**\n     * Object containing visual row indexes mapped to data source indexes.\n     *\n     * @private\n     * @type {RowsMapper}\n     */\n\n    _this.rowsMapper = new RowsMapper(_assertThisInitialized(_this));\n    return _this;\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` than the {@link AutoRowSize#enablePlugin} method is called.\n   *\n   * @returns {Boolean}\n   */\n\n\n  _createClass(TrimRows, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return !!this.hot.getSettings().trimRows;\n    }\n    /**\n     * Enables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"enablePlugin\",\n    value: function enablePlugin() {\n      var _this2 = this;\n\n      if (this.enabled) {\n        return;\n      }\n\n      var settings = this.hot.getSettings().trimRows;\n\n      if (Array.isArray(settings)) {\n        this.trimmedRows = settings;\n      }\n\n      this.rowsMapper.createMap(this.hot.countSourceRows());\n      this.addHook('modifyRow', function (row, source) {\n        return _this2.onModifyRow(row, source);\n      });\n      this.addHook('unmodifyRow', function (row, source) {\n        return _this2.onUnmodifyRow(row, source);\n      });\n      this.addHook('beforeCreateRow', function (index, amount, source) {\n        return _this2.onBeforeCreateRow(index, amount, source);\n      });\n      this.addHook('afterCreateRow', function (index, amount) {\n        return _this2.onAfterCreateRow(index, amount);\n      });\n      this.addHook('beforeRemoveRow', function (index, amount) {\n        return _this2.onBeforeRemoveRow(index, amount);\n      });\n      this.addHook('afterRemoveRow', function () {\n        return _this2.onAfterRemoveRow();\n      });\n      this.addHook('afterLoadData', function (firstRun) {\n        return _this2.onAfterLoadData(firstRun);\n      });\n\n      _get(_getPrototypeOf(TrimRows.prototype), \"enablePlugin\", this).call(this);\n    }\n    /**\n     * Updates the plugin state. This method is executed when {@link Core#updateSettings} is invoked.\n     */\n\n  }, {\n    key: \"updatePlugin\",\n    value: function updatePlugin() {\n      var settings = this.hot.getSettings().trimRows;\n\n      if (Array.isArray(settings)) {\n        this.disablePlugin();\n        this.enablePlugin();\n      }\n\n      _get(_getPrototypeOf(TrimRows.prototype), \"updatePlugin\", this).call(this);\n    }\n    /**\n     * Disables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"disablePlugin\",\n    value: function disablePlugin() {\n      this.trimmedRows = [];\n      this.removedRows.length = 0;\n      this.rowsMapper.clearMap();\n\n      _get(_getPrototypeOf(TrimRows.prototype), \"disablePlugin\", this).call(this);\n    }\n    /**\n     * Trims the rows provided in the array.\n     *\n     * @param {Number[]} rows Array of physical row indexes.\n     * @fires Hooks#skipLengthCache\n     * @fires Hooks#beforeTrimRow\n     * @fires Hooks#afterTrimRow\n     */\n\n  }, {\n    key: \"trimRows\",\n    value: function trimRows(rows) {\n      var currentTrimConfig = this.trimmedRows;\n      var isValidConfig = this.isValidConfig(rows);\n      var destinationTrimConfig = currentTrimConfig;\n\n      if (isValidConfig) {\n        destinationTrimConfig = Array.from(new Set(currentTrimConfig.concat(rows)));\n      }\n\n      var allowTrimRow = this.hot.runHooks('beforeTrimRow', currentTrimConfig, destinationTrimConfig, isValidConfig);\n\n      if (allowTrimRow === false) {\n        return;\n      }\n\n      if (isValidConfig) {\n        this.trimmedRows = destinationTrimConfig;\n        this.hot.runHooks('skipLengthCache', 100);\n        this.rowsMapper.createMap(this.hot.countSourceRows());\n      }\n\n      this.hot.runHooks('afterTrimRow', currentTrimConfig, destinationTrimConfig, isValidConfig, isValidConfig && destinationTrimConfig.length > currentTrimConfig.length);\n    }\n    /**\n     * Trims the row provided as physical row index (counting from 0).\n     *\n     * @param {...Number} row Physical row index.\n     */\n\n  }, {\n    key: \"trimRow\",\n    value: function trimRow() {\n      for (var _len = arguments.length, row = new Array(_len), _key = 0; _key < _len; _key++) {\n        row[_key] = arguments[_key];\n      }\n\n      this.trimRows(row);\n    }\n    /**\n     * Untrims the rows provided in the array.\n     *\n     * @param {Number[]} rows Array of physical row indexes.\n     * @fires Hooks#skipLengthCache\n     * @fires Hooks#beforeUntrimRow\n     * @fires Hooks#afterUntrimRow\n     */\n\n  }, {\n    key: \"untrimRows\",\n    value: function untrimRows(rows) {\n      var currentTrimConfig = this.trimmedRows;\n      var isValidConfig = this.isValidConfig(rows);\n      var destinationTrimConfig = currentTrimConfig;\n\n      if (isValidConfig) {\n        destinationTrimConfig = this.trimmedRows.filter(function (trimmedRow) {\n          return rows.includes(trimmedRow) === false;\n        });\n      }\n\n      var allowUntrimRow = this.hot.runHooks('beforeUntrimRow', currentTrimConfig, destinationTrimConfig, isValidConfig);\n\n      if (allowUntrimRow === false) {\n        return;\n      }\n\n      if (isValidConfig) {\n        this.trimmedRows = destinationTrimConfig;\n        this.hot.runHooks('skipLengthCache', 100);\n        this.rowsMapper.createMap(this.hot.countSourceRows());\n      }\n\n      this.hot.runHooks('afterUntrimRow', currentTrimConfig, destinationTrimConfig, isValidConfig, isValidConfig && destinationTrimConfig.length < currentTrimConfig.length);\n    }\n    /**\n     * Untrims the row provided as row index (counting from 0).\n     *\n     * @param {...Number} row Physical row index.\n     */\n\n  }, {\n    key: \"untrimRow\",\n    value: function untrimRow() {\n      for (var _len2 = arguments.length, row = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        row[_key2] = arguments[_key2];\n      }\n\n      this.untrimRows(row);\n    }\n    /**\n     * Checks if given physical row is hidden.\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isTrimmed\",\n    value: function isTrimmed(row) {\n      return this.trimmedRows.includes(row);\n    }\n    /**\n     * Untrims all trimmed rows.\n     */\n\n  }, {\n    key: \"untrimAll\",\n    value: function untrimAll() {\n      this.untrimRows([].concat(this.trimmedRows));\n    }\n    /**\n     * Get if trim config is valid.\n     *\n     * @param {Array} trimmedRows List of physical row indexes.\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isValidConfig\",\n    value: function isValidConfig(trimmedRows) {\n      var _this3 = this;\n\n      return trimmedRows.every(function (trimmedRow) {\n        return Number.isInteger(trimmedRow) && trimmedRow >= 0 && trimmedRow < _this3.hot.countSourceRows();\n      });\n    }\n    /**\n     * On modify row listener.\n     *\n     * @private\n     * @param {Number} row Visual row index.\n     * @param {String} source Source name.\n     * @returns {Number|null}\n     */\n\n  }, {\n    key: \"onModifyRow\",\n    value: function onModifyRow(row, source) {\n      var physicalRow = row;\n\n      if (source !== this.pluginName) {\n        physicalRow = this.rowsMapper.getValueByIndex(physicalRow);\n      }\n\n      return physicalRow;\n    }\n    /**\n     * On unmodifyRow listener.\n     *\n     * @private\n     * @param {Number} row Physical row index.\n     * @param {String} source Source name.\n     * @returns {Number|null}\n     */\n\n  }, {\n    key: \"onUnmodifyRow\",\n    value: function onUnmodifyRow(row, source) {\n      var visualRow = row;\n\n      if (source !== this.pluginName) {\n        visualRow = this.rowsMapper.getIndexByValue(visualRow);\n      }\n\n      return visualRow;\n    }\n    /**\n     * `beforeCreateRow` hook callback.\n     *\n     * @private\n     * @param {Number} index Index of the newly created row.\n     * @param {Number} amount Amount of created rows.\n     * @param {String} source Source of the change.\n     */\n\n  }, {\n    key: \"onBeforeCreateRow\",\n    value: function onBeforeCreateRow(index, amount, source) {\n      if (this.isEnabled() && this.trimmedRows.length > 0 && source === 'auto') {\n        return false;\n      }\n    }\n    /**\n     * On after create row listener.\n     *\n     * @private\n     * @param {Number} index Visual row index.\n     * @param {Number} amount Defines how many rows removed.\n     */\n\n  }, {\n    key: \"onAfterCreateRow\",\n    value: function onAfterCreateRow(index, amount) {\n      var _this4 = this;\n\n      this.rowsMapper.shiftItems(index, amount);\n      this.trimmedRows = arrayMap(this.trimmedRows, function (trimmedRow) {\n        if (trimmedRow >= _this4.rowsMapper.getValueByIndex(index)) {\n          return trimmedRow + amount;\n        }\n\n        return trimmedRow;\n      });\n    }\n    /**\n     * On before remove row listener.\n     *\n     * @private\n     * @param {Number} index Visual row index.\n     * @param {Number} amount Defines how many rows removed.\n     *\n     * @fires Hooks#modifyRow\n     */\n\n  }, {\n    key: \"onBeforeRemoveRow\",\n    value: function onBeforeRemoveRow(index, amount) {\n      var _this5 = this;\n\n      this.removedRows.length = 0;\n\n      if (index !== false) {\n        // Collect physical row index.\n        rangeEach(index, index + amount - 1, function (removedIndex) {\n          _this5.removedRows.push(_this5.hot.runHooks('modifyRow', removedIndex, _this5.pluginName));\n        });\n      }\n    }\n    /**\n     * On after remove row listener.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onAfterRemoveRow\",\n    value: function onAfterRemoveRow() {\n      var _this6 = this;\n\n      this.rowsMapper.unshiftItems(this.removedRows); // TODO: Maybe it can be optimized? N x M checks, where N is number of already trimmed rows and M is number of removed rows.\n      // Decreasing physical indexes (some of them should be updated, because few indexes are missing in new list of indexes after removal).\n\n      this.trimmedRows = arrayMap(this.trimmedRows, function (trimmedRow) {\n        return trimmedRow - _this6.removedRows.filter(function (removedRow) {\n          return removedRow < trimmedRow;\n        }).length;\n      });\n    }\n    /**\n     * On after load data listener.\n     *\n     * @private\n     * @param {Boolean} firstRun Indicates if hook was fired while Handsontable initialization.\n     */\n\n  }, {\n    key: \"onAfterLoadData\",\n    value: function onAfterLoadData(firstRun) {\n      if (!firstRun) {\n        this.rowsMapper.createMap(this.hot.countSourceRows());\n      }\n    }\n    /**\n     * Destroys the plugin instance.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.rowsMapper.destroy();\n\n      _get(_getPrototypeOf(TrimRows.prototype), \"destroy\", this).call(this);\n    }\n  }]);\n\n  return TrimRows;\n}(BasePlugin);\n\nregisterPlugin('trimRows', TrimRows);\nexport default TrimRows;","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/node_modules/handsontable/es/plugins/trimRows/trimRows.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","_possibleConstructorReturn","self","call","_assertThisInitialized","ReferenceError","_get","property","receiver","Reflect","get","base","_superPropBase","desc","getOwnPropertyDescriptor","value","object","hasOwnProperty","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_inherits","subClass","superClass","create","_setPrototypeOf","p","BasePlugin","rangeEach","registerPlugin","RowsMapper","arrayMap","TrimRows","_BasePlugin","hotInstance","_this","trimmedRows","removedRows","rowsMapper","isEnabled","hot","getSettings","trimRows","enablePlugin","_this2","enabled","settings","Array","isArray","createMap","countSourceRows","addHook","row","source","onModifyRow","onUnmodifyRow","index","amount","onBeforeCreateRow","onAfterCreateRow","onBeforeRemoveRow","onAfterRemoveRow","firstRun","onAfterLoadData","updatePlugin","disablePlugin","clearMap","rows","currentTrimConfig","isValidConfig","destinationTrimConfig","from","Set","concat","allowTrimRow","runHooks","trimRow","_len","arguments","_key","untrimRows","filter","trimmedRow","includes","allowUntrimRow","untrimRow","_len2","_key2","isTrimmed","untrimAll","_this3","every","Number","isInteger","physicalRow","pluginName","getValueByIndex","visualRow","getIndexByValue","_this4","shiftItems","_this5","removedIndex","push","_this6","unshiftItems","removedRow","destroy"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.symbol\";\nimport \"core-js/modules/es.symbol.description\";\nimport \"core-js/modules/es.symbol.iterator\";\nimport \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.array.every\";\nimport \"core-js/modules/es.array.filter\";\nimport \"core-js/modules/es.array.from\";\nimport \"core-js/modules/es.array.includes\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.number.constructor\";\nimport \"core-js/modules/es.number.is-integer\";\nimport \"core-js/modules/es.object.get-own-property-descriptor\";\nimport \"core-js/modules/es.object.get-prototype-of\";\nimport \"core-js/modules/es.object.set-prototype-of\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.reflect.get\";\nimport \"core-js/modules/es.set\";\nimport \"core-js/modules/es.string.includes\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/web.dom-collections.iterator\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport BasePlugin from '../_base';\nimport { rangeEach } from '../../helpers/number';\nimport { registerPlugin } from '../../plugins';\nimport RowsMapper from './rowsMapper';\nimport { arrayMap } from '../../helpers/array';\n/**\n * @plugin TrimRows\n *\n * @description\n * The plugin allows to trim certain rows. The trimming is achieved by applying the transformation algorithm to the data\n * transformation. In this case, when the row is trimmed it is not accessible using `getData*` methods thus the trimmed\n * data is not visible to other plugins.\n *\n * @example\n * ```js\n * const container = document.getElementById('example');\n * const hot = new Handsontable(container, {\n *   date: getData(),\n *   // hide selected rows on table initialization\n *   trimRows: [1, 2, 5]\n * });\n *\n * // access the trimRows plugin instance\n * const trimRowsPlugin = hot.getPlugin('trimRows');\n *\n * // hide single row\n * trimRowsPlugin.trimRow(1);\n *\n * // hide multiple rows\n * trimRowsPlugin.trimRow(1, 2, 9);\n *\n * // or as an array\n * trimRowsPlugin.trimRows([1, 2, 9]);\n *\n * // show single row\n * trimRowsPlugin.untrimRow(1);\n *\n * // show multiple rows\n * trimRowsPlugin.untrimRow(1, 2, 9);\n *\n * // or as an array\n * trimRowsPlugin.untrimRows([1, 2, 9]);\n *\n * // rerender table to see the changes\n * hot.render();\n * ```\n */\n\nvar TrimRows =\n/*#__PURE__*/\nfunction (_BasePlugin) {\n  _inherits(TrimRows, _BasePlugin);\n\n  function TrimRows(hotInstance) {\n    var _this;\n\n    _classCallCheck(this, TrimRows);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TrimRows).call(this, hotInstance));\n    /**\n     * List of trimmed row indexes.\n     *\n     * @private\n     * @type {Array}\n     */\n\n    _this.trimmedRows = [];\n    /**\n     * List of last removed row indexes.\n     *\n     * @private\n     * @type {Array}\n     */\n\n    _this.removedRows = [];\n    /**\n     * Object containing visual row indexes mapped to data source indexes.\n     *\n     * @private\n     * @type {RowsMapper}\n     */\n\n    _this.rowsMapper = new RowsMapper(_assertThisInitialized(_this));\n    return _this;\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` than the {@link AutoRowSize#enablePlugin} method is called.\n   *\n   * @returns {Boolean}\n   */\n\n\n  _createClass(TrimRows, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return !!this.hot.getSettings().trimRows;\n    }\n    /**\n     * Enables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"enablePlugin\",\n    value: function enablePlugin() {\n      var _this2 = this;\n\n      if (this.enabled) {\n        return;\n      }\n\n      var settings = this.hot.getSettings().trimRows;\n\n      if (Array.isArray(settings)) {\n        this.trimmedRows = settings;\n      }\n\n      this.rowsMapper.createMap(this.hot.countSourceRows());\n      this.addHook('modifyRow', function (row, source) {\n        return _this2.onModifyRow(row, source);\n      });\n      this.addHook('unmodifyRow', function (row, source) {\n        return _this2.onUnmodifyRow(row, source);\n      });\n      this.addHook('beforeCreateRow', function (index, amount, source) {\n        return _this2.onBeforeCreateRow(index, amount, source);\n      });\n      this.addHook('afterCreateRow', function (index, amount) {\n        return _this2.onAfterCreateRow(index, amount);\n      });\n      this.addHook('beforeRemoveRow', function (index, amount) {\n        return _this2.onBeforeRemoveRow(index, amount);\n      });\n      this.addHook('afterRemoveRow', function () {\n        return _this2.onAfterRemoveRow();\n      });\n      this.addHook('afterLoadData', function (firstRun) {\n        return _this2.onAfterLoadData(firstRun);\n      });\n\n      _get(_getPrototypeOf(TrimRows.prototype), \"enablePlugin\", this).call(this);\n    }\n    /**\n     * Updates the plugin state. This method is executed when {@link Core#updateSettings} is invoked.\n     */\n\n  }, {\n    key: \"updatePlugin\",\n    value: function updatePlugin() {\n      var settings = this.hot.getSettings().trimRows;\n\n      if (Array.isArray(settings)) {\n        this.disablePlugin();\n        this.enablePlugin();\n      }\n\n      _get(_getPrototypeOf(TrimRows.prototype), \"updatePlugin\", this).call(this);\n    }\n    /**\n     * Disables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"disablePlugin\",\n    value: function disablePlugin() {\n      this.trimmedRows = [];\n      this.removedRows.length = 0;\n      this.rowsMapper.clearMap();\n\n      _get(_getPrototypeOf(TrimRows.prototype), \"disablePlugin\", this).call(this);\n    }\n    /**\n     * Trims the rows provided in the array.\n     *\n     * @param {Number[]} rows Array of physical row indexes.\n     * @fires Hooks#skipLengthCache\n     * @fires Hooks#beforeTrimRow\n     * @fires Hooks#afterTrimRow\n     */\n\n  }, {\n    key: \"trimRows\",\n    value: function trimRows(rows) {\n      var currentTrimConfig = this.trimmedRows;\n      var isValidConfig = this.isValidConfig(rows);\n      var destinationTrimConfig = currentTrimConfig;\n\n      if (isValidConfig) {\n        destinationTrimConfig = Array.from(new Set(currentTrimConfig.concat(rows)));\n      }\n\n      var allowTrimRow = this.hot.runHooks('beforeTrimRow', currentTrimConfig, destinationTrimConfig, isValidConfig);\n\n      if (allowTrimRow === false) {\n        return;\n      }\n\n      if (isValidConfig) {\n        this.trimmedRows = destinationTrimConfig;\n        this.hot.runHooks('skipLengthCache', 100);\n        this.rowsMapper.createMap(this.hot.countSourceRows());\n      }\n\n      this.hot.runHooks('afterTrimRow', currentTrimConfig, destinationTrimConfig, isValidConfig, isValidConfig && destinationTrimConfig.length > currentTrimConfig.length);\n    }\n    /**\n     * Trims the row provided as physical row index (counting from 0).\n     *\n     * @param {...Number} row Physical row index.\n     */\n\n  }, {\n    key: \"trimRow\",\n    value: function trimRow() {\n      for (var _len = arguments.length, row = new Array(_len), _key = 0; _key < _len; _key++) {\n        row[_key] = arguments[_key];\n      }\n\n      this.trimRows(row);\n    }\n    /**\n     * Untrims the rows provided in the array.\n     *\n     * @param {Number[]} rows Array of physical row indexes.\n     * @fires Hooks#skipLengthCache\n     * @fires Hooks#beforeUntrimRow\n     * @fires Hooks#afterUntrimRow\n     */\n\n  }, {\n    key: \"untrimRows\",\n    value: function untrimRows(rows) {\n      var currentTrimConfig = this.trimmedRows;\n      var isValidConfig = this.isValidConfig(rows);\n      var destinationTrimConfig = currentTrimConfig;\n\n      if (isValidConfig) {\n        destinationTrimConfig = this.trimmedRows.filter(function (trimmedRow) {\n          return rows.includes(trimmedRow) === false;\n        });\n      }\n\n      var allowUntrimRow = this.hot.runHooks('beforeUntrimRow', currentTrimConfig, destinationTrimConfig, isValidConfig);\n\n      if (allowUntrimRow === false) {\n        return;\n      }\n\n      if (isValidConfig) {\n        this.trimmedRows = destinationTrimConfig;\n        this.hot.runHooks('skipLengthCache', 100);\n        this.rowsMapper.createMap(this.hot.countSourceRows());\n      }\n\n      this.hot.runHooks('afterUntrimRow', currentTrimConfig, destinationTrimConfig, isValidConfig, isValidConfig && destinationTrimConfig.length < currentTrimConfig.length);\n    }\n    /**\n     * Untrims the row provided as row index (counting from 0).\n     *\n     * @param {...Number} row Physical row index.\n     */\n\n  }, {\n    key: \"untrimRow\",\n    value: function untrimRow() {\n      for (var _len2 = arguments.length, row = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        row[_key2] = arguments[_key2];\n      }\n\n      this.untrimRows(row);\n    }\n    /**\n     * Checks if given physical row is hidden.\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isTrimmed\",\n    value: function isTrimmed(row) {\n      return this.trimmedRows.includes(row);\n    }\n    /**\n     * Untrims all trimmed rows.\n     */\n\n  }, {\n    key: \"untrimAll\",\n    value: function untrimAll() {\n      this.untrimRows([].concat(this.trimmedRows));\n    }\n    /**\n     * Get if trim config is valid.\n     *\n     * @param {Array} trimmedRows List of physical row indexes.\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isValidConfig\",\n    value: function isValidConfig(trimmedRows) {\n      var _this3 = this;\n\n      return trimmedRows.every(function (trimmedRow) {\n        return Number.isInteger(trimmedRow) && trimmedRow >= 0 && trimmedRow < _this3.hot.countSourceRows();\n      });\n    }\n    /**\n     * On modify row listener.\n     *\n     * @private\n     * @param {Number} row Visual row index.\n     * @param {String} source Source name.\n     * @returns {Number|null}\n     */\n\n  }, {\n    key: \"onModifyRow\",\n    value: function onModifyRow(row, source) {\n      var physicalRow = row;\n\n      if (source !== this.pluginName) {\n        physicalRow = this.rowsMapper.getValueByIndex(physicalRow);\n      }\n\n      return physicalRow;\n    }\n    /**\n     * On unmodifyRow listener.\n     *\n     * @private\n     * @param {Number} row Physical row index.\n     * @param {String} source Source name.\n     * @returns {Number|null}\n     */\n\n  }, {\n    key: \"onUnmodifyRow\",\n    value: function onUnmodifyRow(row, source) {\n      var visualRow = row;\n\n      if (source !== this.pluginName) {\n        visualRow = this.rowsMapper.getIndexByValue(visualRow);\n      }\n\n      return visualRow;\n    }\n    /**\n     * `beforeCreateRow` hook callback.\n     *\n     * @private\n     * @param {Number} index Index of the newly created row.\n     * @param {Number} amount Amount of created rows.\n     * @param {String} source Source of the change.\n     */\n\n  }, {\n    key: \"onBeforeCreateRow\",\n    value: function onBeforeCreateRow(index, amount, source) {\n      if (this.isEnabled() && this.trimmedRows.length > 0 && source === 'auto') {\n        return false;\n      }\n    }\n    /**\n     * On after create row listener.\n     *\n     * @private\n     * @param {Number} index Visual row index.\n     * @param {Number} amount Defines how many rows removed.\n     */\n\n  }, {\n    key: \"onAfterCreateRow\",\n    value: function onAfterCreateRow(index, amount) {\n      var _this4 = this;\n\n      this.rowsMapper.shiftItems(index, amount);\n      this.trimmedRows = arrayMap(this.trimmedRows, function (trimmedRow) {\n        if (trimmedRow >= _this4.rowsMapper.getValueByIndex(index)) {\n          return trimmedRow + amount;\n        }\n\n        return trimmedRow;\n      });\n    }\n    /**\n     * On before remove row listener.\n     *\n     * @private\n     * @param {Number} index Visual row index.\n     * @param {Number} amount Defines how many rows removed.\n     *\n     * @fires Hooks#modifyRow\n     */\n\n  }, {\n    key: \"onBeforeRemoveRow\",\n    value: function onBeforeRemoveRow(index, amount) {\n      var _this5 = this;\n\n      this.removedRows.length = 0;\n\n      if (index !== false) {\n        // Collect physical row index.\n        rangeEach(index, index + amount - 1, function (removedIndex) {\n          _this5.removedRows.push(_this5.hot.runHooks('modifyRow', removedIndex, _this5.pluginName));\n        });\n      }\n    }\n    /**\n     * On after remove row listener.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onAfterRemoveRow\",\n    value: function onAfterRemoveRow() {\n      var _this6 = this;\n\n      this.rowsMapper.unshiftItems(this.removedRows); // TODO: Maybe it can be optimized? N x M checks, where N is number of already trimmed rows and M is number of removed rows.\n      // Decreasing physical indexes (some of them should be updated, because few indexes are missing in new list of indexes after removal).\n\n      this.trimmedRows = arrayMap(this.trimmedRows, function (trimmedRow) {\n        return trimmedRow - _this6.removedRows.filter(function (removedRow) {\n          return removedRow < trimmedRow;\n        }).length;\n      });\n    }\n    /**\n     * On after load data listener.\n     *\n     * @private\n     * @param {Boolean} firstRun Indicates if hook was fired while Handsontable initialization.\n     */\n\n  }, {\n    key: \"onAfterLoadData\",\n    value: function onAfterLoadData(firstRun) {\n      if (!firstRun) {\n        this.rowsMapper.createMap(this.hot.countSourceRows());\n      }\n    }\n    /**\n     * Destroys the plugin instance.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.rowsMapper.destroy();\n\n      _get(_getPrototypeOf(TrimRows.prototype), \"destroy\", this).call(this);\n    }\n  }]);\n\n  return TrimRows;\n}(BasePlugin);\n\nregisterPlugin('trimRows', TrimRows);\nexport default TrimRows;"]},"metadata":{},"sourceType":"module"}