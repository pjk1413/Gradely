{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pjk14\\\\Desktop\\\\Gradely\\\\gradely-react-redux\\\\src\\\\components\\\\utility-boxes\\\\gradeEntry\\\\Table.js\";\nimport React, { Component } from 'react';\nimport { HotTable } from '@handsontable/react';\nimport { connect } from 'react-redux';\nimport { gridHandleChange, updateTempAssignment } from './../../../action/tempActions';\nimport Handsontable from \"handsontable\";\nimport 'handsontable/dist/handsontable.full.css';\n\nclass Table extends Component {\n  constructor() {\n    super();\n    this.state = {\n      changedRow: '',\n      changedProp: '',\n      newValue: ''\n    };\n  }\n\n  handleChange(changes) {\n    changes && changes.forEach(([row, prop, oldValue, newValue]) => {\n      if (oldValue !== newValue) {\n        const hotTable = Handsontable(document.getElementById(\"hot-app\"), {});\n        hotTable.setDataAtRowProp(); //hotTable.setDataAtRowProp(row, prop, newValue)\n\n        console.log(\"IN\");\n        const id = hotTable.getRowHeader(row).split(\":\")[0]; //Set student assignment score, update course, and start a timer to save the data\n\n        const student = this.props.editCourse.students && this.props.editCourse.students.find(student => {\n          return student.id === parseInt(id);\n        });\n        const assignmentScore = student.assignmentScores.find(assignment => {\n          return assignment.assignmentTempId === prop;\n        });\n        assignmentScore.points = newValue;\n        assignmentScore.turnedIn = true;\n        console.log(assignmentScore); //this.props.updateTempAssignment(assignmentScore)\n      }\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const students = this.props.editCourse.students;\n    let colHeaders = [];\n    let columnSchema = [];\n    let rowHeaders = null;\n    let data = [];\n\n    if (this.props.editCourse && this.props.editCourse.students) {\n      rowHeaders = this.props.editCourse.students.map(student => {\n        //Creates an object that will be used to organize the data\n        let studentArray = [];\n        student.assignmentScores.forEach(score => {\n          studentArray.push([score.assignmentTempId, score.points]);\n        });\n        const temp = new Map(studentArray);\n        const studentObj = Object.fromEntries(temp);\n        data && data.push(studentObj); //Returns the heading\n\n        return student.id + \": \" + student.user.firstName + \" \" + student.user.lastName;\n      });\n    }\n\n    console.log(rowHeaders);\n\n    if (this.props.editCourse && this.props.editCourse.assignments) {\n      //Sort by assignment ID\n      // ** Creates the column headers as well as colSchema //\n      // ***************************** //\n      colHeaders = this.props.editCourse.assignments.map(assignment => {\n        const colObj = {\n          data: assignment.id\n        };\n        columnSchema.push(colObj);\n        return assignment.name + \" (\" + assignment.totalPoints + \")\";\n      }); // ** Creates the row headers //\n    }\n\n    const hotTable = new Handsontable(document.getElementById(\"hot-app\"), {\n      licenseKey: 'non-commercial-and-evaluation',\n      data: data,\n      colHeaders: colHeaders,\n      rowHeaders: rowHeaders,\n      rowHeaderWidth: 150,\n      columns: columnSchema,\n      afterChange: changes => this.handleChange(changes),\n      //rows: rowSchema,\n      //row: rowStudentLabel,\n      // width: \"600\", \n      height: \"600\",\n      headerTooltips: {\n        rows: true,\n        columns: true,\n        onlyTrimmed: false\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"hot-app\",\n      className: \"my-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  editCourse: state.temp.editCourse,\n  data: state.temp.data\n});\n\nexport default connect(mapStateToProps, {\n  gridHandleChange,\n  updateTempAssignment\n})(Table);","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/src/components/utility-boxes/gradeEntry/Table.js"],"names":["React","Component","HotTable","connect","gridHandleChange","updateTempAssignment","Handsontable","Table","constructor","state","changedRow","changedProp","newValue","handleChange","changes","forEach","row","prop","oldValue","hotTable","document","getElementById","setDataAtRowProp","console","log","id","getRowHeader","split","student","props","editCourse","students","find","parseInt","assignmentScore","assignmentScores","assignment","assignmentTempId","points","turnedIn","componentDidUpdate","prevProps","colHeaders","columnSchema","rowHeaders","data","map","studentArray","score","push","temp","Map","studentObj","Object","fromEntries","user","firstName","lastName","assignments","colObj","name","totalPoints","licenseKey","rowHeaderWidth","columns","afterChange","height","headerTooltips","rows","onlyTrimmed","render","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { HotTable } from '@handsontable/react'\r\nimport { connect } from 'react-redux';\r\nimport { gridHandleChange, updateTempAssignment } from './../../../action/tempActions'\r\nimport Handsontable from \"handsontable\";\r\nimport 'handsontable/dist/handsontable.full.css';\r\n\r\nclass Table extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            changedRow: '',\r\n            changedProp: '',\r\n            newValue: ''\r\n        }\r\n    }\r\n\r\n    handleChange(changes) {\r\n        changes && changes.forEach(([row, prop, oldValue, newValue]) => {\r\n            if (oldValue !== newValue) {\r\n                const hotTable = Handsontable(document.getElementById(\"hot-app\"), {})\r\n\r\n                hotTable.setDataAtRowProp()\r\n                //hotTable.setDataAtRowProp(row, prop, newValue)\r\n                console.log(\"IN\")\r\n                const id = hotTable.getRowHeader(row).split(\":\")[0]\r\n                //Set student assignment score, update course, and start a timer to save the data\r\n                const student = this.props.editCourse.students && this.props.editCourse.students.find(student => {\r\n                    return student.id === parseInt(id)\r\n                })\r\n\r\n                const assignmentScore = student.assignmentScores.find(assignment => {\r\n                    return assignment.assignmentTempId === prop\r\n                })\r\n                assignmentScore.points = newValue\r\n                assignmentScore.turnedIn = true\r\n                console.log(assignmentScore)\r\n\r\n                //this.props.updateTempAssignment(assignmentScore)\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const students = this.props.editCourse.students\r\n\r\n        let colHeaders = []\r\n        let columnSchema = []\r\n        let rowHeaders = null\r\n        let data = []\r\n\r\n        if (this.props.editCourse && this.props.editCourse.students) {\r\n            rowHeaders = this.props.editCourse.students.map(student => {\r\n\r\n                //Creates an object that will be used to organize the data\r\n                let studentArray = []\r\n                student.assignmentScores.forEach(score => {\r\n                    studentArray.push([score.assignmentTempId, score.points])\r\n                });\r\n\r\n                const temp = new Map(studentArray)\r\n                const studentObj = Object.fromEntries(temp)\r\n\r\n                data && data.push(studentObj)\r\n\r\n                //Returns the heading\r\n                return student.id + \": \" + student.user.firstName + \" \" + student.user.lastName\r\n            })\r\n\r\n\r\n\r\n        }\r\n        console.log(rowHeaders)\r\n        if (this.props.editCourse && this.props.editCourse.assignments) {\r\n\r\n            //Sort by assignment ID\r\n            // ** Creates the column headers as well as colSchema //\r\n            // ***************************** //\r\n            colHeaders = this.props.editCourse.assignments.map(assignment => {\r\n                const colObj = { data: assignment.id }\r\n                columnSchema.push(colObj)\r\n                return assignment.name + \" (\" + assignment.totalPoints + \")\"\r\n            })\r\n\r\n            // ** Creates the row headers //\r\n\r\n        }\r\n\r\n        const hotTable = new Handsontable(\r\n            document.getElementById(\"hot-app\"),\r\n            {\r\n                licenseKey: 'non-commercial-and-evaluation',\r\n                data: data,\r\n                colHeaders: colHeaders,\r\n                rowHeaders: rowHeaders,\r\n                rowHeaderWidth: 150,\r\n                columns: columnSchema,\r\n                afterChange: (changes) => this.handleChange(changes),\r\n                //rows: rowSchema,\r\n                //row: rowStudentLabel,\r\n                // width: \"600\", \r\n                height: \"600\",\r\n                headerTooltips: {\r\n                    rows: true,\r\n                    columns: true,\r\n                    onlyTrimmed: false\r\n                }\r\n            })\r\n\r\n             \r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n\r\n\r\n\r\n\r\n\r\n        return (\r\n            <div id=\"hot-app\" className=\"my-3\">\r\n                {/* <HotTable\r\n                    id=\"hot-table\"\r\n                    className=\"my-3\"\r\n                    settings={this.state.settings}\r\n                    afterChange={(changes, source) => { this.setChanges(changes, source) }}\r\n                    setDataAtRowProp={this.state.changes}\r\n                    licenseKey={'non-commercial-and-evaluation'}\r\n                    data={this.state.data}\r\n                    colHeaders={this.state.colHeaders}\r\n                    rowHeaders={this.state.rowHeaders}\r\n                    rowHeaderWidth={150}\r\n                    columns={this.state.columnSchema}\r\n                    // afterChange: (changes, source) => this.handleChange(changes, data, settings),\r\n                    //row: rowStudentLabel,\r\n                    // width: \"600\", \r\n                    height={\"300\"}\r\n                    headerTooltips={{ rows: true, columns: true, onlyTrimmed: false }}\r\n                /> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    editCourse: state.temp.editCourse,\r\n    data: state.temp.data,\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, { gridHandleChange, updateTempAssignment })(Table)"]},"metadata":{},"sourceType":"module"}