{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport { addClass, removeClass } from '../../helpers/dom/element';\nimport { isUndefined, isDefined } from '../../helpers/mixed';\nimport { isObject } from '../../helpers/object';\nimport { arrayMap } from '../../helpers/array';\nimport { rangeEach } from '../../helpers/number';\nimport BasePlugin from '../_base';\nimport { registerPlugin } from './../../plugins';\nimport Hooks from '../../pluginHooks';\nimport { isPressedCtrlKey } from '../../utils/keyStateObserver';\nimport { ColumnStatesManager } from './columnStatesManager';\nimport { getNextSortOrder, areValidSortStates, getHeaderSpanElement, isFirstLevelColumnHeader, wasHeaderClickedProperly } from './utils';\nimport { getClassedToRemove, getClassesToAdd } from './domHelpers';\nimport RowsMapper from './rowsMapper';\nimport { rootComparator } from './rootComparator';\nimport { registerRootComparator, sort } from './sortService';\nvar APPEND_COLUMN_CONFIG_STRATEGY = 'append';\nvar REPLACE_COLUMN_CONFIG_STRATEGY = 'replace';\nvar PLUGIN_KEY = 'columnSorting';\nregisterRootComparator(PLUGIN_KEY, rootComparator);\nHooks.getSingleton().register('beforeColumnSort');\nHooks.getSingleton().register('afterColumnSort'); // DIFF - MultiColumnSorting & ColumnSorting: changed configuration documentation.\n\n/**\n * @plugin ColumnSorting\n *\n * @description\n * This plugin sorts the view by columns (but does not sort the data source!). To enable the plugin, set the\n * {@link Options#columnSorting} property to the correct value (see the examples below).\n *\n * @example\n * ```js\n * // as boolean\n * columnSorting: true\n *\n * // as an object with initial sort config (sort ascending for column at index 1)\n * columnSorting: {\n *   initialConfig: {\n *     column: 1,\n *     sortOrder: 'asc'\n *   }\n * }\n *\n * // as an object which define specific sorting options for all columns\n * columnSorting: {\n *   sortEmptyCells: true, // true = the table sorts empty cells, false = the table moves all empty cells to the end of the table (by default)\n *   indicator: true, // true = shows indicator for all columns (by default), false = don't show indicator for columns\n *   headerAction: true, // true = allow to click on the headers to sort (by default), false = turn off possibility to click on the headers to sort\n *   compareFunctionFactory: function(sortOrder, columnMeta) {\n *     return function(value, nextValue) {\n *       // Some value comparisons which will return -1, 0 or 1...\n *     }\n *   }\n * }\n *\n * // as an object passed to the `column` property, allows specifying a custom options for the desired column.\n * // please take a look at documentation of `column` property: https://docs.handsontable.com/pro/Options.html#columns\n * columns: [{\n *   columnSorting: {\n *     indicator: false, // disable indicator for the first column,\n *     sortEmptyCells: true,\n *     headerAction: false, // clicks on the first column won't sort\n *     compareFunctionFactory: function(sortOrder, columnMeta) {\n *       return function(value, nextValue) {\n *         return 0; // Custom compare function for the first column (don't sort)\n *       }\n *     }\n *   }\n * }]```\n *\n * @dependencies ObserveChanges\n */\n\nvar ColumnSorting = /*#__PURE__*/function (_BasePlugin) {\n  _inherits(ColumnSorting, _BasePlugin);\n\n  function ColumnSorting(hotInstance) {\n    var _this2;\n\n    _classCallCheck(this, ColumnSorting);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(ColumnSorting).call(this, hotInstance));\n    /**\n     * Instance of column state manager.\n     *\n     * @private\n     * @type {ColumnStatesManager}\n     */\n\n    _this2.columnStatesManager = new ColumnStatesManager();\n    /**\n     * Object containing visual row indexes mapped to data source indexes.\n     *\n     * @private\n     * @type {RowsMapper}\n     */\n\n    _this2.rowsMapper = new RowsMapper(_assertThisInitialized(_this2));\n    /**\n     * It blocks the plugin translation, this flag is checked inside `onModifyRow` callback.\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    _this2.blockPluginTranslation = true;\n    /**\n     * Cached column properties from plugin like i.e. `indicator`, `headerAction`.\n     *\n     * @private\n     * @type {Map<number, Object>}\n     */\n\n    _this2.columnMetaCache = new Map();\n    /**\n     * Main settings key designed for the plugin.\n     *\n     * @private\n     * @type {String}\n     */\n\n    _this2.pluginKey = PLUGIN_KEY;\n    return _this2;\n  }\n  /**\n   * Checks if the plugin is enabled in the Handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` than the {@link ColumnSorting#enablePlugin} method is called.\n   *\n   * @returns {Boolean}\n   */\n\n\n  _createClass(ColumnSorting, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return !!this.hot.getSettings()[this.pluginKey];\n    }\n    /**\n     * Enables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"enablePlugin\",\n    value: function enablePlugin() {\n      var _this3 = this;\n\n      if (this.enabled) {\n        return;\n      }\n\n      if (isUndefined(this.hot.getSettings().observeChanges)) {\n        this.enableObserveChangesPlugin();\n      }\n\n      this.addHook('afterTrimRow', function () {\n        return _this3.sortByPresetSortStates();\n      });\n      this.addHook('afterUntrimRow', function () {\n        return _this3.sortByPresetSortStates();\n      });\n      this.addHook('modifyRow', function (row, source) {\n        return _this3.onModifyRow(row, source);\n      });\n      this.addHook('unmodifyRow', function (row, source) {\n        return _this3.onUnmodifyRow(row, source);\n      });\n      this.addHook('afterGetColHeader', function (column, TH) {\n        return _this3.onAfterGetColHeader(column, TH);\n      });\n      this.addHook('beforeOnCellMouseDown', function (event, coords, TD, controller) {\n        return _this3.onBeforeOnCellMouseDown(event, coords, TD, controller);\n      });\n      this.addHook('afterOnCellMouseDown', function (event, target) {\n        return _this3.onAfterOnCellMouseDown(event, target);\n      });\n      this.addHook('afterCreateRow', function (index, amount) {\n        return _this3.onAfterCreateRow(index, amount);\n      });\n      this.addHook('afterRemoveRow', function (index, amount) {\n        return _this3.onAfterRemoveRow(index, amount);\n      });\n      this.addHook('afterInit', function () {\n        return _this3.loadOrSortBySettings();\n      });\n      this.addHook('afterLoadData', function (initialLoad) {\n        return _this3.onAfterLoadData(initialLoad);\n      });\n      this.addHook('afterCreateCol', function () {\n        return _this3.onAfterCreateCol();\n      });\n      this.addHook('afterRemoveCol', function () {\n        return _this3.onAfterRemoveCol();\n      }); // TODO: Workaround? It should be refactored / described.\n\n      if (this.hot.view) {\n        this.loadOrSortBySettings();\n      }\n\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"enablePlugin\", this).call(this);\n    }\n    /**\n     * Disables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"disablePlugin\",\n    value: function disablePlugin() {\n      var _this4 = this;\n\n      var clearColHeader = function clearColHeader(column, TH) {\n        var headerSpanElement = getHeaderSpanElement(TH);\n\n        if (isFirstLevelColumnHeader(column, TH) === false || headerSpanElement === null) {\n          return;\n        }\n\n        _this4.updateHeaderClasses(headerSpanElement);\n      }; // Changing header width and removing indicator.\n\n\n      this.hot.addHook('afterGetColHeader', clearColHeader);\n      this.hot.addHookOnce('afterRender', function () {\n        _this4.hot.removeHook('afterGetColHeader', clearColHeader);\n      });\n      this.rowsMapper.clearMap();\n\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"disablePlugin\", this).call(this);\n    } // DIFF - MultiColumnSorting & ColumnSorting: changed function documentation.\n\n    /**\n     * Sorts the table by chosen columns and orders.\n     *\n     * @param {undefined|Object} sortConfig Single column sort configuration. The configuration object contains `column` and `sortOrder` properties.\n     * First of them contains visual column index, the second one contains sort order (`asc` for ascending, `desc` for descending).\n     *\n     * **Note**: Please keep in mind that every call of `sort` function set an entirely new sort order. Previous sort configs aren't preserved.\n     *\n     * @example\n     * ```js\n     * // sort ascending first visual column\n     * hot.getPlugin('columnSorting').sort({ column: 0, sortOrder: 'asc' });\n     * ```\n     *\n     * @fires Hooks#beforeColumnSort\n     * @fires Hooks#afterColumnSort\n     */\n\n  }, {\n    key: \"sort\",\n    value: function sort(sortConfig) {\n      var _this5 = this;\n\n      var currentSortConfig = this.getSortConfig(); // We always pass configs defined as an array to `beforeColumnSort` and `afterColumnSort` hooks.\n\n      var destinationSortConfigs = this.getNormalizedSortConfigs(sortConfig);\n      var sortPossible = this.areValidSortConfigs(destinationSortConfigs);\n      var allowSort = this.hot.runHooks('beforeColumnSort', currentSortConfig, destinationSortConfigs, sortPossible);\n\n      if (allowSort === false) {\n        return;\n      }\n\n      if (sortPossible) {\n        var translateColumnToPhysical = function translateColumnToPhysical(_ref) {\n          var visualColumn = _ref.column,\n              restOfProperties = _objectWithoutProperties(_ref, [\"column\"]);\n\n          return _objectSpread({\n            column: _this5.hot.toPhysicalColumn(visualColumn)\n          }, restOfProperties);\n        };\n\n        var internalSortStates = arrayMap(destinationSortConfigs, function (columnSortConfig) {\n          return translateColumnToPhysical(columnSortConfig);\n        });\n        this.columnStatesManager.setSortStates(internalSortStates);\n        this.sortByPresetSortStates();\n        this.saveAllSortSettings();\n        this.hot.render();\n        this.hot.view.wt.draw(true); // TODO: Workaround? One test won't pass after removal. It should be refactored / described.\n      }\n\n      this.hot.runHooks('afterColumnSort', currentSortConfig, this.getSortConfig(), sortPossible);\n    }\n    /**\n     * Clear the sort performed on the table.\n     */\n\n  }, {\n    key: \"clearSort\",\n    value: function clearSort() {\n      this.sort([]);\n    }\n    /**\n     * Checks if the table is sorted (any column have to be sorted).\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isSorted\",\n    value: function isSorted() {\n      return this.enabled && !this.columnStatesManager.isListOfSortedColumnsEmpty();\n    }\n    /**\n     * Get sort configuration for particular column or for all sorted columns. Objects contain `column` and `sortOrder` properties.\n     *\n     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key. They are handled by the `sort` function.\n     *\n     * @param {Number} [column] Visual column index.\n     * @returns {undefined|Object|Array}\n     */\n\n  }, {\n    key: \"getSortConfig\",\n    value: function getSortConfig(column) {\n      var _this6 = this;\n\n      var translateColumnToVisual = function translateColumnToVisual(_ref2) {\n        var physicalColumn = _ref2.column,\n            restOfProperties = _objectWithoutProperties(_ref2, [\"column\"]);\n\n        return _objectSpread({\n          column: _this6.hot.toVisualColumn(physicalColumn)\n        }, restOfProperties);\n      };\n\n      if (isDefined(column)) {\n        var physicalColumn = this.hot.toPhysicalColumn(column);\n        var columnSortState = this.columnStatesManager.getColumnSortState(physicalColumn);\n\n        if (isDefined(columnSortState)) {\n          return translateColumnToVisual(columnSortState);\n        }\n\n        return;\n      }\n\n      var sortStates = this.columnStatesManager.getSortStates();\n      return arrayMap(sortStates, function (columnState) {\n        return translateColumnToVisual(columnState);\n      });\n    }\n    /**\n     * @description\n     * Warn: Useful mainly for providing server side sort implementation (see in the example below). It doesn't sort the data set. It just sets sort configuration for all sorted columns.\n     * Note: Please keep in mind that this method doesn't re-render the table.\n     *\n     * @example\n     * ```js\n     * beforeColumnSort: function(currentSortConfig, destinationSortConfigs) {\n     *   const columnSortPlugin = this.getPlugin('columnSorting');\n     *\n     *   columnSortPlugin.setSortConfig(destinationSortConfigs);\n     *\n     *   // const newData = ... // Calculated data set, ie. from an AJAX call.\n     *\n     *   this.loadData(newData); // Load new data set and re-render the table.\n     *\n     *   return false; // The blockade for the default sort action.\n     * }```\n     *\n     * @param {undefined|Object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).\n     * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains\n     * sort order (`asc` for ascending, `desc` for descending).\n     */\n\n  }, {\n    key: \"setSortConfig\",\n    value: function setSortConfig(sortConfig) {\n      var _this7 = this; // We always set configs defined as an array.\n\n\n      var destinationSortConfigs = this.getNormalizedSortConfigs(sortConfig);\n\n      if (this.areValidSortConfigs(destinationSortConfigs)) {\n        var translateColumnToPhysical = function translateColumnToPhysical(_ref3) {\n          var visualColumn = _ref3.column,\n              restOfProperties = _objectWithoutProperties(_ref3, [\"column\"]);\n\n          return _objectSpread({\n            column: _this7.hot.toPhysicalColumn(visualColumn)\n          }, restOfProperties);\n        };\n\n        var internalSortStates = arrayMap(destinationSortConfigs, function (columnSortConfig) {\n          return translateColumnToPhysical(columnSortConfig);\n        });\n        this.columnStatesManager.setSortStates(internalSortStates);\n      }\n    }\n    /**\n     * Get normalized sort configs.\n     *\n     * @private\n     * @param {Object|Array} [sortConfig=[]] Single column sort configuration or full sort configuration (for all sorted columns).\n     * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains\n     * sort order (`asc` for ascending, `desc` for descending).\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getNormalizedSortConfigs\",\n    value: function getNormalizedSortConfigs() {\n      var sortConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (Array.isArray(sortConfig)) {\n        return sortConfig.slice(0, 1);\n      }\n\n      return [sortConfig].slice(0, 1);\n    }\n    /**\n     * Get if sort configs are valid.\n     *\n     * @private\n     * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"areValidSortConfigs\",\n    value: function areValidSortConfigs(sortConfigs) {\n      if (Array.isArray(sortConfigs) === false) {\n        return false;\n      }\n\n      var sortedColumns = sortConfigs.map(function (_ref4) {\n        var column = _ref4.column;\n        return column;\n      });\n      var numberOfColumns = this.hot.countCols();\n      var onlyExistingVisualIndexes = sortedColumns.every(function (visualColumn) {\n        return visualColumn <= numberOfColumns && visualColumn >= 0;\n      });\n      return areValidSortStates(sortConfigs) && onlyExistingVisualIndexes; // We don't translate visual indexes to physical indexes.\n    }\n    /**\n     * Saves all sorting settings. Saving works only when {@link Options#persistentState} option is enabled.\n     *\n     * @private\n     * @fires Hooks#persistentStateSave\n     */\n\n  }, {\n    key: \"saveAllSortSettings\",\n    value: function saveAllSortSettings() {\n      var allSortSettings = this.columnStatesManager.getAllColumnsProperties();\n      allSortSettings.initialConfig = this.columnStatesManager.getSortStates();\n      this.hot.runHooks('persistentStateSave', 'columnSorting', allSortSettings);\n    }\n    /**\n     * Get all saved sorting settings. Loading works only when {@link Options#persistentState} option is enabled.\n     *\n     * @private\n     * @returns {Object} Previously saved sort settings.\n     *\n     * @fires Hooks#persistentStateLoad\n     */\n\n  }, {\n    key: \"getAllSavedSortSettings\",\n    value: function getAllSavedSortSettings() {\n      var _this8 = this;\n\n      var storedAllSortSettings = {};\n      this.hot.runHooks('persistentStateLoad', 'columnSorting', storedAllSortSettings);\n      var allSortSettings = storedAllSortSettings.value;\n\n      var translateColumnToVisual = function translateColumnToVisual(_ref5) {\n        var physicalColumn = _ref5.column,\n            restOfProperties = _objectWithoutProperties(_ref5, [\"column\"]);\n\n        return _objectSpread({\n          column: _this8.hot.toVisualColumn(physicalColumn)\n        }, restOfProperties);\n      };\n\n      if (isDefined(allSortSettings) && Array.isArray(allSortSettings.initialConfig)) {\n        allSortSettings.initialConfig = arrayMap(allSortSettings.initialConfig, translateColumnToVisual);\n      }\n\n      return allSortSettings;\n    }\n    /**\n     * Get next sort configuration for particular column. Object contain `column` and `sortOrder` properties.\n     *\n     * **Note**: Please keep in mind that returned object expose **visual** column index under the `column` key.\n     *\n     * @private\n     * @param {Number} column Visual column index.\n     * @returns {undefined|Object}\n     */\n\n  }, {\n    key: \"getColumnNextConfig\",\n    value: function getColumnNextConfig(column) {\n      var physicalColumn = this.hot.toPhysicalColumn(column);\n\n      if (this.columnStatesManager.isColumnSorted(physicalColumn)) {\n        var columnSortConfig = this.getSortConfig(column);\n        var sortOrder = getNextSortOrder(columnSortConfig.sortOrder);\n\n        if (isDefined(sortOrder)) {\n          columnSortConfig.sortOrder = sortOrder;\n          return columnSortConfig;\n        }\n\n        return;\n      }\n\n      var nrOfColumns = this.hot.countCols();\n\n      if (Number.isInteger(column) && column >= 0 && column < nrOfColumns) {\n        return {\n          column: column,\n          sortOrder: getNextSortOrder()\n        };\n      }\n    }\n    /**\n     * Get sort configuration with \"next order\" for particular column.\n     *\n     * @private\n     * @param {Number} columnToChange Visual column index of column which order will be changed.\n     * @param {String} strategyId ID of strategy. Possible values: 'append' and 'replace'. The first one\n     * change order of particular column and change it's position in the sort queue to the last one. The second one\n     * just change order of particular column.\n     *\n     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.\n     *\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getNextSortConfig\",\n    value: function getNextSortConfig(columnToChange) {\n      var strategyId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : APPEND_COLUMN_CONFIG_STRATEGY;\n      var physicalColumn = this.hot.toPhysicalColumn(columnToChange);\n      var indexOfColumnToChange = this.columnStatesManager.getIndexOfColumnInSortQueue(physicalColumn);\n      var isColumnSorted = this.columnStatesManager.isColumnSorted(physicalColumn);\n      var currentSortConfig = this.getSortConfig();\n      var nextColumnConfig = this.getColumnNextConfig(columnToChange);\n\n      if (isColumnSorted) {\n        if (isUndefined(nextColumnConfig)) {\n          return [].concat(_toConsumableArray(currentSortConfig.slice(0, indexOfColumnToChange)), _toConsumableArray(currentSortConfig.slice(indexOfColumnToChange + 1)));\n        }\n\n        if (strategyId === APPEND_COLUMN_CONFIG_STRATEGY) {\n          return [].concat(_toConsumableArray(currentSortConfig.slice(0, indexOfColumnToChange)), _toConsumableArray(currentSortConfig.slice(indexOfColumnToChange + 1)), [nextColumnConfig]);\n        } else if (strategyId === REPLACE_COLUMN_CONFIG_STRATEGY) {\n          return [].concat(_toConsumableArray(currentSortConfig.slice(0, indexOfColumnToChange)), [nextColumnConfig], _toConsumableArray(currentSortConfig.slice(indexOfColumnToChange + 1)));\n        }\n      }\n\n      if (isDefined(nextColumnConfig)) {\n        return currentSortConfig.concat(nextColumnConfig);\n      }\n\n      return currentSortConfig;\n    }\n    /**\n     * Saves to cache part of plugins related properties, properly merged from cascade settings.\n     *\n     * @private\n     * @param {Number} column Visual column index.\n     * @returns {Object}\n     */\n    // TODO: Workaround. Inheriting of non-primitive cell meta values doesn't work. Using this function we don't count\n    // merged properties few times.\n\n  }, {\n    key: \"setMergedPluginSettings\",\n    value: function setMergedPluginSettings(column) {\n      var physicalColumnIndex = this.hot.toPhysicalColumn(column);\n      var pluginMainSettings = this.hot.getSettings()[this.pluginKey];\n      var storedColumnProperties = this.columnStatesManager.getAllColumnsProperties();\n      var cellMeta = this.hot.getCellMeta(0, column);\n      var columnMeta = Object.getPrototypeOf(cellMeta);\n      var columnMetaHasPluginSettings = Object.hasOwnProperty.call(columnMeta, this.pluginKey);\n      var pluginColumnConfig = columnMetaHasPluginSettings ? columnMeta[this.pluginKey] : {};\n      this.columnMetaCache.set(physicalColumnIndex, Object.assign(storedColumnProperties, pluginMainSettings, pluginColumnConfig));\n    }\n    /**\n     * Get copy of settings for first cell in the column.\n     *\n     * @private\n     * @param {Number} column Visual column index.\n     * @returns {Object}\n     */\n    // TODO: Workaround. Inheriting of non-primitive cell meta values doesn't work. Instead of getting properties from\n    // column meta we call this function.\n\n  }, {\n    key: \"getFirstCellSettings\",\n    value: function getFirstCellSettings(column) {\n      // TODO: Remove test named: \"should not break the dataset when inserted new row\" (#5431).\n      var actualBlockTranslationFlag = this.blockPluginTranslation;\n      this.blockPluginTranslation = true;\n\n      if (this.columnMetaCache.size === 0 || this.columnMetaCache.size < this.hot.countCols()) {\n        this.rebuildColumnMetaCache();\n      }\n\n      var cellMeta = this.hot.getCellMeta(0, column);\n      this.blockPluginTranslation = actualBlockTranslationFlag;\n      var cellMetaCopy = Object.create(cellMeta);\n      cellMetaCopy[this.pluginKey] = this.columnMetaCache.get(this.hot.toPhysicalColumn(column));\n      return cellMetaCopy;\n    }\n    /**\n     * Rebuild the column meta cache for all the columns.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"rebuildColumnMetaCache\",\n    value: function rebuildColumnMetaCache() {\n      var _this9 = this;\n\n      var numberOfColumns = this.hot.countCols();\n\n      if (numberOfColumns === 0) {\n        this.columnMetaCache.clear();\n      } else {\n        rangeEach(numberOfColumns - 1, function (visualColumnIndex) {\n          return _this9.setMergedPluginSettings(visualColumnIndex);\n        });\n      }\n    }\n    /**\n     * Get number of rows which should be sorted.\n     *\n     * @private\n     * @param {Number} numberOfRows Total number of displayed rows.\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"getNumberOfRowsToSort\",\n    value: function getNumberOfRowsToSort(numberOfRows) {\n      var settings = this.hot.getSettings(); // `maxRows` option doesn't take into account `minSpareRows` option in this case.\n\n      if (settings.maxRows <= numberOfRows) {\n        return settings.maxRows;\n      }\n\n      return numberOfRows - settings.minSpareRows;\n    }\n    /**\n     * Performs the sorting using a stable sort function basing on internal state of sorting.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"sortByPresetSortStates\",\n    value: function sortByPresetSortStates() {\n      var _this10 = this;\n\n      if (this.columnStatesManager.isListOfSortedColumnsEmpty()) {\n        this.rowsMapper.clearMap();\n        return;\n      }\n\n      var indexesWithData = [];\n      var sortedColumnsList = this.columnStatesManager.getSortedColumns();\n      var numberOfRows = this.hot.countRows(); // Function `getDataAtCell` won't call the indices translation inside `onModifyRow` callback - we check the `blockPluginTranslation`\n      // flag inside it (we just want to get data not already modified by `columnSorting` plugin translation).\n\n      this.blockPluginTranslation = true;\n\n      var getDataForSortedColumns = function getDataForSortedColumns(visualRowIndex) {\n        return arrayMap(sortedColumnsList, function (physicalColumn) {\n          return _this10.hot.getDataAtCell(visualRowIndex, _this10.hot.toVisualColumn(physicalColumn));\n        });\n      };\n\n      for (var visualRowIndex = 0; visualRowIndex < this.getNumberOfRowsToSort(numberOfRows); visualRowIndex += 1) {\n        indexesWithData.push([visualRowIndex].concat(getDataForSortedColumns(visualRowIndex)));\n      }\n\n      sort(indexesWithData, this.pluginKey, arrayMap(sortedColumnsList, function (physicalColumn) {\n        return _this10.columnStatesManager.getSortOrderOfColumn(physicalColumn);\n      }), arrayMap(sortedColumnsList, function (physicalColumn) {\n        return _this10.getFirstCellSettings(_this10.hot.toVisualColumn(physicalColumn));\n      })); // Append spareRows\n\n      for (var _visualRowIndex = indexesWithData.length; _visualRowIndex < numberOfRows; _visualRowIndex += 1) {\n        indexesWithData.push([_visualRowIndex].concat(getDataForSortedColumns(_visualRowIndex)));\n      } // The blockade of the indices translation is released.\n\n\n      this.blockPluginTranslation = false; // Save all indexes to arrayMapper, a completely new sequence is set by the plugin\n\n      this.rowsMapper._arrayMap = arrayMap(indexesWithData, function (indexWithData) {\n        return indexWithData[0];\n      });\n    }\n    /**\n     * Load saved settings or sort by predefined plugin configuration.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"loadOrSortBySettings\",\n    value: function loadOrSortBySettings() {\n      this.columnMetaCache.clear();\n      var storedAllSortSettings = this.getAllSavedSortSettings();\n\n      if (isObject(storedAllSortSettings)) {\n        this.sortBySettings(storedAllSortSettings);\n      } else {\n        var allSortSettings = this.hot.getSettings()[this.pluginKey];\n        this.sortBySettings(allSortSettings);\n      }\n    }\n    /**\n     * Sort the table by provided configuration.\n     *\n     * @private\n     * @param {Object} allSortSettings All sort config settings. Object may contain `initialConfig`, `indicator`,\n     * `sortEmptyCells`, `headerAction` and `compareFunctionFactory` properties.\n     */\n\n  }, {\n    key: \"sortBySettings\",\n    value: function sortBySettings(allSortSettings) {\n      if (isObject(allSortSettings)) {\n        this.columnStatesManager.updateAllColumnsProperties(allSortSettings);\n        var initialConfig = allSortSettings.initialConfig;\n\n        if (Array.isArray(initialConfig) || isObject(initialConfig)) {\n          this.sort(initialConfig);\n        }\n      } else {\n        // Extra render for headers. Their width may change.\n        this.hot.render();\n      }\n    }\n    /**\n     * Enables the ObserveChanges plugin.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"enableObserveChangesPlugin\",\n    value: function enableObserveChangesPlugin() {\n      var _this = this;\n\n      this.hot._registerTimeout(setTimeout(function () {\n        _this.hot.updateSettings({\n          observeChanges: true\n        });\n      }, 0));\n    }\n    /**\n     * Callback for `modifyRow` hook. Translates visual row index to the sorted row index.\n     *\n     * @private\n     * @param {Number} row Visual row index.\n     * @returns {Number} Physical row index.\n     */\n\n  }, {\n    key: \"onModifyRow\",\n    value: function onModifyRow(row, source) {\n      if (this.blockPluginTranslation === false && source !== this.pluginName && this.isSorted()) {\n        var rowInMapper = this.rowsMapper.getValueByIndex(row);\n        row = rowInMapper === null ? row : rowInMapper;\n      }\n\n      return row;\n    }\n    /**\n     * Callback for `unmodifyRow` hook. Translates sorted row index to visual row index.\n     *\n     * @private\n     * @param {Number} row Physical row index.\n     * @returns {Number} Visual row index.\n     */\n\n  }, {\n    key: \"onUnmodifyRow\",\n    value: function onUnmodifyRow(row, source) {\n      if (this.blockPluginTranslation === false && source !== this.pluginName && this.isSorted()) {\n        row = this.rowsMapper.getIndexByValue(row);\n      }\n\n      return row;\n    }\n    /**\n     * Callback for the `onAfterGetColHeader` hook. Adds column sorting CSS classes.\n     *\n     * @private\n     * @param {Number} column Visual column index.\n     * @param {Element} TH TH HTML element.\n     */\n\n  }, {\n    key: \"onAfterGetColHeader\",\n    value: function onAfterGetColHeader(column, TH) {\n      var headerSpanElement = getHeaderSpanElement(TH);\n\n      if (isFirstLevelColumnHeader(column, TH) === false || headerSpanElement === null) {\n        return;\n      }\n\n      var physicalColumn = this.hot.toPhysicalColumn(column);\n      var pluginSettingsForColumn = this.getFirstCellSettings(column)[this.pluginKey];\n      var showSortIndicator = pluginSettingsForColumn.indicator;\n      var headerActionEnabled = pluginSettingsForColumn.headerAction;\n      this.updateHeaderClasses(headerSpanElement, this.columnStatesManager, physicalColumn, showSortIndicator, headerActionEnabled);\n    }\n    /**\n     * Update header classes.\n     *\n     * @private\n     * @param {HTMLElement} headerSpanElement Header span element.\n     * @param {...*} args Extra arguments for helpers.\n     */\n\n  }, {\n    key: \"updateHeaderClasses\",\n    value: function updateHeaderClasses(headerSpanElement) {\n      removeClass(headerSpanElement, getClassedToRemove(headerSpanElement));\n\n      if (this.enabled !== false) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        addClass(headerSpanElement, getClassesToAdd.apply(void 0, args));\n      }\n    }\n    /**\n     * Overwriting base plugin's `onUpdateSettings` method. Please keep in mind that `onAfterUpdateSettings` isn't called\n     * for `updateSettings` in specific situations.\n     *\n     * @private\n     * @param {Object} newSettings New settings object.\n     */\n\n  }, {\n    key: \"onUpdateSettings\",\n    value: function onUpdateSettings(newSettings) {\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"onUpdateSettings\", this).call(this);\n\n      this.columnMetaCache.clear();\n\n      if (isDefined(newSettings[this.pluginKey])) {\n        this.sortBySettings(newSettings[this.pluginKey]);\n      }\n    }\n    /**\n     * Callback for the `afterLoadData` hook.\n     *\n     * @private\n     * @param {Boolean} initialLoad flag that determines whether the data has been loaded during the initialization.\n     */\n\n  }, {\n    key: \"onAfterLoadData\",\n    value: function onAfterLoadData(initialLoad) {\n      this.rowsMapper.clearMap();\n      this.columnMetaCache.clear();\n\n      if (initialLoad === true) {\n        // TODO: Workaround? It should be refactored / described.\n        if (this.hot.view) {\n          this.loadOrSortBySettings();\n        }\n      }\n    }\n    /**\n     * Callback for the `afterCreateRow` hook.\n     *\n     * @private\n     * @param {Number} index Visual index of the created row.\n     * @param {Number} amount Amount of created rows.\n     */\n\n  }, {\n    key: \"onAfterCreateRow\",\n    value: function onAfterCreateRow(index, amount) {\n      this.rowsMapper.shiftItems(index, amount);\n    }\n    /**\n     * Callback for the `afterRemoveRow` hook.\n     *\n     * @private\n     * @param {Number} index Visual index of the removed row.\n     * @param {Number} amount Amount of removed rows.\n     */\n\n  }, {\n    key: \"onAfterRemoveRow\",\n    value: function onAfterRemoveRow(index, amount) {\n      this.rowsMapper.unshiftItems(index, amount);\n    } // TODO: Workaround. Inheriting of non-primitive cell meta values doesn't work. We clear the cache after action which reorganize sequence of columns.\n    // TODO: Remove test named: \"should add new columns properly when the `columnSorting` plugin is enabled (inheriting of non-primitive cell meta values)\".\n\n    /**\n     * Callback for the `afterCreateCol` hook.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onAfterCreateCol\",\n    value: function onAfterCreateCol() {\n      this.columnMetaCache.clear();\n    } // TODO: Workaround. Inheriting of non-primitive cell meta values doesn't work. We clear the cache after action which reorganize sequence of columns.\n    // TODO: Remove test named: \"should add new columns properly when the `columnSorting` plugin is enabled (inheriting of non-primitive cell meta values)\".\n\n    /**\n     * Callback for the `afterRemoveCol` hook.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onAfterRemoveCol\",\n    value: function onAfterRemoveCol() {\n      this.columnMetaCache.clear();\n    }\n    /**\n     * Indicates if clickable header was clicked.\n     *\n     * @private\n     * @param {MouseEvent} event The `mousedown` event.\n     * @param {Number} column Visual column index.\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"wasClickableHeaderClicked\",\n    value: function wasClickableHeaderClicked(event, column) {\n      var pluginSettingsForColumn = this.getFirstCellSettings(column)[this.pluginKey];\n      var headerActionEnabled = pluginSettingsForColumn.headerAction;\n      return headerActionEnabled && event.realTarget.nodeName === 'SPAN';\n    }\n    /**\n     * Changes the behavior of selection / dragging.\n     *\n     * @private\n     * @param {MouseEvent} event The `mousedown` event.\n     * @param {CellCoords} coords Visual coordinates.\n     * @param {HTMLElement} TD\n     * @param {Object} blockCalculations\n     */\n\n  }, {\n    key: \"onBeforeOnCellMouseDown\",\n    value: function onBeforeOnCellMouseDown(event, coords, TD, blockCalculations) {\n      if (wasHeaderClickedProperly(coords.row, coords.col, event) === false) {\n        return;\n      }\n\n      if (this.wasClickableHeaderClicked(event, coords.col) && isPressedCtrlKey()) {\n        blockCalculations.column = true;\n      }\n    }\n    /**\n     * Callback for the `onAfterOnCellMouseDown` hook.\n     *\n     * @private\n     * @param {Event} event Event which are provided by hook.\n     * @param {CellCoords} coords Visual coords of the selected cell.\n     */\n\n  }, {\n    key: \"onAfterOnCellMouseDown\",\n    value: function onAfterOnCellMouseDown(event, coords) {\n      if (wasHeaderClickedProperly(coords.row, coords.col, event) === false) {\n        return;\n      }\n\n      if (this.wasClickableHeaderClicked(event, coords.col)) {\n        if (isPressedCtrlKey()) {\n          this.hot.deselectCell();\n          this.hot.selectColumns(coords.col);\n        }\n\n        this.sort(this.getColumnNextConfig(coords.col));\n      }\n    }\n    /**\n     * Destroys the plugin instance.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.rowsMapper.destroy();\n      this.columnStatesManager.destroy();\n\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"destroy\", this).call(this);\n    }\n  }]);\n\n  return ColumnSorting;\n}(BasePlugin);\n\nregisterPlugin(PLUGIN_KEY, ColumnSorting);\nexport default ColumnSorting;","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react/node_modules/handsontable/es/plugins/columnSorting/columnSorting.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","TypeError","iter","Object","toString","call","Array","from","isArray","i","arr2","length","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","value","configurable","writable","_objectWithoutProperties","excluded","_objectWithoutPropertiesLoose","sourceSymbolKeys","indexOf","propertyIsEnumerable","sourceKeys","_classCallCheck","instance","Constructor","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","_get","property","receiver","Reflect","get","base","_superPropBase","desc","hasOwnProperty","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_inherits","subClass","superClass","create","_setPrototypeOf","p","addClass","removeClass","isUndefined","isDefined","isObject","arrayMap","rangeEach","BasePlugin","registerPlugin","Hooks","isPressedCtrlKey","ColumnStatesManager","getNextSortOrder","areValidSortStates","getHeaderSpanElement","isFirstLevelColumnHeader","wasHeaderClickedProperly","getClassedToRemove","getClassesToAdd","RowsMapper","rootComparator","registerRootComparator","sort","APPEND_COLUMN_CONFIG_STRATEGY","REPLACE_COLUMN_CONFIG_STRATEGY","PLUGIN_KEY","getSingleton","register","ColumnSorting","_BasePlugin","hotInstance","_this2","columnStatesManager","rowsMapper","blockPluginTranslation","columnMetaCache","Map","pluginKey","isEnabled","hot","getSettings","enablePlugin","_this3","enabled","observeChanges","enableObserveChangesPlugin","addHook","sortByPresetSortStates","row","onModifyRow","onUnmodifyRow","column","TH","onAfterGetColHeader","event","coords","TD","controller","onBeforeOnCellMouseDown","onAfterOnCellMouseDown","index","amount","onAfterCreateRow","onAfterRemoveRow","loadOrSortBySettings","initialLoad","onAfterLoadData","onAfterCreateCol","onAfterRemoveCol","view","disablePlugin","_this4","clearColHeader","headerSpanElement","updateHeaderClasses","addHookOnce","removeHook","clearMap","sortConfig","_this5","currentSortConfig","getSortConfig","destinationSortConfigs","getNormalizedSortConfigs","sortPossible","areValidSortConfigs","allowSort","runHooks","translateColumnToPhysical","_ref","visualColumn","restOfProperties","toPhysicalColumn","internalSortStates","columnSortConfig","setSortStates","saveAllSortSettings","render","wt","draw","clearSort","isSorted","isListOfSortedColumnsEmpty","_this6","translateColumnToVisual","_ref2","physicalColumn","toVisualColumn","columnSortState","getColumnSortState","sortStates","getSortStates","columnState","setSortConfig","_this7","_ref3","undefined","slice","sortConfigs","sortedColumns","map","_ref4","numberOfColumns","countCols","onlyExistingVisualIndexes","every","allSortSettings","getAllColumnsProperties","initialConfig","getAllSavedSortSettings","_this8","storedAllSortSettings","_ref5","getColumnNextConfig","isColumnSorted","sortOrder","nrOfColumns","Number","isInteger","getNextSortConfig","columnToChange","strategyId","indexOfColumnToChange","getIndexOfColumnInSortQueue","nextColumnConfig","concat","setMergedPluginSettings","physicalColumnIndex","pluginMainSettings","storedColumnProperties","cellMeta","getCellMeta","columnMeta","columnMetaHasPluginSettings","pluginColumnConfig","set","assign","getFirstCellSettings","actualBlockTranslationFlag","size","rebuildColumnMetaCache","cellMetaCopy","_this9","clear","visualColumnIndex","getNumberOfRowsToSort","numberOfRows","settings","maxRows","minSpareRows","_this10","indexesWithData","sortedColumnsList","getSortedColumns","countRows","getDataForSortedColumns","visualRowIndex","getDataAtCell","getSortOrderOfColumn","_visualRowIndex","_arrayMap","indexWithData","sortBySettings","updateAllColumnsProperties","_this","_registerTimeout","setTimeout","updateSettings","pluginName","rowInMapper","getValueByIndex","getIndexByValue","pluginSettingsForColumn","showSortIndicator","indicator","headerActionEnabled","headerAction","_len","args","_key","onUpdateSettings","newSettings","shiftItems","unshiftItems","wasClickableHeaderClicked","realTarget","nodeName","blockCalculations","col","deselectCell","selectColumns","destroy"],"mappings":"AA8BA,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE;;AAA2B,MAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,OAAOA,MAAM,CAACC,QAAd,KAA2B,QAA/D,EAAyE;AAAEH,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAO,OAAOA,GAAd;AAAoB,KAAtD;AAAyD,GAApI,MAA0I;AAAED,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAOA,GAAG,IAAI,OAAOC,MAAP,KAAkB,UAAzB,IAAuCD,GAAG,CAACG,WAAJ,KAAoBF,MAA3D,IAAqED,GAAG,KAAKC,MAAM,CAACG,SAApF,GAAgG,QAAhG,GAA2G,OAAOJ,GAAzH;AAA+H,KAAjK;AAAoK;;AAAC,SAAOD,OAAO,CAACC,GAAD,CAAd;AAAsB;;AAE1X,SAASK,kBAAT,CAA4BC,GAA5B,EAAiC;AAAE,SAAOC,kBAAkB,CAACD,GAAD,CAAlB,IAA2BE,gBAAgB,CAACF,GAAD,CAA3C,IAAoDG,kBAAkB,EAA7E;AAAkF;;AAErH,SAASA,kBAAT,GAA8B;AAAE,QAAM,IAAIC,SAAJ,CAAc,iDAAd,CAAN;AAAyE;;AAEzG,SAASF,gBAAT,CAA0BG,IAA1B,EAAgC;AAAE,MAAIV,MAAM,CAACC,QAAP,IAAmBU,MAAM,CAACD,IAAD,CAAzB,IAAmCC,MAAM,CAACR,SAAP,CAAiBS,QAAjB,CAA0BC,IAA1B,CAA+BH,IAA/B,MAAyC,oBAAhF,EAAsG,OAAOI,KAAK,CAACC,IAAN,CAAWL,IAAX,CAAP;AAA0B;;AAElK,SAASJ,kBAAT,CAA4BD,GAA5B,EAAiC;AAAE,MAAIS,KAAK,CAACE,OAAN,CAAcX,GAAd,CAAJ,EAAwB;AAAE,SAAK,IAAIY,CAAC,GAAG,CAAR,EAAWC,IAAI,GAAG,IAAIJ,KAAJ,CAAUT,GAAG,CAACc,MAAd,CAAvB,EAA8CF,CAAC,GAAGZ,GAAG,CAACc,MAAtD,EAA8DF,CAAC,EAA/D,EAAmE;AAAEC,MAAAA,IAAI,CAACD,CAAD,CAAJ,GAAUZ,GAAG,CAACY,CAAD,CAAb;AAAmB;;AAAC,WAAOC,IAAP;AAAc;AAAE;;AAEtK,SAASE,OAAT,CAAiBC,MAAjB,EAAyBC,cAAzB,EAAyC;AAAE,MAAIC,IAAI,GAAGZ,MAAM,CAACY,IAAP,CAAYF,MAAZ,CAAX;;AAAgC,MAAIV,MAAM,CAACa,qBAAX,EAAkC;AAAE,QAAIC,OAAO,GAAGd,MAAM,CAACa,qBAAP,CAA6BH,MAA7B,CAAd;AAAoD,QAAIC,cAAJ,EAAoBG,OAAO,GAAGA,OAAO,CAACC,MAAR,CAAe,UAAUC,GAAV,EAAe;AAAE,aAAOhB,MAAM,CAACiB,wBAAP,CAAgCP,MAAhC,EAAwCM,GAAxC,EAA6CE,UAApD;AAAiE,KAAjG,CAAV;AAA8GN,IAAAA,IAAI,CAACO,IAAL,CAAUC,KAAV,CAAgBR,IAAhB,EAAsBE,OAAtB;AAAiC;;AAAC,SAAOF,IAAP;AAAc;;AAErV,SAASS,aAAT,CAAuBC,MAAvB,EAA+B;AAAE,OAAK,IAAIhB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiB,SAAS,CAACf,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,QAAIkB,MAAM,GAAGD,SAAS,CAACjB,CAAD,CAAT,IAAgB,IAAhB,GAAuBiB,SAAS,CAACjB,CAAD,CAAhC,GAAsC,EAAnD;;AAAuD,QAAIA,CAAC,GAAG,CAAR,EAAW;AAAEG,MAAAA,OAAO,CAACT,MAAM,CAACwB,MAAD,CAAP,EAAiB,IAAjB,CAAP,CAA8BC,OAA9B,CAAsC,UAAUC,GAAV,EAAe;AAAEC,QAAAA,eAAe,CAACL,MAAD,EAASI,GAAT,EAAcF,MAAM,CAACE,GAAD,CAApB,CAAf;AAA4C,OAAnG;AAAuG,KAApH,MAA0H,IAAI1B,MAAM,CAAC4B,yBAAX,EAAsC;AAAE5B,MAAAA,MAAM,CAAC6B,gBAAP,CAAwBP,MAAxB,EAAgCtB,MAAM,CAAC4B,yBAAP,CAAiCJ,MAAjC,CAAhC;AAA4E,KAApH,MAA0H;AAAEf,MAAAA,OAAO,CAACT,MAAM,CAACwB,MAAD,CAAP,CAAP,CAAwBC,OAAxB,CAAgC,UAAUC,GAAV,EAAe;AAAE1B,QAAAA,MAAM,CAAC8B,cAAP,CAAsBR,MAAtB,EAA8BI,GAA9B,EAAmC1B,MAAM,CAACiB,wBAAP,CAAgCO,MAAhC,EAAwCE,GAAxC,CAAnC;AAAmF,OAApI;AAAwI;AAAE;;AAAC,SAAOJ,MAAP;AAAgB;;AAEthB,SAASK,eAAT,CAAyBvC,GAAzB,EAA8BsC,GAA9B,EAAmCK,KAAnC,EAA0C;AAAE,MAAIL,GAAG,IAAItC,GAAX,EAAgB;AAAEY,IAAAA,MAAM,CAAC8B,cAAP,CAAsB1C,GAAtB,EAA2BsC,GAA3B,EAAgC;AAAEK,MAAAA,KAAK,EAAEA,KAAT;AAAgBb,MAAAA,UAAU,EAAE,IAA5B;AAAkCc,MAAAA,YAAY,EAAE,IAAhD;AAAsDC,MAAAA,QAAQ,EAAE;AAAhE,KAAhC;AAA0G,GAA5H,MAAkI;AAAE7C,IAAAA,GAAG,CAACsC,GAAD,CAAH,GAAWK,KAAX;AAAmB;;AAAC,SAAO3C,GAAP;AAAa;;AAEjN,SAAS8C,wBAAT,CAAkCV,MAAlC,EAA0CW,QAA1C,EAAoD;AAAE,MAAIX,MAAM,IAAI,IAAd,EAAoB,OAAO,EAAP;;AAAW,MAAIF,MAAM,GAAGc,6BAA6B,CAACZ,MAAD,EAASW,QAAT,CAA1C;;AAA8D,MAAIT,GAAJ,EAASpB,CAAT;;AAAY,MAAIN,MAAM,CAACa,qBAAX,EAAkC;AAAE,QAAIwB,gBAAgB,GAAGrC,MAAM,CAACa,qBAAP,CAA6BW,MAA7B,CAAvB;;AAA6D,SAAKlB,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG+B,gBAAgB,CAAC7B,MAAjC,EAAyCF,CAAC,EAA1C,EAA8C;AAAEoB,MAAAA,GAAG,GAAGW,gBAAgB,CAAC/B,CAAD,CAAtB;AAA2B,UAAI6B,QAAQ,CAACG,OAAT,CAAiBZ,GAAjB,KAAyB,CAA7B,EAAgC;AAAU,UAAI,CAAC1B,MAAM,CAACR,SAAP,CAAiB+C,oBAAjB,CAAsCrC,IAAtC,CAA2CsB,MAA3C,EAAmDE,GAAnD,CAAL,EAA8D;AAAUJ,MAAAA,MAAM,CAACI,GAAD,CAAN,GAAcF,MAAM,CAACE,GAAD,CAApB;AAA4B;AAAE;;AAAC,SAAOJ,MAAP;AAAgB;;AAE5e,SAASc,6BAAT,CAAuCZ,MAAvC,EAA+CW,QAA/C,EAAyD;AAAE,MAAIX,MAAM,IAAI,IAAd,EAAoB,OAAO,EAAP;AAAW,MAAIF,MAAM,GAAG,EAAb;AAAiB,MAAIkB,UAAU,GAAGxC,MAAM,CAACY,IAAP,CAAYY,MAAZ,CAAjB;AAAsC,MAAIE,GAAJ,EAASpB,CAAT;;AAAY,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGkC,UAAU,CAAChC,MAA3B,EAAmCF,CAAC,EAApC,EAAwC;AAAEoB,IAAAA,GAAG,GAAGc,UAAU,CAAClC,CAAD,CAAhB;AAAqB,QAAI6B,QAAQ,CAACG,OAAT,CAAiBZ,GAAjB,KAAyB,CAA7B,EAAgC;AAAUJ,IAAAA,MAAM,CAACI,GAAD,CAAN,GAAcF,MAAM,CAACE,GAAD,CAApB;AAA4B;;AAAC,SAAOJ,MAAP;AAAgB;;AAEnT,SAASmB,eAAT,CAAyBC,QAAzB,EAAmCC,WAAnC,EAAgD;AAAE,MAAI,EAAED,QAAQ,YAAYC,WAAtB,CAAJ,EAAwC;AAAE,UAAM,IAAI7C,SAAJ,CAAc,mCAAd,CAAN;AAA2D;AAAE;;AAEzJ,SAAS8C,iBAAT,CAA2BtB,MAA3B,EAAmCuB,KAAnC,EAA0C;AAAE,OAAK,IAAIvC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuC,KAAK,CAACrC,MAA1B,EAAkCF,CAAC,EAAnC,EAAuC;AAAE,QAAIwC,UAAU,GAAGD,KAAK,CAACvC,CAAD,CAAtB;AAA2BwC,IAAAA,UAAU,CAAC5B,UAAX,GAAwB4B,UAAU,CAAC5B,UAAX,IAAyB,KAAjD;AAAwD4B,IAAAA,UAAU,CAACd,YAAX,GAA0B,IAA1B;AAAgC,QAAI,WAAWc,UAAf,EAA2BA,UAAU,CAACb,QAAX,GAAsB,IAAtB;AAA4BjC,IAAAA,MAAM,CAAC8B,cAAP,CAAsBR,MAAtB,EAA8BwB,UAAU,CAACpB,GAAzC,EAA8CoB,UAA9C;AAA4D;AAAE;;AAE7T,SAASC,YAAT,CAAsBJ,WAAtB,EAAmCK,UAAnC,EAA+CC,WAA/C,EAA4D;AAAE,MAAID,UAAJ,EAAgBJ,iBAAiB,CAACD,WAAW,CAACnD,SAAb,EAAwBwD,UAAxB,CAAjB;AAAsD,MAAIC,WAAJ,EAAiBL,iBAAiB,CAACD,WAAD,EAAcM,WAAd,CAAjB;AAA6C,SAAON,WAAP;AAAqB;;AAEvN,SAASO,0BAAT,CAAoCC,IAApC,EAA0CjD,IAA1C,EAAgD;AAAE,MAAIA,IAAI,KAAKf,OAAO,CAACe,IAAD,CAAP,KAAkB,QAAlB,IAA8B,OAAOA,IAAP,KAAgB,UAAnD,CAAR,EAAwE;AAAE,WAAOA,IAAP;AAAc;;AAAC,SAAOkD,sBAAsB,CAACD,IAAD,CAA7B;AAAsC;;AAEjL,SAASC,sBAAT,CAAgCD,IAAhC,EAAsC;AAAE,MAAIA,IAAI,KAAK,KAAK,CAAlB,EAAqB;AAAE,UAAM,IAAIE,cAAJ,CAAmB,2DAAnB,CAAN;AAAwF;;AAAC,SAAOF,IAAP;AAAc;;AAEtK,SAASG,IAAT,CAAchC,MAAd,EAAsBiC,QAAtB,EAAgCC,QAAhC,EAA0C;AAAE,MAAI,OAAOC,OAAP,KAAmB,WAAnB,IAAkCA,OAAO,CAACC,GAA9C,EAAmD;AAAEJ,IAAAA,IAAI,GAAGG,OAAO,CAACC,GAAf;AAAqB,GAA1E,MAAgF;AAAEJ,IAAAA,IAAI,GAAG,SAASA,IAAT,CAAchC,MAAd,EAAsBiC,QAAtB,EAAgCC,QAAhC,EAA0C;AAAE,UAAIG,IAAI,GAAGC,cAAc,CAACtC,MAAD,EAASiC,QAAT,CAAzB;;AAA6C,UAAI,CAACI,IAAL,EAAW;AAAQ,UAAIE,IAAI,GAAG7D,MAAM,CAACiB,wBAAP,CAAgC0C,IAAhC,EAAsCJ,QAAtC,CAAX;;AAA4D,UAAIM,IAAI,CAACH,GAAT,EAAc;AAAE,eAAOG,IAAI,CAACH,GAAL,CAASxD,IAAT,CAAcsD,QAAd,CAAP;AAAiC;;AAAC,aAAOK,IAAI,CAAC9B,KAAZ;AAAoB,KAArP;AAAwP;;AAAC,SAAOuB,IAAI,CAAChC,MAAD,EAASiC,QAAT,EAAmBC,QAAQ,IAAIlC,MAA/B,CAAX;AAAoD;;AAE3a,SAASsC,cAAT,CAAwBlD,MAAxB,EAAgC6C,QAAhC,EAA0C;AAAE,SAAO,CAACvD,MAAM,CAACR,SAAP,CAAiBsE,cAAjB,CAAgC5D,IAAhC,CAAqCQ,MAArC,EAA6C6C,QAA7C,CAAR,EAAgE;AAAE7C,IAAAA,MAAM,GAAGqD,eAAe,CAACrD,MAAD,CAAxB;AAAkC,QAAIA,MAAM,KAAK,IAAf,EAAqB;AAAQ;;AAAC,SAAOA,MAAP;AAAgB;;AAE9L,SAASqD,eAAT,CAAyBC,CAAzB,EAA4B;AAAED,EAAAA,eAAe,GAAG/D,MAAM,CAACiE,cAAP,GAAwBjE,MAAM,CAACkE,cAA/B,GAAgD,SAASH,eAAT,CAAyBC,CAAzB,EAA4B;AAAE,WAAOA,CAAC,CAACG,SAAF,IAAenE,MAAM,CAACkE,cAAP,CAAsBF,CAAtB,CAAtB;AAAiD,GAAjJ;AAAmJ,SAAOD,eAAe,CAACC,CAAD,CAAtB;AAA4B;;AAE7M,SAASI,SAAT,CAAmBC,QAAnB,EAA6BC,UAA7B,EAAyC;AAAE,MAAI,OAAOA,UAAP,KAAsB,UAAtB,IAAoCA,UAAU,KAAK,IAAvD,EAA6D;AAAE,UAAM,IAAIxE,SAAJ,CAAc,oDAAd,CAAN;AAA4E;;AAACuE,EAAAA,QAAQ,CAAC7E,SAAT,GAAqBQ,MAAM,CAACuE,MAAP,CAAcD,UAAU,IAAIA,UAAU,CAAC9E,SAAvC,EAAkD;AAAED,IAAAA,WAAW,EAAE;AAAEwC,MAAAA,KAAK,EAAEsC,QAAT;AAAmBpC,MAAAA,QAAQ,EAAE,IAA7B;AAAmCD,MAAAA,YAAY,EAAE;AAAjD;AAAf,GAAlD,CAArB;AAAkJ,MAAIsC,UAAJ,EAAgBE,eAAe,CAACH,QAAD,EAAWC,UAAX,CAAf;AAAwC;;AAEjY,SAASE,eAAT,CAAyBR,CAAzB,EAA4BS,CAA5B,EAA+B;AAAED,EAAAA,eAAe,GAAGxE,MAAM,CAACiE,cAAP,IAAyB,SAASO,eAAT,CAAyBR,CAAzB,EAA4BS,CAA5B,EAA+B;AAAET,IAAAA,CAAC,CAACG,SAAF,GAAcM,CAAd;AAAiB,WAAOT,CAAP;AAAW,GAAxG;;AAA0G,SAAOQ,eAAe,CAACR,CAAD,EAAIS,CAAJ,CAAtB;AAA+B;;AAE1K,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,2BAAtC;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,qBAAvC;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,OAAOC,UAAP,MAAuB,UAAvB;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,gBAAT,EAA2BC,kBAA3B,EAA+CC,oBAA/C,EAAqEC,wBAArE,EAA+FC,wBAA/F,QAA+H,SAA/H;AACA,SAASC,kBAAT,EAA6BC,eAA7B,QAAoD,cAApD;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,sBAAT,EAAiCC,IAAjC,QAA6C,eAA7C;AACA,IAAIC,6BAA6B,GAAG,QAApC;AACA,IAAIC,8BAA8B,GAAG,SAArC;AACA,IAAIC,UAAU,GAAG,eAAjB;AACAJ,sBAAsB,CAACI,UAAD,EAAaL,cAAb,CAAtB;AACAX,KAAK,CAACiB,YAAN,GAAqBC,QAArB,CAA8B,kBAA9B;AACAlB,KAAK,CAACiB,YAAN,GAAqBC,QAArB,CAA8B,iBAA9B,E,CAAkD;;AAElD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA,IAAIC,aAAa,GACjB,aACA,UAAUC,WAAV,EAAuB;AACrBnC,EAAAA,SAAS,CAACkC,aAAD,EAAgBC,WAAhB,CAAT;;AAEA,WAASD,aAAT,CAAuBE,WAAvB,EAAoC;AAClC,QAAIC,MAAJ;;AAEAhE,IAAAA,eAAe,CAAC,IAAD,EAAO6D,aAAP,CAAf;;AAEAG,IAAAA,MAAM,GAAGvD,0BAA0B,CAAC,IAAD,EAAOa,eAAe,CAACuC,aAAD,CAAf,CAA+BpG,IAA/B,CAAoC,IAApC,EAA0CsG,WAA1C,CAAP,CAAnC;AACA;;;;;;;AAOAC,IAAAA,MAAM,CAACC,mBAAP,GAA6B,IAAIrB,mBAAJ,EAA7B;AACA;;;;;;;AAOAoB,IAAAA,MAAM,CAACE,UAAP,GAAoB,IAAId,UAAJ,CAAezC,sBAAsB,CAACqD,MAAD,CAArC,CAApB;AACA;;;;;;;AAOAA,IAAAA,MAAM,CAACG,sBAAP,GAAgC,IAAhC;AACA;;;;;;;AAOAH,IAAAA,MAAM,CAACI,eAAP,GAAyB,IAAIC,GAAJ,EAAzB;AACA;;;;;;;AAOAL,IAAAA,MAAM,CAACM,SAAP,GAAmBZ,UAAnB;AACA,WAAOM,MAAP;AACD;AACD;;;;;;;;AAQA1D,EAAAA,YAAY,CAACuD,aAAD,EAAgB,CAAC;AAC3B5E,IAAAA,GAAG,EAAE,WADsB;AAE3BK,IAAAA,KAAK,EAAE,SAASiF,SAAT,GAAqB;AAC1B,aAAO,CAAC,CAAC,KAAKC,GAAL,CAASC,WAAT,GAAuB,KAAKH,SAA5B,CAAT;AACD;AACD;;;;AAL2B,GAAD,EASzB;AACDrF,IAAAA,GAAG,EAAE,cADJ;AAEDK,IAAAA,KAAK,EAAE,SAASoF,YAAT,GAAwB;AAC7B,UAAIC,MAAM,GAAG,IAAb;;AAEA,UAAI,KAAKC,OAAT,EAAkB;AAChB;AACD;;AAED,UAAIzC,WAAW,CAAC,KAAKqC,GAAL,CAASC,WAAT,GAAuBI,cAAxB,CAAf,EAAwD;AACtD,aAAKC,0BAAL;AACD;;AAED,WAAKC,OAAL,CAAa,cAAb,EAA6B,YAAY;AACvC,eAAOJ,MAAM,CAACK,sBAAP,EAAP;AACD,OAFD;AAGA,WAAKD,OAAL,CAAa,gBAAb,EAA+B,YAAY;AACzC,eAAOJ,MAAM,CAACK,sBAAP,EAAP;AACD,OAFD;AAGA,WAAKD,OAAL,CAAa,WAAb,EAA0B,UAAUE,GAAV,EAAelG,MAAf,EAAuB;AAC/C,eAAO4F,MAAM,CAACO,WAAP,CAAmBD,GAAnB,EAAwBlG,MAAxB,CAAP;AACD,OAFD;AAGA,WAAKgG,OAAL,CAAa,aAAb,EAA4B,UAAUE,GAAV,EAAelG,MAAf,EAAuB;AACjD,eAAO4F,MAAM,CAACQ,aAAP,CAAqBF,GAArB,EAA0BlG,MAA1B,CAAP;AACD,OAFD;AAGA,WAAKgG,OAAL,CAAa,mBAAb,EAAkC,UAAUK,MAAV,EAAkBC,EAAlB,EAAsB;AACtD,eAAOV,MAAM,CAACW,mBAAP,CAA2BF,MAA3B,EAAmCC,EAAnC,CAAP;AACD,OAFD;AAGA,WAAKN,OAAL,CAAa,uBAAb,EAAsC,UAAUQ,KAAV,EAAiBC,MAAjB,EAAyBC,EAAzB,EAA6BC,UAA7B,EAAyC;AAC7E,eAAOf,MAAM,CAACgB,uBAAP,CAA+BJ,KAA/B,EAAsCC,MAAtC,EAA8CC,EAA9C,EAAkDC,UAAlD,CAAP;AACD,OAFD;AAGA,WAAKX,OAAL,CAAa,sBAAb,EAAqC,UAAUQ,KAAV,EAAiB1G,MAAjB,EAAyB;AAC5D,eAAO8F,MAAM,CAACiB,sBAAP,CAA8BL,KAA9B,EAAqC1G,MAArC,CAAP;AACD,OAFD;AAGA,WAAKkG,OAAL,CAAa,gBAAb,EAA+B,UAAUc,KAAV,EAAiBC,MAAjB,EAAyB;AACtD,eAAOnB,MAAM,CAACoB,gBAAP,CAAwBF,KAAxB,EAA+BC,MAA/B,CAAP;AACD,OAFD;AAGA,WAAKf,OAAL,CAAa,gBAAb,EAA+B,UAAUc,KAAV,EAAiBC,MAAjB,EAAyB;AACtD,eAAOnB,MAAM,CAACqB,gBAAP,CAAwBH,KAAxB,EAA+BC,MAA/B,CAAP;AACD,OAFD;AAGA,WAAKf,OAAL,CAAa,WAAb,EAA0B,YAAY;AACpC,eAAOJ,MAAM,CAACsB,oBAAP,EAAP;AACD,OAFD;AAGA,WAAKlB,OAAL,CAAa,eAAb,EAA8B,UAAUmB,WAAV,EAAuB;AACnD,eAAOvB,MAAM,CAACwB,eAAP,CAAuBD,WAAvB,CAAP;AACD,OAFD;AAGA,WAAKnB,OAAL,CAAa,gBAAb,EAA+B,YAAY;AACzC,eAAOJ,MAAM,CAACyB,gBAAP,EAAP;AACD,OAFD;AAGA,WAAKrB,OAAL,CAAa,gBAAb,EAA+B,YAAY;AACzC,eAAOJ,MAAM,CAAC0B,gBAAP,EAAP;AACD,OAFD,EA/C6B,CAiDzB;;AAEJ,UAAI,KAAK7B,GAAL,CAAS8B,IAAb,EAAmB;AACjB,aAAKL,oBAAL;AACD;;AAEDpF,MAAAA,IAAI,CAACS,eAAe,CAACuC,aAAa,CAAC9G,SAAf,CAAhB,EAA2C,cAA3C,EAA2D,IAA3D,CAAJ,CAAqEU,IAArE,CAA0E,IAA1E;AACD;AACD;;;;AA3DC,GATyB,EAwEzB;AACDwB,IAAAA,GAAG,EAAE,eADJ;AAEDK,IAAAA,KAAK,EAAE,SAASiH,aAAT,GAAyB;AAC9B,UAAIC,MAAM,GAAG,IAAb;;AAEA,UAAIC,cAAc,GAAG,SAASA,cAAT,CAAwBrB,MAAxB,EAAgCC,EAAhC,EAAoC;AACvD,YAAIqB,iBAAiB,GAAG3D,oBAAoB,CAACsC,EAAD,CAA5C;;AAEA,YAAIrC,wBAAwB,CAACoC,MAAD,EAASC,EAAT,CAAxB,KAAyC,KAAzC,IAAkDqB,iBAAiB,KAAK,IAA5E,EAAkF;AAChF;AACD;;AAEDF,QAAAA,MAAM,CAACG,mBAAP,CAA2BD,iBAA3B;AACD,OARD,CAH8B,CAW3B;;;AAGH,WAAKlC,GAAL,CAASO,OAAT,CAAiB,mBAAjB,EAAsC0B,cAAtC;AACA,WAAKjC,GAAL,CAASoC,WAAT,CAAqB,aAArB,EAAoC,YAAY;AAC9CJ,QAAAA,MAAM,CAAChC,GAAP,CAAWqC,UAAX,CAAsB,mBAAtB,EAA2CJ,cAA3C;AACD,OAFD;AAGA,WAAKvC,UAAL,CAAgB4C,QAAhB;;AAEAjG,MAAAA,IAAI,CAACS,eAAe,CAACuC,aAAa,CAAC9G,SAAf,CAAhB,EAA2C,eAA3C,EAA4D,IAA5D,CAAJ,CAAsEU,IAAtE,CAA2E,IAA3E;AACD,KAvBA,CAuBC;;AAEF;;;;;;;;;;;;;;;;;;AAzBC,GAxEyB,EAmHzB;AACDwB,IAAAA,GAAG,EAAE,MADJ;AAEDK,IAAAA,KAAK,EAAE,SAASiE,IAAT,CAAcwD,UAAd,EAA0B;AAC/B,UAAIC,MAAM,GAAG,IAAb;;AAEA,UAAIC,iBAAiB,GAAG,KAAKC,aAAL,EAAxB,CAH+B,CAGe;;AAE9C,UAAIC,sBAAsB,GAAG,KAAKC,wBAAL,CAA8BL,UAA9B,CAA7B;AACA,UAAIM,YAAY,GAAG,KAAKC,mBAAL,CAAyBH,sBAAzB,CAAnB;AACA,UAAII,SAAS,GAAG,KAAK/C,GAAL,CAASgD,QAAT,CAAkB,kBAAlB,EAAsCP,iBAAtC,EAAyDE,sBAAzD,EAAiFE,YAAjF,CAAhB;;AAEA,UAAIE,SAAS,KAAK,KAAlB,EAAyB;AACvB;AACD;;AAED,UAAIF,YAAJ,EAAkB;AAChB,YAAII,yBAAyB,GAAG,SAASA,yBAAT,CAAmCC,IAAnC,EAAyC;AACvE,cAAIC,YAAY,GAAGD,IAAI,CAACtC,MAAxB;AAAA,cACIwC,gBAAgB,GAAGnI,wBAAwB,CAACiI,IAAD,EAAO,CAAC,QAAD,CAAP,CAD/C;;AAGA,iBAAO9I,aAAa,CAAC;AACnBwG,YAAAA,MAAM,EAAE4B,MAAM,CAACxC,GAAP,CAAWqD,gBAAX,CAA4BF,YAA5B;AADW,WAAD,EAEjBC,gBAFiB,CAApB;AAGD,SAPD;;AASA,YAAIE,kBAAkB,GAAGxF,QAAQ,CAAC6E,sBAAD,EAAyB,UAAUY,gBAAV,EAA4B;AACpF,iBAAON,yBAAyB,CAACM,gBAAD,CAAhC;AACD,SAFgC,CAAjC;AAGA,aAAK9D,mBAAL,CAAyB+D,aAAzB,CAAuCF,kBAAvC;AACA,aAAK9C,sBAAL;AACA,aAAKiD,mBAAL;AACA,aAAKzD,GAAL,CAAS0D,MAAT;AACA,aAAK1D,GAAL,CAAS8B,IAAT,CAAc6B,EAAd,CAAiBC,IAAjB,CAAsB,IAAtB,EAjBgB,CAiBa;AAC9B;;AAED,WAAK5D,GAAL,CAASgD,QAAT,CAAkB,iBAAlB,EAAqCP,iBAArC,EAAwD,KAAKC,aAAL,EAAxD,EAA8EG,YAA9E;AACD;AACD;;;;AArCC,GAnHyB,EA4JzB;AACDpI,IAAAA,GAAG,EAAE,WADJ;AAEDK,IAAAA,KAAK,EAAE,SAAS+I,SAAT,GAAqB;AAC1B,WAAK9E,IAAL,CAAU,EAAV;AACD;AACD;;;;;;AALC,GA5JyB,EAuKzB;AACDtE,IAAAA,GAAG,EAAE,UADJ;AAEDK,IAAAA,KAAK,EAAE,SAASgJ,QAAT,GAAoB;AACzB,aAAO,KAAK1D,OAAL,IAAgB,CAAC,KAAKX,mBAAL,CAAyBsE,0BAAzB,EAAxB;AACD;AACD;;;;;;;;;AALC,GAvKyB,EAqLzB;AACDtJ,IAAAA,GAAG,EAAE,eADJ;AAEDK,IAAAA,KAAK,EAAE,SAAS4H,aAAT,CAAuB9B,MAAvB,EAA+B;AACpC,UAAIoD,MAAM,GAAG,IAAb;;AAEA,UAAIC,uBAAuB,GAAG,SAASA,uBAAT,CAAiCC,KAAjC,EAAwC;AACpE,YAAIC,cAAc,GAAGD,KAAK,CAACtD,MAA3B;AAAA,YACIwC,gBAAgB,GAAGnI,wBAAwB,CAACiJ,KAAD,EAAQ,CAAC,QAAD,CAAR,CAD/C;;AAGA,eAAO9J,aAAa,CAAC;AACnBwG,UAAAA,MAAM,EAAEoD,MAAM,CAAChE,GAAP,CAAWoE,cAAX,CAA0BD,cAA1B;AADW,SAAD,EAEjBf,gBAFiB,CAApB;AAGD,OAPD;;AASA,UAAIxF,SAAS,CAACgD,MAAD,CAAb,EAAuB;AACrB,YAAIuD,cAAc,GAAG,KAAKnE,GAAL,CAASqD,gBAAT,CAA0BzC,MAA1B,CAArB;AACA,YAAIyD,eAAe,GAAG,KAAK5E,mBAAL,CAAyB6E,kBAAzB,CAA4CH,cAA5C,CAAtB;;AAEA,YAAIvG,SAAS,CAACyG,eAAD,CAAb,EAAgC;AAC9B,iBAAOJ,uBAAuB,CAACI,eAAD,CAA9B;AACD;;AAED;AACD;;AAED,UAAIE,UAAU,GAAG,KAAK9E,mBAAL,CAAyB+E,aAAzB,EAAjB;AACA,aAAO1G,QAAQ,CAACyG,UAAD,EAAa,UAAUE,WAAV,EAAuB;AACjD,eAAOR,uBAAuB,CAACQ,WAAD,CAA9B;AACD,OAFc,CAAf;AAGD;AACD;;;;;;;;;;;;;;;;;;;;;;;;AA9BC,GArLyB,EA2OzB;AACDhK,IAAAA,GAAG,EAAE,eADJ;AAEDK,IAAAA,KAAK,EAAE,SAAS4J,aAAT,CAAuBnC,UAAvB,EAAmC;AACxC,UAAIoC,MAAM,GAAG,IAAb,CADwC,CAGxC;;;AACA,UAAIhC,sBAAsB,GAAG,KAAKC,wBAAL,CAA8BL,UAA9B,CAA7B;;AAEA,UAAI,KAAKO,mBAAL,CAAyBH,sBAAzB,CAAJ,EAAsD;AACpD,YAAIM,yBAAyB,GAAG,SAASA,yBAAT,CAAmC2B,KAAnC,EAA0C;AACxE,cAAIzB,YAAY,GAAGyB,KAAK,CAAChE,MAAzB;AAAA,cACIwC,gBAAgB,GAAGnI,wBAAwB,CAAC2J,KAAD,EAAQ,CAAC,QAAD,CAAR,CAD/C;;AAGA,iBAAOxK,aAAa,CAAC;AACnBwG,YAAAA,MAAM,EAAE+D,MAAM,CAAC3E,GAAP,CAAWqD,gBAAX,CAA4BF,YAA5B;AADW,WAAD,EAEjBC,gBAFiB,CAApB;AAGD,SAPD;;AASA,YAAIE,kBAAkB,GAAGxF,QAAQ,CAAC6E,sBAAD,EAAyB,UAAUY,gBAAV,EAA4B;AACpF,iBAAON,yBAAyB,CAACM,gBAAD,CAAhC;AACD,SAFgC,CAAjC;AAGA,aAAK9D,mBAAL,CAAyB+D,aAAzB,CAAuCF,kBAAvC;AACD;AACF;AACD;;;;;;;;;;AAxBC,GA3OyB,EA6QzB;AACD7I,IAAAA,GAAG,EAAE,0BADJ;AAEDK,IAAAA,KAAK,EAAE,SAAS8H,wBAAT,GAAoC;AACzC,UAAIL,UAAU,GAAGjI,SAAS,CAACf,MAAV,GAAmB,CAAnB,IAAwBe,SAAS,CAAC,CAAD,CAAT,KAAiBuK,SAAzC,GAAqDvK,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAArF;;AAEA,UAAIpB,KAAK,CAACE,OAAN,CAAcmJ,UAAd,CAAJ,EAA+B;AAC7B,eAAOA,UAAU,CAACuC,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAAP;AACD;;AAED,aAAO,CAACvC,UAAD,EAAauC,KAAb,CAAmB,CAAnB,EAAsB,CAAtB,CAAP;AACD;AACD;;;;;;;;AAXC,GA7QyB,EAgSzB;AACDrK,IAAAA,GAAG,EAAE,qBADJ;AAEDK,IAAAA,KAAK,EAAE,SAASgI,mBAAT,CAA6BiC,WAA7B,EAA0C;AAC/C,UAAI7L,KAAK,CAACE,OAAN,CAAc2L,WAAd,MAA+B,KAAnC,EAA0C;AACxC,eAAO,KAAP;AACD;;AAED,UAAIC,aAAa,GAAGD,WAAW,CAACE,GAAZ,CAAgB,UAAUC,KAAV,EAAiB;AACnD,YAAItE,MAAM,GAAGsE,KAAK,CAACtE,MAAnB;AACA,eAAOA,MAAP;AACD,OAHmB,CAApB;AAIA,UAAIuE,eAAe,GAAG,KAAKnF,GAAL,CAASoF,SAAT,EAAtB;AACA,UAAIC,yBAAyB,GAAGL,aAAa,CAACM,KAAd,CAAoB,UAAUnC,YAAV,EAAwB;AAC1E,eAAOA,YAAY,IAAIgC,eAAhB,IAAmChC,YAAY,IAAI,CAA1D;AACD,OAF+B,CAAhC;AAGA,aAAO7E,kBAAkB,CAACyG,WAAD,CAAlB,IAAmCM,yBAA1C,CAb+C,CAasB;AACtE;AACD;;;;;;;AAjBC,GAhSyB,EAwTzB;AACD5K,IAAAA,GAAG,EAAE,qBADJ;AAEDK,IAAAA,KAAK,EAAE,SAAS2I,mBAAT,GAA+B;AACpC,UAAI8B,eAAe,GAAG,KAAK9F,mBAAL,CAAyB+F,uBAAzB,EAAtB;AACAD,MAAAA,eAAe,CAACE,aAAhB,GAAgC,KAAKhG,mBAAL,CAAyB+E,aAAzB,EAAhC;AACA,WAAKxE,GAAL,CAASgD,QAAT,CAAkB,qBAAlB,EAAyC,eAAzC,EAA0DuC,eAA1D;AACD;AACD;;;;;;;;;AAPC,GAxTyB,EAwUzB;AACD9K,IAAAA,GAAG,EAAE,yBADJ;AAEDK,IAAAA,KAAK,EAAE,SAAS4K,uBAAT,GAAmC;AACxC,UAAIC,MAAM,GAAG,IAAb;;AAEA,UAAIC,qBAAqB,GAAG,EAA5B;AACA,WAAK5F,GAAL,CAASgD,QAAT,CAAkB,qBAAlB,EAAyC,eAAzC,EAA0D4C,qBAA1D;AACA,UAAIL,eAAe,GAAGK,qBAAqB,CAAC9K,KAA5C;;AAEA,UAAImJ,uBAAuB,GAAG,SAASA,uBAAT,CAAiC4B,KAAjC,EAAwC;AACpE,YAAI1B,cAAc,GAAG0B,KAAK,CAACjF,MAA3B;AAAA,YACIwC,gBAAgB,GAAGnI,wBAAwB,CAAC4K,KAAD,EAAQ,CAAC,QAAD,CAAR,CAD/C;;AAGA,eAAOzL,aAAa,CAAC;AACnBwG,UAAAA,MAAM,EAAE+E,MAAM,CAAC3F,GAAP,CAAWoE,cAAX,CAA0BD,cAA1B;AADW,SAAD,EAEjBf,gBAFiB,CAApB;AAGD,OAPD;;AASA,UAAIxF,SAAS,CAAC2H,eAAD,CAAT,IAA8BrM,KAAK,CAACE,OAAN,CAAcmM,eAAe,CAACE,aAA9B,CAAlC,EAAgF;AAC9EF,QAAAA,eAAe,CAACE,aAAhB,GAAgC3H,QAAQ,CAACyH,eAAe,CAACE,aAAjB,EAAgCxB,uBAAhC,CAAxC;AACD;;AAED,aAAOsB,eAAP;AACD;AACD;;;;;;;;;;AAxBC,GAxUyB,EA0WzB;AACD9K,IAAAA,GAAG,EAAE,qBADJ;AAEDK,IAAAA,KAAK,EAAE,SAASgL,mBAAT,CAA6BlF,MAA7B,EAAqC;AAC1C,UAAIuD,cAAc,GAAG,KAAKnE,GAAL,CAASqD,gBAAT,CAA0BzC,MAA1B,CAArB;;AAEA,UAAI,KAAKnB,mBAAL,CAAyBsG,cAAzB,CAAwC5B,cAAxC,CAAJ,EAA6D;AAC3D,YAAIZ,gBAAgB,GAAG,KAAKb,aAAL,CAAmB9B,MAAnB,CAAvB;AACA,YAAIoF,SAAS,GAAG3H,gBAAgB,CAACkF,gBAAgB,CAACyC,SAAlB,CAAhC;;AAEA,YAAIpI,SAAS,CAACoI,SAAD,CAAb,EAA0B;AACxBzC,UAAAA,gBAAgB,CAACyC,SAAjB,GAA6BA,SAA7B;AACA,iBAAOzC,gBAAP;AACD;;AAED;AACD;;AAED,UAAI0C,WAAW,GAAG,KAAKjG,GAAL,CAASoF,SAAT,EAAlB;;AAEA,UAAIc,MAAM,CAACC,SAAP,CAAiBvF,MAAjB,KAA4BA,MAAM,IAAI,CAAtC,IAA2CA,MAAM,GAAGqF,WAAxD,EAAqE;AACnE,eAAO;AACLrF,UAAAA,MAAM,EAAEA,MADH;AAELoF,UAAAA,SAAS,EAAE3H,gBAAgB;AAFtB,SAAP;AAID;AACF;AACD;;;;;;;;;;;;;;AA1BC,GA1WyB,EAkZzB;AACD5D,IAAAA,GAAG,EAAE,mBADJ;AAEDK,IAAAA,KAAK,EAAE,SAASsL,iBAAT,CAA2BC,cAA3B,EAA2C;AAChD,UAAIC,UAAU,GAAGhM,SAAS,CAACf,MAAV,GAAmB,CAAnB,IAAwBe,SAAS,CAAC,CAAD,CAAT,KAAiBuK,SAAzC,GAAqDvK,SAAS,CAAC,CAAD,CAA9D,GAAoE0E,6BAArF;AACA,UAAImF,cAAc,GAAG,KAAKnE,GAAL,CAASqD,gBAAT,CAA0BgD,cAA1B,CAArB;AACA,UAAIE,qBAAqB,GAAG,KAAK9G,mBAAL,CAAyB+G,2BAAzB,CAAqDrC,cAArD,CAA5B;AACA,UAAI4B,cAAc,GAAG,KAAKtG,mBAAL,CAAyBsG,cAAzB,CAAwC5B,cAAxC,CAArB;AACA,UAAI1B,iBAAiB,GAAG,KAAKC,aAAL,EAAxB;AACA,UAAI+D,gBAAgB,GAAG,KAAKX,mBAAL,CAAyBO,cAAzB,CAAvB;;AAEA,UAAIN,cAAJ,EAAoB;AAClB,YAAIpI,WAAW,CAAC8I,gBAAD,CAAf,EAAmC;AACjC,iBAAO,GAAGC,MAAH,CAAUlO,kBAAkB,CAACiK,iBAAiB,CAACqC,KAAlB,CAAwB,CAAxB,EAA2ByB,qBAA3B,CAAD,CAA5B,EAAiF/N,kBAAkB,CAACiK,iBAAiB,CAACqC,KAAlB,CAAwByB,qBAAqB,GAAG,CAAhD,CAAD,CAAnG,CAAP;AACD;;AAED,YAAID,UAAU,KAAKtH,6BAAnB,EAAkD;AAChD,iBAAO,GAAG0H,MAAH,CAAUlO,kBAAkB,CAACiK,iBAAiB,CAACqC,KAAlB,CAAwB,CAAxB,EAA2ByB,qBAA3B,CAAD,CAA5B,EAAiF/N,kBAAkB,CAACiK,iBAAiB,CAACqC,KAAlB,CAAwByB,qBAAqB,GAAG,CAAhD,CAAD,CAAnG,EAAyJ,CAACE,gBAAD,CAAzJ,CAAP;AACD,SAFD,MAEO,IAAIH,UAAU,KAAKrH,8BAAnB,EAAmD;AACxD,iBAAO,GAAGyH,MAAH,CAAUlO,kBAAkB,CAACiK,iBAAiB,CAACqC,KAAlB,CAAwB,CAAxB,EAA2ByB,qBAA3B,CAAD,CAA5B,EAAiF,CAACE,gBAAD,CAAjF,EAAqGjO,kBAAkB,CAACiK,iBAAiB,CAACqC,KAAlB,CAAwByB,qBAAqB,GAAG,CAAhD,CAAD,CAAvH,CAAP;AACD;AACF;;AAED,UAAI3I,SAAS,CAAC6I,gBAAD,CAAb,EAAiC;AAC/B,eAAOhE,iBAAiB,CAACiE,MAAlB,CAAyBD,gBAAzB,CAAP;AACD;;AAED,aAAOhE,iBAAP;AACD;AACD;;;;;;;AAOA;AACA;;AApCC,GAlZyB,EAwbzB;AACDhI,IAAAA,GAAG,EAAE,yBADJ;AAEDK,IAAAA,KAAK,EAAE,SAAS6L,uBAAT,CAAiC/F,MAAjC,EAAyC;AAC9C,UAAIgG,mBAAmB,GAAG,KAAK5G,GAAL,CAASqD,gBAAT,CAA0BzC,MAA1B,CAA1B;AACA,UAAIiG,kBAAkB,GAAG,KAAK7G,GAAL,CAASC,WAAT,GAAuB,KAAKH,SAA5B,CAAzB;AACA,UAAIgH,sBAAsB,GAAG,KAAKrH,mBAAL,CAAyB+F,uBAAzB,EAA7B;AACA,UAAIuB,QAAQ,GAAG,KAAK/G,GAAL,CAASgH,WAAT,CAAqB,CAArB,EAAwBpG,MAAxB,CAAf;AACA,UAAIqG,UAAU,GAAGlO,MAAM,CAACkE,cAAP,CAAsB8J,QAAtB,CAAjB;AACA,UAAIG,2BAA2B,GAAGnO,MAAM,CAAC8D,cAAP,CAAsB5D,IAAtB,CAA2BgO,UAA3B,EAAuC,KAAKnH,SAA5C,CAAlC;AACA,UAAIqH,kBAAkB,GAAGD,2BAA2B,GAAGD,UAAU,CAAC,KAAKnH,SAAN,CAAb,GAAgC,EAApF;AACA,WAAKF,eAAL,CAAqBwH,GAArB,CAAyBR,mBAAzB,EAA8C7N,MAAM,CAACsO,MAAP,CAAcP,sBAAd,EAAsCD,kBAAtC,EAA0DM,kBAA1D,CAA9C;AACD;AACD;;;;;;;AAOA;AACA;;AApBC,GAxbyB,EA8czB;AACD1M,IAAAA,GAAG,EAAE,sBADJ;AAEDK,IAAAA,KAAK,EAAE,SAASwM,oBAAT,CAA8B1G,MAA9B,EAAsC;AAC3C;AACA,UAAI2G,0BAA0B,GAAG,KAAK5H,sBAAtC;AACA,WAAKA,sBAAL,GAA8B,IAA9B;;AAEA,UAAI,KAAKC,eAAL,CAAqB4H,IAArB,KAA8B,CAA9B,IAAmC,KAAK5H,eAAL,CAAqB4H,IAArB,GAA4B,KAAKxH,GAAL,CAASoF,SAAT,EAAnE,EAAyF;AACvF,aAAKqC,sBAAL;AACD;;AAED,UAAIV,QAAQ,GAAG,KAAK/G,GAAL,CAASgH,WAAT,CAAqB,CAArB,EAAwBpG,MAAxB,CAAf;AACA,WAAKjB,sBAAL,GAA8B4H,0BAA9B;AACA,UAAIG,YAAY,GAAG3O,MAAM,CAACuE,MAAP,CAAcyJ,QAAd,CAAnB;AACAW,MAAAA,YAAY,CAAC,KAAK5H,SAAN,CAAZ,GAA+B,KAAKF,eAAL,CAAqBnD,GAArB,CAAyB,KAAKuD,GAAL,CAASqD,gBAAT,CAA0BzC,MAA1B,CAAzB,CAA/B;AACA,aAAO8G,YAAP;AACD;AACD;;;;;;AAjBC,GA9cyB,EAqezB;AACDjN,IAAAA,GAAG,EAAE,wBADJ;AAEDK,IAAAA,KAAK,EAAE,SAAS2M,sBAAT,GAAkC;AACvC,UAAIE,MAAM,GAAG,IAAb;;AAEA,UAAIxC,eAAe,GAAG,KAAKnF,GAAL,CAASoF,SAAT,EAAtB;;AAEA,UAAID,eAAe,KAAK,CAAxB,EAA2B;AACzB,aAAKvF,eAAL,CAAqBgI,KAArB;AACD,OAFD,MAEO;AACL7J,QAAAA,SAAS,CAACoH,eAAe,GAAG,CAAnB,EAAsB,UAAU0C,iBAAV,EAA6B;AAC1D,iBAAOF,MAAM,CAAChB,uBAAP,CAA+BkB,iBAA/B,CAAP;AACD,SAFQ,CAAT;AAGD;AACF;AACD;;;;;;;;AAfC,GAreyB,EA4fzB;AACDpN,IAAAA,GAAG,EAAE,uBADJ;AAEDK,IAAAA,KAAK,EAAE,SAASgN,qBAAT,CAA+BC,YAA/B,EAA6C;AAClD,UAAIC,QAAQ,GAAG,KAAKhI,GAAL,CAASC,WAAT,EAAf,CADkD,CACX;;AAEvC,UAAI+H,QAAQ,CAACC,OAAT,IAAoBF,YAAxB,EAAsC;AACpC,eAAOC,QAAQ,CAACC,OAAhB;AACD;;AAED,aAAOF,YAAY,GAAGC,QAAQ,CAACE,YAA/B;AACD;AACD;;;;;;AAXC,GA5fyB,EA6gBzB;AACDzN,IAAAA,GAAG,EAAE,wBADJ;AAEDK,IAAAA,KAAK,EAAE,SAAS0F,sBAAT,GAAkC;AACvC,UAAI2H,OAAO,GAAG,IAAd;;AAEA,UAAI,KAAK1I,mBAAL,CAAyBsE,0BAAzB,EAAJ,EAA2D;AACzD,aAAKrE,UAAL,CAAgB4C,QAAhB;AACA;AACD;;AAED,UAAI8F,eAAe,GAAG,EAAtB;AACA,UAAIC,iBAAiB,GAAG,KAAK5I,mBAAL,CAAyB6I,gBAAzB,EAAxB;AACA,UAAIP,YAAY,GAAG,KAAK/H,GAAL,CAASuI,SAAT,EAAnB,CAVuC,CAUE;AACzC;;AAEA,WAAK5I,sBAAL,GAA8B,IAA9B;;AAEA,UAAI6I,uBAAuB,GAAG,SAASA,uBAAT,CAAiCC,cAAjC,EAAiD;AAC7E,eAAO3K,QAAQ,CAACuK,iBAAD,EAAoB,UAAUlE,cAAV,EAA0B;AAC3D,iBAAOgE,OAAO,CAACnI,GAAR,CAAY0I,aAAZ,CAA0BD,cAA1B,EAA0CN,OAAO,CAACnI,GAAR,CAAYoE,cAAZ,CAA2BD,cAA3B,CAA1C,CAAP;AACD,SAFc,CAAf;AAGD,OAJD;;AAMA,WAAK,IAAIsE,cAAc,GAAG,CAA1B,EAA6BA,cAAc,GAAG,KAAKX,qBAAL,CAA2BC,YAA3B,CAA9C,EAAwFU,cAAc,IAAI,CAA1G,EAA6G;AAC3GL,QAAAA,eAAe,CAAClO,IAAhB,CAAqB,CAACuO,cAAD,EAAiB/B,MAAjB,CAAwB8B,uBAAuB,CAACC,cAAD,CAA/C,CAArB;AACD;;AAED1J,MAAAA,IAAI,CAACqJ,eAAD,EAAkB,KAAKtI,SAAvB,EAAkChC,QAAQ,CAACuK,iBAAD,EAAoB,UAAUlE,cAAV,EAA0B;AAC1F,eAAOgE,OAAO,CAAC1I,mBAAR,CAA4BkJ,oBAA5B,CAAiDxE,cAAjD,CAAP;AACD,OAF6C,CAA1C,EAEArG,QAAQ,CAACuK,iBAAD,EAAoB,UAAUlE,cAAV,EAA0B;AACxD,eAAOgE,OAAO,CAACb,oBAAR,CAA6Ba,OAAO,CAACnI,GAAR,CAAYoE,cAAZ,CAA2BD,cAA3B,CAA7B,CAAP;AACD,OAFW,CAFR,CAAJ,CAzBuC,CA6BlC;;AAEL,WAAK,IAAIyE,eAAe,GAAGR,eAAe,CAAC7O,MAA3C,EAAmDqP,eAAe,GAAGb,YAArE,EAAmFa,eAAe,IAAI,CAAtG,EAAyG;AACvGR,QAAAA,eAAe,CAAClO,IAAhB,CAAqB,CAAC0O,eAAD,EAAkBlC,MAAlB,CAAyB8B,uBAAuB,CAACI,eAAD,CAAhD,CAArB;AACD,OAjCsC,CAiCrC;;;AAGF,WAAKjJ,sBAAL,GAA8B,KAA9B,CApCuC,CAoCF;;AAErC,WAAKD,UAAL,CAAgBmJ,SAAhB,GAA4B/K,QAAQ,CAACsK,eAAD,EAAkB,UAAUU,aAAV,EAAyB;AAC7E,eAAOA,aAAa,CAAC,CAAD,CAApB;AACD,OAFmC,CAApC;AAGD;AACD;;;;;;AA5CC,GA7gByB,EA+jBzB;AACDrO,IAAAA,GAAG,EAAE,sBADJ;AAEDK,IAAAA,KAAK,EAAE,SAAS2G,oBAAT,GAAgC;AACrC,WAAK7B,eAAL,CAAqBgI,KAArB;AACA,UAAIhC,qBAAqB,GAAG,KAAKF,uBAAL,EAA5B;;AAEA,UAAI7H,QAAQ,CAAC+H,qBAAD,CAAZ,EAAqC;AACnC,aAAKmD,cAAL,CAAoBnD,qBAApB;AACD,OAFD,MAEO;AACL,YAAIL,eAAe,GAAG,KAAKvF,GAAL,CAASC,WAAT,GAAuB,KAAKH,SAA5B,CAAtB;AACA,aAAKiJ,cAAL,CAAoBxD,eAApB;AACD;AACF;AACD;;;;;;;;AAbC,GA/jByB,EAolBzB;AACD9K,IAAAA,GAAG,EAAE,gBADJ;AAEDK,IAAAA,KAAK,EAAE,SAASiO,cAAT,CAAwBxD,eAAxB,EAAyC;AAC9C,UAAI1H,QAAQ,CAAC0H,eAAD,CAAZ,EAA+B;AAC7B,aAAK9F,mBAAL,CAAyBuJ,0BAAzB,CAAoDzD,eAApD;AACA,YAAIE,aAAa,GAAGF,eAAe,CAACE,aAApC;;AAEA,YAAIvM,KAAK,CAACE,OAAN,CAAcqM,aAAd,KAAgC5H,QAAQ,CAAC4H,aAAD,CAA5C,EAA6D;AAC3D,eAAK1G,IAAL,CAAU0G,aAAV;AACD;AACF,OAPD,MAOO;AACL;AACA,aAAKzF,GAAL,CAAS0D,MAAT;AACD;AACF;AACD;;;;;;AAfC,GAplByB,EAymBzB;AACDjJ,IAAAA,GAAG,EAAE,4BADJ;AAEDK,IAAAA,KAAK,EAAE,SAASwF,0BAAT,GAAsC;AAC3C,UAAI2I,KAAK,GAAG,IAAZ;;AAEA,WAAKjJ,GAAL,CAASkJ,gBAAT,CAA0BC,UAAU,CAAC,YAAY;AAC/CF,QAAAA,KAAK,CAACjJ,GAAN,CAAUoJ,cAAV,CAAyB;AACvB/I,UAAAA,cAAc,EAAE;AADO,SAAzB;AAGD,OAJmC,EAIjC,CAJiC,CAApC;AAKD;AACD;;;;;;;;AAXC,GAzmByB,EA4nBzB;AACD5F,IAAAA,GAAG,EAAE,aADJ;AAEDK,IAAAA,KAAK,EAAE,SAAS4F,WAAT,CAAqBD,GAArB,EAA0BlG,MAA1B,EAAkC;AACvC,UAAI,KAAKoF,sBAAL,KAAgC,KAAhC,IAAyCpF,MAAM,KAAK,KAAK8O,UAAzD,IAAuE,KAAKvF,QAAL,EAA3E,EAA4F;AAC1F,YAAIwF,WAAW,GAAG,KAAK5J,UAAL,CAAgB6J,eAAhB,CAAgC9I,GAAhC,CAAlB;AACAA,QAAAA,GAAG,GAAG6I,WAAW,KAAK,IAAhB,GAAuB7I,GAAvB,GAA6B6I,WAAnC;AACD;;AAED,aAAO7I,GAAP;AACD;AACD;;;;;;;;AAVC,GA5nByB,EA8oBzB;AACDhG,IAAAA,GAAG,EAAE,eADJ;AAEDK,IAAAA,KAAK,EAAE,SAAS6F,aAAT,CAAuBF,GAAvB,EAA4BlG,MAA5B,EAAoC;AACzC,UAAI,KAAKoF,sBAAL,KAAgC,KAAhC,IAAyCpF,MAAM,KAAK,KAAK8O,UAAzD,IAAuE,KAAKvF,QAAL,EAA3E,EAA4F;AAC1FrD,QAAAA,GAAG,GAAG,KAAKf,UAAL,CAAgB8J,eAAhB,CAAgC/I,GAAhC,CAAN;AACD;;AAED,aAAOA,GAAP;AACD;AACD;;;;;;;;AATC,GA9oByB,EA+pBzB;AACDhG,IAAAA,GAAG,EAAE,qBADJ;AAEDK,IAAAA,KAAK,EAAE,SAASgG,mBAAT,CAA6BF,MAA7B,EAAqCC,EAArC,EAAyC;AAC9C,UAAIqB,iBAAiB,GAAG3D,oBAAoB,CAACsC,EAAD,CAA5C;;AAEA,UAAIrC,wBAAwB,CAACoC,MAAD,EAASC,EAAT,CAAxB,KAAyC,KAAzC,IAAkDqB,iBAAiB,KAAK,IAA5E,EAAkF;AAChF;AACD;;AAED,UAAIiC,cAAc,GAAG,KAAKnE,GAAL,CAASqD,gBAAT,CAA0BzC,MAA1B,CAArB;AACA,UAAI6I,uBAAuB,GAAG,KAAKnC,oBAAL,CAA0B1G,MAA1B,EAAkC,KAAKd,SAAvC,CAA9B;AACA,UAAI4J,iBAAiB,GAAGD,uBAAuB,CAACE,SAAhD;AACA,UAAIC,mBAAmB,GAAGH,uBAAuB,CAACI,YAAlD;AACA,WAAK1H,mBAAL,CAAyBD,iBAAzB,EAA4C,KAAKzC,mBAAjD,EAAsE0E,cAAtE,EAAsFuF,iBAAtF,EAAyGE,mBAAzG;AACD;AACD;;;;;;;;AAfC,GA/pByB,EAsrBzB;AACDnP,IAAAA,GAAG,EAAE,qBADJ;AAEDK,IAAAA,KAAK,EAAE,SAASqH,mBAAT,CAA6BD,iBAA7B,EAAgD;AACrDxE,MAAAA,WAAW,CAACwE,iBAAD,EAAoBxD,kBAAkB,CAACwD,iBAAD,CAAtC,CAAX;;AAEA,UAAI,KAAK9B,OAAL,KAAiB,KAArB,EAA4B;AAC1B,aAAK,IAAI0J,IAAI,GAAGxP,SAAS,CAACf,MAArB,EAA6BwQ,IAAI,GAAG,IAAI7Q,KAAJ,CAAU4Q,IAAI,GAAG,CAAP,GAAWA,IAAI,GAAG,CAAlB,GAAsB,CAAhC,CAApC,EAAwEE,IAAI,GAAG,CAApF,EAAuFA,IAAI,GAAGF,IAA9F,EAAoGE,IAAI,EAAxG,EAA4G;AAC1GD,UAAAA,IAAI,CAACC,IAAI,GAAG,CAAR,CAAJ,GAAiB1P,SAAS,CAAC0P,IAAD,CAA1B;AACD;;AAEDvM,QAAAA,QAAQ,CAACyE,iBAAD,EAAoBvD,eAAe,CAACxE,KAAhB,CAAsB,KAAK,CAA3B,EAA8B4P,IAA9B,CAApB,CAAR;AACD;AACF;AACD;;;;;;;;AAbC,GAtrByB,EA2sBzB;AACDtP,IAAAA,GAAG,EAAE,kBADJ;AAEDK,IAAAA,KAAK,EAAE,SAASmP,gBAAT,CAA0BC,WAA1B,EAAuC;AAC5C7N,MAAAA,IAAI,CAACS,eAAe,CAACuC,aAAa,CAAC9G,SAAf,CAAhB,EAA2C,kBAA3C,EAA+D,IAA/D,CAAJ,CAAyEU,IAAzE,CAA8E,IAA9E;;AAEA,WAAK2G,eAAL,CAAqBgI,KAArB;;AAEA,UAAIhK,SAAS,CAACsM,WAAW,CAAC,KAAKpK,SAAN,CAAZ,CAAb,EAA4C;AAC1C,aAAKiJ,cAAL,CAAoBmB,WAAW,CAAC,KAAKpK,SAAN,CAA/B;AACD;AACF;AACD;;;;;;;AAXC,GA3sByB,EA6tBzB;AACDrF,IAAAA,GAAG,EAAE,iBADJ;AAEDK,IAAAA,KAAK,EAAE,SAAS6G,eAAT,CAAyBD,WAAzB,EAAsC;AAC3C,WAAKhC,UAAL,CAAgB4C,QAAhB;AACA,WAAK1C,eAAL,CAAqBgI,KAArB;;AAEA,UAAIlG,WAAW,KAAK,IAApB,EAA0B;AACxB;AACA,YAAI,KAAK1B,GAAL,CAAS8B,IAAb,EAAmB;AACjB,eAAKL,oBAAL;AACD;AACF;AACF;AACD;;;;;;;;AAbC,GA7tByB,EAkvBzB;AACDhH,IAAAA,GAAG,EAAE,kBADJ;AAEDK,IAAAA,KAAK,EAAE,SAASyG,gBAAT,CAA0BF,KAA1B,EAAiCC,MAAjC,EAAyC;AAC9C,WAAK5B,UAAL,CAAgByK,UAAhB,CAA2B9I,KAA3B,EAAkCC,MAAlC;AACD;AACD;;;;;;;;AALC,GAlvByB,EA+vBzB;AACD7G,IAAAA,GAAG,EAAE,kBADJ;AAEDK,IAAAA,KAAK,EAAE,SAAS0G,gBAAT,CAA0BH,KAA1B,EAAiCC,MAAjC,EAAyC;AAC9C,WAAK5B,UAAL,CAAgB0K,YAAhB,CAA6B/I,KAA7B,EAAoCC,MAApC;AACD,KAJA,CAIC;AACF;;AAEA;;;;;;AAPC,GA/vByB,EA4wBzB;AACD7G,IAAAA,GAAG,EAAE,kBADJ;AAEDK,IAAAA,KAAK,EAAE,SAAS8G,gBAAT,GAA4B;AACjC,WAAKhC,eAAL,CAAqBgI,KAArB;AACD,KAJA,CAIC;AACF;;AAEA;;;;;;AAPC,GA5wByB,EAyxBzB;AACDnN,IAAAA,GAAG,EAAE,kBADJ;AAEDK,IAAAA,KAAK,EAAE,SAAS+G,gBAAT,GAA4B;AACjC,WAAKjC,eAAL,CAAqBgI,KAArB;AACD;AACD;;;;;;;;;AALC,GAzxByB,EAuyBzB;AACDnN,IAAAA,GAAG,EAAE,2BADJ;AAEDK,IAAAA,KAAK,EAAE,SAASuP,yBAAT,CAAmCtJ,KAAnC,EAA0CH,MAA1C,EAAkD;AACvD,UAAI6I,uBAAuB,GAAG,KAAKnC,oBAAL,CAA0B1G,MAA1B,EAAkC,KAAKd,SAAvC,CAA9B;AACA,UAAI8J,mBAAmB,GAAGH,uBAAuB,CAACI,YAAlD;AACA,aAAOD,mBAAmB,IAAI7I,KAAK,CAACuJ,UAAN,CAAiBC,QAAjB,KAA8B,MAA5D;AACD;AACD;;;;;;;;;;AAPC,GAvyByB,EAwzBzB;AACD9P,IAAAA,GAAG,EAAE,yBADJ;AAEDK,IAAAA,KAAK,EAAE,SAASqG,uBAAT,CAAiCJ,KAAjC,EAAwCC,MAAxC,EAAgDC,EAAhD,EAAoDuJ,iBAApD,EAAuE;AAC5E,UAAI/L,wBAAwB,CAACuC,MAAM,CAACP,GAAR,EAAaO,MAAM,CAACyJ,GAApB,EAAyB1J,KAAzB,CAAxB,KAA4D,KAAhE,EAAuE;AACrE;AACD;;AAED,UAAI,KAAKsJ,yBAAL,CAA+BtJ,KAA/B,EAAsCC,MAAM,CAACyJ,GAA7C,KAAqDtM,gBAAgB,EAAzE,EAA6E;AAC3EqM,QAAAA,iBAAiB,CAAC5J,MAAlB,GAA2B,IAA3B;AACD;AACF;AACD;;;;;;;;AAXC,GAxzByB,EA20BzB;AACDnG,IAAAA,GAAG,EAAE,wBADJ;AAEDK,IAAAA,KAAK,EAAE,SAASsG,sBAAT,CAAgCL,KAAhC,EAAuCC,MAAvC,EAA+C;AACpD,UAAIvC,wBAAwB,CAACuC,MAAM,CAACP,GAAR,EAAaO,MAAM,CAACyJ,GAApB,EAAyB1J,KAAzB,CAAxB,KAA4D,KAAhE,EAAuE;AACrE;AACD;;AAED,UAAI,KAAKsJ,yBAAL,CAA+BtJ,KAA/B,EAAsCC,MAAM,CAACyJ,GAA7C,CAAJ,EAAuD;AACrD,YAAItM,gBAAgB,EAApB,EAAwB;AACtB,eAAK6B,GAAL,CAAS0K,YAAT;AACA,eAAK1K,GAAL,CAAS2K,aAAT,CAAuB3J,MAAM,CAACyJ,GAA9B;AACD;;AAED,aAAK1L,IAAL,CAAU,KAAK+G,mBAAL,CAAyB9E,MAAM,CAACyJ,GAAhC,CAAV;AACD;AACF;AACD;;;;AAhBC,GA30ByB,EA+1BzB;AACDhQ,IAAAA,GAAG,EAAE,SADJ;AAEDK,IAAAA,KAAK,EAAE,SAAS8P,OAAT,GAAmB;AACxB,WAAKlL,UAAL,CAAgBkL,OAAhB;AACA,WAAKnL,mBAAL,CAAyBmL,OAAzB;;AAEAvO,MAAAA,IAAI,CAACS,eAAe,CAACuC,aAAa,CAAC9G,SAAf,CAAhB,EAA2C,SAA3C,EAAsD,IAAtD,CAAJ,CAAgEU,IAAhE,CAAqE,IAArE;AACD;AAPA,GA/1ByB,CAAhB,CAAZ;;AAy2BA,SAAOoG,aAAP;AACD,CAr6BD,CAq6BErB,UAr6BF,CAFA;;AAy6BAC,cAAc,CAACiB,UAAD,EAAaG,aAAb,CAAd;AACA,eAAeA,aAAf","sourcesContent":["import \"core-js/modules/es.symbol\";\nimport \"core-js/modules/es.symbol.description\";\nimport \"core-js/modules/es.symbol.iterator\";\nimport \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.array.every\";\nimport \"core-js/modules/es.array.filter\";\nimport \"core-js/modules/es.array.for-each\";\nimport \"core-js/modules/es.array.from\";\nimport \"core-js/modules/es.array.index-of\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.array.map\";\nimport \"core-js/modules/es.array.slice\";\nimport \"core-js/modules/es.array.sort\";\nimport \"core-js/modules/es.map\";\nimport \"core-js/modules/es.number.constructor\";\nimport \"core-js/modules/es.number.is-integer\";\nimport \"core-js/modules/es.object.assign\";\nimport \"core-js/modules/es.object.get-own-property-descriptor\";\nimport \"core-js/modules/es.object.get-own-property-descriptors\";\nimport \"core-js/modules/es.object.get-prototype-of\";\nimport \"core-js/modules/es.object.keys\";\nimport \"core-js/modules/es.object.set-prototype-of\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.reflect.get\";\nimport \"core-js/modules/es.regexp.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/web.dom-collections.for-each\";\nimport \"core-js/modules/web.dom-collections.iterator\";\nimport \"core-js/modules/web.timers\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport { addClass, removeClass } from '../../helpers/dom/element';\nimport { isUndefined, isDefined } from '../../helpers/mixed';\nimport { isObject } from '../../helpers/object';\nimport { arrayMap } from '../../helpers/array';\nimport { rangeEach } from '../../helpers/number';\nimport BasePlugin from '../_base';\nimport { registerPlugin } from './../../plugins';\nimport Hooks from '../../pluginHooks';\nimport { isPressedCtrlKey } from '../../utils/keyStateObserver';\nimport { ColumnStatesManager } from './columnStatesManager';\nimport { getNextSortOrder, areValidSortStates, getHeaderSpanElement, isFirstLevelColumnHeader, wasHeaderClickedProperly } from './utils';\nimport { getClassedToRemove, getClassesToAdd } from './domHelpers';\nimport RowsMapper from './rowsMapper';\nimport { rootComparator } from './rootComparator';\nimport { registerRootComparator, sort } from './sortService';\nvar APPEND_COLUMN_CONFIG_STRATEGY = 'append';\nvar REPLACE_COLUMN_CONFIG_STRATEGY = 'replace';\nvar PLUGIN_KEY = 'columnSorting';\nregisterRootComparator(PLUGIN_KEY, rootComparator);\nHooks.getSingleton().register('beforeColumnSort');\nHooks.getSingleton().register('afterColumnSort'); // DIFF - MultiColumnSorting & ColumnSorting: changed configuration documentation.\n\n/**\n * @plugin ColumnSorting\n *\n * @description\n * This plugin sorts the view by columns (but does not sort the data source!). To enable the plugin, set the\n * {@link Options#columnSorting} property to the correct value (see the examples below).\n *\n * @example\n * ```js\n * // as boolean\n * columnSorting: true\n *\n * // as an object with initial sort config (sort ascending for column at index 1)\n * columnSorting: {\n *   initialConfig: {\n *     column: 1,\n *     sortOrder: 'asc'\n *   }\n * }\n *\n * // as an object which define specific sorting options for all columns\n * columnSorting: {\n *   sortEmptyCells: true, // true = the table sorts empty cells, false = the table moves all empty cells to the end of the table (by default)\n *   indicator: true, // true = shows indicator for all columns (by default), false = don't show indicator for columns\n *   headerAction: true, // true = allow to click on the headers to sort (by default), false = turn off possibility to click on the headers to sort\n *   compareFunctionFactory: function(sortOrder, columnMeta) {\n *     return function(value, nextValue) {\n *       // Some value comparisons which will return -1, 0 or 1...\n *     }\n *   }\n * }\n *\n * // as an object passed to the `column` property, allows specifying a custom options for the desired column.\n * // please take a look at documentation of `column` property: https://docs.handsontable.com/pro/Options.html#columns\n * columns: [{\n *   columnSorting: {\n *     indicator: false, // disable indicator for the first column,\n *     sortEmptyCells: true,\n *     headerAction: false, // clicks on the first column won't sort\n *     compareFunctionFactory: function(sortOrder, columnMeta) {\n *       return function(value, nextValue) {\n *         return 0; // Custom compare function for the first column (don't sort)\n *       }\n *     }\n *   }\n * }]```\n *\n * @dependencies ObserveChanges\n */\n\nvar ColumnSorting =\n/*#__PURE__*/\nfunction (_BasePlugin) {\n  _inherits(ColumnSorting, _BasePlugin);\n\n  function ColumnSorting(hotInstance) {\n    var _this2;\n\n    _classCallCheck(this, ColumnSorting);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(ColumnSorting).call(this, hotInstance));\n    /**\n     * Instance of column state manager.\n     *\n     * @private\n     * @type {ColumnStatesManager}\n     */\n\n    _this2.columnStatesManager = new ColumnStatesManager();\n    /**\n     * Object containing visual row indexes mapped to data source indexes.\n     *\n     * @private\n     * @type {RowsMapper}\n     */\n\n    _this2.rowsMapper = new RowsMapper(_assertThisInitialized(_this2));\n    /**\n     * It blocks the plugin translation, this flag is checked inside `onModifyRow` callback.\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    _this2.blockPluginTranslation = true;\n    /**\n     * Cached column properties from plugin like i.e. `indicator`, `headerAction`.\n     *\n     * @private\n     * @type {Map<number, Object>}\n     */\n\n    _this2.columnMetaCache = new Map();\n    /**\n     * Main settings key designed for the plugin.\n     *\n     * @private\n     * @type {String}\n     */\n\n    _this2.pluginKey = PLUGIN_KEY;\n    return _this2;\n  }\n  /**\n   * Checks if the plugin is enabled in the Handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` than the {@link ColumnSorting#enablePlugin} method is called.\n   *\n   * @returns {Boolean}\n   */\n\n\n  _createClass(ColumnSorting, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return !!this.hot.getSettings()[this.pluginKey];\n    }\n    /**\n     * Enables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"enablePlugin\",\n    value: function enablePlugin() {\n      var _this3 = this;\n\n      if (this.enabled) {\n        return;\n      }\n\n      if (isUndefined(this.hot.getSettings().observeChanges)) {\n        this.enableObserveChangesPlugin();\n      }\n\n      this.addHook('afterTrimRow', function () {\n        return _this3.sortByPresetSortStates();\n      });\n      this.addHook('afterUntrimRow', function () {\n        return _this3.sortByPresetSortStates();\n      });\n      this.addHook('modifyRow', function (row, source) {\n        return _this3.onModifyRow(row, source);\n      });\n      this.addHook('unmodifyRow', function (row, source) {\n        return _this3.onUnmodifyRow(row, source);\n      });\n      this.addHook('afterGetColHeader', function (column, TH) {\n        return _this3.onAfterGetColHeader(column, TH);\n      });\n      this.addHook('beforeOnCellMouseDown', function (event, coords, TD, controller) {\n        return _this3.onBeforeOnCellMouseDown(event, coords, TD, controller);\n      });\n      this.addHook('afterOnCellMouseDown', function (event, target) {\n        return _this3.onAfterOnCellMouseDown(event, target);\n      });\n      this.addHook('afterCreateRow', function (index, amount) {\n        return _this3.onAfterCreateRow(index, amount);\n      });\n      this.addHook('afterRemoveRow', function (index, amount) {\n        return _this3.onAfterRemoveRow(index, amount);\n      });\n      this.addHook('afterInit', function () {\n        return _this3.loadOrSortBySettings();\n      });\n      this.addHook('afterLoadData', function (initialLoad) {\n        return _this3.onAfterLoadData(initialLoad);\n      });\n      this.addHook('afterCreateCol', function () {\n        return _this3.onAfterCreateCol();\n      });\n      this.addHook('afterRemoveCol', function () {\n        return _this3.onAfterRemoveCol();\n      }); // TODO: Workaround? It should be refactored / described.\n\n      if (this.hot.view) {\n        this.loadOrSortBySettings();\n      }\n\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"enablePlugin\", this).call(this);\n    }\n    /**\n     * Disables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"disablePlugin\",\n    value: function disablePlugin() {\n      var _this4 = this;\n\n      var clearColHeader = function clearColHeader(column, TH) {\n        var headerSpanElement = getHeaderSpanElement(TH);\n\n        if (isFirstLevelColumnHeader(column, TH) === false || headerSpanElement === null) {\n          return;\n        }\n\n        _this4.updateHeaderClasses(headerSpanElement);\n      }; // Changing header width and removing indicator.\n\n\n      this.hot.addHook('afterGetColHeader', clearColHeader);\n      this.hot.addHookOnce('afterRender', function () {\n        _this4.hot.removeHook('afterGetColHeader', clearColHeader);\n      });\n      this.rowsMapper.clearMap();\n\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"disablePlugin\", this).call(this);\n    } // DIFF - MultiColumnSorting & ColumnSorting: changed function documentation.\n\n    /**\n     * Sorts the table by chosen columns and orders.\n     *\n     * @param {undefined|Object} sortConfig Single column sort configuration. The configuration object contains `column` and `sortOrder` properties.\n     * First of them contains visual column index, the second one contains sort order (`asc` for ascending, `desc` for descending).\n     *\n     * **Note**: Please keep in mind that every call of `sort` function set an entirely new sort order. Previous sort configs aren't preserved.\n     *\n     * @example\n     * ```js\n     * // sort ascending first visual column\n     * hot.getPlugin('columnSorting').sort({ column: 0, sortOrder: 'asc' });\n     * ```\n     *\n     * @fires Hooks#beforeColumnSort\n     * @fires Hooks#afterColumnSort\n     */\n\n  }, {\n    key: \"sort\",\n    value: function sort(sortConfig) {\n      var _this5 = this;\n\n      var currentSortConfig = this.getSortConfig(); // We always pass configs defined as an array to `beforeColumnSort` and `afterColumnSort` hooks.\n\n      var destinationSortConfigs = this.getNormalizedSortConfigs(sortConfig);\n      var sortPossible = this.areValidSortConfigs(destinationSortConfigs);\n      var allowSort = this.hot.runHooks('beforeColumnSort', currentSortConfig, destinationSortConfigs, sortPossible);\n\n      if (allowSort === false) {\n        return;\n      }\n\n      if (sortPossible) {\n        var translateColumnToPhysical = function translateColumnToPhysical(_ref) {\n          var visualColumn = _ref.column,\n              restOfProperties = _objectWithoutProperties(_ref, [\"column\"]);\n\n          return _objectSpread({\n            column: _this5.hot.toPhysicalColumn(visualColumn)\n          }, restOfProperties);\n        };\n\n        var internalSortStates = arrayMap(destinationSortConfigs, function (columnSortConfig) {\n          return translateColumnToPhysical(columnSortConfig);\n        });\n        this.columnStatesManager.setSortStates(internalSortStates);\n        this.sortByPresetSortStates();\n        this.saveAllSortSettings();\n        this.hot.render();\n        this.hot.view.wt.draw(true); // TODO: Workaround? One test won't pass after removal. It should be refactored / described.\n      }\n\n      this.hot.runHooks('afterColumnSort', currentSortConfig, this.getSortConfig(), sortPossible);\n    }\n    /**\n     * Clear the sort performed on the table.\n     */\n\n  }, {\n    key: \"clearSort\",\n    value: function clearSort() {\n      this.sort([]);\n    }\n    /**\n     * Checks if the table is sorted (any column have to be sorted).\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isSorted\",\n    value: function isSorted() {\n      return this.enabled && !this.columnStatesManager.isListOfSortedColumnsEmpty();\n    }\n    /**\n     * Get sort configuration for particular column or for all sorted columns. Objects contain `column` and `sortOrder` properties.\n     *\n     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key. They are handled by the `sort` function.\n     *\n     * @param {Number} [column] Visual column index.\n     * @returns {undefined|Object|Array}\n     */\n\n  }, {\n    key: \"getSortConfig\",\n    value: function getSortConfig(column) {\n      var _this6 = this;\n\n      var translateColumnToVisual = function translateColumnToVisual(_ref2) {\n        var physicalColumn = _ref2.column,\n            restOfProperties = _objectWithoutProperties(_ref2, [\"column\"]);\n\n        return _objectSpread({\n          column: _this6.hot.toVisualColumn(physicalColumn)\n        }, restOfProperties);\n      };\n\n      if (isDefined(column)) {\n        var physicalColumn = this.hot.toPhysicalColumn(column);\n        var columnSortState = this.columnStatesManager.getColumnSortState(physicalColumn);\n\n        if (isDefined(columnSortState)) {\n          return translateColumnToVisual(columnSortState);\n        }\n\n        return;\n      }\n\n      var sortStates = this.columnStatesManager.getSortStates();\n      return arrayMap(sortStates, function (columnState) {\n        return translateColumnToVisual(columnState);\n      });\n    }\n    /**\n     * @description\n     * Warn: Useful mainly for providing server side sort implementation (see in the example below). It doesn't sort the data set. It just sets sort configuration for all sorted columns.\n     * Note: Please keep in mind that this method doesn't re-render the table.\n     *\n     * @example\n     * ```js\n     * beforeColumnSort: function(currentSortConfig, destinationSortConfigs) {\n     *   const columnSortPlugin = this.getPlugin('columnSorting');\n     *\n     *   columnSortPlugin.setSortConfig(destinationSortConfigs);\n     *\n     *   // const newData = ... // Calculated data set, ie. from an AJAX call.\n     *\n     *   this.loadData(newData); // Load new data set and re-render the table.\n     *\n     *   return false; // The blockade for the default sort action.\n     * }```\n     *\n     * @param {undefined|Object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).\n     * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains\n     * sort order (`asc` for ascending, `desc` for descending).\n     */\n\n  }, {\n    key: \"setSortConfig\",\n    value: function setSortConfig(sortConfig) {\n      var _this7 = this;\n\n      // We always set configs defined as an array.\n      var destinationSortConfigs = this.getNormalizedSortConfigs(sortConfig);\n\n      if (this.areValidSortConfigs(destinationSortConfigs)) {\n        var translateColumnToPhysical = function translateColumnToPhysical(_ref3) {\n          var visualColumn = _ref3.column,\n              restOfProperties = _objectWithoutProperties(_ref3, [\"column\"]);\n\n          return _objectSpread({\n            column: _this7.hot.toPhysicalColumn(visualColumn)\n          }, restOfProperties);\n        };\n\n        var internalSortStates = arrayMap(destinationSortConfigs, function (columnSortConfig) {\n          return translateColumnToPhysical(columnSortConfig);\n        });\n        this.columnStatesManager.setSortStates(internalSortStates);\n      }\n    }\n    /**\n     * Get normalized sort configs.\n     *\n     * @private\n     * @param {Object|Array} [sortConfig=[]] Single column sort configuration or full sort configuration (for all sorted columns).\n     * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains\n     * sort order (`asc` for ascending, `desc` for descending).\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getNormalizedSortConfigs\",\n    value: function getNormalizedSortConfigs() {\n      var sortConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (Array.isArray(sortConfig)) {\n        return sortConfig.slice(0, 1);\n      }\n\n      return [sortConfig].slice(0, 1);\n    }\n    /**\n     * Get if sort configs are valid.\n     *\n     * @private\n     * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"areValidSortConfigs\",\n    value: function areValidSortConfigs(sortConfigs) {\n      if (Array.isArray(sortConfigs) === false) {\n        return false;\n      }\n\n      var sortedColumns = sortConfigs.map(function (_ref4) {\n        var column = _ref4.column;\n        return column;\n      });\n      var numberOfColumns = this.hot.countCols();\n      var onlyExistingVisualIndexes = sortedColumns.every(function (visualColumn) {\n        return visualColumn <= numberOfColumns && visualColumn >= 0;\n      });\n      return areValidSortStates(sortConfigs) && onlyExistingVisualIndexes; // We don't translate visual indexes to physical indexes.\n    }\n    /**\n     * Saves all sorting settings. Saving works only when {@link Options#persistentState} option is enabled.\n     *\n     * @private\n     * @fires Hooks#persistentStateSave\n     */\n\n  }, {\n    key: \"saveAllSortSettings\",\n    value: function saveAllSortSettings() {\n      var allSortSettings = this.columnStatesManager.getAllColumnsProperties();\n      allSortSettings.initialConfig = this.columnStatesManager.getSortStates();\n      this.hot.runHooks('persistentStateSave', 'columnSorting', allSortSettings);\n    }\n    /**\n     * Get all saved sorting settings. Loading works only when {@link Options#persistentState} option is enabled.\n     *\n     * @private\n     * @returns {Object} Previously saved sort settings.\n     *\n     * @fires Hooks#persistentStateLoad\n     */\n\n  }, {\n    key: \"getAllSavedSortSettings\",\n    value: function getAllSavedSortSettings() {\n      var _this8 = this;\n\n      var storedAllSortSettings = {};\n      this.hot.runHooks('persistentStateLoad', 'columnSorting', storedAllSortSettings);\n      var allSortSettings = storedAllSortSettings.value;\n\n      var translateColumnToVisual = function translateColumnToVisual(_ref5) {\n        var physicalColumn = _ref5.column,\n            restOfProperties = _objectWithoutProperties(_ref5, [\"column\"]);\n\n        return _objectSpread({\n          column: _this8.hot.toVisualColumn(physicalColumn)\n        }, restOfProperties);\n      };\n\n      if (isDefined(allSortSettings) && Array.isArray(allSortSettings.initialConfig)) {\n        allSortSettings.initialConfig = arrayMap(allSortSettings.initialConfig, translateColumnToVisual);\n      }\n\n      return allSortSettings;\n    }\n    /**\n     * Get next sort configuration for particular column. Object contain `column` and `sortOrder` properties.\n     *\n     * **Note**: Please keep in mind that returned object expose **visual** column index under the `column` key.\n     *\n     * @private\n     * @param {Number} column Visual column index.\n     * @returns {undefined|Object}\n     */\n\n  }, {\n    key: \"getColumnNextConfig\",\n    value: function getColumnNextConfig(column) {\n      var physicalColumn = this.hot.toPhysicalColumn(column);\n\n      if (this.columnStatesManager.isColumnSorted(physicalColumn)) {\n        var columnSortConfig = this.getSortConfig(column);\n        var sortOrder = getNextSortOrder(columnSortConfig.sortOrder);\n\n        if (isDefined(sortOrder)) {\n          columnSortConfig.sortOrder = sortOrder;\n          return columnSortConfig;\n        }\n\n        return;\n      }\n\n      var nrOfColumns = this.hot.countCols();\n\n      if (Number.isInteger(column) && column >= 0 && column < nrOfColumns) {\n        return {\n          column: column,\n          sortOrder: getNextSortOrder()\n        };\n      }\n    }\n    /**\n     * Get sort configuration with \"next order\" for particular column.\n     *\n     * @private\n     * @param {Number} columnToChange Visual column index of column which order will be changed.\n     * @param {String} strategyId ID of strategy. Possible values: 'append' and 'replace'. The first one\n     * change order of particular column and change it's position in the sort queue to the last one. The second one\n     * just change order of particular column.\n     *\n     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.\n     *\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getNextSortConfig\",\n    value: function getNextSortConfig(columnToChange) {\n      var strategyId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : APPEND_COLUMN_CONFIG_STRATEGY;\n      var physicalColumn = this.hot.toPhysicalColumn(columnToChange);\n      var indexOfColumnToChange = this.columnStatesManager.getIndexOfColumnInSortQueue(physicalColumn);\n      var isColumnSorted = this.columnStatesManager.isColumnSorted(physicalColumn);\n      var currentSortConfig = this.getSortConfig();\n      var nextColumnConfig = this.getColumnNextConfig(columnToChange);\n\n      if (isColumnSorted) {\n        if (isUndefined(nextColumnConfig)) {\n          return [].concat(_toConsumableArray(currentSortConfig.slice(0, indexOfColumnToChange)), _toConsumableArray(currentSortConfig.slice(indexOfColumnToChange + 1)));\n        }\n\n        if (strategyId === APPEND_COLUMN_CONFIG_STRATEGY) {\n          return [].concat(_toConsumableArray(currentSortConfig.slice(0, indexOfColumnToChange)), _toConsumableArray(currentSortConfig.slice(indexOfColumnToChange + 1)), [nextColumnConfig]);\n        } else if (strategyId === REPLACE_COLUMN_CONFIG_STRATEGY) {\n          return [].concat(_toConsumableArray(currentSortConfig.slice(0, indexOfColumnToChange)), [nextColumnConfig], _toConsumableArray(currentSortConfig.slice(indexOfColumnToChange + 1)));\n        }\n      }\n\n      if (isDefined(nextColumnConfig)) {\n        return currentSortConfig.concat(nextColumnConfig);\n      }\n\n      return currentSortConfig;\n    }\n    /**\n     * Saves to cache part of plugins related properties, properly merged from cascade settings.\n     *\n     * @private\n     * @param {Number} column Visual column index.\n     * @returns {Object}\n     */\n    // TODO: Workaround. Inheriting of non-primitive cell meta values doesn't work. Using this function we don't count\n    // merged properties few times.\n\n  }, {\n    key: \"setMergedPluginSettings\",\n    value: function setMergedPluginSettings(column) {\n      var physicalColumnIndex = this.hot.toPhysicalColumn(column);\n      var pluginMainSettings = this.hot.getSettings()[this.pluginKey];\n      var storedColumnProperties = this.columnStatesManager.getAllColumnsProperties();\n      var cellMeta = this.hot.getCellMeta(0, column);\n      var columnMeta = Object.getPrototypeOf(cellMeta);\n      var columnMetaHasPluginSettings = Object.hasOwnProperty.call(columnMeta, this.pluginKey);\n      var pluginColumnConfig = columnMetaHasPluginSettings ? columnMeta[this.pluginKey] : {};\n      this.columnMetaCache.set(physicalColumnIndex, Object.assign(storedColumnProperties, pluginMainSettings, pluginColumnConfig));\n    }\n    /**\n     * Get copy of settings for first cell in the column.\n     *\n     * @private\n     * @param {Number} column Visual column index.\n     * @returns {Object}\n     */\n    // TODO: Workaround. Inheriting of non-primitive cell meta values doesn't work. Instead of getting properties from\n    // column meta we call this function.\n\n  }, {\n    key: \"getFirstCellSettings\",\n    value: function getFirstCellSettings(column) {\n      // TODO: Remove test named: \"should not break the dataset when inserted new row\" (#5431).\n      var actualBlockTranslationFlag = this.blockPluginTranslation;\n      this.blockPluginTranslation = true;\n\n      if (this.columnMetaCache.size === 0 || this.columnMetaCache.size < this.hot.countCols()) {\n        this.rebuildColumnMetaCache();\n      }\n\n      var cellMeta = this.hot.getCellMeta(0, column);\n      this.blockPluginTranslation = actualBlockTranslationFlag;\n      var cellMetaCopy = Object.create(cellMeta);\n      cellMetaCopy[this.pluginKey] = this.columnMetaCache.get(this.hot.toPhysicalColumn(column));\n      return cellMetaCopy;\n    }\n    /**\n     * Rebuild the column meta cache for all the columns.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"rebuildColumnMetaCache\",\n    value: function rebuildColumnMetaCache() {\n      var _this9 = this;\n\n      var numberOfColumns = this.hot.countCols();\n\n      if (numberOfColumns === 0) {\n        this.columnMetaCache.clear();\n      } else {\n        rangeEach(numberOfColumns - 1, function (visualColumnIndex) {\n          return _this9.setMergedPluginSettings(visualColumnIndex);\n        });\n      }\n    }\n    /**\n     * Get number of rows which should be sorted.\n     *\n     * @private\n     * @param {Number} numberOfRows Total number of displayed rows.\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"getNumberOfRowsToSort\",\n    value: function getNumberOfRowsToSort(numberOfRows) {\n      var settings = this.hot.getSettings(); // `maxRows` option doesn't take into account `minSpareRows` option in this case.\n\n      if (settings.maxRows <= numberOfRows) {\n        return settings.maxRows;\n      }\n\n      return numberOfRows - settings.minSpareRows;\n    }\n    /**\n     * Performs the sorting using a stable sort function basing on internal state of sorting.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"sortByPresetSortStates\",\n    value: function sortByPresetSortStates() {\n      var _this10 = this;\n\n      if (this.columnStatesManager.isListOfSortedColumnsEmpty()) {\n        this.rowsMapper.clearMap();\n        return;\n      }\n\n      var indexesWithData = [];\n      var sortedColumnsList = this.columnStatesManager.getSortedColumns();\n      var numberOfRows = this.hot.countRows(); // Function `getDataAtCell` won't call the indices translation inside `onModifyRow` callback - we check the `blockPluginTranslation`\n      // flag inside it (we just want to get data not already modified by `columnSorting` plugin translation).\n\n      this.blockPluginTranslation = true;\n\n      var getDataForSortedColumns = function getDataForSortedColumns(visualRowIndex) {\n        return arrayMap(sortedColumnsList, function (physicalColumn) {\n          return _this10.hot.getDataAtCell(visualRowIndex, _this10.hot.toVisualColumn(physicalColumn));\n        });\n      };\n\n      for (var visualRowIndex = 0; visualRowIndex < this.getNumberOfRowsToSort(numberOfRows); visualRowIndex += 1) {\n        indexesWithData.push([visualRowIndex].concat(getDataForSortedColumns(visualRowIndex)));\n      }\n\n      sort(indexesWithData, this.pluginKey, arrayMap(sortedColumnsList, function (physicalColumn) {\n        return _this10.columnStatesManager.getSortOrderOfColumn(physicalColumn);\n      }), arrayMap(sortedColumnsList, function (physicalColumn) {\n        return _this10.getFirstCellSettings(_this10.hot.toVisualColumn(physicalColumn));\n      })); // Append spareRows\n\n      for (var _visualRowIndex = indexesWithData.length; _visualRowIndex < numberOfRows; _visualRowIndex += 1) {\n        indexesWithData.push([_visualRowIndex].concat(getDataForSortedColumns(_visualRowIndex)));\n      } // The blockade of the indices translation is released.\n\n\n      this.blockPluginTranslation = false; // Save all indexes to arrayMapper, a completely new sequence is set by the plugin\n\n      this.rowsMapper._arrayMap = arrayMap(indexesWithData, function (indexWithData) {\n        return indexWithData[0];\n      });\n    }\n    /**\n     * Load saved settings or sort by predefined plugin configuration.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"loadOrSortBySettings\",\n    value: function loadOrSortBySettings() {\n      this.columnMetaCache.clear();\n      var storedAllSortSettings = this.getAllSavedSortSettings();\n\n      if (isObject(storedAllSortSettings)) {\n        this.sortBySettings(storedAllSortSettings);\n      } else {\n        var allSortSettings = this.hot.getSettings()[this.pluginKey];\n        this.sortBySettings(allSortSettings);\n      }\n    }\n    /**\n     * Sort the table by provided configuration.\n     *\n     * @private\n     * @param {Object} allSortSettings All sort config settings. Object may contain `initialConfig`, `indicator`,\n     * `sortEmptyCells`, `headerAction` and `compareFunctionFactory` properties.\n     */\n\n  }, {\n    key: \"sortBySettings\",\n    value: function sortBySettings(allSortSettings) {\n      if (isObject(allSortSettings)) {\n        this.columnStatesManager.updateAllColumnsProperties(allSortSettings);\n        var initialConfig = allSortSettings.initialConfig;\n\n        if (Array.isArray(initialConfig) || isObject(initialConfig)) {\n          this.sort(initialConfig);\n        }\n      } else {\n        // Extra render for headers. Their width may change.\n        this.hot.render();\n      }\n    }\n    /**\n     * Enables the ObserveChanges plugin.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"enableObserveChangesPlugin\",\n    value: function enableObserveChangesPlugin() {\n      var _this = this;\n\n      this.hot._registerTimeout(setTimeout(function () {\n        _this.hot.updateSettings({\n          observeChanges: true\n        });\n      }, 0));\n    }\n    /**\n     * Callback for `modifyRow` hook. Translates visual row index to the sorted row index.\n     *\n     * @private\n     * @param {Number} row Visual row index.\n     * @returns {Number} Physical row index.\n     */\n\n  }, {\n    key: \"onModifyRow\",\n    value: function onModifyRow(row, source) {\n      if (this.blockPluginTranslation === false && source !== this.pluginName && this.isSorted()) {\n        var rowInMapper = this.rowsMapper.getValueByIndex(row);\n        row = rowInMapper === null ? row : rowInMapper;\n      }\n\n      return row;\n    }\n    /**\n     * Callback for `unmodifyRow` hook. Translates sorted row index to visual row index.\n     *\n     * @private\n     * @param {Number} row Physical row index.\n     * @returns {Number} Visual row index.\n     */\n\n  }, {\n    key: \"onUnmodifyRow\",\n    value: function onUnmodifyRow(row, source) {\n      if (this.blockPluginTranslation === false && source !== this.pluginName && this.isSorted()) {\n        row = this.rowsMapper.getIndexByValue(row);\n      }\n\n      return row;\n    }\n    /**\n     * Callback for the `onAfterGetColHeader` hook. Adds column sorting CSS classes.\n     *\n     * @private\n     * @param {Number} column Visual column index.\n     * @param {Element} TH TH HTML element.\n     */\n\n  }, {\n    key: \"onAfterGetColHeader\",\n    value: function onAfterGetColHeader(column, TH) {\n      var headerSpanElement = getHeaderSpanElement(TH);\n\n      if (isFirstLevelColumnHeader(column, TH) === false || headerSpanElement === null) {\n        return;\n      }\n\n      var physicalColumn = this.hot.toPhysicalColumn(column);\n      var pluginSettingsForColumn = this.getFirstCellSettings(column)[this.pluginKey];\n      var showSortIndicator = pluginSettingsForColumn.indicator;\n      var headerActionEnabled = pluginSettingsForColumn.headerAction;\n      this.updateHeaderClasses(headerSpanElement, this.columnStatesManager, physicalColumn, showSortIndicator, headerActionEnabled);\n    }\n    /**\n     * Update header classes.\n     *\n     * @private\n     * @param {HTMLElement} headerSpanElement Header span element.\n     * @param {...*} args Extra arguments for helpers.\n     */\n\n  }, {\n    key: \"updateHeaderClasses\",\n    value: function updateHeaderClasses(headerSpanElement) {\n      removeClass(headerSpanElement, getClassedToRemove(headerSpanElement));\n\n      if (this.enabled !== false) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        addClass(headerSpanElement, getClassesToAdd.apply(void 0, args));\n      }\n    }\n    /**\n     * Overwriting base plugin's `onUpdateSettings` method. Please keep in mind that `onAfterUpdateSettings` isn't called\n     * for `updateSettings` in specific situations.\n     *\n     * @private\n     * @param {Object} newSettings New settings object.\n     */\n\n  }, {\n    key: \"onUpdateSettings\",\n    value: function onUpdateSettings(newSettings) {\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"onUpdateSettings\", this).call(this);\n\n      this.columnMetaCache.clear();\n\n      if (isDefined(newSettings[this.pluginKey])) {\n        this.sortBySettings(newSettings[this.pluginKey]);\n      }\n    }\n    /**\n     * Callback for the `afterLoadData` hook.\n     *\n     * @private\n     * @param {Boolean} initialLoad flag that determines whether the data has been loaded during the initialization.\n     */\n\n  }, {\n    key: \"onAfterLoadData\",\n    value: function onAfterLoadData(initialLoad) {\n      this.rowsMapper.clearMap();\n      this.columnMetaCache.clear();\n\n      if (initialLoad === true) {\n        // TODO: Workaround? It should be refactored / described.\n        if (this.hot.view) {\n          this.loadOrSortBySettings();\n        }\n      }\n    }\n    /**\n     * Callback for the `afterCreateRow` hook.\n     *\n     * @private\n     * @param {Number} index Visual index of the created row.\n     * @param {Number} amount Amount of created rows.\n     */\n\n  }, {\n    key: \"onAfterCreateRow\",\n    value: function onAfterCreateRow(index, amount) {\n      this.rowsMapper.shiftItems(index, amount);\n    }\n    /**\n     * Callback for the `afterRemoveRow` hook.\n     *\n     * @private\n     * @param {Number} index Visual index of the removed row.\n     * @param {Number} amount Amount of removed rows.\n     */\n\n  }, {\n    key: \"onAfterRemoveRow\",\n    value: function onAfterRemoveRow(index, amount) {\n      this.rowsMapper.unshiftItems(index, amount);\n    } // TODO: Workaround. Inheriting of non-primitive cell meta values doesn't work. We clear the cache after action which reorganize sequence of columns.\n    // TODO: Remove test named: \"should add new columns properly when the `columnSorting` plugin is enabled (inheriting of non-primitive cell meta values)\".\n\n    /**\n     * Callback for the `afterCreateCol` hook.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onAfterCreateCol\",\n    value: function onAfterCreateCol() {\n      this.columnMetaCache.clear();\n    } // TODO: Workaround. Inheriting of non-primitive cell meta values doesn't work. We clear the cache after action which reorganize sequence of columns.\n    // TODO: Remove test named: \"should add new columns properly when the `columnSorting` plugin is enabled (inheriting of non-primitive cell meta values)\".\n\n    /**\n     * Callback for the `afterRemoveCol` hook.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onAfterRemoveCol\",\n    value: function onAfterRemoveCol() {\n      this.columnMetaCache.clear();\n    }\n    /**\n     * Indicates if clickable header was clicked.\n     *\n     * @private\n     * @param {MouseEvent} event The `mousedown` event.\n     * @param {Number} column Visual column index.\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"wasClickableHeaderClicked\",\n    value: function wasClickableHeaderClicked(event, column) {\n      var pluginSettingsForColumn = this.getFirstCellSettings(column)[this.pluginKey];\n      var headerActionEnabled = pluginSettingsForColumn.headerAction;\n      return headerActionEnabled && event.realTarget.nodeName === 'SPAN';\n    }\n    /**\n     * Changes the behavior of selection / dragging.\n     *\n     * @private\n     * @param {MouseEvent} event The `mousedown` event.\n     * @param {CellCoords} coords Visual coordinates.\n     * @param {HTMLElement} TD\n     * @param {Object} blockCalculations\n     */\n\n  }, {\n    key: \"onBeforeOnCellMouseDown\",\n    value: function onBeforeOnCellMouseDown(event, coords, TD, blockCalculations) {\n      if (wasHeaderClickedProperly(coords.row, coords.col, event) === false) {\n        return;\n      }\n\n      if (this.wasClickableHeaderClicked(event, coords.col) && isPressedCtrlKey()) {\n        blockCalculations.column = true;\n      }\n    }\n    /**\n     * Callback for the `onAfterOnCellMouseDown` hook.\n     *\n     * @private\n     * @param {Event} event Event which are provided by hook.\n     * @param {CellCoords} coords Visual coords of the selected cell.\n     */\n\n  }, {\n    key: \"onAfterOnCellMouseDown\",\n    value: function onAfterOnCellMouseDown(event, coords) {\n      if (wasHeaderClickedProperly(coords.row, coords.col, event) === false) {\n        return;\n      }\n\n      if (this.wasClickableHeaderClicked(event, coords.col)) {\n        if (isPressedCtrlKey()) {\n          this.hot.deselectCell();\n          this.hot.selectColumns(coords.col);\n        }\n\n        this.sort(this.getColumnNextConfig(coords.col));\n      }\n    }\n    /**\n     * Destroys the plugin instance.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.rowsMapper.destroy();\n      this.columnStatesManager.destroy();\n\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"destroy\", this).call(this);\n    }\n  }]);\n\n  return ColumnSorting;\n}(BasePlugin);\n\nregisterPlugin(PLUGIN_KEY, ColumnSorting);\nexport default ColumnSorting;"]},"metadata":{},"sourceType":"module"}