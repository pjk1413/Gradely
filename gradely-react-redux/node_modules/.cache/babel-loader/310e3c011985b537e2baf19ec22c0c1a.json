{"ast":null,"code":"import { axios } from 'axios';\nimport { HOLD_EDIT_USER, UPDATE_STUDENT, UPDATE_USER, HOLD_EDIT_COURSE, HOLD_ADD_STUDENT, HOLD_REMOVE_STUDENT, HOLD_REMOVE_ASSIGNMENT } from '../action/types';\nimport { HOLD_EDIT_USER_TYPE, HOLD_EDIT_ASSIGNMENT, HOLD_UPDATE_ASSIGNMENT } from './../action/types'; //Reducer is a switch statement with actions and defines those actions\n\nconst initialState = {\n  studentList: []\n}; //Is it better to return the list from the API call and set state to that, or update state on my own\n\nconst tempReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case UPDATE_GRID:\n      return { ...state,\n        gr\n      };\n\n    case UPDATE_USER:\n      let newTemp = { ...state.editUser\n      };\n      newTemp.user = action.payload;\n      return { ...state,\n        editUser: newTemp\n      };\n\n    case UPDATE_STUDENT:\n      return { ...state,\n        editUser: action.payload\n      };\n\n    case HOLD_EDIT_USER:\n      return { ...state,\n        editUser: action.payload\n      };\n\n    case HOLD_EDIT_USER_TYPE:\n      return { ...state,\n        editUserType: action.payload\n      };\n\n    case HOLD_EDIT_ASSIGNMENT:\n      const tempAssignment = Object.assign({}, action.payload);\n      return { ...state,\n        editAssignment: tempAssignment\n      };\n\n    case HOLD_EDIT_COURSE:\n      const tempCourse = Object.assign({}, action.payload);\n      return { ...state,\n        editCourse: tempCourse\n      };\n\n    case HOLD_REMOVE_ASSIGNMENT:\n      let courseRemoveAssignment = { ...state.editCourse\n      };\n      const courseAssignment = courseRemoveAssignment.assignments && courseRemoveAssignment.assignments.filter(function checkId(assignment) {\n        return assignment.id !== action.payload;\n      });\n      courseRemoveAssignment.assignments = courseAssignment;\n      return { ...state,\n        editCourse: courseRemoveAssignment\n      };\n\n    case HOLD_UPDATE_ASSIGNMENT:\n      let courseUpdateAssignment = { ...state.editCourse\n      };\n      const courseTempAssignment = courseUpdateAssignment.assignments && courseUpdateAssignment.assignments.map(function checkId(assignment) {\n        if (assignment.id === action.payload.id) {\n          return action.payload;\n        } else {\n          return assignment;\n        }\n      });\n      courseUpdateAssignment.assignments = courseTempAssignment;\n      return { ...state,\n        editCourse: courseUpdateAssignment\n      };\n\n    case HOLD_REMOVE_STUDENT:\n      let courseRemoveStudent = { ...state.editCourse\n      };\n      const course = courseRemoveStudent.studentList && courseRemoveStudent.studentList.filter(function checkId(student) {\n        //console.log(student.id)\n        //console.log(action.payload)\n        return student.id !== action.payload;\n      });\n      courseRemoveStudent.studentList = course;\n      return { ...state,\n        editCourse: courseRemoveStudent\n      };\n\n    case HOLD_ADD_STUDENT:\n      let courseAddStudent = { ...state.editCourse\n      };\n      courseAddStudent.studentList.push(action.payload);\n      return { ...state,\n        editCourse: courseAddStudent\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default tempReducer;","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/src/reducer/tempReducer.js"],"names":["axios","HOLD_EDIT_USER","UPDATE_STUDENT","UPDATE_USER","HOLD_EDIT_COURSE","HOLD_ADD_STUDENT","HOLD_REMOVE_STUDENT","HOLD_REMOVE_ASSIGNMENT","HOLD_EDIT_USER_TYPE","HOLD_EDIT_ASSIGNMENT","HOLD_UPDATE_ASSIGNMENT","initialState","studentList","tempReducer","state","action","type","UPDATE_GRID","gr","newTemp","editUser","user","payload","editUserType","tempAssignment","Object","assign","editAssignment","tempCourse","editCourse","courseRemoveAssignment","courseAssignment","assignments","filter","checkId","assignment","id","courseUpdateAssignment","courseTempAssignment","map","courseRemoveStudent","course","student","courseAddStudent","push"],"mappings":"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","sourcesContent":["import { axios } from 'axios';\r\nimport { HOLD_EDIT_USER, UPDATE_STUDENT, UPDATE_USER, HOLD_EDIT_COURSE, HOLD_ADD_STUDENT, HOLD_REMOVE_STUDENT, HOLD_REMOVE_ASSIGNMENT } from '../action/types';\r\nimport { HOLD_EDIT_USER_TYPE, HOLD_EDIT_ASSIGNMENT, HOLD_UPDATE_ASSIGNMENT } from './../action/types';\r\n//Reducer is a switch statement with actions and defines those actions\r\n\r\nconst initialState = {\r\n    studentList: []\r\n}\r\n\r\n//Is it better to return the list from the API call and set state to that, or update state on my own\r\nconst tempReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case UPDATE_GRID:\r\n            return {\r\n                ...state,\r\n                gr\r\n            }\r\n        case UPDATE_USER: \r\n            \r\n            let newTemp = {\r\n                ...state.editUser\r\n            }\r\n            newTemp.user = action.payload\r\n            return {\r\n                ...state,\r\n                editUser: newTemp\r\n            }\r\n        case UPDATE_STUDENT:\r\n            return {\r\n                ...state,\r\n                editUser: action.payload\r\n            }\r\n        case HOLD_EDIT_USER:\r\n            return {\r\n                ...state,\r\n                editUser: action.payload\r\n            };\r\n        case HOLD_EDIT_USER_TYPE:\r\n            return {\r\n                ...state,\r\n                editUserType: action.payload\r\n            }\r\n        case HOLD_EDIT_ASSIGNMENT:\r\n            const tempAssignment = Object.assign({}, action.payload)\r\n            return {\r\n                ...state,\r\n                editAssignment: tempAssignment\r\n            }\r\n        case HOLD_EDIT_COURSE:\r\n            const tempCourse = Object.assign({}, action.payload)\r\n            return {\r\n                ...state,\r\n                editCourse: tempCourse\r\n              }\r\n        case HOLD_REMOVE_ASSIGNMENT:\r\n            let courseRemoveAssignment = {\r\n                ...state.editCourse\r\n            }\r\n\r\n            const courseAssignment = courseRemoveAssignment.assignments && courseRemoveAssignment.assignments.filter(\r\n                function checkId(assignment) {\r\n                    return assignment.id !== action.payload\r\n                }\r\n            )\r\n            courseRemoveAssignment.assignments = courseAssignment\r\n\r\n            return {\r\n                ...state,\r\n                editCourse: courseRemoveAssignment\r\n            }\r\n\r\n        case HOLD_UPDATE_ASSIGNMENT:\r\n            let courseUpdateAssignment = {\r\n                ...state.editCourse\r\n            }\r\n\r\n            const courseTempAssignment = courseUpdateAssignment.assignments && courseUpdateAssignment.assignments.map(\r\n                function checkId(assignment) {\r\n                    if(assignment.id === action.payload.id) {\r\n                        return action.payload\r\n                    } else {\r\n                        return assignment\r\n                    }\r\n                }\r\n            )\r\n            courseUpdateAssignment.assignments = courseTempAssignment\r\n\r\n            return {\r\n                ...state,\r\n                editCourse: courseUpdateAssignment\r\n            }\r\n\r\n        case HOLD_REMOVE_STUDENT:\r\n            let courseRemoveStudent = {\r\n                ...state.editCourse\r\n            }\r\n            \r\n            const course = courseRemoveStudent.studentList && courseRemoveStudent.studentList.filter(\r\n                function checkId(student) {\r\n                    //console.log(student.id)\r\n                    //console.log(action.payload)\r\n                    return student.id !== action.payload\r\n                }\r\n            )\r\n            courseRemoveStudent.studentList = course\r\n\r\n            return {\r\n                ...state,\r\n                editCourse: courseRemoveStudent\r\n            }\r\n        case HOLD_ADD_STUDENT:\r\n            let courseAddStudent = {\r\n                ...state.editCourse\r\n            }\r\n            courseAddStudent.studentList.push(action.payload)\r\n            return {\r\n                ...state,\r\n                editCourse: courseAddStudent\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n} \r\n\r\nexport default tempReducer;\r\n"]},"metadata":{},"sourceType":"module"}