{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport { CellCoords } from './../3rdparty/walkontable/src';\nimport { stringify } from './../helpers/mixed';\nimport { mixin } from './../helpers/object';\nimport hooksRefRegisterer from './../mixins/hooksRefRegisterer';\nexport var EditorState = {\n  VIRGIN: 'STATE_VIRGIN',\n  // before editing\n  EDITING: 'STATE_EDITING',\n  WAITING: 'STATE_WAITING',\n  // waiting for async validation\n  FINISHED: 'STATE_FINISHED'\n};\n/**\n * @util\n * @class BaseEditor\n */\n\nvar BaseEditor = /*#__PURE__*/function () {\n  function BaseEditor(instance) {\n    _classCallCheck(this, BaseEditor);\n    /**\n     * A reference to the source instance of the Handsontable.\n     *\n     * @type {Handsontable}\n     */\n\n\n    this.hot = instance;\n    /**\n     * A reference to the source instance of the Handsontable.\n     * @deprecated\n     *\n     * @type {Handsontable}\n     */\n\n    this.instance = instance;\n    /**\n     * Editor's state.\n     *\n     * @type {String}\n     */\n\n    this.state = EditorState.VIRGIN;\n    /**\n     * Flag to store information about editor's opening status.\n     * @private\n     *\n     * @type {Boolean}\n     */\n\n    this._opened = false;\n    /**\n     * Defines the editor's editing mode. When false, then an editor works in fast editing mode.\n     * @private\n     *\n     * @type {Boolean}\n     */\n\n    this._fullEditMode = false;\n    /**\n     * Callback to call after closing editor.\n     *\n     * @type {Function}\n     */\n\n    this._closeCallback = null;\n    /**\n     * Currently rendered cell's TD element.\n     *\n     * @type {HTMLTableCellElement}\n     */\n\n    this.TD = null;\n    /**\n     * Visual row index.\n     *\n     * @type {Number}\n     */\n\n    this.row = null;\n    /**\n     * Visual column index.\n     *\n     * @type {Number}\n     */\n\n    this.col = null;\n    /**\n     * Column property name or a column index, if datasource is an array of arrays.\n     *\n     * @type {Number|String}\n     */\n\n    this.prop = null;\n    /**\n     * Original cell's value.\n     *\n     * @type {*}\n     */\n\n    this.originalValue = null;\n    /**\n     * Object containing the cell's properties.\n     *\n     * @type {Object}\n     */\n\n    this.cellProperties = null;\n    this.init();\n  }\n  /**\n   * Fires callback after closing editor.\n   *\n   * @private\n   * @param {Boolean} result\n   */\n\n\n  _createClass(BaseEditor, [{\n    key: \"_fireCallbacks\",\n    value: function _fireCallbacks(result) {\n      if (this._closeCallback) {\n        this._closeCallback(result);\n\n        this._closeCallback = null;\n      }\n    }\n    /**\n     * Initializes an editor's intance.\n     */\n\n  }, {\n    key: \"init\",\n    value: function init() {}\n    /**\n     * Required method to get current value from editable element.\n     */\n\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      throw Error('Editor getValue() method unimplemented');\n    }\n    /**\n     * Required method to set new value into editable element.\n     */\n\n  }, {\n    key: \"setValue\",\n    value: function setValue() {\n      throw Error('Editor setValue() method unimplemented');\n    }\n    /**\n     * Required method to open editor.\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      throw Error('Editor open() method unimplemented');\n    }\n    /**\n     * Required method to close editor.\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      throw Error('Editor close() method unimplemented');\n    }\n    /**\n     * Prepares editor's meta data.\n     *\n     * @param {Number} row\n     * @param {Number} col\n     * @param {Number|String} prop\n     * @param {HTMLTableCellElement} td\n     * @param {*} originalValue\n     * @param {Object} cellProperties\n     */\n\n  }, {\n    key: \"prepare\",\n    value: function prepare(row, col, prop, td, originalValue, cellProperties) {\n      this.TD = td;\n      this.row = row;\n      this.col = col;\n      this.prop = prop;\n      this.originalValue = originalValue;\n      this.cellProperties = cellProperties;\n      this.state = EditorState.VIRGIN;\n    }\n    /**\n     * Fallback method to provide extendable editors in ES5.\n     */\n\n  }, {\n    key: \"extend\",\n    value: function extend() {\n      return /*#__PURE__*/function (_this$constructor) {\n        _inherits(Editor, _this$constructor);\n\n        function Editor() {\n          _classCallCheck(this, Editor);\n\n          return _possibleConstructorReturn(this, _getPrototypeOf(Editor).apply(this, arguments));\n        }\n\n        return Editor;\n      }(this.constructor);\n    }\n    /**\n     * Saves value from editor into data storage.\n     *\n     * @param {*} value\n     * @param {Boolean} ctrlDown If true, applies value to each cell in the last selected range.\n     */\n\n  }, {\n    key: \"saveValue\",\n    value: function saveValue(value, ctrlDown) {\n      var selection;\n      var tmp; // if ctrl+enter and multiple cells selected, behave like Excel (finish editing and apply to all cells)\n\n      if (ctrlDown) {\n        selection = this.hot.getSelectedLast();\n\n        if (selection[0] > selection[2]) {\n          tmp = selection[0];\n          selection[0] = selection[2];\n          selection[2] = tmp;\n        }\n\n        if (selection[1] > selection[3]) {\n          tmp = selection[1];\n          selection[1] = selection[3];\n          selection[3] = tmp;\n        }\n      } else {\n        selection = [this.row, this.col, null, null];\n      }\n\n      this.hot.populateFromArray(selection[0], selection[1], value, selection[2], selection[3], 'edit');\n    }\n    /**\n     * Begins editing on a highlighted cell and hides fillHandle corner if was present.\n     *\n     * @param {*} newInitialValue\n     * @param {*} event\n     */\n\n  }, {\n    key: \"beginEditing\",\n    value: function beginEditing(newInitialValue, event) {\n      if (this.state !== EditorState.VIRGIN) {\n        return;\n      }\n\n      this.hot.view.scrollViewport(new CellCoords(this.row, this.col));\n      this.state = EditorState.EDITING; // Set the editor value only in the full edit mode. In other mode the focusable element has to be empty,\n      // otherwise IME (editor for Asia users) doesn't work.\n\n      if (this.isInFullEditMode()) {\n        var stringifiedInitialValue = typeof newInitialValue === 'string' ? newInitialValue : stringify(this.originalValue);\n        this.setValue(stringifiedInitialValue);\n      }\n\n      this.open(event);\n      this._opened = true;\n      this.focus(); // only rerender the selections (FillHandle should disappear when beginediting is triggered)\n\n      this.hot.view.render();\n      this.hot.runHooks('afterBeginEditing', this.row, this.col);\n    }\n    /**\n     * Finishes editing and start saving or restoring process for editing cell or last selected range.\n     *\n     * @param {Boolean} restoreOriginalValue If true, then closes editor without saving value from the editor into a cell.\n     * @param {Boolean} ctrlDown If true, then saveValue will save editor's value to each cell in the last selected range.\n     * @param {Function} callback\n     */\n\n  }, {\n    key: \"finishEditing\",\n    value: function finishEditing(restoreOriginalValue, ctrlDown, callback) {\n      var _this = this;\n\n      var val;\n\n      if (callback) {\n        var previousCloseCallback = this._closeCallback;\n\n        this._closeCallback = function (result) {\n          if (previousCloseCallback) {\n            previousCloseCallback(result);\n          }\n\n          callback(result);\n\n          _this.hot.view.render();\n        };\n      }\n\n      if (this.isWaiting()) {\n        return;\n      }\n\n      if (this.state === EditorState.VIRGIN) {\n        this.hot._registerTimeout(function () {\n          _this._fireCallbacks(true);\n        });\n\n        return;\n      }\n\n      if (this.state === EditorState.EDITING) {\n        if (restoreOriginalValue) {\n          this.cancelChanges();\n          this.hot.view.render();\n          return;\n        }\n\n        var value = this.getValue();\n\n        if (this.hot.getSettings().trimWhitespace) {\n          // We trim only string values\n          val = [[typeof value === 'string' ? String.prototype.trim.call(value || '') : value]];\n        } else {\n          val = [[value]];\n        }\n\n        this.state = EditorState.WAITING;\n        this.saveValue(val, ctrlDown);\n\n        if (this.hot.getCellValidator(this.cellProperties)) {\n          this.hot.addHookOnce('postAfterValidate', function (result) {\n            _this.state = EditorState.FINISHED;\n\n            _this.discardEditor(result);\n          });\n        } else {\n          this.state = EditorState.FINISHED;\n          this.discardEditor(true);\n        }\n      }\n    }\n    /**\n     * Finishes editing without singout saving value.\n     */\n\n  }, {\n    key: \"cancelChanges\",\n    value: function cancelChanges() {\n      this.state = EditorState.FINISHED;\n      this.discardEditor();\n    }\n    /**\n     * Verifies result of validation or closes editor if user's cancelled changes.\n     *\n     * @param {Boolean|undefined} result\n     */\n\n  }, {\n    key: \"discardEditor\",\n    value: function discardEditor(result) {\n      if (this.state !== EditorState.FINISHED) {\n        return;\n      } // validator was defined and failed\n\n\n      if (result === false && this.cellProperties.allowInvalid !== true) {\n        this.hot.selectCell(this.row, this.col);\n        this.focus();\n        this.state = EditorState.EDITING;\n\n        this._fireCallbacks(false);\n      } else {\n        this.close();\n        this._opened = false;\n        this._fullEditMode = false;\n        this.state = EditorState.VIRGIN;\n\n        this._fireCallbacks(true);\n      }\n    }\n    /**\n     * Switch editor into full edit mode. In this state navigation keys don't close editor. This mode is activated\n     * automatically after hit ENTER or F2 key on the cell or while editing cell press F2 key.\n     */\n\n  }, {\n    key: \"enableFullEditMode\",\n    value: function enableFullEditMode() {\n      this._fullEditMode = true;\n    }\n    /**\n     * Checks if editor is in full edit mode.\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isInFullEditMode\",\n    value: function isInFullEditMode() {\n      return this._fullEditMode;\n    }\n    /**\n     * Returns information whether the editor is open.\n     */\n\n  }, {\n    key: \"isOpened\",\n    value: function isOpened() {\n      return this._opened;\n    }\n    /**\n     * Returns information whether the editor is waiting, eg.: for async validation.\n     */\n\n  }, {\n    key: \"isWaiting\",\n    value: function isWaiting() {\n      return this.state === EditorState.WAITING;\n    }\n    /**\n     * Gets className of the edited cell if exist.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"getEditedCellsLayerClass\",\n    value: function getEditedCellsLayerClass() {\n      var editorSection = this.checkEditorSection();\n\n      switch (editorSection) {\n        case 'right':\n          return 'ht_clone_right';\n\n        case 'left':\n          return 'ht_clone_left';\n\n        case 'bottom':\n          return 'ht_clone_bottom';\n\n        case 'bottom-right-corner':\n          return 'ht_clone_bottom_right_corner';\n\n        case 'bottom-left-corner':\n          return 'ht_clone_bottom_left_corner';\n\n        case 'top':\n          return 'ht_clone_top';\n\n        case 'top-right-corner':\n          return 'ht_clone_top_right_corner';\n\n        case 'top-left-corner':\n          return 'ht_clone_top_left_corner';\n\n        default:\n          return 'ht_clone_master';\n      }\n    }\n    /**\n     * Gets HTMLTableCellElement of the edited cell if exist.\n     *\n     * @returns {HTMLTableCellElement|null}\n     */\n\n  }, {\n    key: \"getEditedCell\",\n    value: function getEditedCell() {\n      return this.hot.getCell(this.row, this.col, true);\n    }\n    /**\n     * Returns name of the overlay, where editor is placed.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"checkEditorSection\",\n    value: function checkEditorSection() {\n      var totalRows = this.hot.countRows();\n      var section = '';\n\n      if (this.row < this.hot.getSettings().fixedRowsTop) {\n        if (this.col < this.hot.getSettings().fixedColumnsLeft) {\n          section = 'top-left-corner';\n        } else {\n          section = 'top';\n        }\n      } else if (this.hot.getSettings().fixedRowsBottom && this.row >= totalRows - this.hot.getSettings().fixedRowsBottom) {\n        if (this.col < this.hot.getSettings().fixedColumnsLeft) {\n          section = 'bottom-left-corner';\n        } else {\n          section = 'bottom';\n        }\n      } else if (this.col < this.hot.getSettings().fixedColumnsLeft) {\n        section = 'left';\n      }\n\n      return section;\n    }\n  }]);\n\n  return BaseEditor;\n}();\n\nmixin(BaseEditor, hooksRefRegisterer);\nexport default BaseEditor;","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react/node_modules/handsontable/es/editors/_baseEditor.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_possibleConstructorReturn","self","call","_assertThisInitialized","ReferenceError","_getPrototypeOf","o","Object","setPrototypeOf","getPrototypeOf","__proto__","_inherits","subClass","superClass","TypeError","create","value","writable","configurable","_setPrototypeOf","p","_classCallCheck","instance","Constructor","_defineProperties","target","props","i","length","descriptor","enumerable","defineProperty","key","_createClass","protoProps","staticProps","CellCoords","stringify","mixin","hooksRefRegisterer","EditorState","VIRGIN","EDITING","WAITING","FINISHED","BaseEditor","hot","state","_opened","_fullEditMode","_closeCallback","TD","row","col","prop","originalValue","cellProperties","init","_fireCallbacks","result","getValue","Error","setValue","open","close","prepare","td","extend","_this$constructor","Editor","apply","arguments","saveValue","ctrlDown","selection","tmp","getSelectedLast","populateFromArray","beginEditing","newInitialValue","event","view","scrollViewport","isInFullEditMode","stringifiedInitialValue","focus","render","runHooks","finishEditing","restoreOriginalValue","callback","_this","val","previousCloseCallback","isWaiting","_registerTimeout","cancelChanges","getSettings","trimWhitespace","String","trim","getCellValidator","addHookOnce","discardEditor","allowInvalid","selectCell","enableFullEditMode","isOpened","getEditedCellsLayerClass","editorSection","checkEditorSection","getEditedCell","getCell","totalRows","countRows","section","fixedRowsTop","fixedColumnsLeft","fixedRowsBottom"],"mappings":"AAWA,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE;;AAA2B,MAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,OAAOA,MAAM,CAACC,QAAd,KAA2B,QAA/D,EAAyE;AAAEH,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAO,OAAOA,GAAd;AAAoB,KAAtD;AAAyD,GAApI,MAA0I;AAAED,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAOA,GAAG,IAAI,OAAOC,MAAP,KAAkB,UAAzB,IAAuCD,GAAG,CAACG,WAAJ,KAAoBF,MAA3D,IAAqED,GAAG,KAAKC,MAAM,CAACG,SAApF,GAAgG,QAAhG,GAA2G,OAAOJ,GAAzH;AAA+H,KAAjK;AAAoK;;AAAC,SAAOD,OAAO,CAACC,GAAD,CAAd;AAAsB;;AAE1X,SAASK,0BAAT,CAAoCC,IAApC,EAA0CC,IAA1C,EAAgD;AAAE,MAAIA,IAAI,KAAKR,OAAO,CAACQ,IAAD,CAAP,KAAkB,QAAlB,IAA8B,OAAOA,IAAP,KAAgB,UAAnD,CAAR,EAAwE;AAAE,WAAOA,IAAP;AAAc;;AAAC,SAAOC,sBAAsB,CAACF,IAAD,CAA7B;AAAsC;;AAEjL,SAASE,sBAAT,CAAgCF,IAAhC,EAAsC;AAAE,MAAIA,IAAI,KAAK,KAAK,CAAlB,EAAqB;AAAE,UAAM,IAAIG,cAAJ,CAAmB,2DAAnB,CAAN;AAAwF;;AAAC,SAAOH,IAAP;AAAc;;AAEtK,SAASI,eAAT,CAAyBC,CAAzB,EAA4B;AAAED,EAAAA,eAAe,GAAGE,MAAM,CAACC,cAAP,GAAwBD,MAAM,CAACE,cAA/B,GAAgD,SAASJ,eAAT,CAAyBC,CAAzB,EAA4B;AAAE,WAAOA,CAAC,CAACI,SAAF,IAAeH,MAAM,CAACE,cAAP,CAAsBH,CAAtB,CAAtB;AAAiD,GAAjJ;AAAmJ,SAAOD,eAAe,CAACC,CAAD,CAAtB;AAA4B;;AAE7M,SAASK,SAAT,CAAmBC,QAAnB,EAA6BC,UAA7B,EAAyC;AAAE,MAAI,OAAOA,UAAP,KAAsB,UAAtB,IAAoCA,UAAU,KAAK,IAAvD,EAA6D;AAAE,UAAM,IAAIC,SAAJ,CAAc,oDAAd,CAAN;AAA4E;;AAACF,EAAAA,QAAQ,CAACb,SAAT,GAAqBQ,MAAM,CAACQ,MAAP,CAAcF,UAAU,IAAIA,UAAU,CAACd,SAAvC,EAAkD;AAAED,IAAAA,WAAW,EAAE;AAAEkB,MAAAA,KAAK,EAAEJ,QAAT;AAAmBK,MAAAA,QAAQ,EAAE,IAA7B;AAAmCC,MAAAA,YAAY,EAAE;AAAjD;AAAf,GAAlD,CAArB;AAAkJ,MAAIL,UAAJ,EAAgBM,eAAe,CAACP,QAAD,EAAWC,UAAX,CAAf;AAAwC;;AAEjY,SAASM,eAAT,CAAyBb,CAAzB,EAA4Bc,CAA5B,EAA+B;AAAED,EAAAA,eAAe,GAAGZ,MAAM,CAACC,cAAP,IAAyB,SAASW,eAAT,CAAyBb,CAAzB,EAA4Bc,CAA5B,EAA+B;AAAEd,IAAAA,CAAC,CAACI,SAAF,GAAcU,CAAd;AAAiB,WAAOd,CAAP;AAAW,GAAxG;;AAA0G,SAAOa,eAAe,CAACb,CAAD,EAAIc,CAAJ,CAAtB;AAA+B;;AAE1K,SAASC,eAAT,CAAyBC,QAAzB,EAAmCC,WAAnC,EAAgD;AAAE,MAAI,EAAED,QAAQ,YAAYC,WAAtB,CAAJ,EAAwC;AAAE,UAAM,IAAIT,SAAJ,CAAc,mCAAd,CAAN;AAA2D;AAAE;;AAEzJ,SAASU,iBAAT,CAA2BC,MAA3B,EAAmCC,KAAnC,EAA0C;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AAAE,QAAIE,UAAU,GAAGH,KAAK,CAACC,CAAD,CAAtB;AAA2BE,IAAAA,UAAU,CAACC,UAAX,GAAwBD,UAAU,CAACC,UAAX,IAAyB,KAAjD;AAAwDD,IAAAA,UAAU,CAACX,YAAX,GAA0B,IAA1B;AAAgC,QAAI,WAAWW,UAAf,EAA2BA,UAAU,CAACZ,QAAX,GAAsB,IAAtB;AAA4BV,IAAAA,MAAM,CAACwB,cAAP,CAAsBN,MAAtB,EAA8BI,UAAU,CAACG,GAAzC,EAA8CH,UAA9C;AAA4D;AAAE;;AAE7T,SAASI,YAAT,CAAsBV,WAAtB,EAAmCW,UAAnC,EAA+CC,WAA/C,EAA4D;AAAE,MAAID,UAAJ,EAAgBV,iBAAiB,CAACD,WAAW,CAACxB,SAAb,EAAwBmC,UAAxB,CAAjB;AAAsD,MAAIC,WAAJ,EAAiBX,iBAAiB,CAACD,WAAD,EAAcY,WAAd,CAAjB;AAA6C,SAAOZ,WAAP;AAAqB;;AAEvN,SAASa,UAAT,QAA2B,+BAA3B;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,KAAT,QAAsB,qBAAtB;AACA,OAAOC,kBAAP,MAA+B,gCAA/B;AACA,OAAO,IAAIC,WAAW,GAAG;AACvBC,EAAAA,MAAM,EAAE,cADe;AAEvB;AACAC,EAAAA,OAAO,EAAE,eAHc;AAIvBC,EAAAA,OAAO,EAAE,eAJc;AAKvB;AACAC,EAAAA,QAAQ,EAAE;AANa,CAAlB;AAQP;;;;;AAKA,IAAIC,UAAU,GACd,aACA,YAAY;AACV,WAASA,UAAT,CAAoBvB,QAApB,EAA8B;AAC5BD,IAAAA,eAAe,CAAC,IAAD,EAAOwB,UAAP,CAAf;AAEA;;;;;;;AAKA,SAAKC,GAAL,GAAWxB,QAAX;AACA;;;;;;;AAOA,SAAKA,QAAL,GAAgBA,QAAhB;AACA;;;;;;AAMA,SAAKyB,KAAL,GAAaP,WAAW,CAACC,MAAzB;AACA;;;;;;;AAOA,SAAKO,OAAL,GAAe,KAAf;AACA;;;;;;;AAOA,SAAKC,aAAL,GAAqB,KAArB;AACA;;;;;;AAMA,SAAKC,cAAL,GAAsB,IAAtB;AACA;;;;;;AAMA,SAAKC,EAAL,GAAU,IAAV;AACA;;;;;;AAMA,SAAKC,GAAL,GAAW,IAAX;AACA;;;;;;AAMA,SAAKC,GAAL,GAAW,IAAX;AACA;;;;;;AAMA,SAAKC,IAAL,GAAY,IAAZ;AACA;;;;;;AAMA,SAAKC,aAAL,GAAqB,IAArB;AACA;;;;;;AAMA,SAAKC,cAAL,GAAsB,IAAtB;AACA,SAAKC,IAAL;AACD;AACD;;;;;;;;AAQAxB,EAAAA,YAAY,CAACY,UAAD,EAAa,CAAC;AACxBb,IAAAA,GAAG,EAAE,gBADmB;AAExBhB,IAAAA,KAAK,EAAE,SAAS0C,cAAT,CAAwBC,MAAxB,EAAgC;AACrC,UAAI,KAAKT,cAAT,EAAyB;AACvB,aAAKA,cAAL,CAAoBS,MAApB;;AAEA,aAAKT,cAAL,GAAsB,IAAtB;AACD;AACF;AACD;;;;AATwB,GAAD,EAatB;AACDlB,IAAAA,GAAG,EAAE,MADJ;AAEDhB,IAAAA,KAAK,EAAE,SAASyC,IAAT,GAAgB,CAAE;AACzB;;;;AAHC,GAbsB,EAoBtB;AACDzB,IAAAA,GAAG,EAAE,UADJ;AAEDhB,IAAAA,KAAK,EAAE,SAAS4C,QAAT,GAAoB;AACzB,YAAMC,KAAK,CAAC,wCAAD,CAAX;AACD;AACD;;;;AALC,GApBsB,EA6BtB;AACD7B,IAAAA,GAAG,EAAE,UADJ;AAEDhB,IAAAA,KAAK,EAAE,SAAS8C,QAAT,GAAoB;AACzB,YAAMD,KAAK,CAAC,wCAAD,CAAX;AACD;AACD;;;;AALC,GA7BsB,EAsCtB;AACD7B,IAAAA,GAAG,EAAE,MADJ;AAEDhB,IAAAA,KAAK,EAAE,SAAS+C,IAAT,GAAgB;AACrB,YAAMF,KAAK,CAAC,oCAAD,CAAX;AACD;AACD;;;;AALC,GAtCsB,EA+CtB;AACD7B,IAAAA,GAAG,EAAE,OADJ;AAEDhB,IAAAA,KAAK,EAAE,SAASgD,KAAT,GAAiB;AACtB,YAAMH,KAAK,CAAC,qCAAD,CAAX;AACD;AACD;;;;;;;;;;;AALC,GA/CsB,EA+DtB;AACD7B,IAAAA,GAAG,EAAE,SADJ;AAEDhB,IAAAA,KAAK,EAAE,SAASiD,OAAT,CAAiBb,GAAjB,EAAsBC,GAAtB,EAA2BC,IAA3B,EAAiCY,EAAjC,EAAqCX,aAArC,EAAoDC,cAApD,EAAoE;AACzE,WAAKL,EAAL,GAAUe,EAAV;AACA,WAAKd,GAAL,GAAWA,GAAX;AACA,WAAKC,GAAL,GAAWA,GAAX;AACA,WAAKC,IAAL,GAAYA,IAAZ;AACA,WAAKC,aAAL,GAAqBA,aAArB;AACA,WAAKC,cAAL,GAAsBA,cAAtB;AACA,WAAKT,KAAL,GAAaP,WAAW,CAACC,MAAzB;AACD;AACD;;;;AAXC,GA/DsB,EA8EtB;AACDT,IAAAA,GAAG,EAAE,QADJ;AAEDhB,IAAAA,KAAK,EAAE,SAASmD,MAAT,GAAkB;AACvB,aACE,aACA,UAAUC,iBAAV,EAA6B;AAC3BzD,QAAAA,SAAS,CAAC0D,MAAD,EAASD,iBAAT,CAAT;;AAEA,iBAASC,MAAT,GAAkB;AAChBhD,UAAAA,eAAe,CAAC,IAAD,EAAOgD,MAAP,CAAf;;AAEA,iBAAOrE,0BAA0B,CAAC,IAAD,EAAOK,eAAe,CAACgE,MAAD,CAAf,CAAwBC,KAAxB,CAA8B,IAA9B,EAAoCC,SAApC,CAAP,CAAjC;AACD;;AAED,eAAOF,MAAP;AACD,OAVD,CAUE,KAAKvE,WAVP,CAFF;AAcD;AACD;;;;;;;AAlBC,GA9EsB,EAuGtB;AACDkC,IAAAA,GAAG,EAAE,WADJ;AAEDhB,IAAAA,KAAK,EAAE,SAASwD,SAAT,CAAmBxD,KAAnB,EAA0ByD,QAA1B,EAAoC;AACzC,UAAIC,SAAJ;AACA,UAAIC,GAAJ,CAFyC,CAEhC;;AAET,UAAIF,QAAJ,EAAc;AACZC,QAAAA,SAAS,GAAG,KAAK5B,GAAL,CAAS8B,eAAT,EAAZ;;AAEA,YAAIF,SAAS,CAAC,CAAD,CAAT,GAAeA,SAAS,CAAC,CAAD,CAA5B,EAAiC;AAC/BC,UAAAA,GAAG,GAAGD,SAAS,CAAC,CAAD,CAAf;AACAA,UAAAA,SAAS,CAAC,CAAD,CAAT,GAAeA,SAAS,CAAC,CAAD,CAAxB;AACAA,UAAAA,SAAS,CAAC,CAAD,CAAT,GAAeC,GAAf;AACD;;AAED,YAAID,SAAS,CAAC,CAAD,CAAT,GAAeA,SAAS,CAAC,CAAD,CAA5B,EAAiC;AAC/BC,UAAAA,GAAG,GAAGD,SAAS,CAAC,CAAD,CAAf;AACAA,UAAAA,SAAS,CAAC,CAAD,CAAT,GAAeA,SAAS,CAAC,CAAD,CAAxB;AACAA,UAAAA,SAAS,CAAC,CAAD,CAAT,GAAeC,GAAf;AACD;AACF,OAdD,MAcO;AACLD,QAAAA,SAAS,GAAG,CAAC,KAAKtB,GAAN,EAAW,KAAKC,GAAhB,EAAqB,IAArB,EAA2B,IAA3B,CAAZ;AACD;;AAED,WAAKP,GAAL,CAAS+B,iBAAT,CAA2BH,SAAS,CAAC,CAAD,CAApC,EAAyCA,SAAS,CAAC,CAAD,CAAlD,EAAuD1D,KAAvD,EAA8D0D,SAAS,CAAC,CAAD,CAAvE,EAA4EA,SAAS,CAAC,CAAD,CAArF,EAA0F,MAA1F;AACD;AACD;;;;;;;AA1BC,GAvGsB,EAwItB;AACD1C,IAAAA,GAAG,EAAE,cADJ;AAEDhB,IAAAA,KAAK,EAAE,SAAS8D,YAAT,CAAsBC,eAAtB,EAAuCC,KAAvC,EAA8C;AACnD,UAAI,KAAKjC,KAAL,KAAeP,WAAW,CAACC,MAA/B,EAAuC;AACrC;AACD;;AAED,WAAKK,GAAL,CAASmC,IAAT,CAAcC,cAAd,CAA6B,IAAI9C,UAAJ,CAAe,KAAKgB,GAApB,EAAyB,KAAKC,GAA9B,CAA7B;AACA,WAAKN,KAAL,GAAaP,WAAW,CAACE,OAAzB,CANmD,CAMjB;AAClC;;AAEA,UAAI,KAAKyC,gBAAL,EAAJ,EAA6B;AAC3B,YAAIC,uBAAuB,GAAG,OAAOL,eAAP,KAA2B,QAA3B,GAAsCA,eAAtC,GAAwD1C,SAAS,CAAC,KAAKkB,aAAN,CAA/F;AACA,aAAKO,QAAL,CAAcsB,uBAAd;AACD;;AAED,WAAKrB,IAAL,CAAUiB,KAAV;AACA,WAAKhC,OAAL,GAAe,IAAf;AACA,WAAKqC,KAAL,GAhBmD,CAgBrC;;AAEd,WAAKvC,GAAL,CAASmC,IAAT,CAAcK,MAAd;AACA,WAAKxC,GAAL,CAASyC,QAAT,CAAkB,mBAAlB,EAAuC,KAAKnC,GAA5C,EAAiD,KAAKC,GAAtD;AACD;AACD;;;;;;;;AAvBC,GAxIsB,EAuKtB;AACDrB,IAAAA,GAAG,EAAE,eADJ;AAEDhB,IAAAA,KAAK,EAAE,SAASwE,aAAT,CAAuBC,oBAAvB,EAA6ChB,QAA7C,EAAuDiB,QAAvD,EAAiE;AACtE,UAAIC,KAAK,GAAG,IAAZ;;AAEA,UAAIC,GAAJ;;AAEA,UAAIF,QAAJ,EAAc;AACZ,YAAIG,qBAAqB,GAAG,KAAK3C,cAAjC;;AAEA,aAAKA,cAAL,GAAsB,UAAUS,MAAV,EAAkB;AACtC,cAAIkC,qBAAJ,EAA2B;AACzBA,YAAAA,qBAAqB,CAAClC,MAAD,CAArB;AACD;;AAED+B,UAAAA,QAAQ,CAAC/B,MAAD,CAAR;;AAEAgC,UAAAA,KAAK,CAAC7C,GAAN,CAAUmC,IAAV,CAAeK,MAAf;AACD,SARD;AASD;;AAED,UAAI,KAAKQ,SAAL,EAAJ,EAAsB;AACpB;AACD;;AAED,UAAI,KAAK/C,KAAL,KAAeP,WAAW,CAACC,MAA/B,EAAuC;AACrC,aAAKK,GAAL,CAASiD,gBAAT,CAA0B,YAAY;AACpCJ,UAAAA,KAAK,CAACjC,cAAN,CAAqB,IAArB;AACD,SAFD;;AAIA;AACD;;AAED,UAAI,KAAKX,KAAL,KAAeP,WAAW,CAACE,OAA/B,EAAwC;AACtC,YAAI+C,oBAAJ,EAA0B;AACxB,eAAKO,aAAL;AACA,eAAKlD,GAAL,CAASmC,IAAT,CAAcK,MAAd;AACA;AACD;;AAED,YAAItE,KAAK,GAAG,KAAK4C,QAAL,EAAZ;;AAEA,YAAI,KAAKd,GAAL,CAASmD,WAAT,GAAuBC,cAA3B,EAA2C;AACzC;AACAN,UAAAA,GAAG,GAAG,CAAC,CAAC,OAAO5E,KAAP,KAAiB,QAAjB,GAA4BmF,MAAM,CAACpG,SAAP,CAAiBqG,IAAjB,CAAsBlG,IAAtB,CAA2Bc,KAAK,IAAI,EAApC,CAA5B,GAAsEA,KAAvE,CAAD,CAAN;AACD,SAHD,MAGO;AACL4E,UAAAA,GAAG,GAAG,CAAC,CAAC5E,KAAD,CAAD,CAAN;AACD;;AAED,aAAK+B,KAAL,GAAaP,WAAW,CAACG,OAAzB;AACA,aAAK6B,SAAL,CAAeoB,GAAf,EAAoBnB,QAApB;;AAEA,YAAI,KAAK3B,GAAL,CAASuD,gBAAT,CAA0B,KAAK7C,cAA/B,CAAJ,EAAoD;AAClD,eAAKV,GAAL,CAASwD,WAAT,CAAqB,mBAArB,EAA0C,UAAU3C,MAAV,EAAkB;AAC1DgC,YAAAA,KAAK,CAAC5C,KAAN,GAAcP,WAAW,CAACI,QAA1B;;AAEA+C,YAAAA,KAAK,CAACY,aAAN,CAAoB5C,MAApB;AACD,WAJD;AAKD,SAND,MAMO;AACL,eAAKZ,KAAL,GAAaP,WAAW,CAACI,QAAzB;AACA,eAAK2D,aAAL,CAAmB,IAAnB;AACD;AACF;AACF;AACD;;;;AAhEC,GAvKsB,EA2OtB;AACDvE,IAAAA,GAAG,EAAE,eADJ;AAEDhB,IAAAA,KAAK,EAAE,SAASgF,aAAT,GAAyB;AAC9B,WAAKjD,KAAL,GAAaP,WAAW,CAACI,QAAzB;AACA,WAAK2D,aAAL;AACD;AACD;;;;;;AANC,GA3OsB,EAuPtB;AACDvE,IAAAA,GAAG,EAAE,eADJ;AAEDhB,IAAAA,KAAK,EAAE,SAASuF,aAAT,CAAuB5C,MAAvB,EAA+B;AACpC,UAAI,KAAKZ,KAAL,KAAeP,WAAW,CAACI,QAA/B,EAAyC;AACvC;AACD,OAHmC,CAGlC;;;AAGF,UAAIe,MAAM,KAAK,KAAX,IAAoB,KAAKH,cAAL,CAAoBgD,YAApB,KAAqC,IAA7D,EAAmE;AACjE,aAAK1D,GAAL,CAAS2D,UAAT,CAAoB,KAAKrD,GAAzB,EAA8B,KAAKC,GAAnC;AACA,aAAKgC,KAAL;AACA,aAAKtC,KAAL,GAAaP,WAAW,CAACE,OAAzB;;AAEA,aAAKgB,cAAL,CAAoB,KAApB;AACD,OAND,MAMO;AACL,aAAKM,KAAL;AACA,aAAKhB,OAAL,GAAe,KAAf;AACA,aAAKC,aAAL,GAAqB,KAArB;AACA,aAAKF,KAAL,GAAaP,WAAW,CAACC,MAAzB;;AAEA,aAAKiB,cAAL,CAAoB,IAApB;AACD;AACF;AACD;;;;;AAvBC,GAvPsB,EAmRtB;AACD1B,IAAAA,GAAG,EAAE,oBADJ;AAEDhB,IAAAA,KAAK,EAAE,SAAS0F,kBAAT,GAA8B;AACnC,WAAKzD,aAAL,GAAqB,IAArB;AACD;AACD;;;;;;AALC,GAnRsB,EA8RtB;AACDjB,IAAAA,GAAG,EAAE,kBADJ;AAEDhB,IAAAA,KAAK,EAAE,SAASmE,gBAAT,GAA4B;AACjC,aAAO,KAAKlC,aAAZ;AACD;AACD;;;;AALC,GA9RsB,EAuStB;AACDjB,IAAAA,GAAG,EAAE,UADJ;AAEDhB,IAAAA,KAAK,EAAE,SAAS2F,QAAT,GAAoB;AACzB,aAAO,KAAK3D,OAAZ;AACD;AACD;;;;AALC,GAvSsB,EAgTtB;AACDhB,IAAAA,GAAG,EAAE,WADJ;AAEDhB,IAAAA,KAAK,EAAE,SAAS8E,SAAT,GAAqB;AAC1B,aAAO,KAAK/C,KAAL,KAAeP,WAAW,CAACG,OAAlC;AACD;AACD;;;;;;AALC,GAhTsB,EA2TtB;AACDX,IAAAA,GAAG,EAAE,0BADJ;AAEDhB,IAAAA,KAAK,EAAE,SAAS4F,wBAAT,GAAoC;AACzC,UAAIC,aAAa,GAAG,KAAKC,kBAAL,EAApB;;AAEA,cAAQD,aAAR;AACE,aAAK,OAAL;AACE,iBAAO,gBAAP;;AAEF,aAAK,MAAL;AACE,iBAAO,eAAP;;AAEF,aAAK,QAAL;AACE,iBAAO,iBAAP;;AAEF,aAAK,qBAAL;AACE,iBAAO,8BAAP;;AAEF,aAAK,oBAAL;AACE,iBAAO,6BAAP;;AAEF,aAAK,KAAL;AACE,iBAAO,cAAP;;AAEF,aAAK,kBAAL;AACE,iBAAO,2BAAP;;AAEF,aAAK,iBAAL;AACE,iBAAO,0BAAP;;AAEF;AACE,iBAAO,iBAAP;AA1BJ;AA4BD;AACD;;;;;;AAlCC,GA3TsB,EAmWtB;AACD7E,IAAAA,GAAG,EAAE,eADJ;AAEDhB,IAAAA,KAAK,EAAE,SAAS+F,aAAT,GAAyB;AAC9B,aAAO,KAAKjE,GAAL,CAASkE,OAAT,CAAiB,KAAK5D,GAAtB,EAA2B,KAAKC,GAAhC,EAAqC,IAArC,CAAP;AACD;AACD;;;;;;AALC,GAnWsB,EA8WtB;AACDrB,IAAAA,GAAG,EAAE,oBADJ;AAEDhB,IAAAA,KAAK,EAAE,SAAS8F,kBAAT,GAA8B;AACnC,UAAIG,SAAS,GAAG,KAAKnE,GAAL,CAASoE,SAAT,EAAhB;AACA,UAAIC,OAAO,GAAG,EAAd;;AAEA,UAAI,KAAK/D,GAAL,GAAW,KAAKN,GAAL,CAASmD,WAAT,GAAuBmB,YAAtC,EAAoD;AAClD,YAAI,KAAK/D,GAAL,GAAW,KAAKP,GAAL,CAASmD,WAAT,GAAuBoB,gBAAtC,EAAwD;AACtDF,UAAAA,OAAO,GAAG,iBAAV;AACD,SAFD,MAEO;AACLA,UAAAA,OAAO,GAAG,KAAV;AACD;AACF,OAND,MAMO,IAAI,KAAKrE,GAAL,CAASmD,WAAT,GAAuBqB,eAAvB,IAA0C,KAAKlE,GAAL,IAAY6D,SAAS,GAAG,KAAKnE,GAAL,CAASmD,WAAT,GAAuBqB,eAA7F,EAA8G;AACnH,YAAI,KAAKjE,GAAL,GAAW,KAAKP,GAAL,CAASmD,WAAT,GAAuBoB,gBAAtC,EAAwD;AACtDF,UAAAA,OAAO,GAAG,oBAAV;AACD,SAFD,MAEO;AACLA,UAAAA,OAAO,GAAG,QAAV;AACD;AACF,OANM,MAMA,IAAI,KAAK9D,GAAL,GAAW,KAAKP,GAAL,CAASmD,WAAT,GAAuBoB,gBAAtC,EAAwD;AAC7DF,QAAAA,OAAO,GAAG,MAAV;AACD;;AAED,aAAOA,OAAP;AACD;AAvBA,GA9WsB,CAAb,CAAZ;;AAwYA,SAAOtE,UAAP;AACD,CA7eD,EAFA;;AAifAP,KAAK,CAACO,UAAD,EAAaN,kBAAb,CAAL;AACA,eAAeM,UAAf","sourcesContent":["import \"core-js/modules/es.symbol\";\nimport \"core-js/modules/es.symbol.description\";\nimport \"core-js/modules/es.symbol.iterator\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.object.get-prototype-of\";\nimport \"core-js/modules/es.object.set-prototype-of\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/es.string.trim\";\nimport \"core-js/modules/web.dom-collections.iterator\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { CellCoords } from './../3rdparty/walkontable/src';\nimport { stringify } from './../helpers/mixed';\nimport { mixin } from './../helpers/object';\nimport hooksRefRegisterer from './../mixins/hooksRefRegisterer';\nexport var EditorState = {\n  VIRGIN: 'STATE_VIRGIN',\n  // before editing\n  EDITING: 'STATE_EDITING',\n  WAITING: 'STATE_WAITING',\n  // waiting for async validation\n  FINISHED: 'STATE_FINISHED'\n};\n/**\n * @util\n * @class BaseEditor\n */\n\nvar BaseEditor =\n/*#__PURE__*/\nfunction () {\n  function BaseEditor(instance) {\n    _classCallCheck(this, BaseEditor);\n\n    /**\n     * A reference to the source instance of the Handsontable.\n     *\n     * @type {Handsontable}\n     */\n    this.hot = instance;\n    /**\n     * A reference to the source instance of the Handsontable.\n     * @deprecated\n     *\n     * @type {Handsontable}\n     */\n\n    this.instance = instance;\n    /**\n     * Editor's state.\n     *\n     * @type {String}\n     */\n\n    this.state = EditorState.VIRGIN;\n    /**\n     * Flag to store information about editor's opening status.\n     * @private\n     *\n     * @type {Boolean}\n     */\n\n    this._opened = false;\n    /**\n     * Defines the editor's editing mode. When false, then an editor works in fast editing mode.\n     * @private\n     *\n     * @type {Boolean}\n     */\n\n    this._fullEditMode = false;\n    /**\n     * Callback to call after closing editor.\n     *\n     * @type {Function}\n     */\n\n    this._closeCallback = null;\n    /**\n     * Currently rendered cell's TD element.\n     *\n     * @type {HTMLTableCellElement}\n     */\n\n    this.TD = null;\n    /**\n     * Visual row index.\n     *\n     * @type {Number}\n     */\n\n    this.row = null;\n    /**\n     * Visual column index.\n     *\n     * @type {Number}\n     */\n\n    this.col = null;\n    /**\n     * Column property name or a column index, if datasource is an array of arrays.\n     *\n     * @type {Number|String}\n     */\n\n    this.prop = null;\n    /**\n     * Original cell's value.\n     *\n     * @type {*}\n     */\n\n    this.originalValue = null;\n    /**\n     * Object containing the cell's properties.\n     *\n     * @type {Object}\n     */\n\n    this.cellProperties = null;\n    this.init();\n  }\n  /**\n   * Fires callback after closing editor.\n   *\n   * @private\n   * @param {Boolean} result\n   */\n\n\n  _createClass(BaseEditor, [{\n    key: \"_fireCallbacks\",\n    value: function _fireCallbacks(result) {\n      if (this._closeCallback) {\n        this._closeCallback(result);\n\n        this._closeCallback = null;\n      }\n    }\n    /**\n     * Initializes an editor's intance.\n     */\n\n  }, {\n    key: \"init\",\n    value: function init() {}\n    /**\n     * Required method to get current value from editable element.\n     */\n\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      throw Error('Editor getValue() method unimplemented');\n    }\n    /**\n     * Required method to set new value into editable element.\n     */\n\n  }, {\n    key: \"setValue\",\n    value: function setValue() {\n      throw Error('Editor setValue() method unimplemented');\n    }\n    /**\n     * Required method to open editor.\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      throw Error('Editor open() method unimplemented');\n    }\n    /**\n     * Required method to close editor.\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      throw Error('Editor close() method unimplemented');\n    }\n    /**\n     * Prepares editor's meta data.\n     *\n     * @param {Number} row\n     * @param {Number} col\n     * @param {Number|String} prop\n     * @param {HTMLTableCellElement} td\n     * @param {*} originalValue\n     * @param {Object} cellProperties\n     */\n\n  }, {\n    key: \"prepare\",\n    value: function prepare(row, col, prop, td, originalValue, cellProperties) {\n      this.TD = td;\n      this.row = row;\n      this.col = col;\n      this.prop = prop;\n      this.originalValue = originalValue;\n      this.cellProperties = cellProperties;\n      this.state = EditorState.VIRGIN;\n    }\n    /**\n     * Fallback method to provide extendable editors in ES5.\n     */\n\n  }, {\n    key: \"extend\",\n    value: function extend() {\n      return (\n        /*#__PURE__*/\n        function (_this$constructor) {\n          _inherits(Editor, _this$constructor);\n\n          function Editor() {\n            _classCallCheck(this, Editor);\n\n            return _possibleConstructorReturn(this, _getPrototypeOf(Editor).apply(this, arguments));\n          }\n\n          return Editor;\n        }(this.constructor)\n      );\n    }\n    /**\n     * Saves value from editor into data storage.\n     *\n     * @param {*} value\n     * @param {Boolean} ctrlDown If true, applies value to each cell in the last selected range.\n     */\n\n  }, {\n    key: \"saveValue\",\n    value: function saveValue(value, ctrlDown) {\n      var selection;\n      var tmp; // if ctrl+enter and multiple cells selected, behave like Excel (finish editing and apply to all cells)\n\n      if (ctrlDown) {\n        selection = this.hot.getSelectedLast();\n\n        if (selection[0] > selection[2]) {\n          tmp = selection[0];\n          selection[0] = selection[2];\n          selection[2] = tmp;\n        }\n\n        if (selection[1] > selection[3]) {\n          tmp = selection[1];\n          selection[1] = selection[3];\n          selection[3] = tmp;\n        }\n      } else {\n        selection = [this.row, this.col, null, null];\n      }\n\n      this.hot.populateFromArray(selection[0], selection[1], value, selection[2], selection[3], 'edit');\n    }\n    /**\n     * Begins editing on a highlighted cell and hides fillHandle corner if was present.\n     *\n     * @param {*} newInitialValue\n     * @param {*} event\n     */\n\n  }, {\n    key: \"beginEditing\",\n    value: function beginEditing(newInitialValue, event) {\n      if (this.state !== EditorState.VIRGIN) {\n        return;\n      }\n\n      this.hot.view.scrollViewport(new CellCoords(this.row, this.col));\n      this.state = EditorState.EDITING; // Set the editor value only in the full edit mode. In other mode the focusable element has to be empty,\n      // otherwise IME (editor for Asia users) doesn't work.\n\n      if (this.isInFullEditMode()) {\n        var stringifiedInitialValue = typeof newInitialValue === 'string' ? newInitialValue : stringify(this.originalValue);\n        this.setValue(stringifiedInitialValue);\n      }\n\n      this.open(event);\n      this._opened = true;\n      this.focus(); // only rerender the selections (FillHandle should disappear when beginediting is triggered)\n\n      this.hot.view.render();\n      this.hot.runHooks('afterBeginEditing', this.row, this.col);\n    }\n    /**\n     * Finishes editing and start saving or restoring process for editing cell or last selected range.\n     *\n     * @param {Boolean} restoreOriginalValue If true, then closes editor without saving value from the editor into a cell.\n     * @param {Boolean} ctrlDown If true, then saveValue will save editor's value to each cell in the last selected range.\n     * @param {Function} callback\n     */\n\n  }, {\n    key: \"finishEditing\",\n    value: function finishEditing(restoreOriginalValue, ctrlDown, callback) {\n      var _this = this;\n\n      var val;\n\n      if (callback) {\n        var previousCloseCallback = this._closeCallback;\n\n        this._closeCallback = function (result) {\n          if (previousCloseCallback) {\n            previousCloseCallback(result);\n          }\n\n          callback(result);\n\n          _this.hot.view.render();\n        };\n      }\n\n      if (this.isWaiting()) {\n        return;\n      }\n\n      if (this.state === EditorState.VIRGIN) {\n        this.hot._registerTimeout(function () {\n          _this._fireCallbacks(true);\n        });\n\n        return;\n      }\n\n      if (this.state === EditorState.EDITING) {\n        if (restoreOriginalValue) {\n          this.cancelChanges();\n          this.hot.view.render();\n          return;\n        }\n\n        var value = this.getValue();\n\n        if (this.hot.getSettings().trimWhitespace) {\n          // We trim only string values\n          val = [[typeof value === 'string' ? String.prototype.trim.call(value || '') : value]];\n        } else {\n          val = [[value]];\n        }\n\n        this.state = EditorState.WAITING;\n        this.saveValue(val, ctrlDown);\n\n        if (this.hot.getCellValidator(this.cellProperties)) {\n          this.hot.addHookOnce('postAfterValidate', function (result) {\n            _this.state = EditorState.FINISHED;\n\n            _this.discardEditor(result);\n          });\n        } else {\n          this.state = EditorState.FINISHED;\n          this.discardEditor(true);\n        }\n      }\n    }\n    /**\n     * Finishes editing without singout saving value.\n     */\n\n  }, {\n    key: \"cancelChanges\",\n    value: function cancelChanges() {\n      this.state = EditorState.FINISHED;\n      this.discardEditor();\n    }\n    /**\n     * Verifies result of validation or closes editor if user's cancelled changes.\n     *\n     * @param {Boolean|undefined} result\n     */\n\n  }, {\n    key: \"discardEditor\",\n    value: function discardEditor(result) {\n      if (this.state !== EditorState.FINISHED) {\n        return;\n      } // validator was defined and failed\n\n\n      if (result === false && this.cellProperties.allowInvalid !== true) {\n        this.hot.selectCell(this.row, this.col);\n        this.focus();\n        this.state = EditorState.EDITING;\n\n        this._fireCallbacks(false);\n      } else {\n        this.close();\n        this._opened = false;\n        this._fullEditMode = false;\n        this.state = EditorState.VIRGIN;\n\n        this._fireCallbacks(true);\n      }\n    }\n    /**\n     * Switch editor into full edit mode. In this state navigation keys don't close editor. This mode is activated\n     * automatically after hit ENTER or F2 key on the cell or while editing cell press F2 key.\n     */\n\n  }, {\n    key: \"enableFullEditMode\",\n    value: function enableFullEditMode() {\n      this._fullEditMode = true;\n    }\n    /**\n     * Checks if editor is in full edit mode.\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isInFullEditMode\",\n    value: function isInFullEditMode() {\n      return this._fullEditMode;\n    }\n    /**\n     * Returns information whether the editor is open.\n     */\n\n  }, {\n    key: \"isOpened\",\n    value: function isOpened() {\n      return this._opened;\n    }\n    /**\n     * Returns information whether the editor is waiting, eg.: for async validation.\n     */\n\n  }, {\n    key: \"isWaiting\",\n    value: function isWaiting() {\n      return this.state === EditorState.WAITING;\n    }\n    /**\n     * Gets className of the edited cell if exist.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"getEditedCellsLayerClass\",\n    value: function getEditedCellsLayerClass() {\n      var editorSection = this.checkEditorSection();\n\n      switch (editorSection) {\n        case 'right':\n          return 'ht_clone_right';\n\n        case 'left':\n          return 'ht_clone_left';\n\n        case 'bottom':\n          return 'ht_clone_bottom';\n\n        case 'bottom-right-corner':\n          return 'ht_clone_bottom_right_corner';\n\n        case 'bottom-left-corner':\n          return 'ht_clone_bottom_left_corner';\n\n        case 'top':\n          return 'ht_clone_top';\n\n        case 'top-right-corner':\n          return 'ht_clone_top_right_corner';\n\n        case 'top-left-corner':\n          return 'ht_clone_top_left_corner';\n\n        default:\n          return 'ht_clone_master';\n      }\n    }\n    /**\n     * Gets HTMLTableCellElement of the edited cell if exist.\n     *\n     * @returns {HTMLTableCellElement|null}\n     */\n\n  }, {\n    key: \"getEditedCell\",\n    value: function getEditedCell() {\n      return this.hot.getCell(this.row, this.col, true);\n    }\n    /**\n     * Returns name of the overlay, where editor is placed.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"checkEditorSection\",\n    value: function checkEditorSection() {\n      var totalRows = this.hot.countRows();\n      var section = '';\n\n      if (this.row < this.hot.getSettings().fixedRowsTop) {\n        if (this.col < this.hot.getSettings().fixedColumnsLeft) {\n          section = 'top-left-corner';\n        } else {\n          section = 'top';\n        }\n      } else if (this.hot.getSettings().fixedRowsBottom && this.row >= totalRows - this.hot.getSettings().fixedRowsBottom) {\n        if (this.col < this.hot.getSettings().fixedColumnsLeft) {\n          section = 'bottom-left-corner';\n        } else {\n          section = 'bottom';\n        }\n      } else if (this.col < this.hot.getSettings().fixedColumnsLeft) {\n        section = 'left';\n      }\n\n      return section;\n    }\n  }]);\n\n  return BaseEditor;\n}();\n\nmixin(BaseEditor, hooksRefRegisterer);\nexport default BaseEditor;"]},"metadata":{},"sourceType":"module"}