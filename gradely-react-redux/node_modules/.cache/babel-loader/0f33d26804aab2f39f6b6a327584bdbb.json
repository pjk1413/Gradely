{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nexport var collection = new Map();\nexport default function staticRegister() {\n  var namespace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'common';\n\n  if (!collection.has(namespace)) {\n    collection.set(namespace, new Map());\n  }\n\n  var subCollection = collection.get(namespace);\n  /**\n   * Register an item to the collection. If the item under the same was exist earlier then this item will be replaced with new one.\n   *\n   * @param {String} name Identification of the item.\n   * @param {*} item Item to save in the collection.\n   */\n\n  function register(name, item) {\n    subCollection.set(name, item);\n  }\n  /**\n   * Retrieve the item from the collection.\n   *\n   * @param {String} name Identification of the item.\n   * @returns {*} Returns item which was saved in the collection.\n   */\n\n\n  function getItem(name) {\n    return subCollection.get(name);\n  }\n  /**\n   * Check if item under specyfied name is exists.\n   *\n   * @param {String} name Identification of the item.\n   * @returns {Boolean} Returns `true` or `false` depends on if element exists in the collection.\n   */\n\n\n  function hasItem(name) {\n    return subCollection.has(name);\n  }\n  /**\n   * Retrieve list of names registered from the collection.\n   *\n   * @returns {Array} Returns an array of strings with all names under which objects are stored.\n   */\n\n\n  function getNames() {\n    return _toConsumableArray(subCollection.keys());\n  }\n  /**\n   * Retrieve all registered values from the collection.\n   *\n   * @returns {Array} Returns an array with all values stored in the collection.\n   */\n\n\n  function getValues() {\n    return _toConsumableArray(subCollection.values());\n  }\n\n  return {\n    register: register,\n    getItem: getItem,\n    hasItem: hasItem,\n    getNames: getNames,\n    getValues: getValues\n  };\n}","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react/node_modules/handsontable/es/utils/staticRegister.js"],"names":["_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","TypeError","iter","Symbol","iterator","Object","prototype","toString","call","Array","from","isArray","i","arr2","length","collection","Map","staticRegister","namespace","arguments","undefined","has","set","subCollection","get","register","name","item","getItem","hasItem","getNames","keys","getValues","values"],"mappings":"AAWA,SAASA,kBAAT,CAA4BC,GAA5B,EAAiC;AAAE,SAAOC,kBAAkB,CAACD,GAAD,CAAlB,IAA2BE,gBAAgB,CAACF,GAAD,CAA3C,IAAoDG,kBAAkB,EAA7E;AAAkF;;AAErH,SAASA,kBAAT,GAA8B;AAAE,QAAM,IAAIC,SAAJ,CAAc,iDAAd,CAAN;AAAyE;;AAEzG,SAASF,gBAAT,CAA0BG,IAA1B,EAAgC;AAAE,MAAIC,MAAM,CAACC,QAAP,IAAmBC,MAAM,CAACH,IAAD,CAAzB,IAAmCG,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BN,IAA/B,MAAyC,oBAAhF,EAAsG,OAAOO,KAAK,CAACC,IAAN,CAAWR,IAAX,CAAP;AAA0B;;AAElK,SAASJ,kBAAT,CAA4BD,GAA5B,EAAiC;AAAE,MAAIY,KAAK,CAACE,OAAN,CAAcd,GAAd,CAAJ,EAAwB;AAAE,SAAK,IAAIe,CAAC,GAAG,CAAR,EAAWC,IAAI,GAAG,IAAIJ,KAAJ,CAAUZ,GAAG,CAACiB,MAAd,CAAvB,EAA8CF,CAAC,GAAGf,GAAG,CAACiB,MAAtD,EAA8DF,CAAC,EAA/D,EAAmE;AAAEC,MAAAA,IAAI,CAACD,CAAD,CAAJ,GAAUf,GAAG,CAACe,CAAD,CAAb;AAAmB;;AAAC,WAAOC,IAAP;AAAc;AAAE;;AAEtK,OAAO,IAAIE,UAAU,GAAG,IAAIC,GAAJ,EAAjB;AACP,eAAe,SAASC,cAAT,GAA0B;AACvC,MAAIC,SAAS,GAAGC,SAAS,CAACL,MAAV,GAAmB,CAAnB,IAAwBK,SAAS,CAAC,CAAD,CAAT,KAAiBC,SAAzC,GAAqDD,SAAS,CAAC,CAAD,CAA9D,GAAoE,QAApF;;AAEA,MAAI,CAACJ,UAAU,CAACM,GAAX,CAAeH,SAAf,CAAL,EAAgC;AAC9BH,IAAAA,UAAU,CAACO,GAAX,CAAeJ,SAAf,EAA0B,IAAIF,GAAJ,EAA1B;AACD;;AAED,MAAIO,aAAa,GAAGR,UAAU,CAACS,GAAX,CAAeN,SAAf,CAApB;AACA;;;;;;;AAOA,WAASO,QAAT,CAAkBC,IAAlB,EAAwBC,IAAxB,EAA8B;AAC5BJ,IAAAA,aAAa,CAACD,GAAd,CAAkBI,IAAlB,EAAwBC,IAAxB;AACD;AACD;;;;;;;;AAQA,WAASC,OAAT,CAAiBF,IAAjB,EAAuB;AACrB,WAAOH,aAAa,CAACC,GAAd,CAAkBE,IAAlB,CAAP;AACD;AACD;;;;;;;;AAQA,WAASG,OAAT,CAAiBH,IAAjB,EAAuB;AACrB,WAAOH,aAAa,CAACF,GAAd,CAAkBK,IAAlB,CAAP;AACD;AACD;;;;;;;AAOA,WAASI,QAAT,GAAoB;AAClB,WAAOlC,kBAAkB,CAAC2B,aAAa,CAACQ,IAAd,EAAD,CAAzB;AACD;AACD;;;;;;;AAOA,WAASC,SAAT,GAAqB;AACnB,WAAOpC,kBAAkB,CAAC2B,aAAa,CAACU,MAAd,EAAD,CAAzB;AACD;;AAED,SAAO;AACLR,IAAAA,QAAQ,EAAEA,QADL;AAELG,IAAAA,OAAO,EAAEA,OAFJ;AAGLC,IAAAA,OAAO,EAAEA,OAHJ;AAILC,IAAAA,QAAQ,EAAEA,QAJL;AAKLE,IAAAA,SAAS,EAAEA;AALN,GAAP;AAOD","sourcesContent":["import \"core-js/modules/es.symbol\";\nimport \"core-js/modules/es.symbol.description\";\nimport \"core-js/modules/es.symbol.iterator\";\nimport \"core-js/modules/es.array.from\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.map\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.regexp.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/web.dom-collections.iterator\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nexport var collection = new Map();\nexport default function staticRegister() {\n  var namespace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'common';\n\n  if (!collection.has(namespace)) {\n    collection.set(namespace, new Map());\n  }\n\n  var subCollection = collection.get(namespace);\n  /**\n   * Register an item to the collection. If the item under the same was exist earlier then this item will be replaced with new one.\n   *\n   * @param {String} name Identification of the item.\n   * @param {*} item Item to save in the collection.\n   */\n\n  function register(name, item) {\n    subCollection.set(name, item);\n  }\n  /**\n   * Retrieve the item from the collection.\n   *\n   * @param {String} name Identification of the item.\n   * @returns {*} Returns item which was saved in the collection.\n   */\n\n\n  function getItem(name) {\n    return subCollection.get(name);\n  }\n  /**\n   * Check if item under specyfied name is exists.\n   *\n   * @param {String} name Identification of the item.\n   * @returns {Boolean} Returns `true` or `false` depends on if element exists in the collection.\n   */\n\n\n  function hasItem(name) {\n    return subCollection.has(name);\n  }\n  /**\n   * Retrieve list of names registered from the collection.\n   *\n   * @returns {Array} Returns an array of strings with all names under which objects are stored.\n   */\n\n\n  function getNames() {\n    return _toConsumableArray(subCollection.keys());\n  }\n  /**\n   * Retrieve all registered values from the collection.\n   *\n   * @returns {Array} Returns an array with all values stored in the collection.\n   */\n\n\n  function getValues() {\n    return _toConsumableArray(subCollection.values());\n  }\n\n  return {\n    register: register,\n    getItem: getItem,\n    hasItem: hasItem,\n    getNames: getNames,\n    getValues: getValues\n  };\n}"]},"metadata":{},"sourceType":"module"}