{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport { getScrollableElement, getScrollbarWidth } from './../../../helpers/dom/element';\nimport { arrayEach } from './../../../helpers/array';\nimport { isKey } from './../../../helpers/unicode';\nimport { isChrome } from './../../../helpers/browser';\nimport EventManager from './../../../eventManager';\nimport Overlay from './overlay/_base';\n/**\n * @class Overlays\n */\n\nvar Overlays = /*#__PURE__*/function () {\n  /**\n   * @param {Walkontable} wotInstance\n   */\n  function Overlays(wotInstance) {\n    _classCallCheck(this, Overlays);\n    /**\n     * Walkontable instance's reference.\n     *\n     * @private\n     * @type {Walkontable}\n     */\n\n\n    this.wot = wotInstance;\n    var _this$wot = this.wot,\n        rootDocument = _this$wot.rootDocument,\n        rootWindow = _this$wot.rootWindow,\n        wtTable = _this$wot.wtTable;\n    /**\n     * Sometimes `line-height` might be set to 'normal'. In that case, a default `font-size` should be multiplied by roughly 1.2.\n     * https://developer.mozilla.org/pl/docs/Web/CSS/line-height#Values\n     */\n\n    var BODY_LINE_HEIGHT = parseInt(rootWindow.getComputedStyle(rootDocument.body).lineHeight, 10);\n    var FALLBACK_BODY_LINE_HEIGHT = parseInt(rootWindow.getComputedStyle(rootDocument.body).fontSize, 10) * 1.2; // legacy support\n\n    this.instance = this.wot;\n    this.eventManager = new EventManager(this.wot);\n    this.scrollbarSize = getScrollbarWidth(rootDocument);\n    this.wot.update('scrollbarWidth', this.scrollbarSize);\n    this.wot.update('scrollbarHeight', this.scrollbarSize);\n    var isOverflowHidden = rootWindow.getComputedStyle(wtTable.wtRootElement.parentNode).getPropertyValue('overflow') === 'hidden';\n    this.scrollableElement = isOverflowHidden ? wtTable.holder : getScrollableElement(wtTable.TABLE);\n    this.topOverlay = void 0;\n    this.bottomOverlay = void 0;\n    this.leftOverlay = void 0;\n    this.topLeftCornerOverlay = void 0;\n    this.bottomLeftCornerOverlay = void 0;\n    this.prepareOverlays();\n    this.hasScrollbarBottom = false;\n    this.hasScrollbarRight = false;\n    this.destroyed = false;\n    this.keyPressed = false;\n    this.spreaderLastSize = {\n      width: null,\n      height: null\n    };\n    this.verticalScrolling = false;\n    this.horizontalScrolling = false;\n    this.browserLineHeight = BODY_LINE_HEIGHT || FALLBACK_BODY_LINE_HEIGHT;\n    this.registerListeners();\n    this.lastScrollX = rootWindow.scrollX;\n    this.lastScrollY = rootWindow.scrollY;\n  }\n  /**\n   * Prepare overlays based on user settings.\n   *\n   * @returns {Boolean} Returns `true` if changes applied to overlay needs scroll synchronization.\n   */\n\n\n  _createClass(Overlays, [{\n    key: \"prepareOverlays\",\n    value: function prepareOverlays() {\n      var syncScroll = false;\n\n      if (this.topOverlay) {\n        syncScroll = this.topOverlay.updateStateOfRendering() || syncScroll;\n      } else {\n        this.topOverlay = Overlay.createOverlay(Overlay.CLONE_TOP, this.wot);\n      }\n\n      if (!Overlay.hasOverlay(Overlay.CLONE_BOTTOM)) {\n        this.bottomOverlay = {\n          needFullRender: false,\n          updateStateOfRendering: function updateStateOfRendering() {\n            return false;\n          }\n        };\n      }\n\n      if (!Overlay.hasOverlay(Overlay.CLONE_BOTTOM_LEFT_CORNER)) {\n        this.bottomLeftCornerOverlay = {\n          needFullRender: false,\n          updateStateOfRendering: function updateStateOfRendering() {\n            return false;\n          }\n        };\n      }\n\n      if (this.bottomOverlay) {\n        syncScroll = this.bottomOverlay.updateStateOfRendering() || syncScroll;\n      } else {\n        this.bottomOverlay = Overlay.createOverlay(Overlay.CLONE_BOTTOM, this.wot);\n      }\n\n      if (this.leftOverlay) {\n        syncScroll = this.leftOverlay.updateStateOfRendering() || syncScroll;\n      } else {\n        this.leftOverlay = Overlay.createOverlay(Overlay.CLONE_LEFT, this.wot);\n      }\n\n      if (this.topOverlay.needFullRender && this.leftOverlay.needFullRender) {\n        if (this.topLeftCornerOverlay) {\n          syncScroll = this.topLeftCornerOverlay.updateStateOfRendering() || syncScroll;\n        } else {\n          this.topLeftCornerOverlay = Overlay.createOverlay(Overlay.CLONE_TOP_LEFT_CORNER, this.wot);\n        }\n      }\n\n      if (this.bottomOverlay.needFullRender && this.leftOverlay.needFullRender) {\n        if (this.bottomLeftCornerOverlay) {\n          syncScroll = this.bottomLeftCornerOverlay.updateStateOfRendering() || syncScroll;\n        } else {\n          this.bottomLeftCornerOverlay = Overlay.createOverlay(Overlay.CLONE_BOTTOM_LEFT_CORNER, this.wot);\n        }\n      }\n\n      if (this.wot.getSetting('debug') && !this.debug) {\n        this.debug = Overlay.createOverlay(Overlay.CLONE_DEBUG, this.wot);\n      }\n\n      return syncScroll;\n    }\n    /**\n     * Refresh and redraw table\n     */\n\n  }, {\n    key: \"refreshAll\",\n    value: function refreshAll() {\n      if (!this.wot.drawn) {\n        return;\n      }\n\n      if (!this.wot.wtTable.holder.parentNode) {\n        // Walkontable was detached from DOM, but this handler was not removed\n        this.destroy();\n        return;\n      }\n\n      this.wot.draw(true);\n\n      if (this.verticalScrolling) {\n        this.leftOverlay.onScroll();\n      }\n\n      if (this.horizontalScrolling) {\n        this.topOverlay.onScroll();\n      }\n\n      this.verticalScrolling = false;\n      this.horizontalScrolling = false;\n    }\n    /**\n     * Register all necessary event listeners.\n     */\n\n  }, {\n    key: \"registerListeners\",\n    value: function registerListeners() {\n      var _this = this;\n\n      var _this$wot2 = this.wot,\n          rootDocument = _this$wot2.rootDocument,\n          rootWindow = _this$wot2.rootWindow;\n      var topOverlayScrollableElement = this.topOverlay.mainTableScrollableElement;\n      var leftOverlayScrollableElement = this.leftOverlay.mainTableScrollableElement;\n      this.eventManager.addEventListener(rootDocument.documentElement, 'keydown', function (event) {\n        return _this.onKeyDown(event);\n      });\n      this.eventManager.addEventListener(rootDocument.documentElement, 'keyup', function () {\n        return _this.onKeyUp();\n      });\n      this.eventManager.addEventListener(rootDocument, 'visibilitychange', function () {\n        return _this.onKeyUp();\n      });\n      this.eventManager.addEventListener(topOverlayScrollableElement, 'scroll', function (event) {\n        return _this.onTableScroll(event);\n      }, {\n        passive: true\n      });\n\n      if (topOverlayScrollableElement !== leftOverlayScrollableElement) {\n        this.eventManager.addEventListener(leftOverlayScrollableElement, 'scroll', function (event) {\n          return _this.onTableScroll(event);\n        }, {\n          passive: true\n        });\n      }\n\n      var isHighPixelRatio = rootWindow.devicePixelRatio && rootWindow.devicePixelRatio > 1;\n      var isScrollOnWindow = this.scrollableElement === rootWindow;\n      var preventWheel = this.wot.wtSettings.getSetting('preventWheel');\n      var wheelEventOptions = {\n        passive: isScrollOnWindow\n      };\n\n      if (preventWheel || isHighPixelRatio || !isChrome()) {\n        this.eventManager.addEventListener(this.wot.wtTable.wtRootElement, 'wheel', function (event) {\n          return _this.onCloneWheel(event, preventWheel);\n        }, wheelEventOptions);\n      }\n\n      var overlays = [this.topOverlay, this.bottomOverlay, this.leftOverlay, this.topLeftCornerOverlay, this.bottomLeftCornerOverlay];\n      overlays.forEach(function (overlay) {\n        if (overlay && overlay.needFullRender) {\n          var holder = overlay.clone.wtTable.holder;\n\n          _this.eventManager.addEventListener(holder, 'wheel', function (event) {\n            return _this.onCloneWheel(event, preventWheel);\n          }, wheelEventOptions);\n        }\n      });\n      var resizeTimeout;\n      this.eventManager.addEventListener(rootWindow, 'resize', function () {\n        clearTimeout(resizeTimeout);\n        resizeTimeout = setTimeout(function () {\n          _this.wot.getSetting('onWindowResize');\n        }, 200);\n      });\n    }\n    /**\n     * Deregister all previously registered listeners.\n     */\n\n  }, {\n    key: \"deregisterListeners\",\n    value: function deregisterListeners() {\n      this.eventManager.clearEvents(true);\n    }\n    /**\n     * Scroll listener\n     *\n     * @param {Event} event\n     */\n\n  }, {\n    key: \"onTableScroll\",\n    value: function onTableScroll(event) {\n      // There was if statement which controlled flow of this function. It avoided the execution of the next lines\n      // on mobile devices. It was changed. Broader description of this case is included within issue #4856.\n      var rootWindow = this.wot.rootWindow;\n      var masterHorizontal = this.leftOverlay.mainTableScrollableElement;\n      var masterVertical = this.topOverlay.mainTableScrollableElement;\n      var target = event.target; // For key press, sync only master -> overlay position because while pressing Walkontable.render is triggered\n      // by hot.refreshBorder\n\n      if (this.keyPressed) {\n        if (masterVertical !== rootWindow && target !== rootWindow && !event.target.contains(masterVertical) || masterHorizontal !== rootWindow && target !== rootWindow && !event.target.contains(masterHorizontal)) {\n          return;\n        }\n      }\n\n      this.syncScrollPositions(event);\n    }\n    /**\n     * Wheel listener for cloned overlays.\n     *\n     * @param {Event} event\n     */\n\n  }, {\n    key: \"onCloneWheel\",\n    value: function onCloneWheel(event, preventDefault) {\n      var rootWindow = this.wot.rootWindow; // There was if statement which controlled flow of this function. It avoided the execution of the next lines\n      // on mobile devices. It was changed. Broader description of this case is included within issue #4856.\n\n      var masterHorizontal = this.leftOverlay.mainTableScrollableElement;\n      var masterVertical = this.topOverlay.mainTableScrollableElement;\n      var target = event.target; // For key press, sync only master -> overlay position because while pressing Walkontable.render is triggered\n      // by hot.refreshBorder\n\n      var shouldNotWheelVertically = masterVertical !== rootWindow && target !== rootWindow && !target.contains(masterVertical);\n      var shouldNotWheelHorizontally = masterHorizontal !== rootWindow && target !== rootWindow && !target.contains(masterHorizontal);\n\n      if (this.keyPressed && (shouldNotWheelVertically || shouldNotWheelHorizontally)) {\n        return;\n      }\n\n      var isScrollPossible = this.translateMouseWheelToScroll(event);\n\n      if (preventDefault || this.scrollableElement !== rootWindow && isScrollPossible) {\n        event.preventDefault();\n      }\n    }\n    /**\n     * Key down listener\n     */\n\n  }, {\n    key: \"onKeyDown\",\n    value: function onKeyDown(event) {\n      this.keyPressed = isKey(event.keyCode, 'ARROW_UP|ARROW_RIGHT|ARROW_DOWN|ARROW_LEFT');\n    }\n    /**\n     * Key up listener\n     */\n\n  }, {\n    key: \"onKeyUp\",\n    value: function onKeyUp() {\n      this.keyPressed = false;\n    }\n    /**\n     * Translate wheel event into scroll event and sync scroll overlays position\n     *\n     * @private\n     * @param {Event} event\n     */\n\n  }, {\n    key: \"translateMouseWheelToScroll\",\n    value: function translateMouseWheelToScroll(event) {\n      var browserLineHeight = this.browserLineHeight;\n      var deltaY = isNaN(event.deltaY) ? -1 * event.wheelDeltaY : event.deltaY;\n      var deltaX = isNaN(event.deltaX) ? -1 * event.wheelDeltaX : event.deltaX;\n\n      if (event.deltaMode === 1) {\n        deltaX += deltaX * browserLineHeight;\n        deltaY += deltaY * browserLineHeight;\n      }\n\n      var isScrollVerticallyPossible = this.scrollVertically(deltaY);\n      var isScrollHorizontallyPossible = this.scrollHorizontally(deltaX);\n      return isScrollVerticallyPossible || isScrollHorizontallyPossible;\n    }\n    /**\n     * Scrolls main scrollable element horizontally.\n     *\n     * @param {Number} delta Relative value to scroll.\n     */\n\n  }, {\n    key: \"scrollVertically\",\n    value: function scrollVertically(delta) {\n      var previousScroll = this.scrollableElement.scrollTop;\n      this.scrollableElement.scrollTop += delta;\n      return previousScroll !== this.scrollableElement.scrollTop;\n    }\n    /**\n     * Scrolls main scrollable element horizontally.\n     *\n     * @param {Number} delta Relative value to scroll.\n     */\n\n  }, {\n    key: \"scrollHorizontally\",\n    value: function scrollHorizontally(delta) {\n      var previousScroll = this.scrollableElement.scrollLeft;\n      this.scrollableElement.scrollLeft += delta;\n      return previousScroll !== this.scrollableElement.scrollLeft;\n    }\n    /**\n     * Synchronize scroll position between master table and overlay table.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"syncScrollPositions\",\n    value: function syncScrollPositions() {\n      if (this.destroyed) {\n        return;\n      }\n\n      var rootWindow = this.wot.rootWindow;\n      var topHolder = this.topOverlay.clone.wtTable.holder;\n      var leftHolder = this.leftOverlay.clone.wtTable.holder;\n      var _ref = [this.scrollableElement.scrollLeft, this.scrollableElement.scrollTop],\n          scrollLeft = _ref[0],\n          scrollTop = _ref[1];\n      this.horizontalScrolling = topHolder.scrollLeft !== scrollLeft || this.lastScrollX !== rootWindow.scrollX;\n      this.verticalScrolling = leftHolder.scrollTop !== scrollTop || this.lastScrollY !== rootWindow.scrollY;\n      this.lastScrollX = rootWindow.scrollX;\n      this.lastScrollY = rootWindow.scrollY;\n\n      if (this.horizontalScrolling) {\n        topHolder.scrollLeft = scrollLeft;\n        var bottomHolder = this.bottomOverlay.needFullRender ? this.bottomOverlay.clone.wtTable.holder : null;\n\n        if (bottomHolder) {\n          bottomHolder.scrollLeft = scrollLeft;\n        }\n      }\n\n      if (this.verticalScrolling) {\n        leftHolder.scrollTop = scrollTop;\n      }\n\n      this.refreshAll();\n    }\n    /**\n     * Synchronize overlay scrollbars with the master scrollbar\n     */\n\n  }, {\n    key: \"syncScrollWithMaster\",\n    value: function syncScrollWithMaster() {\n      var master = this.topOverlay.mainTableScrollableElement;\n      var scrollLeft = master.scrollLeft,\n          scrollTop = master.scrollTop;\n\n      if (this.topOverlay.needFullRender) {\n        this.topOverlay.clone.wtTable.holder.scrollLeft = scrollLeft;\n      }\n\n      if (this.bottomOverlay.needFullRender) {\n        this.bottomOverlay.clone.wtTable.holder.scrollLeft = scrollLeft;\n      }\n\n      if (this.leftOverlay.needFullRender) {\n        this.leftOverlay.clone.wtTable.holder.scrollTop = scrollTop;\n      }\n    }\n    /**\n     * Update the main scrollable elements for all the overlays.\n     */\n\n  }, {\n    key: \"updateMainScrollableElements\",\n    value: function updateMainScrollableElements() {\n      this.deregisterListeners();\n      this.leftOverlay.updateMainScrollableElement();\n      this.topOverlay.updateMainScrollableElement();\n\n      if (this.bottomOverlay.needFullRender) {\n        this.bottomOverlay.updateMainScrollableElement();\n      }\n\n      var _this$wot3 = this.wot,\n          rootWindow = _this$wot3.rootWindow,\n          wtTable = _this$wot3.wtTable;\n\n      if (rootWindow.getComputedStyle(wtTable.wtRootElement.parentNode).getPropertyValue('overflow') === 'hidden') {\n        this.scrollableElement = wtTable.holder;\n      } else {\n        this.scrollableElement = getScrollableElement(wtTable.TABLE);\n      }\n\n      this.registerListeners();\n    }\n    /**\n     *\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.eventManager.destroy();\n      this.topOverlay.destroy();\n\n      if (this.bottomOverlay.clone) {\n        this.bottomOverlay.destroy();\n      }\n\n      this.leftOverlay.destroy();\n\n      if (this.topLeftCornerOverlay) {\n        this.topLeftCornerOverlay.destroy();\n      }\n\n      if (this.bottomLeftCornerOverlay && this.bottomLeftCornerOverlay.clone) {\n        this.bottomLeftCornerOverlay.destroy();\n      }\n\n      if (this.debug) {\n        this.debug.destroy();\n      }\n\n      this.destroyed = true;\n    }\n    /**\n     * @param {Boolean} [fastDraw=false]\n     */\n\n  }, {\n    key: \"refresh\",\n    value: function refresh() {\n      var fastDraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (this.topOverlay.areElementSizesAdjusted && this.leftOverlay.areElementSizesAdjusted) {\n        var container = this.wot.wtTable.wtRootElement.parentNode || this.wot.wtTable.wtRootElement;\n        var width = container.clientWidth;\n        var height = container.clientHeight;\n\n        if (width !== this.spreaderLastSize.width || height !== this.spreaderLastSize.height) {\n          this.spreaderLastSize.width = width;\n          this.spreaderLastSize.height = height;\n          this.adjustElementsSize();\n        }\n      }\n\n      if (this.bottomOverlay.clone) {\n        this.bottomOverlay.refresh(fastDraw);\n      }\n\n      this.leftOverlay.refresh(fastDraw);\n      this.topOverlay.refresh(fastDraw);\n\n      if (this.topLeftCornerOverlay) {\n        this.topLeftCornerOverlay.refresh(fastDraw);\n      }\n\n      if (this.bottomLeftCornerOverlay && this.bottomLeftCornerOverlay.clone) {\n        this.bottomLeftCornerOverlay.refresh(fastDraw);\n      }\n\n      if (this.debug) {\n        this.debug.refresh(fastDraw);\n      }\n    }\n    /**\n     * Adjust overlays elements size and master table size\n     *\n     * @param {Boolean} [force=false]\n     */\n\n  }, {\n    key: \"adjustElementsSize\",\n    value: function adjustElementsSize() {\n      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var _this$wot4 = this.wot,\n          wtViewport = _this$wot4.wtViewport,\n          wtTable = _this$wot4.wtTable;\n      var totalColumns = this.wot.getSetting('totalColumns');\n      var totalRows = this.wot.getSetting('totalRows');\n      var headerRowSize = wtViewport.getRowHeaderWidth();\n      var headerColumnSize = wtViewport.getColumnHeaderHeight();\n      var hiderStyle = wtTable.hider.style;\n      hiderStyle.width = \"\".concat(headerRowSize + this.leftOverlay.sumCellSizes(0, totalColumns), \"px\");\n      hiderStyle.height = \"\".concat(headerColumnSize + this.topOverlay.sumCellSizes(0, totalRows) + 1, \"px\");\n\n      if (this.scrollbarSize > 0) {\n        var _wtTable$wtRootElemen = wtTable.wtRootElement,\n            rootElemScrollHeight = _wtTable$wtRootElemen.scrollHeight,\n            rootElemScrollWidth = _wtTable$wtRootElemen.scrollWidth;\n        var _wtTable$holder = wtTable.holder,\n            holderScrollHeight = _wtTable$holder.scrollHeight,\n            holderScrollWidth = _wtTable$holder.scrollWidth;\n        this.hasScrollbarRight = rootElemScrollHeight < holderScrollHeight;\n        this.hasScrollbarBottom = rootElemScrollWidth < holderScrollWidth;\n\n        if (this.hasScrollbarRight && wtTable.hider.scrollWidth + this.scrollbarSize > rootElemScrollWidth) {\n          this.hasScrollbarBottom = true;\n        } else if (this.hasScrollbarBottom && wtTable.hider.scrollHeight + this.scrollbarSize > rootElemScrollHeight) {\n          this.hasScrollbarRight = true;\n        }\n      }\n\n      this.topOverlay.adjustElementsSize(force);\n      this.leftOverlay.adjustElementsSize(force);\n      this.bottomOverlay.adjustElementsSize(force);\n    }\n    /**\n     *\n     */\n\n  }, {\n    key: \"applyToDOM\",\n    value: function applyToDOM() {\n      var wtTable = this.wot.wtTable;\n\n      if (!wtTable.isVisible()) {\n        return;\n      }\n\n      if (!this.topOverlay.areElementSizesAdjusted || !this.leftOverlay.areElementSizesAdjusted) {\n        this.adjustElementsSize();\n      }\n\n      this.topOverlay.applyToDOM();\n\n      if (this.bottomOverlay.clone) {\n        this.bottomOverlay.applyToDOM();\n      }\n\n      this.leftOverlay.applyToDOM();\n    }\n    /**\n     * Get the parent overlay of the provided element.\n     *\n     * @param {HTMLElement} element\n     * @returns {Object|null}\n     */\n\n  }, {\n    key: \"getParentOverlay\",\n    value: function getParentOverlay(element) {\n      if (!element) {\n        return null;\n      }\n\n      var overlays = [this.topOverlay, this.leftOverlay, this.bottomOverlay, this.topLeftCornerOverlay, this.bottomLeftCornerOverlay];\n      var result = null;\n      arrayEach(overlays, function (elem) {\n        if (!elem) {\n          return;\n        }\n\n        if (elem.clone && elem.clone.wtTable.TABLE.contains(element)) {\n          result = elem.clone;\n        }\n      });\n      return result;\n    }\n  }]);\n\n  return Overlays;\n}();\n\nexport default Overlays;","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react/node_modules/handsontable/es/3rdparty/walkontable/src/overlays.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","getScrollableElement","getScrollbarWidth","arrayEach","isKey","isChrome","EventManager","Overlay","Overlays","wotInstance","wot","_this$wot","rootDocument","rootWindow","wtTable","BODY_LINE_HEIGHT","parseInt","getComputedStyle","body","lineHeight","FALLBACK_BODY_LINE_HEIGHT","fontSize","eventManager","scrollbarSize","update","isOverflowHidden","wtRootElement","parentNode","getPropertyValue","scrollableElement","holder","TABLE","topOverlay","bottomOverlay","leftOverlay","topLeftCornerOverlay","bottomLeftCornerOverlay","prepareOverlays","hasScrollbarBottom","hasScrollbarRight","destroyed","keyPressed","spreaderLastSize","width","height","verticalScrolling","horizontalScrolling","browserLineHeight","registerListeners","lastScrollX","scrollX","lastScrollY","scrollY","value","syncScroll","updateStateOfRendering","createOverlay","CLONE_TOP","hasOverlay","CLONE_BOTTOM","needFullRender","CLONE_BOTTOM_LEFT_CORNER","CLONE_LEFT","CLONE_TOP_LEFT_CORNER","getSetting","debug","CLONE_DEBUG","refreshAll","drawn","destroy","draw","onScroll","_this","_this$wot2","topOverlayScrollableElement","mainTableScrollableElement","leftOverlayScrollableElement","addEventListener","documentElement","event","onKeyDown","onKeyUp","onTableScroll","passive","isHighPixelRatio","devicePixelRatio","isScrollOnWindow","preventWheel","wtSettings","wheelEventOptions","onCloneWheel","overlays","forEach","overlay","clone","resizeTimeout","clearTimeout","setTimeout","deregisterListeners","clearEvents","masterHorizontal","masterVertical","contains","syncScrollPositions","preventDefault","shouldNotWheelVertically","shouldNotWheelHorizontally","isScrollPossible","translateMouseWheelToScroll","keyCode","deltaY","isNaN","wheelDeltaY","deltaX","wheelDeltaX","deltaMode","isScrollVerticallyPossible","scrollVertically","isScrollHorizontallyPossible","scrollHorizontally","delta","previousScroll","scrollTop","scrollLeft","topHolder","leftHolder","_ref","bottomHolder","syncScrollWithMaster","master","updateMainScrollableElements","updateMainScrollableElement","_this$wot3","refresh","fastDraw","arguments","undefined","areElementSizesAdjusted","container","clientWidth","clientHeight","adjustElementsSize","force","_this$wot4","wtViewport","totalColumns","totalRows","headerRowSize","getRowHeaderWidth","headerColumnSize","getColumnHeaderHeight","hiderStyle","hider","style","concat","sumCellSizes","_wtTable$wtRootElemen","rootElemScrollHeight","scrollHeight","rootElemScrollWidth","scrollWidth","_wtTable$holder","holderScrollHeight","holderScrollWidth","applyToDOM","isVisible","getParentOverlay","element","result","elem"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.for-each\";\nimport \"core-js/modules/web.dom-collections.for-each\";\nimport \"core-js/modules/web.timers\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { getScrollableElement, getScrollbarWidth } from './../../../helpers/dom/element';\nimport { arrayEach } from './../../../helpers/array';\nimport { isKey } from './../../../helpers/unicode';\nimport { isChrome } from './../../../helpers/browser';\nimport EventManager from './../../../eventManager';\nimport Overlay from './overlay/_base';\n/**\n * @class Overlays\n */\n\nvar Overlays =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {Walkontable} wotInstance\n   */\n  function Overlays(wotInstance) {\n    _classCallCheck(this, Overlays);\n\n    /**\n     * Walkontable instance's reference.\n     *\n     * @private\n     * @type {Walkontable}\n     */\n    this.wot = wotInstance;\n    var _this$wot = this.wot,\n        rootDocument = _this$wot.rootDocument,\n        rootWindow = _this$wot.rootWindow,\n        wtTable = _this$wot.wtTable;\n    /**\n     * Sometimes `line-height` might be set to 'normal'. In that case, a default `font-size` should be multiplied by roughly 1.2.\n     * https://developer.mozilla.org/pl/docs/Web/CSS/line-height#Values\n     */\n\n    var BODY_LINE_HEIGHT = parseInt(rootWindow.getComputedStyle(rootDocument.body).lineHeight, 10);\n    var FALLBACK_BODY_LINE_HEIGHT = parseInt(rootWindow.getComputedStyle(rootDocument.body).fontSize, 10) * 1.2; // legacy support\n\n    this.instance = this.wot;\n    this.eventManager = new EventManager(this.wot);\n    this.scrollbarSize = getScrollbarWidth(rootDocument);\n    this.wot.update('scrollbarWidth', this.scrollbarSize);\n    this.wot.update('scrollbarHeight', this.scrollbarSize);\n    var isOverflowHidden = rootWindow.getComputedStyle(wtTable.wtRootElement.parentNode).getPropertyValue('overflow') === 'hidden';\n    this.scrollableElement = isOverflowHidden ? wtTable.holder : getScrollableElement(wtTable.TABLE);\n    this.topOverlay = void 0;\n    this.bottomOverlay = void 0;\n    this.leftOverlay = void 0;\n    this.topLeftCornerOverlay = void 0;\n    this.bottomLeftCornerOverlay = void 0;\n    this.prepareOverlays();\n    this.hasScrollbarBottom = false;\n    this.hasScrollbarRight = false;\n    this.destroyed = false;\n    this.keyPressed = false;\n    this.spreaderLastSize = {\n      width: null,\n      height: null\n    };\n    this.verticalScrolling = false;\n    this.horizontalScrolling = false;\n    this.browserLineHeight = BODY_LINE_HEIGHT || FALLBACK_BODY_LINE_HEIGHT;\n    this.registerListeners();\n    this.lastScrollX = rootWindow.scrollX;\n    this.lastScrollY = rootWindow.scrollY;\n  }\n  /**\n   * Prepare overlays based on user settings.\n   *\n   * @returns {Boolean} Returns `true` if changes applied to overlay needs scroll synchronization.\n   */\n\n\n  _createClass(Overlays, [{\n    key: \"prepareOverlays\",\n    value: function prepareOverlays() {\n      var syncScroll = false;\n\n      if (this.topOverlay) {\n        syncScroll = this.topOverlay.updateStateOfRendering() || syncScroll;\n      } else {\n        this.topOverlay = Overlay.createOverlay(Overlay.CLONE_TOP, this.wot);\n      }\n\n      if (!Overlay.hasOverlay(Overlay.CLONE_BOTTOM)) {\n        this.bottomOverlay = {\n          needFullRender: false,\n          updateStateOfRendering: function updateStateOfRendering() {\n            return false;\n          }\n        };\n      }\n\n      if (!Overlay.hasOverlay(Overlay.CLONE_BOTTOM_LEFT_CORNER)) {\n        this.bottomLeftCornerOverlay = {\n          needFullRender: false,\n          updateStateOfRendering: function updateStateOfRendering() {\n            return false;\n          }\n        };\n      }\n\n      if (this.bottomOverlay) {\n        syncScroll = this.bottomOverlay.updateStateOfRendering() || syncScroll;\n      } else {\n        this.bottomOverlay = Overlay.createOverlay(Overlay.CLONE_BOTTOM, this.wot);\n      }\n\n      if (this.leftOverlay) {\n        syncScroll = this.leftOverlay.updateStateOfRendering() || syncScroll;\n      } else {\n        this.leftOverlay = Overlay.createOverlay(Overlay.CLONE_LEFT, this.wot);\n      }\n\n      if (this.topOverlay.needFullRender && this.leftOverlay.needFullRender) {\n        if (this.topLeftCornerOverlay) {\n          syncScroll = this.topLeftCornerOverlay.updateStateOfRendering() || syncScroll;\n        } else {\n          this.topLeftCornerOverlay = Overlay.createOverlay(Overlay.CLONE_TOP_LEFT_CORNER, this.wot);\n        }\n      }\n\n      if (this.bottomOverlay.needFullRender && this.leftOverlay.needFullRender) {\n        if (this.bottomLeftCornerOverlay) {\n          syncScroll = this.bottomLeftCornerOverlay.updateStateOfRendering() || syncScroll;\n        } else {\n          this.bottomLeftCornerOverlay = Overlay.createOverlay(Overlay.CLONE_BOTTOM_LEFT_CORNER, this.wot);\n        }\n      }\n\n      if (this.wot.getSetting('debug') && !this.debug) {\n        this.debug = Overlay.createOverlay(Overlay.CLONE_DEBUG, this.wot);\n      }\n\n      return syncScroll;\n    }\n    /**\n     * Refresh and redraw table\n     */\n\n  }, {\n    key: \"refreshAll\",\n    value: function refreshAll() {\n      if (!this.wot.drawn) {\n        return;\n      }\n\n      if (!this.wot.wtTable.holder.parentNode) {\n        // Walkontable was detached from DOM, but this handler was not removed\n        this.destroy();\n        return;\n      }\n\n      this.wot.draw(true);\n\n      if (this.verticalScrolling) {\n        this.leftOverlay.onScroll();\n      }\n\n      if (this.horizontalScrolling) {\n        this.topOverlay.onScroll();\n      }\n\n      this.verticalScrolling = false;\n      this.horizontalScrolling = false;\n    }\n    /**\n     * Register all necessary event listeners.\n     */\n\n  }, {\n    key: \"registerListeners\",\n    value: function registerListeners() {\n      var _this = this;\n\n      var _this$wot2 = this.wot,\n          rootDocument = _this$wot2.rootDocument,\n          rootWindow = _this$wot2.rootWindow;\n      var topOverlayScrollableElement = this.topOverlay.mainTableScrollableElement;\n      var leftOverlayScrollableElement = this.leftOverlay.mainTableScrollableElement;\n      this.eventManager.addEventListener(rootDocument.documentElement, 'keydown', function (event) {\n        return _this.onKeyDown(event);\n      });\n      this.eventManager.addEventListener(rootDocument.documentElement, 'keyup', function () {\n        return _this.onKeyUp();\n      });\n      this.eventManager.addEventListener(rootDocument, 'visibilitychange', function () {\n        return _this.onKeyUp();\n      });\n      this.eventManager.addEventListener(topOverlayScrollableElement, 'scroll', function (event) {\n        return _this.onTableScroll(event);\n      }, {\n        passive: true\n      });\n\n      if (topOverlayScrollableElement !== leftOverlayScrollableElement) {\n        this.eventManager.addEventListener(leftOverlayScrollableElement, 'scroll', function (event) {\n          return _this.onTableScroll(event);\n        }, {\n          passive: true\n        });\n      }\n\n      var isHighPixelRatio = rootWindow.devicePixelRatio && rootWindow.devicePixelRatio > 1;\n      var isScrollOnWindow = this.scrollableElement === rootWindow;\n      var preventWheel = this.wot.wtSettings.getSetting('preventWheel');\n      var wheelEventOptions = {\n        passive: isScrollOnWindow\n      };\n\n      if (preventWheel || isHighPixelRatio || !isChrome()) {\n        this.eventManager.addEventListener(this.wot.wtTable.wtRootElement, 'wheel', function (event) {\n          return _this.onCloneWheel(event, preventWheel);\n        }, wheelEventOptions);\n      }\n\n      var overlays = [this.topOverlay, this.bottomOverlay, this.leftOverlay, this.topLeftCornerOverlay, this.bottomLeftCornerOverlay];\n      overlays.forEach(function (overlay) {\n        if (overlay && overlay.needFullRender) {\n          var holder = overlay.clone.wtTable.holder;\n\n          _this.eventManager.addEventListener(holder, 'wheel', function (event) {\n            return _this.onCloneWheel(event, preventWheel);\n          }, wheelEventOptions);\n        }\n      });\n      var resizeTimeout;\n      this.eventManager.addEventListener(rootWindow, 'resize', function () {\n        clearTimeout(resizeTimeout);\n        resizeTimeout = setTimeout(function () {\n          _this.wot.getSetting('onWindowResize');\n        }, 200);\n      });\n    }\n    /**\n     * Deregister all previously registered listeners.\n     */\n\n  }, {\n    key: \"deregisterListeners\",\n    value: function deregisterListeners() {\n      this.eventManager.clearEvents(true);\n    }\n    /**\n     * Scroll listener\n     *\n     * @param {Event} event\n     */\n\n  }, {\n    key: \"onTableScroll\",\n    value: function onTableScroll(event) {\n      // There was if statement which controlled flow of this function. It avoided the execution of the next lines\n      // on mobile devices. It was changed. Broader description of this case is included within issue #4856.\n      var rootWindow = this.wot.rootWindow;\n      var masterHorizontal = this.leftOverlay.mainTableScrollableElement;\n      var masterVertical = this.topOverlay.mainTableScrollableElement;\n      var target = event.target; // For key press, sync only master -> overlay position because while pressing Walkontable.render is triggered\n      // by hot.refreshBorder\n\n      if (this.keyPressed) {\n        if (masterVertical !== rootWindow && target !== rootWindow && !event.target.contains(masterVertical) || masterHorizontal !== rootWindow && target !== rootWindow && !event.target.contains(masterHorizontal)) {\n          return;\n        }\n      }\n\n      this.syncScrollPositions(event);\n    }\n    /**\n     * Wheel listener for cloned overlays.\n     *\n     * @param {Event} event\n     */\n\n  }, {\n    key: \"onCloneWheel\",\n    value: function onCloneWheel(event, preventDefault) {\n      var rootWindow = this.wot.rootWindow; // There was if statement which controlled flow of this function. It avoided the execution of the next lines\n      // on mobile devices. It was changed. Broader description of this case is included within issue #4856.\n\n      var masterHorizontal = this.leftOverlay.mainTableScrollableElement;\n      var masterVertical = this.topOverlay.mainTableScrollableElement;\n      var target = event.target; // For key press, sync only master -> overlay position because while pressing Walkontable.render is triggered\n      // by hot.refreshBorder\n\n      var shouldNotWheelVertically = masterVertical !== rootWindow && target !== rootWindow && !target.contains(masterVertical);\n      var shouldNotWheelHorizontally = masterHorizontal !== rootWindow && target !== rootWindow && !target.contains(masterHorizontal);\n\n      if (this.keyPressed && (shouldNotWheelVertically || shouldNotWheelHorizontally)) {\n        return;\n      }\n\n      var isScrollPossible = this.translateMouseWheelToScroll(event);\n\n      if (preventDefault || this.scrollableElement !== rootWindow && isScrollPossible) {\n        event.preventDefault();\n      }\n    }\n    /**\n     * Key down listener\n     */\n\n  }, {\n    key: \"onKeyDown\",\n    value: function onKeyDown(event) {\n      this.keyPressed = isKey(event.keyCode, 'ARROW_UP|ARROW_RIGHT|ARROW_DOWN|ARROW_LEFT');\n    }\n    /**\n     * Key up listener\n     */\n\n  }, {\n    key: \"onKeyUp\",\n    value: function onKeyUp() {\n      this.keyPressed = false;\n    }\n    /**\n     * Translate wheel event into scroll event and sync scroll overlays position\n     *\n     * @private\n     * @param {Event} event\n     */\n\n  }, {\n    key: \"translateMouseWheelToScroll\",\n    value: function translateMouseWheelToScroll(event) {\n      var browserLineHeight = this.browserLineHeight;\n      var deltaY = isNaN(event.deltaY) ? -1 * event.wheelDeltaY : event.deltaY;\n      var deltaX = isNaN(event.deltaX) ? -1 * event.wheelDeltaX : event.deltaX;\n\n      if (event.deltaMode === 1) {\n        deltaX += deltaX * browserLineHeight;\n        deltaY += deltaY * browserLineHeight;\n      }\n\n      var isScrollVerticallyPossible = this.scrollVertically(deltaY);\n      var isScrollHorizontallyPossible = this.scrollHorizontally(deltaX);\n      return isScrollVerticallyPossible || isScrollHorizontallyPossible;\n    }\n    /**\n     * Scrolls main scrollable element horizontally.\n     *\n     * @param {Number} delta Relative value to scroll.\n     */\n\n  }, {\n    key: \"scrollVertically\",\n    value: function scrollVertically(delta) {\n      var previousScroll = this.scrollableElement.scrollTop;\n      this.scrollableElement.scrollTop += delta;\n      return previousScroll !== this.scrollableElement.scrollTop;\n    }\n    /**\n     * Scrolls main scrollable element horizontally.\n     *\n     * @param {Number} delta Relative value to scroll.\n     */\n\n  }, {\n    key: \"scrollHorizontally\",\n    value: function scrollHorizontally(delta) {\n      var previousScroll = this.scrollableElement.scrollLeft;\n      this.scrollableElement.scrollLeft += delta;\n      return previousScroll !== this.scrollableElement.scrollLeft;\n    }\n    /**\n     * Synchronize scroll position between master table and overlay table.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"syncScrollPositions\",\n    value: function syncScrollPositions() {\n      if (this.destroyed) {\n        return;\n      }\n\n      var rootWindow = this.wot.rootWindow;\n      var topHolder = this.topOverlay.clone.wtTable.holder;\n      var leftHolder = this.leftOverlay.clone.wtTable.holder;\n      var _ref = [this.scrollableElement.scrollLeft, this.scrollableElement.scrollTop],\n          scrollLeft = _ref[0],\n          scrollTop = _ref[1];\n      this.horizontalScrolling = topHolder.scrollLeft !== scrollLeft || this.lastScrollX !== rootWindow.scrollX;\n      this.verticalScrolling = leftHolder.scrollTop !== scrollTop || this.lastScrollY !== rootWindow.scrollY;\n      this.lastScrollX = rootWindow.scrollX;\n      this.lastScrollY = rootWindow.scrollY;\n\n      if (this.horizontalScrolling) {\n        topHolder.scrollLeft = scrollLeft;\n        var bottomHolder = this.bottomOverlay.needFullRender ? this.bottomOverlay.clone.wtTable.holder : null;\n\n        if (bottomHolder) {\n          bottomHolder.scrollLeft = scrollLeft;\n        }\n      }\n\n      if (this.verticalScrolling) {\n        leftHolder.scrollTop = scrollTop;\n      }\n\n      this.refreshAll();\n    }\n    /**\n     * Synchronize overlay scrollbars with the master scrollbar\n     */\n\n  }, {\n    key: \"syncScrollWithMaster\",\n    value: function syncScrollWithMaster() {\n      var master = this.topOverlay.mainTableScrollableElement;\n      var scrollLeft = master.scrollLeft,\n          scrollTop = master.scrollTop;\n\n      if (this.topOverlay.needFullRender) {\n        this.topOverlay.clone.wtTable.holder.scrollLeft = scrollLeft;\n      }\n\n      if (this.bottomOverlay.needFullRender) {\n        this.bottomOverlay.clone.wtTable.holder.scrollLeft = scrollLeft;\n      }\n\n      if (this.leftOverlay.needFullRender) {\n        this.leftOverlay.clone.wtTable.holder.scrollTop = scrollTop;\n      }\n    }\n    /**\n     * Update the main scrollable elements for all the overlays.\n     */\n\n  }, {\n    key: \"updateMainScrollableElements\",\n    value: function updateMainScrollableElements() {\n      this.deregisterListeners();\n      this.leftOverlay.updateMainScrollableElement();\n      this.topOverlay.updateMainScrollableElement();\n\n      if (this.bottomOverlay.needFullRender) {\n        this.bottomOverlay.updateMainScrollableElement();\n      }\n\n      var _this$wot3 = this.wot,\n          rootWindow = _this$wot3.rootWindow,\n          wtTable = _this$wot3.wtTable;\n\n      if (rootWindow.getComputedStyle(wtTable.wtRootElement.parentNode).getPropertyValue('overflow') === 'hidden') {\n        this.scrollableElement = wtTable.holder;\n      } else {\n        this.scrollableElement = getScrollableElement(wtTable.TABLE);\n      }\n\n      this.registerListeners();\n    }\n    /**\n     *\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.eventManager.destroy();\n      this.topOverlay.destroy();\n\n      if (this.bottomOverlay.clone) {\n        this.bottomOverlay.destroy();\n      }\n\n      this.leftOverlay.destroy();\n\n      if (this.topLeftCornerOverlay) {\n        this.topLeftCornerOverlay.destroy();\n      }\n\n      if (this.bottomLeftCornerOverlay && this.bottomLeftCornerOverlay.clone) {\n        this.bottomLeftCornerOverlay.destroy();\n      }\n\n      if (this.debug) {\n        this.debug.destroy();\n      }\n\n      this.destroyed = true;\n    }\n    /**\n     * @param {Boolean} [fastDraw=false]\n     */\n\n  }, {\n    key: \"refresh\",\n    value: function refresh() {\n      var fastDraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (this.topOverlay.areElementSizesAdjusted && this.leftOverlay.areElementSizesAdjusted) {\n        var container = this.wot.wtTable.wtRootElement.parentNode || this.wot.wtTable.wtRootElement;\n        var width = container.clientWidth;\n        var height = container.clientHeight;\n\n        if (width !== this.spreaderLastSize.width || height !== this.spreaderLastSize.height) {\n          this.spreaderLastSize.width = width;\n          this.spreaderLastSize.height = height;\n          this.adjustElementsSize();\n        }\n      }\n\n      if (this.bottomOverlay.clone) {\n        this.bottomOverlay.refresh(fastDraw);\n      }\n\n      this.leftOverlay.refresh(fastDraw);\n      this.topOverlay.refresh(fastDraw);\n\n      if (this.topLeftCornerOverlay) {\n        this.topLeftCornerOverlay.refresh(fastDraw);\n      }\n\n      if (this.bottomLeftCornerOverlay && this.bottomLeftCornerOverlay.clone) {\n        this.bottomLeftCornerOverlay.refresh(fastDraw);\n      }\n\n      if (this.debug) {\n        this.debug.refresh(fastDraw);\n      }\n    }\n    /**\n     * Adjust overlays elements size and master table size\n     *\n     * @param {Boolean} [force=false]\n     */\n\n  }, {\n    key: \"adjustElementsSize\",\n    value: function adjustElementsSize() {\n      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var _this$wot4 = this.wot,\n          wtViewport = _this$wot4.wtViewport,\n          wtTable = _this$wot4.wtTable;\n      var totalColumns = this.wot.getSetting('totalColumns');\n      var totalRows = this.wot.getSetting('totalRows');\n      var headerRowSize = wtViewport.getRowHeaderWidth();\n      var headerColumnSize = wtViewport.getColumnHeaderHeight();\n      var hiderStyle = wtTable.hider.style;\n      hiderStyle.width = \"\".concat(headerRowSize + this.leftOverlay.sumCellSizes(0, totalColumns), \"px\");\n      hiderStyle.height = \"\".concat(headerColumnSize + this.topOverlay.sumCellSizes(0, totalRows) + 1, \"px\");\n\n      if (this.scrollbarSize > 0) {\n        var _wtTable$wtRootElemen = wtTable.wtRootElement,\n            rootElemScrollHeight = _wtTable$wtRootElemen.scrollHeight,\n            rootElemScrollWidth = _wtTable$wtRootElemen.scrollWidth;\n        var _wtTable$holder = wtTable.holder,\n            holderScrollHeight = _wtTable$holder.scrollHeight,\n            holderScrollWidth = _wtTable$holder.scrollWidth;\n        this.hasScrollbarRight = rootElemScrollHeight < holderScrollHeight;\n        this.hasScrollbarBottom = rootElemScrollWidth < holderScrollWidth;\n\n        if (this.hasScrollbarRight && wtTable.hider.scrollWidth + this.scrollbarSize > rootElemScrollWidth) {\n          this.hasScrollbarBottom = true;\n        } else if (this.hasScrollbarBottom && wtTable.hider.scrollHeight + this.scrollbarSize > rootElemScrollHeight) {\n          this.hasScrollbarRight = true;\n        }\n      }\n\n      this.topOverlay.adjustElementsSize(force);\n      this.leftOverlay.adjustElementsSize(force);\n      this.bottomOverlay.adjustElementsSize(force);\n    }\n    /**\n     *\n     */\n\n  }, {\n    key: \"applyToDOM\",\n    value: function applyToDOM() {\n      var wtTable = this.wot.wtTable;\n\n      if (!wtTable.isVisible()) {\n        return;\n      }\n\n      if (!this.topOverlay.areElementSizesAdjusted || !this.leftOverlay.areElementSizesAdjusted) {\n        this.adjustElementsSize();\n      }\n\n      this.topOverlay.applyToDOM();\n\n      if (this.bottomOverlay.clone) {\n        this.bottomOverlay.applyToDOM();\n      }\n\n      this.leftOverlay.applyToDOM();\n    }\n    /**\n     * Get the parent overlay of the provided element.\n     *\n     * @param {HTMLElement} element\n     * @returns {Object|null}\n     */\n\n  }, {\n    key: \"getParentOverlay\",\n    value: function getParentOverlay(element) {\n      if (!element) {\n        return null;\n      }\n\n      var overlays = [this.topOverlay, this.leftOverlay, this.bottomOverlay, this.topLeftCornerOverlay, this.bottomLeftCornerOverlay];\n      var result = null;\n      arrayEach(overlays, function (elem) {\n        if (!elem) {\n          return;\n        }\n\n        if (elem.clone && elem.clone.wtTable.TABLE.contains(element)) {\n          result = elem.clone;\n        }\n      });\n      return result;\n    }\n  }]);\n\n  return Overlays;\n}();\n\nexport default Overlays;"]},"metadata":{},"sourceType":"module"}