{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as Types from \"./types\";\nimport { extractLabel } from \"hot-formula-parser/lib/helper/cell\";\n\nfunction isFormulaCell(cell) {\n  return Boolean(cell && cell.value && typeof cell.value === \"string\" && cell.value.startsWith(\"=\"));\n}\n\nvar FORMULA_CELL_REFERENCES = /\\$?[A-Z]+\\$?[0-9]+/g;\n/** @todo move me */\n\nexport function getBindingsForCell(cell) {\n  if (!isFormulaCell(cell)) {\n    return [];\n  }\n\n  var value = cell.value; // Get raw cell references from formula\n\n  var match = value.match(FORMULA_CELL_REFERENCES);\n\n  if (!match) {\n    return [];\n  } // Normalize references to points\n\n\n  return match.map(function (substr) {\n    var _extractLabel = extractLabel(substr),\n        _extractLabel2 = _slicedToArray(_extractLabel, 2),\n        row = _extractLabel2[0],\n        column = _extractLabel2[1];\n\n    return {\n      row: row.index,\n      column: column.index\n    };\n  }, {});\n}","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/node_modules/react-spreadsheet/dist/bindings.js"],"names":["_slicedToArray","Types","extractLabel","isFormulaCell","cell","Boolean","value","startsWith","FORMULA_CELL_REFERENCES","getBindingsForCell","match","map","substr","_extractLabel","_extractLabel2","row","column","index"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,0CAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AACA,SAASC,YAAT,QAA6B,oCAA7B;;AAEA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,SAAOC,OAAO,CAACD,IAAI,IAAIA,IAAI,CAACE,KAAb,IAAsB,OAAOF,IAAI,CAACE,KAAZ,KAAsB,QAA5C,IAAwDF,IAAI,CAACE,KAAL,CAAWC,UAAX,CAAsB,GAAtB,CAAzD,CAAd;AACD;;AAED,IAAIC,uBAAuB,GAAG,qBAA9B;AACA;;AAEA,OAAO,SAASC,kBAAT,CAA4BL,IAA5B,EAAkC;AACvC,MAAI,CAACD,aAAa,CAACC,IAAD,CAAlB,EAA0B;AACxB,WAAO,EAAP;AACD;;AAED,MAAIE,KAAK,GAAGF,IAAI,CAACE,KAAjB,CALuC,CAKf;;AAExB,MAAII,KAAK,GAAGJ,KAAK,CAACI,KAAN,CAAYF,uBAAZ,CAAZ;;AAEA,MAAI,CAACE,KAAL,EAAY;AACV,WAAO,EAAP;AACD,GAXsC,CAWrC;;;AAGF,SAAOA,KAAK,CAACC,GAAN,CAAU,UAAUC,MAAV,EAAkB;AACjC,QAAIC,aAAa,GAAGX,YAAY,CAACU,MAAD,CAAhC;AAAA,QACIE,cAAc,GAAGd,cAAc,CAACa,aAAD,EAAgB,CAAhB,CADnC;AAAA,QAEIE,GAAG,GAAGD,cAAc,CAAC,CAAD,CAFxB;AAAA,QAGIE,MAAM,GAAGF,cAAc,CAAC,CAAD,CAH3B;;AAKA,WAAO;AACLC,MAAAA,GAAG,EAAEA,GAAG,CAACE,KADJ;AAELD,MAAAA,MAAM,EAAEA,MAAM,CAACC;AAFV,KAAP;AAID,GAVM,EAUJ,EAVI,CAAP;AAWD","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as Types from \"./types\";\nimport { extractLabel } from \"hot-formula-parser/lib/helper/cell\";\n\nfunction isFormulaCell(cell) {\n  return Boolean(cell && cell.value && typeof cell.value === \"string\" && cell.value.startsWith(\"=\"));\n}\n\nvar FORMULA_CELL_REFERENCES = /\\$?[A-Z]+\\$?[0-9]+/g;\n/** @todo move me */\n\nexport function getBindingsForCell(cell) {\n  if (!isFormulaCell(cell)) {\n    return [];\n  }\n\n  var value = cell.value; // Get raw cell references from formula\n\n  var match = value.match(FORMULA_CELL_REFERENCES);\n\n  if (!match) {\n    return [];\n  } // Normalize references to points\n\n\n  return match.map(function (substr) {\n    var _extractLabel = extractLabel(substr),\n        _extractLabel2 = _slicedToArray(_extractLabel, 2),\n        row = _extractLabel2[0],\n        column = _extractLabel2[1];\n\n    return {\n      row: row.index,\n      column: column.index\n    };\n  }, {});\n}"]},"metadata":{},"sourceType":"module"}