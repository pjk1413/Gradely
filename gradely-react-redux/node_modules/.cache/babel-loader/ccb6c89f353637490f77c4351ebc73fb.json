{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport { CellCoords } from './3rdparty/walkontable/src';\nimport { KEY_CODES, isMetaKey, isCtrlMetaKey } from './helpers/unicode';\nimport { stopPropagation, stopImmediatePropagation, isImmediatePropagationStopped } from './helpers/dom/event';\nimport { getEditorInstance } from './editors';\nimport EventManager from './eventManager';\nimport { EditorState } from './editors/_baseEditor';\nimport { getParentWindow } from './helpers/dom/element';\n\nvar EditorManager = /*#__PURE__*/function () {\n  /**\n   * @param {Handsontable} instance\n   * @param {GridSettings} priv\n   * @param {Selection} selection\n   */\n  function EditorManager(instance, priv, selection) {\n    var _this = this;\n\n    _classCallCheck(this, EditorManager);\n    /**\n     * Instance of {@link Handsontable}\n     *\n     * @private\n     * @type {Handsontable}\n     */\n\n\n    this.instance = instance;\n    /**\n     * Reference to an instance's private GridSettings object.\n     *\n     * @private\n     * @type {GridSettings}\n     */\n\n    this.priv = priv;\n    /**\n     * Instance of {@link Selection}\n     *\n     * @private\n     * @type {Selection}\n     */\n\n    this.selection = selection;\n    /**\n     * Instance of {@link EventManager}.\n     *\n     * @private\n     * @type {EventManager}\n     */\n\n    this.eventManager = new EventManager(instance);\n    /**\n     * Determines if EditorManager is destroyed.\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    this.destroyed = false;\n    /**\n     * Determines if EditorManager is locked.\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    this.lock = false;\n    /**\n     * A reference to an instance of the activeEditor.\n     *\n     * @private\n     * @type {*}\n     */\n\n    this.activeEditor = void 0;\n    /**\n     * Keeps a reference to the cell's properties object.\n     *\n     * @type {Object}\n     */\n\n    this.cellProperties = void 0;\n    this.instance.addHook('afterDocumentKeyDown', function (event) {\n      return _this.onAfterDocumentKeyDown(event);\n    });\n    var frame = this.instance.rootWindow;\n\n    while (frame) {\n      this.eventManager.addEventListener(frame.document.documentElement, 'keydown', function (event) {\n        if (!_this.destroyed) {\n          _this.instance.runHooks('afterDocumentKeyDown', event);\n        }\n      });\n      frame = getParentWindow(frame);\n    } // Open editor when text composition is started (IME editor)\n\n\n    this.eventManager.addEventListener(this.instance.rootDocument.documentElement, 'compositionstart', function (event) {\n      if (!_this.destroyed && _this.activeEditor && !_this.activeEditor.isOpened() && _this.instance.isListening()) {\n        _this.openEditor('', event);\n      }\n    });\n    this.instance.view.wt.update('onCellDblClick', function (event, coords, elem) {\n      return _this.onCellDblClick(event, coords, elem);\n    });\n  }\n  /**\n   * Lock the editor from being prepared and closed. Locking the editor prevents its closing and\n   * reinitialized after selecting the new cell. This feature is necessary for a mobile editor.\n   */\n\n\n  _createClass(EditorManager, [{\n    key: \"lockEditor\",\n    value: function lockEditor() {\n      this.lock = true;\n    }\n    /**\n     * Unlock the editor from being prepared and closed. This method restores the original behavior of\n     * the editors where for every new selection its instances are closed.\n     */\n\n  }, {\n    key: \"unlockEditor\",\n    value: function unlockEditor() {\n      this.lock = false;\n    }\n    /**\n     * Destroy current editor, if exists.\n     *\n     * @param {Boolean} revertOriginal\n     */\n\n  }, {\n    key: \"destroyEditor\",\n    value: function destroyEditor(revertOriginal) {\n      if (!this.lock) {\n        this.closeEditor(revertOriginal);\n      }\n    }\n    /**\n     * Get active editor.\n     *\n     * @returns {*}\n     */\n\n  }, {\n    key: \"getActiveEditor\",\n    value: function getActiveEditor() {\n      return this.activeEditor;\n    }\n    /**\n     * Prepare text input to be displayed at given grid cell.\n     */\n\n  }, {\n    key: \"prepareEditor\",\n    value: function prepareEditor() {\n      var _this2 = this;\n\n      if (this.lock) {\n        return;\n      }\n\n      if (this.activeEditor && this.activeEditor.isWaiting()) {\n        this.closeEditor(false, false, function (dataSaved) {\n          if (dataSaved) {\n            _this2.prepareEditor();\n          }\n        });\n        return;\n      }\n\n      var _this$instance$select = this.instance.selection.selectedRange.current().highlight,\n          row = _this$instance$select.row,\n          col = _this$instance$select.col;\n      this.cellProperties = this.instance.getCellMeta(row, col);\n\n      if (this.cellProperties.readOnly) {\n        this.clearActiveEditor();\n        return;\n      }\n\n      var editorClass = this.instance.getCellEditor(this.cellProperties);\n      var td = this.instance.getCell(row, col, true);\n\n      if (editorClass && td) {\n        var prop = this.instance.colToProp(col);\n        var originalValue = this.instance.getSourceDataAtCell(this.instance.runHooks('modifyRow', row), col);\n        this.activeEditor = getEditorInstance(editorClass, this.instance);\n        this.activeEditor.prepare(row, col, prop, td, originalValue, this.cellProperties);\n      } else {\n        this.clearActiveEditor();\n      }\n    }\n    /**\n     * Check is editor is opened/showed.\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isEditorOpened\",\n    value: function isEditorOpened() {\n      return this.activeEditor && this.activeEditor.isOpened();\n    }\n    /**\n     * Open editor with initial value.\n     *\n     * @param {null|String} newInitialValue new value from which editor will start if handled property it's not the `null`.\n     * @param {Event} event\n     */\n\n  }, {\n    key: \"openEditor\",\n    value: function openEditor(newInitialValue, event) {\n      if (!this.activeEditor) {\n        return;\n      }\n\n      this.activeEditor.beginEditing(newInitialValue, event);\n    }\n    /**\n     * Close editor, finish editing cell.\n     *\n     * @param {Boolean} restoreOriginalValue\n     * @param {Boolean} [isCtrlPressed]\n     * @param {Function} [callback]\n     */\n\n  }, {\n    key: \"closeEditor\",\n    value: function closeEditor(restoreOriginalValue, isCtrlPressed, callback) {\n      if (this.activeEditor) {\n        this.activeEditor.finishEditing(restoreOriginalValue, isCtrlPressed, callback);\n      } else if (callback) {\n        callback(false);\n      }\n    }\n    /**\n     * Close editor and save changes.\n     *\n     * @param {Boolean} isCtrlPressed\n     */\n\n  }, {\n    key: \"closeEditorAndSaveChanges\",\n    value: function closeEditorAndSaveChanges(isCtrlPressed) {\n      this.closeEditor(false, isCtrlPressed);\n    }\n    /**\n     * Close editor and restore original value.\n     *\n     * @param {Boolean} isCtrlPressed\n     */\n\n  }, {\n    key: \"closeEditorAndRestoreOriginalValue\",\n    value: function closeEditorAndRestoreOriginalValue(isCtrlPressed) {\n      return this.closeEditor(true, isCtrlPressed);\n    }\n    /**\n     * Clears reference to an instance of the active editor.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"clearActiveEditor\",\n    value: function clearActiveEditor() {\n      this.activeEditor = void 0;\n    }\n    /**\n     * Controls selection's behaviour after clicking `Enter`.\n     *\n     * @private\n     * @param {Boolean} isShiftPressed\n     */\n\n  }, {\n    key: \"moveSelectionAfterEnter\",\n    value: function moveSelectionAfterEnter(isShiftPressed) {\n      var enterMoves = typeof this.priv.settings.enterMoves === 'function' ? this.priv.settings.enterMoves(event) : this.priv.settings.enterMoves;\n\n      if (isShiftPressed) {\n        // move selection up\n        this.selection.transformStart(-enterMoves.row, -enterMoves.col);\n      } else {\n        // move selection down (add a new row if needed)\n        this.selection.transformStart(enterMoves.row, enterMoves.col, true);\n      }\n    }\n    /**\n     * Controls selection behaviour after clicking `arrow up`.\n     *\n     * @private\n     * @param {Boolean} isShiftPressed\n     */\n\n  }, {\n    key: \"moveSelectionUp\",\n    value: function moveSelectionUp(isShiftPressed) {\n      if (isShiftPressed) {\n        this.selection.transformEnd(-1, 0);\n      } else {\n        this.selection.transformStart(-1, 0);\n      }\n    }\n    /**\n     * Controls selection's behaviour after clicking `arrow down`.\n     *\n     * @private\n     * @param {Boolean} isShiftPressed\n     */\n\n  }, {\n    key: \"moveSelectionDown\",\n    value: function moveSelectionDown(isShiftPressed) {\n      if (isShiftPressed) {\n        // expanding selection down with shift\n        this.selection.transformEnd(1, 0);\n      } else {\n        this.selection.transformStart(1, 0);\n      }\n    }\n    /**\n     * Controls selection's behaviour after clicking `arrow right`.\n     *\n     * @private\n     * @param {Boolean} isShiftPressed\n     */\n\n  }, {\n    key: \"moveSelectionRight\",\n    value: function moveSelectionRight(isShiftPressed) {\n      if (isShiftPressed) {\n        this.selection.transformEnd(0, 1);\n      } else {\n        this.selection.transformStart(0, 1);\n      }\n    }\n    /**\n     * Controls selection's behaviour after clicking `arrow left`.\n     *\n     * @private\n     * @param {Boolean} isShiftPressed\n     */\n\n  }, {\n    key: \"moveSelectionLeft\",\n    value: function moveSelectionLeft(isShiftPressed) {\n      if (isShiftPressed) {\n        this.selection.transformEnd(0, -1);\n      } else {\n        this.selection.transformStart(0, -1);\n      }\n    }\n    /**\n     * onAfterDocumentKeyDown callback.\n     *\n     * @private\n     * @param {KeyboardEvent} event\n     */\n\n  }, {\n    key: \"onAfterDocumentKeyDown\",\n    value: function onAfterDocumentKeyDown(event) {\n      if (!this.instance.isListening()) {\n        return;\n      }\n\n      this.instance.runHooks('beforeKeyDown', event); // keyCode 229 aka 'uninitialized' doesn't take into account with editors. This key code is produced when unfinished\n      // character is entering (using IME editor). It is fired mainly on linux (ubuntu) with installed ibus-pinyin package.\n\n      if (this.destroyed || event.keyCode === 229) {\n        return;\n      }\n\n      if (isImmediatePropagationStopped(event)) {\n        return;\n      }\n\n      this.priv.lastKeyCode = event.keyCode;\n\n      if (!this.selection.isSelected()) {\n        return;\n      } // catch CTRL but not right ALT (which in some systems triggers ALT+CTRL)\n\n\n      var isCtrlPressed = (event.ctrlKey || event.metaKey) && !event.altKey;\n\n      if (this.activeEditor && !this.activeEditor.isWaiting()) {\n        if (!isMetaKey(event.keyCode) && !isCtrlMetaKey(event.keyCode) && !isCtrlPressed && !this.isEditorOpened()) {\n          this.openEditor('', event);\n          return;\n        }\n      }\n\n      var isShiftPressed = event.shiftKey;\n      var rangeModifier = isShiftPressed ? this.selection.setRangeEnd : this.selection.setRangeStart;\n      var tabMoves;\n\n      switch (event.keyCode) {\n        case KEY_CODES.A:\n          if (!this.isEditorOpened() && isCtrlPressed) {\n            this.instance.selectAll();\n            event.preventDefault();\n            stopPropagation(event);\n          }\n\n          break;\n\n        case KEY_CODES.ARROW_UP:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n\n          this.moveSelectionUp(isShiftPressed);\n          event.preventDefault();\n          stopPropagation(event);\n          break;\n\n        case KEY_CODES.ARROW_DOWN:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n\n          this.moveSelectionDown(isShiftPressed);\n          event.preventDefault();\n          stopPropagation(event);\n          break;\n\n        case KEY_CODES.ARROW_RIGHT:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n\n          this.moveSelectionRight(isShiftPressed);\n          event.preventDefault();\n          stopPropagation(event);\n          break;\n\n        case KEY_CODES.ARROW_LEFT:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n\n          this.moveSelectionLeft(isShiftPressed);\n          event.preventDefault();\n          stopPropagation(event);\n          break;\n\n        case KEY_CODES.TAB:\n          tabMoves = typeof this.priv.settings.tabMoves === 'function' ? this.priv.settings.tabMoves(event) : this.priv.settings.tabMoves;\n\n          if (isShiftPressed) {\n            // move selection left\n            this.selection.transformStart(-tabMoves.row, -tabMoves.col);\n          } else {\n            // move selection right (add a new column if needed)\n            this.selection.transformStart(tabMoves.row, tabMoves.col, true);\n          }\n\n          event.preventDefault();\n          stopPropagation(event);\n          break;\n\n        case KEY_CODES.BACKSPACE:\n        case KEY_CODES.DELETE:\n          this.instance.emptySelectedCells();\n          this.prepareEditor();\n          event.preventDefault();\n          break;\n\n        case KEY_CODES.F2:\n          /* F2 */\n          if (this.activeEditor) {\n            this.activeEditor.enableFullEditMode();\n          }\n\n          this.openEditor(null, event);\n          event.preventDefault(); // prevent Opera from opening 'Go to Page dialog'\n\n          break;\n\n        case KEY_CODES.ENTER:\n          /* return/enter */\n          if (this.isEditorOpened()) {\n            if (this.activeEditor && this.activeEditor.state !== EditorState.WAITING) {\n              this.closeEditorAndSaveChanges(isCtrlPressed);\n            }\n\n            this.moveSelectionAfterEnter(isShiftPressed);\n          } else if (this.instance.getSettings().enterBeginsEditing) {\n            if (this.cellProperties.readOnly) {\n              this.moveSelectionAfterEnter();\n            } else if (this.activeEditor) {\n              this.activeEditor.enableFullEditMode();\n              this.openEditor(null, event);\n            }\n          } else {\n            this.moveSelectionAfterEnter(isShiftPressed);\n          }\n\n          event.preventDefault(); // don't add newline to field\n\n          stopImmediatePropagation(event); // required by HandsontableEditor\n\n          break;\n\n        case KEY_CODES.ESCAPE:\n          if (this.isEditorOpened()) {\n            this.closeEditorAndRestoreOriginalValue(isCtrlPressed);\n            this.activeEditor.focus();\n          }\n\n          event.preventDefault();\n          break;\n\n        case KEY_CODES.HOME:\n          if (event.ctrlKey || event.metaKey) {\n            rangeModifier.call(this.selection, new CellCoords(0, this.selection.selectedRange.current().from.col));\n          } else {\n            rangeModifier.call(this.selection, new CellCoords(this.selection.selectedRange.current().from.row, 0));\n          }\n\n          event.preventDefault(); // don't scroll the window\n\n          stopPropagation(event);\n          break;\n\n        case KEY_CODES.END:\n          if (event.ctrlKey || event.metaKey) {\n            rangeModifier.call(this.selection, new CellCoords(this.instance.countRows() - 1, this.selection.selectedRange.current().from.col));\n          } else {\n            rangeModifier.call(this.selection, new CellCoords(this.selection.selectedRange.current().from.row, this.instance.countCols() - 1));\n          }\n\n          event.preventDefault(); // don't scroll the window\n\n          stopPropagation(event);\n          break;\n\n        case KEY_CODES.PAGE_UP:\n          this.selection.transformStart(-this.instance.countVisibleRows(), 0);\n          event.preventDefault(); // don't page up the window\n\n          stopPropagation(event);\n          break;\n\n        case KEY_CODES.PAGE_DOWN:\n          this.selection.transformStart(this.instance.countVisibleRows(), 0);\n          event.preventDefault(); // don't page down the window\n\n          stopPropagation(event);\n          break;\n\n        default:\n          break;\n      }\n    }\n    /**\n     * onCellDblClick callback.\n     *\n     * @private\n     * @param {MouseEvent} event\n     * @param {Object} coords\n     * @param {HTMLTableCellElement|HTMLTableHeaderCellElement} elem\n     */\n\n  }, {\n    key: \"onCellDblClick\",\n    value: function onCellDblClick(event, coords, elem) {\n      // may be TD or TH\n      if (elem.nodeName === 'TD') {\n        if (this.activeEditor) {\n          this.activeEditor.enableFullEditMode();\n        }\n\n        this.openEditor(null, event);\n      }\n    }\n    /**\n     * Destroy the instance.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.destroyed = true;\n      this.eventManager.destroy();\n    }\n  }]);\n\n  return EditorManager;\n}();\n\nvar instances = new WeakMap();\n/**\n * @param {Handsontable} hotInstance\n * @param {GridSettings} hotSettings\n * @param {Selection} selection\n * @param {DataMap} datamap\n */\n\nEditorManager.getInstance = function (hotInstance, hotSettings, selection, datamap) {\n  var editorManager = instances.get(hotInstance);\n\n  if (!editorManager) {\n    editorManager = new EditorManager(hotInstance, hotSettings, selection, datamap);\n    instances.set(hotInstance, editorManager);\n  }\n\n  return editorManager;\n};\n\nexport default EditorManager;","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/node_modules/handsontable/es/editorManager.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","CellCoords","KEY_CODES","isMetaKey","isCtrlMetaKey","stopPropagation","stopImmediatePropagation","isImmediatePropagationStopped","getEditorInstance","EventManager","EditorState","getParentWindow","EditorManager","priv","selection","_this","eventManager","destroyed","lock","activeEditor","cellProperties","addHook","event","onAfterDocumentKeyDown","frame","rootWindow","addEventListener","document","documentElement","runHooks","rootDocument","isOpened","isListening","openEditor","view","wt","update","coords","elem","onCellDblClick","value","lockEditor","unlockEditor","destroyEditor","revertOriginal","closeEditor","getActiveEditor","prepareEditor","_this2","isWaiting","dataSaved","_this$instance$select","selectedRange","current","highlight","row","col","getCellMeta","readOnly","clearActiveEditor","editorClass","getCellEditor","td","getCell","prop","colToProp","originalValue","getSourceDataAtCell","prepare","isEditorOpened","newInitialValue","beginEditing","restoreOriginalValue","isCtrlPressed","callback","finishEditing","closeEditorAndSaveChanges","closeEditorAndRestoreOriginalValue","moveSelectionAfterEnter","isShiftPressed","enterMoves","settings","transformStart","moveSelectionUp","transformEnd","moveSelectionDown","moveSelectionRight","moveSelectionLeft","keyCode","lastKeyCode","isSelected","ctrlKey","metaKey","altKey","shiftKey","rangeModifier","setRangeEnd","setRangeStart","tabMoves","A","selectAll","preventDefault","ARROW_UP","ARROW_DOWN","ARROW_RIGHT","ARROW_LEFT","TAB","BACKSPACE","DELETE","emptySelectedCells","F2","enableFullEditMode","ENTER","state","WAITING","getSettings","enterBeginsEditing","ESCAPE","focus","HOME","call","from","END","countRows","countCols","PAGE_UP","countVisibleRows","PAGE_DOWN","nodeName","destroy","instances","WeakMap","getInstance","hotInstance","hotSettings","datamap","editorManager","get","set"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/es.weak-map\";\nimport \"core-js/modules/web.dom-collections.iterator\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { CellCoords } from './3rdparty/walkontable/src';\nimport { KEY_CODES, isMetaKey, isCtrlMetaKey } from './helpers/unicode';\nimport { stopPropagation, stopImmediatePropagation, isImmediatePropagationStopped } from './helpers/dom/event';\nimport { getEditorInstance } from './editors';\nimport EventManager from './eventManager';\nimport { EditorState } from './editors/_baseEditor';\nimport { getParentWindow } from './helpers/dom/element';\n\nvar EditorManager =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {Handsontable} instance\n   * @param {GridSettings} priv\n   * @param {Selection} selection\n   */\n  function EditorManager(instance, priv, selection) {\n    var _this = this;\n\n    _classCallCheck(this, EditorManager);\n\n    /**\n     * Instance of {@link Handsontable}\n     *\n     * @private\n     * @type {Handsontable}\n     */\n    this.instance = instance;\n    /**\n     * Reference to an instance's private GridSettings object.\n     *\n     * @private\n     * @type {GridSettings}\n     */\n\n    this.priv = priv;\n    /**\n     * Instance of {@link Selection}\n     *\n     * @private\n     * @type {Selection}\n     */\n\n    this.selection = selection;\n    /**\n     * Instance of {@link EventManager}.\n     *\n     * @private\n     * @type {EventManager}\n     */\n\n    this.eventManager = new EventManager(instance);\n    /**\n     * Determines if EditorManager is destroyed.\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    this.destroyed = false;\n    /**\n     * Determines if EditorManager is locked.\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    this.lock = false;\n    /**\n     * A reference to an instance of the activeEditor.\n     *\n     * @private\n     * @type {*}\n     */\n\n    this.activeEditor = void 0;\n    /**\n     * Keeps a reference to the cell's properties object.\n     *\n     * @type {Object}\n     */\n\n    this.cellProperties = void 0;\n    this.instance.addHook('afterDocumentKeyDown', function (event) {\n      return _this.onAfterDocumentKeyDown(event);\n    });\n    var frame = this.instance.rootWindow;\n\n    while (frame) {\n      this.eventManager.addEventListener(frame.document.documentElement, 'keydown', function (event) {\n        if (!_this.destroyed) {\n          _this.instance.runHooks('afterDocumentKeyDown', event);\n        }\n      });\n      frame = getParentWindow(frame);\n    } // Open editor when text composition is started (IME editor)\n\n\n    this.eventManager.addEventListener(this.instance.rootDocument.documentElement, 'compositionstart', function (event) {\n      if (!_this.destroyed && _this.activeEditor && !_this.activeEditor.isOpened() && _this.instance.isListening()) {\n        _this.openEditor('', event);\n      }\n    });\n    this.instance.view.wt.update('onCellDblClick', function (event, coords, elem) {\n      return _this.onCellDblClick(event, coords, elem);\n    });\n  }\n  /**\n   * Lock the editor from being prepared and closed. Locking the editor prevents its closing and\n   * reinitialized after selecting the new cell. This feature is necessary for a mobile editor.\n   */\n\n\n  _createClass(EditorManager, [{\n    key: \"lockEditor\",\n    value: function lockEditor() {\n      this.lock = true;\n    }\n    /**\n     * Unlock the editor from being prepared and closed. This method restores the original behavior of\n     * the editors where for every new selection its instances are closed.\n     */\n\n  }, {\n    key: \"unlockEditor\",\n    value: function unlockEditor() {\n      this.lock = false;\n    }\n    /**\n     * Destroy current editor, if exists.\n     *\n     * @param {Boolean} revertOriginal\n     */\n\n  }, {\n    key: \"destroyEditor\",\n    value: function destroyEditor(revertOriginal) {\n      if (!this.lock) {\n        this.closeEditor(revertOriginal);\n      }\n    }\n    /**\n     * Get active editor.\n     *\n     * @returns {*}\n     */\n\n  }, {\n    key: \"getActiveEditor\",\n    value: function getActiveEditor() {\n      return this.activeEditor;\n    }\n    /**\n     * Prepare text input to be displayed at given grid cell.\n     */\n\n  }, {\n    key: \"prepareEditor\",\n    value: function prepareEditor() {\n      var _this2 = this;\n\n      if (this.lock) {\n        return;\n      }\n\n      if (this.activeEditor && this.activeEditor.isWaiting()) {\n        this.closeEditor(false, false, function (dataSaved) {\n          if (dataSaved) {\n            _this2.prepareEditor();\n          }\n        });\n        return;\n      }\n\n      var _this$instance$select = this.instance.selection.selectedRange.current().highlight,\n          row = _this$instance$select.row,\n          col = _this$instance$select.col;\n      this.cellProperties = this.instance.getCellMeta(row, col);\n\n      if (this.cellProperties.readOnly) {\n        this.clearActiveEditor();\n        return;\n      }\n\n      var editorClass = this.instance.getCellEditor(this.cellProperties);\n      var td = this.instance.getCell(row, col, true);\n\n      if (editorClass && td) {\n        var prop = this.instance.colToProp(col);\n        var originalValue = this.instance.getSourceDataAtCell(this.instance.runHooks('modifyRow', row), col);\n        this.activeEditor = getEditorInstance(editorClass, this.instance);\n        this.activeEditor.prepare(row, col, prop, td, originalValue, this.cellProperties);\n      } else {\n        this.clearActiveEditor();\n      }\n    }\n    /**\n     * Check is editor is opened/showed.\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isEditorOpened\",\n    value: function isEditorOpened() {\n      return this.activeEditor && this.activeEditor.isOpened();\n    }\n    /**\n     * Open editor with initial value.\n     *\n     * @param {null|String} newInitialValue new value from which editor will start if handled property it's not the `null`.\n     * @param {Event} event\n     */\n\n  }, {\n    key: \"openEditor\",\n    value: function openEditor(newInitialValue, event) {\n      if (!this.activeEditor) {\n        return;\n      }\n\n      this.activeEditor.beginEditing(newInitialValue, event);\n    }\n    /**\n     * Close editor, finish editing cell.\n     *\n     * @param {Boolean} restoreOriginalValue\n     * @param {Boolean} [isCtrlPressed]\n     * @param {Function} [callback]\n     */\n\n  }, {\n    key: \"closeEditor\",\n    value: function closeEditor(restoreOriginalValue, isCtrlPressed, callback) {\n      if (this.activeEditor) {\n        this.activeEditor.finishEditing(restoreOriginalValue, isCtrlPressed, callback);\n      } else if (callback) {\n        callback(false);\n      }\n    }\n    /**\n     * Close editor and save changes.\n     *\n     * @param {Boolean} isCtrlPressed\n     */\n\n  }, {\n    key: \"closeEditorAndSaveChanges\",\n    value: function closeEditorAndSaveChanges(isCtrlPressed) {\n      this.closeEditor(false, isCtrlPressed);\n    }\n    /**\n     * Close editor and restore original value.\n     *\n     * @param {Boolean} isCtrlPressed\n     */\n\n  }, {\n    key: \"closeEditorAndRestoreOriginalValue\",\n    value: function closeEditorAndRestoreOriginalValue(isCtrlPressed) {\n      return this.closeEditor(true, isCtrlPressed);\n    }\n    /**\n     * Clears reference to an instance of the active editor.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"clearActiveEditor\",\n    value: function clearActiveEditor() {\n      this.activeEditor = void 0;\n    }\n    /**\n     * Controls selection's behaviour after clicking `Enter`.\n     *\n     * @private\n     * @param {Boolean} isShiftPressed\n     */\n\n  }, {\n    key: \"moveSelectionAfterEnter\",\n    value: function moveSelectionAfterEnter(isShiftPressed) {\n      var enterMoves = typeof this.priv.settings.enterMoves === 'function' ? this.priv.settings.enterMoves(event) : this.priv.settings.enterMoves;\n\n      if (isShiftPressed) {\n        // move selection up\n        this.selection.transformStart(-enterMoves.row, -enterMoves.col);\n      } else {\n        // move selection down (add a new row if needed)\n        this.selection.transformStart(enterMoves.row, enterMoves.col, true);\n      }\n    }\n    /**\n     * Controls selection behaviour after clicking `arrow up`.\n     *\n     * @private\n     * @param {Boolean} isShiftPressed\n     */\n\n  }, {\n    key: \"moveSelectionUp\",\n    value: function moveSelectionUp(isShiftPressed) {\n      if (isShiftPressed) {\n        this.selection.transformEnd(-1, 0);\n      } else {\n        this.selection.transformStart(-1, 0);\n      }\n    }\n    /**\n     * Controls selection's behaviour after clicking `arrow down`.\n     *\n     * @private\n     * @param {Boolean} isShiftPressed\n     */\n\n  }, {\n    key: \"moveSelectionDown\",\n    value: function moveSelectionDown(isShiftPressed) {\n      if (isShiftPressed) {\n        // expanding selection down with shift\n        this.selection.transformEnd(1, 0);\n      } else {\n        this.selection.transformStart(1, 0);\n      }\n    }\n    /**\n     * Controls selection's behaviour after clicking `arrow right`.\n     *\n     * @private\n     * @param {Boolean} isShiftPressed\n     */\n\n  }, {\n    key: \"moveSelectionRight\",\n    value: function moveSelectionRight(isShiftPressed) {\n      if (isShiftPressed) {\n        this.selection.transformEnd(0, 1);\n      } else {\n        this.selection.transformStart(0, 1);\n      }\n    }\n    /**\n     * Controls selection's behaviour after clicking `arrow left`.\n     *\n     * @private\n     * @param {Boolean} isShiftPressed\n     */\n\n  }, {\n    key: \"moveSelectionLeft\",\n    value: function moveSelectionLeft(isShiftPressed) {\n      if (isShiftPressed) {\n        this.selection.transformEnd(0, -1);\n      } else {\n        this.selection.transformStart(0, -1);\n      }\n    }\n    /**\n     * onAfterDocumentKeyDown callback.\n     *\n     * @private\n     * @param {KeyboardEvent} event\n     */\n\n  }, {\n    key: \"onAfterDocumentKeyDown\",\n    value: function onAfterDocumentKeyDown(event) {\n      if (!this.instance.isListening()) {\n        return;\n      }\n\n      this.instance.runHooks('beforeKeyDown', event); // keyCode 229 aka 'uninitialized' doesn't take into account with editors. This key code is produced when unfinished\n      // character is entering (using IME editor). It is fired mainly on linux (ubuntu) with installed ibus-pinyin package.\n\n      if (this.destroyed || event.keyCode === 229) {\n        return;\n      }\n\n      if (isImmediatePropagationStopped(event)) {\n        return;\n      }\n\n      this.priv.lastKeyCode = event.keyCode;\n\n      if (!this.selection.isSelected()) {\n        return;\n      } // catch CTRL but not right ALT (which in some systems triggers ALT+CTRL)\n\n\n      var isCtrlPressed = (event.ctrlKey || event.metaKey) && !event.altKey;\n\n      if (this.activeEditor && !this.activeEditor.isWaiting()) {\n        if (!isMetaKey(event.keyCode) && !isCtrlMetaKey(event.keyCode) && !isCtrlPressed && !this.isEditorOpened()) {\n          this.openEditor('', event);\n          return;\n        }\n      }\n\n      var isShiftPressed = event.shiftKey;\n      var rangeModifier = isShiftPressed ? this.selection.setRangeEnd : this.selection.setRangeStart;\n      var tabMoves;\n\n      switch (event.keyCode) {\n        case KEY_CODES.A:\n          if (!this.isEditorOpened() && isCtrlPressed) {\n            this.instance.selectAll();\n            event.preventDefault();\n            stopPropagation(event);\n          }\n\n          break;\n\n        case KEY_CODES.ARROW_UP:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n\n          this.moveSelectionUp(isShiftPressed);\n          event.preventDefault();\n          stopPropagation(event);\n          break;\n\n        case KEY_CODES.ARROW_DOWN:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n\n          this.moveSelectionDown(isShiftPressed);\n          event.preventDefault();\n          stopPropagation(event);\n          break;\n\n        case KEY_CODES.ARROW_RIGHT:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n\n          this.moveSelectionRight(isShiftPressed);\n          event.preventDefault();\n          stopPropagation(event);\n          break;\n\n        case KEY_CODES.ARROW_LEFT:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n\n          this.moveSelectionLeft(isShiftPressed);\n          event.preventDefault();\n          stopPropagation(event);\n          break;\n\n        case KEY_CODES.TAB:\n          tabMoves = typeof this.priv.settings.tabMoves === 'function' ? this.priv.settings.tabMoves(event) : this.priv.settings.tabMoves;\n\n          if (isShiftPressed) {\n            // move selection left\n            this.selection.transformStart(-tabMoves.row, -tabMoves.col);\n          } else {\n            // move selection right (add a new column if needed)\n            this.selection.transformStart(tabMoves.row, tabMoves.col, true);\n          }\n\n          event.preventDefault();\n          stopPropagation(event);\n          break;\n\n        case KEY_CODES.BACKSPACE:\n        case KEY_CODES.DELETE:\n          this.instance.emptySelectedCells();\n          this.prepareEditor();\n          event.preventDefault();\n          break;\n\n        case KEY_CODES.F2:\n          /* F2 */\n          if (this.activeEditor) {\n            this.activeEditor.enableFullEditMode();\n          }\n\n          this.openEditor(null, event);\n          event.preventDefault(); // prevent Opera from opening 'Go to Page dialog'\n\n          break;\n\n        case KEY_CODES.ENTER:\n          /* return/enter */\n          if (this.isEditorOpened()) {\n            if (this.activeEditor && this.activeEditor.state !== EditorState.WAITING) {\n              this.closeEditorAndSaveChanges(isCtrlPressed);\n            }\n\n            this.moveSelectionAfterEnter(isShiftPressed);\n          } else if (this.instance.getSettings().enterBeginsEditing) {\n            if (this.cellProperties.readOnly) {\n              this.moveSelectionAfterEnter();\n            } else if (this.activeEditor) {\n              this.activeEditor.enableFullEditMode();\n              this.openEditor(null, event);\n            }\n          } else {\n            this.moveSelectionAfterEnter(isShiftPressed);\n          }\n\n          event.preventDefault(); // don't add newline to field\n\n          stopImmediatePropagation(event); // required by HandsontableEditor\n\n          break;\n\n        case KEY_CODES.ESCAPE:\n          if (this.isEditorOpened()) {\n            this.closeEditorAndRestoreOriginalValue(isCtrlPressed);\n            this.activeEditor.focus();\n          }\n\n          event.preventDefault();\n          break;\n\n        case KEY_CODES.HOME:\n          if (event.ctrlKey || event.metaKey) {\n            rangeModifier.call(this.selection, new CellCoords(0, this.selection.selectedRange.current().from.col));\n          } else {\n            rangeModifier.call(this.selection, new CellCoords(this.selection.selectedRange.current().from.row, 0));\n          }\n\n          event.preventDefault(); // don't scroll the window\n\n          stopPropagation(event);\n          break;\n\n        case KEY_CODES.END:\n          if (event.ctrlKey || event.metaKey) {\n            rangeModifier.call(this.selection, new CellCoords(this.instance.countRows() - 1, this.selection.selectedRange.current().from.col));\n          } else {\n            rangeModifier.call(this.selection, new CellCoords(this.selection.selectedRange.current().from.row, this.instance.countCols() - 1));\n          }\n\n          event.preventDefault(); // don't scroll the window\n\n          stopPropagation(event);\n          break;\n\n        case KEY_CODES.PAGE_UP:\n          this.selection.transformStart(-this.instance.countVisibleRows(), 0);\n          event.preventDefault(); // don't page up the window\n\n          stopPropagation(event);\n          break;\n\n        case KEY_CODES.PAGE_DOWN:\n          this.selection.transformStart(this.instance.countVisibleRows(), 0);\n          event.preventDefault(); // don't page down the window\n\n          stopPropagation(event);\n          break;\n\n        default:\n          break;\n      }\n    }\n    /**\n     * onCellDblClick callback.\n     *\n     * @private\n     * @param {MouseEvent} event\n     * @param {Object} coords\n     * @param {HTMLTableCellElement|HTMLTableHeaderCellElement} elem\n     */\n\n  }, {\n    key: \"onCellDblClick\",\n    value: function onCellDblClick(event, coords, elem) {\n      // may be TD or TH\n      if (elem.nodeName === 'TD') {\n        if (this.activeEditor) {\n          this.activeEditor.enableFullEditMode();\n        }\n\n        this.openEditor(null, event);\n      }\n    }\n    /**\n     * Destroy the instance.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.destroyed = true;\n      this.eventManager.destroy();\n    }\n  }]);\n\n  return EditorManager;\n}();\n\nvar instances = new WeakMap();\n/**\n * @param {Handsontable} hotInstance\n * @param {GridSettings} hotSettings\n * @param {Selection} selection\n * @param {DataMap} datamap\n */\n\nEditorManager.getInstance = function (hotInstance, hotSettings, selection, datamap) {\n  var editorManager = instances.get(hotInstance);\n\n  if (!editorManager) {\n    editorManager = new EditorManager(hotInstance, hotSettings, selection, datamap);\n    instances.set(hotInstance, editorManager);\n  }\n\n  return editorManager;\n};\n\nexport default EditorManager;"]},"metadata":{},"sourceType":"module"}