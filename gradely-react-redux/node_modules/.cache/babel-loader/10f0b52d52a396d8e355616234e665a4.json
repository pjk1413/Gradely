{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pjk14\\\\Desktop\\\\Gradely\\\\gradely-react-redux\\\\src\\\\components\\\\utility-boxes\\\\gradeEntry\\\\Table.js\";\nimport React, { Component } from 'react';\nimport { HotTable } from '@handsontable/react';\nimport 'handsontable/dist/handsontable.full.css';\nimport 'handsontable/dist/handsontable.full.css';\nimport { connect } from 'react-redux';\n\nclass Table extends Component {\n  constructor() {\n    super();\n    this.data = [[], [], []];\n    this.state = {};\n  }\n\n  componentDidUpdate() {\n    let data = [];\n    let columnAssignmentLabel = [];\n    let colHeaders = [];\n    let rowHeaders = [];\n\n    if (this.props.editCourse && this.props.editCourse.assignments) {\n      let rowStudentLabel = [];\n      colHeaders = this.props.editCourse.assignments.map(assignment => {\n        columnAssignmentLabel.push({\n          assignment: assignment\n        });\n        return assignment.name + \" (\" + assignment.totalPoints + \")\";\n      });\n      rowHeaders = this.props.editCourse.studentList.map(student => {\n        rowStudentLabel.push({\n          student: student\n        });\n\n        if (student.user.firstName) {\n          return student.user.firstName;\n        }\n\n        return student.user.firstName + \" \" + student.user.lastName;\n      });\n      rowStudentLabel.forEach(student => {\n        const studentScores = this.props.editCourse.assignments.map(assignment => {\n          let tempScore = 0;\n          console.log(assignment.studentAssignment);\n          return student.student.studentAssignment.filter(score => {\n            return assignment.id === score.assignmentId;\n          });\n        });\n        data.push(studentScores);\n      });\n    } // console.log(rowLabels[0].id)\n    //LOOPS THROUGH EACH STUDENT\n    //END THE CREATION OF THE DATA ARRAY\n    //give us all assignments\n\n\n    console.log(data); //Each array is a series of scores from assignments based on studentid and assignmentid \n  }\n\n  render() {\n    const settings = {\n      licenseKey: 'non-commercial-and-evaluation',\n      data: this.data,\n      // colHeaders: colHeaders,\n      // rowHeaders: rowHeaders,\n      rowHeaderWidth: 150,\n      //columns: columnLabels,\n      //row: rowLabels,\n      // width: \"600\", \n      // height: \"300\",\n      headerTooltips: {\n        rows: true,\n        columns: true,\n        onlyTrimmed: false\n      }\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"hot-app\",\n      className: \"table table-hover table-sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(HotTable, {\n      id: \"example1\",\n      className: \"my-3\",\n      settings: settings,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  editCourse: state.temp.editCourse,\n  grid: state.temp.grid\n});\n\nexport default connect(mapStateToProps, {})(Table);","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/src/components/utility-boxes/gradeEntry/Table.js"],"names":["React","Component","HotTable","connect","Table","constructor","data","state","componentDidUpdate","columnAssignmentLabel","colHeaders","rowHeaders","props","editCourse","assignments","rowStudentLabel","map","assignment","push","name","totalPoints","studentList","student","user","firstName","lastName","forEach","studentScores","tempScore","console","log","studentAssignment","filter","score","id","assignmentId","render","settings","licenseKey","rowHeaderWidth","headerTooltips","rows","columns","onlyTrimmed","mapStateToProps","temp","grid"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAO,yCAAP;AACA,OAAO,yCAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,KAAN,SAAoBH,SAApB,CAA8B;AAC1BI,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,IAAL,GAAY,CACR,EADQ,EACJ,EADI,EACA,EADA,CAAZ;AAGA,SAAKC,KAAL,GAAa,EAAb;AAGH;;AAEDC,EAAAA,kBAAkB,GAAG;AACjB,QAAIF,IAAI,GAAG,EAAX;AACA,QAAIG,qBAAqB,GAAG,EAA5B;AACA,QAAIC,UAAU,GAAG,EAAjB;AACA,QAAIC,UAAU,GAAG,EAAjB;;AAEA,QAAI,KAAKC,KAAL,CAAWC,UAAX,IAAyB,KAAKD,KAAL,CAAWC,UAAX,CAAsBC,WAAnD,EAAgE;AAE5D,UAAIC,eAAe,GAAG,EAAtB;AAEAL,MAAAA,UAAU,GAAG,KAAKE,KAAL,CAAWC,UAAX,CAAsBC,WAAtB,CAAkCE,GAAlC,CAAsCC,UAAU,IAAI;AAC7DR,QAAAA,qBAAqB,CAACS,IAAtB,CAA2B;AAAED,UAAAA,UAAU,EAAEA;AAAd,SAA3B;AACA,eAAOA,UAAU,CAACE,IAAX,GAAkB,IAAlB,GAAyBF,UAAU,CAACG,WAApC,GAAkD,GAAzD;AACH,OAHY,CAAb;AAMAT,MAAAA,UAAU,GAAG,KAAKC,KAAL,CAAWC,UAAX,CAAsBQ,WAAtB,CAAkCL,GAAlC,CAAsCM,OAAO,IAAI;AAC1DP,QAAAA,eAAe,CAACG,IAAhB,CAAqB;AAAEI,UAAAA,OAAO,EAAEA;AAAX,SAArB;;AACA,YAAIA,OAAO,CAACC,IAAR,CAAaC,SAAjB,EAA4B;AACxB,iBAAOF,OAAO,CAACC,IAAR,CAAaC,SAApB;AACH;;AACD,eAAOF,OAAO,CAACC,IAAR,CAAaC,SAAb,GAAyB,GAAzB,GAA+BF,OAAO,CAACC,IAAR,CAAaE,QAAnD;AACH,OANY,CAAb;AAQAV,MAAAA,eAAe,CAACW,OAAhB,CAAwBJ,OAAO,IAAI;AAE/B,cAAMK,aAAa,GAAG,KAAKf,KAAL,CAAWC,UAAX,CAAsBC,WAAtB,CAAkCE,GAAlC,CAAsCC,UAAU,IAAI;AACtE,cAAIW,SAAS,GAAG,CAAhB;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYb,UAAU,CAACc,iBAAvB;AAEA,iBAAOT,OAAO,CAACA,OAAR,CAAgBS,iBAAhB,CAAkCC,MAAlC,CAAyCC,KAAK,IAAI;AAErD,mBAAOhB,UAAU,CAACiB,EAAX,KAAkBD,KAAK,CAACE,YAA/B;AACH,WAHM,CAAP;AAKH,SATqB,CAAtB;AAUA7B,QAAAA,IAAI,CAACY,IAAL,CAAUS,aAAV;AACH,OAbD;AAcH,KAtCgB,CA2CjB;AAEA;AAEA;AAGA;;;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYxB,IAAZ,EAnDiB,CAoDjB;AAEH;;AAGD8B,EAAAA,MAAM,GAAG;AAEL,UAAMC,QAAQ,GAAG;AACbC,MAAAA,UAAU,EAAE,+BADC;AAEbhC,MAAAA,IAAI,EAAE,KAAKA,IAFE;AAGb;AACA;AACAiC,MAAAA,cAAc,EAAE,GALH;AAMb;AACA;AACA;AACA;AACAC,MAAAA,cAAc,EAAE;AACZC,QAAAA,IAAI,EAAE,IADM;AAEZC,QAAAA,OAAO,EAAE,IAFG;AAGZC,QAAAA,WAAW,EAAE;AAHD;AAVH,KAAjB;AAiBA,wBACI;AAAK,MAAA,EAAE,EAAC,SAAR;AAAkB,MAAA,SAAS,EAAC,4BAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAC,UAAb;AAAwB,MAAA,SAAS,EAAC,MAAlC;AAAyC,MAAA,QAAQ,EAAEN,QAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAKH;;AA5FyB;;AA+F9B,MAAMO,eAAe,GAAGrC,KAAK,KAAK;AAC9BM,EAAAA,UAAU,EAAEN,KAAK,CAACsC,IAAN,CAAWhC,UADO;AAE9BiC,EAAAA,IAAI,EAAEvC,KAAK,CAACsC,IAAN,CAAWC;AAFa,CAAL,CAA7B;;AAKA,eAAe3C,OAAO,CAACyC,eAAD,EAAkB,EAAlB,CAAP,CAA6BxC,KAA7B,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { HotTable } from '@handsontable/react'\r\nimport 'handsontable/dist/handsontable.full.css';\r\nimport 'handsontable/dist/handsontable.full.css'\r\nimport { connect } from 'react-redux';\r\n\r\nclass Table extends Component {\r\n    constructor() {\r\n        super()\r\n        this.data = [\r\n            [], [], []\r\n        ]\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        let data = []\r\n        let columnAssignmentLabel = []\r\n        let colHeaders = []\r\n        let rowHeaders = []\r\n\r\n        if (this.props.editCourse && this.props.editCourse.assignments) {\r\n\r\n            let rowStudentLabel = []\r\n\r\n            colHeaders = this.props.editCourse.assignments.map(assignment => {\r\n                columnAssignmentLabel.push({ assignment: assignment })\r\n                return assignment.name + \" (\" + assignment.totalPoints + \")\"\r\n            })\r\n\r\n            \r\n            rowHeaders = this.props.editCourse.studentList.map(student => {\r\n                rowStudentLabel.push({ student: student })\r\n                if (student.user.firstName) {\r\n                    return student.user.firstName\r\n                }\r\n                return student.user.firstName + \" \" + student.user.lastName\r\n            })\r\n\r\n            rowStudentLabel.forEach(student => {\r\n\r\n                const studentScores = this.props.editCourse.assignments.map(assignment => {\r\n                    let tempScore = 0\r\n                    console.log(assignment.studentAssignment)\r\n\r\n                    return student.student.studentAssignment.filter(score => {\r\n                      \r\n                        return assignment.id === score.assignmentId\r\n                    })\r\n\r\n                })\r\n                data.push(studentScores)\r\n            });\r\n        }\r\n\r\n\r\n\r\n\r\n        // console.log(rowLabels[0].id)\r\n\r\n        //LOOPS THROUGH EACH STUDENT\r\n\r\n        //END THE CREATION OF THE DATA ARRAY\r\n\r\n\r\n        //give us all assignments\r\n        console.log(data)\r\n        //Each array is a series of scores from assignments based on studentid and assignmentid \r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const settings = {\r\n            licenseKey: 'non-commercial-and-evaluation',\r\n            data: this.data,\r\n            // colHeaders: colHeaders,\r\n            // rowHeaders: rowHeaders,\r\n            rowHeaderWidth: 150,\r\n            //columns: columnLabels,\r\n            //row: rowLabels,\r\n            // width: \"600\", \r\n            // height: \"300\",\r\n            headerTooltips: {\r\n                rows: true,\r\n                columns: true,\r\n                onlyTrimmed: false\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div id=\"hot-app\" className=\"table table-hover table-sm\">\r\n                <HotTable id=\"example1\" className=\"my-3\" settings={settings} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    editCourse: state.temp.editCourse,\r\n    grid: state.temp.grid,\r\n})\r\n\r\nexport default connect(mapStateToProps, {})(Table)"]},"metadata":{},"sourceType":"module"}