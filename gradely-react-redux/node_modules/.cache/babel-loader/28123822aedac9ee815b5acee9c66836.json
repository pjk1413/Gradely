{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\n/**\n * Immutable unordered Map like interface of point to value pairs.\n *\n * \n */\n\nimport * as Types from \"./types\";\n/** Sets the value for point in map */\n\nexport function set(point, value, map) {\n  return _objectSpread({}, map, _defineProperty({}, point.row, _objectSpread({}, map[point.row], _defineProperty({}, point.column, value))));\n}\nexport function unset(_ref, map) {\n  var row = _ref.row,\n      column = _ref.column;\n\n  if (!(row in map) || !(column in map[row])) {\n    return map;\n  }\n\n  var _String = String(row),\n      _map$_String = map[_String],\n      _String2 = String(column),\n      _ = _map$_String[_String2],\n      nextRow = _objectWithoutProperties(_map$_String, [_String2].map(_toPropertyKey)),\n      nextMap = _objectWithoutProperties(map, [_String].map(_toPropertyKey));\n\n  if (Object.keys(nextRow).length === 0) {\n    return nextMap;\n  }\n\n  return _objectSpread({}, nextMap, _defineProperty({}, row, nextRow));\n}\n/** Gets the value for point in map */\n\nexport function get(point, map) {\n  return map[point.row] && map[point.row][point.column];\n}\n/** Checks if map has point assigned to value */\n\nexport function has(point, map) {\n  return point.row in map && point.column in map[point.row];\n}\nexport function getRow(row, map) {\n  return row in map ? // $FlowFixMe\n  Object.keys(map[row]).map(function (column) {\n    return map[row][column];\n  }) : [];\n}\nexport function getColumn(column, map) {\n  // $FlowFixMe\n  return Object.keys(map).map(function (row) {\n    return map[row][column];\n  });\n}\nvar EMPTY = {};\n/** Creates a new PointMap instance from an array-like or iterable object. */\n\nexport function from(pairs) {\n  return pairs.reduce(function (acc, _ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        point = _ref3[0],\n        value = _ref3[1];\n\n    return set(point, value, acc);\n  }, EMPTY);\n}\n/** Creates a new PointMap instance from a Matrix. */\n\nexport function fromMatrix(matrix) {\n  return matrix.reduce(function (rowAcc, data, row) {\n    return data.reduce(function (colAcc, cell, column) {\n      return cell ? set({\n        row: row,\n        column: column\n      }, cell, colAcc) : colAcc;\n    }, rowAcc);\n  }, EMPTY);\n}\n/** Returns the number of elements in a PointMap object. */\n\nexport function size(map) {\n  var acc = 0;\n\n  var _map_keys = Object.keys(map);\n\n  for (var i = 0; i < _map_keys.length; i++) {\n    var _row = Number(_map_keys[i]);\n\n    var columns = map[_row];\n    acc += Object.keys(columns).length;\n  }\n\n  return acc;\n}\n/** Applies a function against an accumulator and each value and point in the map (from left to right) to reduce it to a single value */\n\nexport function reduce(func, map, initialValue) {\n  var acc = initialValue;\n\n  var _map_keys = Object.keys(map);\n\n  for (var i = 0; i < _map_keys.length; i++) {\n    var _row2 = Number(_map_keys[i]);\n\n    var columns = map[_row2];\n\n    var _columns_keys = Object.keys(columns);\n\n    for (var j = 0; j < _columns_keys.length; j++) {\n      var _column = Number(_columns_keys[j]);\n\n      var _value = columns[_column];\n      acc = func(acc, _value, {\n        row: _row2,\n        column: _column\n      });\n    }\n  }\n\n  return acc;\n}\n/** Creates a new map with the results of calling a provided function on every value in the calling map */\n\nexport function map(func, map) {\n  return reduce(function (acc, value, point) {\n    return set(point, func(value), acc);\n  }, map, from([]));\n}\n/** Creates a new map of all values predicate returns truthy for. The predicate is invoked with two arguments: (value, key) */\n\nexport function filter(predicate, map) {\n  return reduce(function (acc, value, point) {\n    if (predicate(value, point)) {\n      return set(point, value, acc);\n    }\n\n    return acc;\n  }, map, from([]));\n}\n/** Returns whether map has any points set to value */\n\nexport function isEmpty(map) {\n  return Object.keys(map).length === 0;\n}","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/node_modules/react-spreadsheet/dist/point-map.js"],"names":["_slicedToArray","_objectWithoutProperties","_toPropertyKey","_defineProperty","_objectSpread","Types","set","point","value","map","row","column","unset","_ref","_String","String","_map$_String","_String2","_","nextRow","nextMap","Object","keys","length","get","has","getRow","getColumn","EMPTY","from","pairs","reduce","acc","_ref2","_ref3","fromMatrix","matrix","rowAcc","data","colAcc","cell","size","_map_keys","i","_row","Number","columns","func","initialValue","_row2","_columns_keys","j","_column","_value","filter","predicate","isEmpty"],"mappings":"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","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\n\n/**\n * Immutable unordered Map like interface of point to value pairs.\n *\n * \n */\nimport * as Types from \"./types\";\n\n/** Sets the value for point in map */\nexport function set(point, value, map) {\n  return _objectSpread({}, map, _defineProperty({}, point.row, _objectSpread({}, map[point.row], _defineProperty({}, point.column, value))));\n}\nexport function unset(_ref, map) {\n  var row = _ref.row,\n      column = _ref.column;\n\n  if (!(row in map) || !(column in map[row])) {\n    return map;\n  }\n\n  var _String = String(row),\n      _map$_String = map[_String],\n      _String2 = String(column),\n      _ = _map$_String[_String2],\n      nextRow = _objectWithoutProperties(_map$_String, [_String2].map(_toPropertyKey)),\n      nextMap = _objectWithoutProperties(map, [_String].map(_toPropertyKey));\n\n  if (Object.keys(nextRow).length === 0) {\n    return nextMap;\n  }\n\n  return _objectSpread({}, nextMap, _defineProperty({}, row, nextRow));\n}\n/** Gets the value for point in map */\n\nexport function get(point, map) {\n  return map[point.row] && map[point.row][point.column];\n}\n/** Checks if map has point assigned to value */\n\nexport function has(point, map) {\n  return point.row in map && point.column in map[point.row];\n}\nexport function getRow(row, map) {\n  return row in map ? // $FlowFixMe\n  Object.keys(map[row]).map(function (column) {\n    return map[row][column];\n  }) : [];\n}\nexport function getColumn(column, map) {\n  // $FlowFixMe\n  return Object.keys(map).map(function (row) {\n    return map[row][column];\n  });\n}\nvar EMPTY = {};\n/** Creates a new PointMap instance from an array-like or iterable object. */\n\nexport function from(pairs) {\n  return pairs.reduce(function (acc, _ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        point = _ref3[0],\n        value = _ref3[1];\n\n    return set(point, value, acc);\n  }, EMPTY);\n}\n/** Creates a new PointMap instance from a Matrix. */\n\nexport function fromMatrix(matrix) {\n  return matrix.reduce(function (rowAcc, data, row) {\n    return data.reduce(function (colAcc, cell, column) {\n      return cell ? set({\n        row: row,\n        column: column\n      }, cell, colAcc) : colAcc;\n    }, rowAcc);\n  }, EMPTY);\n}\n/** Returns the number of elements in a PointMap object. */\n\nexport function size(map) {\n  var acc = 0;\n\n  var _map_keys = Object.keys(map);\n\n  for (var i = 0; i < _map_keys.length; i++) {\n    var _row = Number(_map_keys[i]);\n\n    var columns = map[_row];\n    acc += Object.keys(columns).length;\n  }\n\n  return acc;\n}\n/** Applies a function against an accumulator and each value and point in the map (from left to right) to reduce it to a single value */\n\nexport function reduce(func, map, initialValue) {\n  var acc = initialValue;\n\n  var _map_keys = Object.keys(map);\n\n  for (var i = 0; i < _map_keys.length; i++) {\n    var _row2 = Number(_map_keys[i]);\n\n    var columns = map[_row2];\n\n    var _columns_keys = Object.keys(columns);\n\n    for (var j = 0; j < _columns_keys.length; j++) {\n      var _column = Number(_columns_keys[j]);\n\n      var _value = columns[_column];\n      acc = func(acc, _value, {\n        row: _row2,\n        column: _column\n      });\n    }\n  }\n\n  return acc;\n}\n/** Creates a new map with the results of calling a provided function on every value in the calling map */\n\nexport function map(func, map) {\n  return reduce(function (acc, value, point) {\n    return set(point, func(value), acc);\n  }, map, from([]));\n}\n/** Creates a new map of all values predicate returns truthy for. The predicate is invoked with two arguments: (value, key) */\n\nexport function filter(predicate, map) {\n  return reduce(function (acc, value, point) {\n    if (predicate(value, point)) {\n      return set(point, value, acc);\n    }\n\n    return acc;\n  }, map, from([]));\n}\n/** Returns whether map has any points set to value */\n\nexport function isEmpty(map) {\n  return Object.keys(map).length === 0;\n}"]},"metadata":{},"sourceType":"module"}