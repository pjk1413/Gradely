{"ast":null,"code":"import { isObject, deepClone } from '../helpers/object';\nimport { extendNotExistingKeys } from './utils';\nimport staticRegister from '../utils/staticRegister';\nimport DEFAULT_DICTIONARY from './languages/en-US';\nvar DEFAULT_LANGUAGE_CODE = DEFAULT_DICTIONARY.languageCode;\n\nvar _staticRegister = staticRegister('languagesDictionaries'),\n    registerGloballyLanguageDictionary = _staticRegister.register,\n    getGlobalLanguageDictionary = _staticRegister.getItem,\n    hasGlobalLanguageDictionary = _staticRegister.hasItem,\n    getGlobalLanguagesDictionaries = _staticRegister.getValues;\n/**\n * Register language dictionary for specific language code.\n *\n * @param {String|Object} languageCodeOrDictionary Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE' or object representing dictionary.\n * @param {Object} dictionary Dictionary for specific language (optional if first parameter has already dictionary).\n */\n\n\nfunction registerLanguage(languageCodeOrDictionary, dictionary) {\n  var languageCode = languageCodeOrDictionary;\n  var dictionaryObject = dictionary; // Dictionary passed as first argument.\n\n  if (isObject(languageCodeOrDictionary)) {\n    dictionaryObject = languageCodeOrDictionary;\n    languageCode = dictionaryObject.languageCode;\n  }\n\n  extendLanguageDictionary(languageCode, dictionaryObject);\n  registerGloballyLanguageDictionary(languageCode, deepClone(dictionaryObject)); // We do not allow user to work with dictionary by reference, it can cause lot of bugs.\n\n  return deepClone(dictionaryObject);\n}\n/**\n * Get language dictionary for specific language code.\n *\n * @param {String} languageCode Language code.\n * @returns {Object} Object with constants representing identifiers for translation (as keys) and corresponding translation phrases (as values).\n */\n\n\nfunction getLanguage(languageCode) {\n  if (!hasLanguage(languageCode)) {\n    return null;\n  }\n\n  return deepClone(getGlobalLanguageDictionary(languageCode));\n}\n/**\n *\n * Get if language with specified language code was registered.\n *\n * @param {String} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n * @returns {Boolean}\n */\n\n\nfunction hasLanguage(languageCode) {\n  return hasGlobalLanguageDictionary(languageCode);\n}\n/**\n * Get default language dictionary.\n *\n * @returns {Object} Object with constants representing identifiers for translation (as keys) and corresponding translation phrases (as values).\n */\n\n\nfunction getDefaultLanguage() {\n  return DEFAULT_DICTIONARY;\n}\n/**\n * Extend handled dictionary by default language dictionary. As result, if any dictionary key isn't defined for specific language, it will be filled with default language value (\"dictionary gaps\" are supplemented).\n *\n * @private\n * @param {String} languageCode Language code.\n * @param {Object} dictionary Dictionary which is extended.\n */\n\n\nfunction extendLanguageDictionary(languageCode, dictionary) {\n  if (languageCode !== DEFAULT_LANGUAGE_CODE) {\n    extendNotExistingKeys(dictionary, getGlobalLanguageDictionary(DEFAULT_LANGUAGE_CODE));\n  }\n}\n/**\n * Get registered language dictionaries.\n *\n * @returns {Array}\n */\n\n\nfunction getLanguages() {\n  return getGlobalLanguagesDictionaries();\n}\n\nexport { registerLanguage as registerLanguageDictionary, getLanguage as getLanguageDictionary, hasLanguage as hasLanguageDictionary, getDefaultLanguage as getDefaultLanguageDictionary, getLanguages as getLanguagesDictionaries, DEFAULT_LANGUAGE_CODE };\n/**\n * Automatically registers default dictionary.\n */\n\nregisterLanguage(DEFAULT_DICTIONARY);","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react/node_modules/handsontable/es/i18n/dictionariesManager.js"],"names":["isObject","deepClone","extendNotExistingKeys","staticRegister","DEFAULT_DICTIONARY","DEFAULT_LANGUAGE_CODE","languageCode","_staticRegister","registerGloballyLanguageDictionary","register","getGlobalLanguageDictionary","getItem","hasGlobalLanguageDictionary","hasItem","getGlobalLanguagesDictionaries","getValues","registerLanguage","languageCodeOrDictionary","dictionary","dictionaryObject","extendLanguageDictionary","getLanguage","hasLanguage","getDefaultLanguage","getLanguages","registerLanguageDictionary","getLanguageDictionary","hasLanguageDictionary","getDefaultLanguageDictionary","getLanguagesDictionaries"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,mBAApC;AACA,SAASC,qBAAT,QAAsC,SAAtC;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,kBAAP,MAA+B,mBAA/B;AACA,IAAIC,qBAAqB,GAAGD,kBAAkB,CAACE,YAA/C;;AAEA,IAAIC,eAAe,GAAGJ,cAAc,CAAC,uBAAD,CAApC;AAAA,IACIK,kCAAkC,GAAGD,eAAe,CAACE,QADzD;AAAA,IAEIC,2BAA2B,GAAGH,eAAe,CAACI,OAFlD;AAAA,IAGIC,2BAA2B,GAAGL,eAAe,CAACM,OAHlD;AAAA,IAIIC,8BAA8B,GAAGP,eAAe,CAACQ,SAJrD;AAKA;;;;;;;;AAQA,SAASC,gBAAT,CAA0BC,wBAA1B,EAAoDC,UAApD,EAAgE;AAC9D,MAAIZ,YAAY,GAAGW,wBAAnB;AACA,MAAIE,gBAAgB,GAAGD,UAAvB,CAF8D,CAE3B;;AAEnC,MAAIlB,QAAQ,CAACiB,wBAAD,CAAZ,EAAwC;AACtCE,IAAAA,gBAAgB,GAAGF,wBAAnB;AACAX,IAAAA,YAAY,GAAGa,gBAAgB,CAACb,YAAhC;AACD;;AAEDc,EAAAA,wBAAwB,CAACd,YAAD,EAAea,gBAAf,CAAxB;AACAX,EAAAA,kCAAkC,CAACF,YAAD,EAAeL,SAAS,CAACkB,gBAAD,CAAxB,CAAlC,CAV8D,CAUiB;;AAE/E,SAAOlB,SAAS,CAACkB,gBAAD,CAAhB;AACD;AACD;;;;;;;;AAQA,SAASE,WAAT,CAAqBf,YAArB,EAAmC;AACjC,MAAI,CAACgB,WAAW,CAAChB,YAAD,CAAhB,EAAgC;AAC9B,WAAO,IAAP;AACD;;AAED,SAAOL,SAAS,CAACS,2BAA2B,CAACJ,YAAD,CAA5B,CAAhB;AACD;AACD;;;;;;;;;AASA,SAASgB,WAAT,CAAqBhB,YAArB,EAAmC;AACjC,SAAOM,2BAA2B,CAACN,YAAD,CAAlC;AACD;AACD;;;;;;;AAOA,SAASiB,kBAAT,GAA8B;AAC5B,SAAOnB,kBAAP;AACD;AACD;;;;;;;;;AASA,SAASgB,wBAAT,CAAkCd,YAAlC,EAAgDY,UAAhD,EAA4D;AAC1D,MAAIZ,YAAY,KAAKD,qBAArB,EAA4C;AAC1CH,IAAAA,qBAAqB,CAACgB,UAAD,EAAaR,2BAA2B,CAACL,qBAAD,CAAxC,CAArB;AACD;AACF;AACD;;;;;;;AAOA,SAASmB,YAAT,GAAwB;AACtB,SAAOV,8BAA8B,EAArC;AACD;;AAED,SAASE,gBAAgB,IAAIS,0BAA7B,EAAyDJ,WAAW,IAAIK,qBAAxE,EAA+FJ,WAAW,IAAIK,qBAA9G,EAAqIJ,kBAAkB,IAAIK,4BAA3J,EAAyLJ,YAAY,IAAIK,wBAAzM,EAAmOxB,qBAAnO;AACA;;;;AAIAW,gBAAgB,CAACZ,kBAAD,CAAhB","sourcesContent":["import { isObject, deepClone } from '../helpers/object';\nimport { extendNotExistingKeys } from './utils';\nimport staticRegister from '../utils/staticRegister';\nimport DEFAULT_DICTIONARY from './languages/en-US';\nvar DEFAULT_LANGUAGE_CODE = DEFAULT_DICTIONARY.languageCode;\n\nvar _staticRegister = staticRegister('languagesDictionaries'),\n    registerGloballyLanguageDictionary = _staticRegister.register,\n    getGlobalLanguageDictionary = _staticRegister.getItem,\n    hasGlobalLanguageDictionary = _staticRegister.hasItem,\n    getGlobalLanguagesDictionaries = _staticRegister.getValues;\n/**\n * Register language dictionary for specific language code.\n *\n * @param {String|Object} languageCodeOrDictionary Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE' or object representing dictionary.\n * @param {Object} dictionary Dictionary for specific language (optional if first parameter has already dictionary).\n */\n\n\nfunction registerLanguage(languageCodeOrDictionary, dictionary) {\n  var languageCode = languageCodeOrDictionary;\n  var dictionaryObject = dictionary; // Dictionary passed as first argument.\n\n  if (isObject(languageCodeOrDictionary)) {\n    dictionaryObject = languageCodeOrDictionary;\n    languageCode = dictionaryObject.languageCode;\n  }\n\n  extendLanguageDictionary(languageCode, dictionaryObject);\n  registerGloballyLanguageDictionary(languageCode, deepClone(dictionaryObject)); // We do not allow user to work with dictionary by reference, it can cause lot of bugs.\n\n  return deepClone(dictionaryObject);\n}\n/**\n * Get language dictionary for specific language code.\n *\n * @param {String} languageCode Language code.\n * @returns {Object} Object with constants representing identifiers for translation (as keys) and corresponding translation phrases (as values).\n */\n\n\nfunction getLanguage(languageCode) {\n  if (!hasLanguage(languageCode)) {\n    return null;\n  }\n\n  return deepClone(getGlobalLanguageDictionary(languageCode));\n}\n/**\n *\n * Get if language with specified language code was registered.\n *\n * @param {String} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n * @returns {Boolean}\n */\n\n\nfunction hasLanguage(languageCode) {\n  return hasGlobalLanguageDictionary(languageCode);\n}\n/**\n * Get default language dictionary.\n *\n * @returns {Object} Object with constants representing identifiers for translation (as keys) and corresponding translation phrases (as values).\n */\n\n\nfunction getDefaultLanguage() {\n  return DEFAULT_DICTIONARY;\n}\n/**\n * Extend handled dictionary by default language dictionary. As result, if any dictionary key isn't defined for specific language, it will be filled with default language value (\"dictionary gaps\" are supplemented).\n *\n * @private\n * @param {String} languageCode Language code.\n * @param {Object} dictionary Dictionary which is extended.\n */\n\n\nfunction extendLanguageDictionary(languageCode, dictionary) {\n  if (languageCode !== DEFAULT_LANGUAGE_CODE) {\n    extendNotExistingKeys(dictionary, getGlobalLanguageDictionary(DEFAULT_LANGUAGE_CODE));\n  }\n}\n/**\n * Get registered language dictionaries.\n *\n * @returns {Array}\n */\n\n\nfunction getLanguages() {\n  return getGlobalLanguagesDictionaries();\n}\n\nexport { registerLanguage as registerLanguageDictionary, getLanguage as getLanguageDictionary, hasLanguage as hasLanguageDictionary, getDefaultLanguage as getDefaultLanguageDictionary, getLanguages as getLanguagesDictionaries, DEFAULT_LANGUAGE_CODE };\n/**\n * Automatically registers default dictionary.\n */\n\nregisterLanguage(DEFAULT_DICTIONARY);"]},"metadata":{},"sourceType":"module"}