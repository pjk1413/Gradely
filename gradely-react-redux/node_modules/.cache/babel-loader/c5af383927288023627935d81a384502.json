{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport { isObject } from './../helpers/object';\nimport { rangeEach } from './../helpers/number';\nimport { stringify } from './../helpers/mixed';\n/**\n * @class SamplesGenerator\n * @util\n */\n\nvar SamplesGenerator = /*#__PURE__*/function () {\n  _createClass(SamplesGenerator, null, [{\n    key: \"SAMPLE_COUNT\",\n\n    /**\n     * Number of samples to take of each value length.\n     *\n     * @type {Number}\n     */\n    get: function get() {\n      return 3;\n    }\n  }]);\n\n  function SamplesGenerator(dataFactory) {\n    _classCallCheck(this, SamplesGenerator);\n    /**\n     * Samples prepared for calculations.\n     *\n     * @type {Map}\n     * @default {null}\n     */\n\n\n    this.samples = null;\n    /**\n     * Function which give the data to collect samples.\n     *\n     * @type {Function}\n     */\n\n    this.dataFactory = dataFactory;\n    /**\n     * Custom number of samples to take of each value length.\n     *\n     * @type {Number}\n     * @default {null}\n     */\n\n    this.customSampleCount = null;\n    /**\n     * `true` if duplicate samples collection should be allowed, `false` otherwise.\n     *\n     * @type {Boolean}\n     * @default {false}\n     */\n\n    this.allowDuplicates = false;\n  }\n  /**\n   * Get the sample count for this instance.\n   *\n   * @returns {Number}\n   */\n\n\n  _createClass(SamplesGenerator, [{\n    key: \"getSampleCount\",\n    value: function getSampleCount() {\n      if (this.customSampleCount) {\n        return this.customSampleCount;\n      }\n\n      return SamplesGenerator.SAMPLE_COUNT;\n    }\n    /**\n     * Set the sample count.\n     *\n     * @param {Number} sampleCount Number of samples to be collected.\n     */\n\n  }, {\n    key: \"setSampleCount\",\n    value: function setSampleCount(sampleCount) {\n      this.customSampleCount = sampleCount;\n    }\n    /**\n     * Set if the generator should accept duplicate values.\n     *\n     * @param {Boolean} allowDuplicates `true` to allow duplicate values.\n     */\n\n  }, {\n    key: \"setAllowDuplicates\",\n    value: function setAllowDuplicates(allowDuplicates) {\n      this.allowDuplicates = allowDuplicates;\n    }\n    /**\n     * Generate samples for row. You can control which area should be sampled by passing `rowRange` object and `colRange` object.\n     *\n     * @param {Object|Number} rowRange\n     * @param {Object} colRange\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"generateRowSamples\",\n    value: function generateRowSamples(rowRange, colRange) {\n      return this.generateSamples('row', colRange, rowRange);\n    }\n    /**\n     * Generate samples for column. You can control which area should be sampled by passing `colRange` object and `rowRange` object.\n     *\n     * @param {Object} colRange Column index.\n     * @param {Object} rowRange Column index.\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"generateColumnSamples\",\n    value: function generateColumnSamples(colRange, rowRange) {\n      return this.generateSamples('col', rowRange, colRange);\n    }\n    /**\n     * Generate collection of samples.\n     *\n     * @param {String} type Type to generate. Can be `col` or `row`.\n     * @param {Object} range\n     * @param {Object|Number} specifierRange\n     * @returns {Map}\n     */\n\n  }, {\n    key: \"generateSamples\",\n    value: function generateSamples(type, range, specifierRange) {\n      var _this = this;\n\n      var samples = new Map();\n\n      var _ref = typeof specifierRange === 'number' ? {\n        from: specifierRange,\n        to: specifierRange\n      } : specifierRange,\n          from = _ref.from,\n          to = _ref.to;\n\n      rangeEach(from, to, function (index) {\n        var sample = _this.generateSample(type, range, index);\n\n        samples.set(index, sample);\n      });\n      return samples;\n    }\n    /**\n     * Generate sample for specified type (`row` or `col`).\n     *\n     * @param {String} type Samples type `row` or `col`.\n     * @param {Object} range\n     * @param {Number} specifierValue\n     * @returns {Map}\n     */\n\n  }, {\n    key: \"generateSample\",\n    value: function generateSample(type, range, specifierValue) {\n      var _this2 = this;\n\n      if (type !== 'row' && type !== 'col') {\n        throw new Error('Unsupported sample type');\n      }\n\n      var samples = new Map();\n      var computedKey = type === 'row' ? 'col' : 'row';\n      var sampledValues = [];\n      rangeEach(range.from, range.to, function (index) {\n        var _ref2 = type === 'row' ? _this2.dataFactory(specifierValue, index) : _this2.dataFactory(index, specifierValue),\n            value = _ref2.value,\n            bundleCountSeed = _ref2.bundleCountSeed;\n\n        var hasCustomBundleSeed = bundleCountSeed > 0;\n        var length;\n\n        if (isObject(value)) {\n          length = Object.keys(value).length;\n        } else if (Array.isArray(value)) {\n          length = value.length;\n        } else {\n          length = stringify(value).length;\n        }\n\n        if (hasCustomBundleSeed) {\n          length += bundleCountSeed;\n        }\n\n        if (!samples.has(length)) {\n          samples.set(length, {\n            needed: _this2.getSampleCount(),\n            strings: []\n          });\n        }\n\n        var sample = samples.get(length);\n\n        if (sample.needed) {\n          var duplicate = sampledValues.indexOf(value) > -1;\n\n          if (!duplicate || _this2.allowDuplicates || hasCustomBundleSeed) {\n            sample.strings.push(_defineProperty({\n              value: value\n            }, computedKey, index));\n            sampledValues.push(value);\n            sample.needed -= 1;\n          }\n        }\n      });\n      return samples;\n    }\n  }]);\n\n  return SamplesGenerator;\n}();\n\nexport default SamplesGenerator;","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/node_modules/handsontable/es/utils/samplesGenerator.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","_createClass","protoProps","staticProps","prototype","isObject","rangeEach","stringify","SamplesGenerator","get","dataFactory","samples","customSampleCount","allowDuplicates","getSampleCount","SAMPLE_COUNT","setSampleCount","sampleCount","setAllowDuplicates","generateRowSamples","rowRange","colRange","generateSamples","generateColumnSamples","type","range","specifierRange","_this","Map","_ref","from","to","index","sample","generateSample","set","specifierValue","_this2","Error","computedKey","sampledValues","_ref2","bundleCountSeed","hasCustomBundleSeed","keys","Array","isArray","has","needed","strings","duplicate","indexOf","push"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.index-of\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.map\";\nimport \"core-js/modules/es.object.keys\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/web.dom-collections.iterator\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { isObject } from './../helpers/object';\nimport { rangeEach } from './../helpers/number';\nimport { stringify } from './../helpers/mixed';\n/**\n * @class SamplesGenerator\n * @util\n */\n\nvar SamplesGenerator =\n/*#__PURE__*/\nfunction () {\n  _createClass(SamplesGenerator, null, [{\n    key: \"SAMPLE_COUNT\",\n\n    /**\n     * Number of samples to take of each value length.\n     *\n     * @type {Number}\n     */\n    get: function get() {\n      return 3;\n    }\n  }]);\n\n  function SamplesGenerator(dataFactory) {\n    _classCallCheck(this, SamplesGenerator);\n\n    /**\n     * Samples prepared for calculations.\n     *\n     * @type {Map}\n     * @default {null}\n     */\n    this.samples = null;\n    /**\n     * Function which give the data to collect samples.\n     *\n     * @type {Function}\n     */\n\n    this.dataFactory = dataFactory;\n    /**\n     * Custom number of samples to take of each value length.\n     *\n     * @type {Number}\n     * @default {null}\n     */\n\n    this.customSampleCount = null;\n    /**\n     * `true` if duplicate samples collection should be allowed, `false` otherwise.\n     *\n     * @type {Boolean}\n     * @default {false}\n     */\n\n    this.allowDuplicates = false;\n  }\n  /**\n   * Get the sample count for this instance.\n   *\n   * @returns {Number}\n   */\n\n\n  _createClass(SamplesGenerator, [{\n    key: \"getSampleCount\",\n    value: function getSampleCount() {\n      if (this.customSampleCount) {\n        return this.customSampleCount;\n      }\n\n      return SamplesGenerator.SAMPLE_COUNT;\n    }\n    /**\n     * Set the sample count.\n     *\n     * @param {Number} sampleCount Number of samples to be collected.\n     */\n\n  }, {\n    key: \"setSampleCount\",\n    value: function setSampleCount(sampleCount) {\n      this.customSampleCount = sampleCount;\n    }\n    /**\n     * Set if the generator should accept duplicate values.\n     *\n     * @param {Boolean} allowDuplicates `true` to allow duplicate values.\n     */\n\n  }, {\n    key: \"setAllowDuplicates\",\n    value: function setAllowDuplicates(allowDuplicates) {\n      this.allowDuplicates = allowDuplicates;\n    }\n    /**\n     * Generate samples for row. You can control which area should be sampled by passing `rowRange` object and `colRange` object.\n     *\n     * @param {Object|Number} rowRange\n     * @param {Object} colRange\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"generateRowSamples\",\n    value: function generateRowSamples(rowRange, colRange) {\n      return this.generateSamples('row', colRange, rowRange);\n    }\n    /**\n     * Generate samples for column. You can control which area should be sampled by passing `colRange` object and `rowRange` object.\n     *\n     * @param {Object} colRange Column index.\n     * @param {Object} rowRange Column index.\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"generateColumnSamples\",\n    value: function generateColumnSamples(colRange, rowRange) {\n      return this.generateSamples('col', rowRange, colRange);\n    }\n    /**\n     * Generate collection of samples.\n     *\n     * @param {String} type Type to generate. Can be `col` or `row`.\n     * @param {Object} range\n     * @param {Object|Number} specifierRange\n     * @returns {Map}\n     */\n\n  }, {\n    key: \"generateSamples\",\n    value: function generateSamples(type, range, specifierRange) {\n      var _this = this;\n\n      var samples = new Map();\n\n      var _ref = typeof specifierRange === 'number' ? {\n        from: specifierRange,\n        to: specifierRange\n      } : specifierRange,\n          from = _ref.from,\n          to = _ref.to;\n\n      rangeEach(from, to, function (index) {\n        var sample = _this.generateSample(type, range, index);\n\n        samples.set(index, sample);\n      });\n      return samples;\n    }\n    /**\n     * Generate sample for specified type (`row` or `col`).\n     *\n     * @param {String} type Samples type `row` or `col`.\n     * @param {Object} range\n     * @param {Number} specifierValue\n     * @returns {Map}\n     */\n\n  }, {\n    key: \"generateSample\",\n    value: function generateSample(type, range, specifierValue) {\n      var _this2 = this;\n\n      if (type !== 'row' && type !== 'col') {\n        throw new Error('Unsupported sample type');\n      }\n\n      var samples = new Map();\n      var computedKey = type === 'row' ? 'col' : 'row';\n      var sampledValues = [];\n      rangeEach(range.from, range.to, function (index) {\n        var _ref2 = type === 'row' ? _this2.dataFactory(specifierValue, index) : _this2.dataFactory(index, specifierValue),\n            value = _ref2.value,\n            bundleCountSeed = _ref2.bundleCountSeed;\n\n        var hasCustomBundleSeed = bundleCountSeed > 0;\n        var length;\n\n        if (isObject(value)) {\n          length = Object.keys(value).length;\n        } else if (Array.isArray(value)) {\n          length = value.length;\n        } else {\n          length = stringify(value).length;\n        }\n\n        if (hasCustomBundleSeed) {\n          length += bundleCountSeed;\n        }\n\n        if (!samples.has(length)) {\n          samples.set(length, {\n            needed: _this2.getSampleCount(),\n            strings: []\n          });\n        }\n\n        var sample = samples.get(length);\n\n        if (sample.needed) {\n          var duplicate = sampledValues.indexOf(value) > -1;\n\n          if (!duplicate || _this2.allowDuplicates || hasCustomBundleSeed) {\n            sample.strings.push(_defineProperty({\n              value: value\n            }, computedKey, index));\n            sampledValues.push(value);\n            sample.needed -= 1;\n          }\n        }\n      });\n      return samples;\n    }\n  }]);\n\n  return SamplesGenerator;\n}();\n\nexport default SamplesGenerator;"]},"metadata":{},"sourceType":"module"}