{"ast":null,"code":"/**\n * Utility to register editors and common namespace for keeping reference to all editor classes\n */\nimport staticRegister from './../utils/staticRegister';\nimport Hooks from './../pluginHooks';\nimport BaseEditor from './_baseEditor';\nimport AutocompleteEditor from './autocompleteEditor';\nimport CheckboxEditor from './checkboxEditor';\nimport DateEditor from './dateEditor';\nimport DropdownEditor from './dropdownEditor';\nimport HandsontableEditor from './handsontableEditor';\nimport NumericEditor from './numericEditor';\nimport PasswordEditor from './passwordEditor';\nimport SelectEditor from './selectEditor';\nimport TextEditor from './textEditor';\nvar registeredEditorClasses = new WeakMap();\n\nvar _staticRegister = staticRegister('editors'),\n    register = _staticRegister.register,\n    getItem = _staticRegister.getItem,\n    hasItem = _staticRegister.hasItem,\n    getNames = _staticRegister.getNames,\n    getValues = _staticRegister.getValues;\n\n_register('base', BaseEditor);\n\n_register('autocomplete', AutocompleteEditor);\n\n_register('checkbox', CheckboxEditor);\n\n_register('date', DateEditor);\n\n_register('dropdown', DropdownEditor);\n\n_register('handsontable', HandsontableEditor);\n\n_register('numeric', NumericEditor);\n\n_register('password', PasswordEditor);\n\n_register('select', SelectEditor);\n\n_register('text', TextEditor);\n\nexport function RegisteredEditor(editorClass) {\n  var instances = {};\n  var Clazz = editorClass;\n\n  this.getConstructor = function () {\n    return editorClass;\n  };\n\n  this.getInstance = function (hotInstance) {\n    if (!(hotInstance.guid in instances)) {\n      instances[hotInstance.guid] = new Clazz(hotInstance);\n    }\n\n    return instances[hotInstance.guid];\n  };\n\n  Hooks.getSingleton().add('afterDestroy', function () {\n    instances[this.guid] = null;\n  });\n}\n/**\n * Returns instance (singleton) of editor class.\n *\n * @param {String} name Name of an editor under which it has been stored.\n * @param {Object} hotInstance Instance of Handsontable.\n * @returns {Function} Returns instance of editor.\n */\n\nexport function _getEditorInstance(name, hotInstance) {\n  var editor;\n\n  if (typeof name === 'function') {\n    if (!registeredEditorClasses.get(name)) {\n      _register(null, name);\n    }\n\n    editor = registeredEditorClasses.get(name);\n  } else if (typeof name === 'string') {\n    editor = getItem(name);\n  } else {\n    throw Error('Only strings and functions can be passed as \"editor\" parameter');\n  }\n\n  if (!editor) {\n    throw Error(\"No editor registered under name \\\"\".concat(name, \"\\\"\"));\n  }\n\n  return editor.getInstance(hotInstance);\n}\n/**\n * Retrieve editor class.\n *\n * @param {String} name Editor identification.\n * @returns {Function} Returns editor class.\n */\n\nfunction _getItem(name) {\n  if (!hasItem(name)) {\n    throw Error(\"No registered editor found under \\\"\".concat(name, \"\\\" name\"));\n  }\n\n  return getItem(name).getConstructor();\n}\n/**\n * Register editor class under specified name.\n *\n * @param {String} name Editor identification.\n * @param {Function} editorClass Editor class.\n */\n\n\nfunction _register(name, editorClass) {\n  var editorWrapper = new RegisteredEditor(editorClass);\n\n  if (typeof name === 'string') {\n    register(name, editorWrapper);\n  }\n\n  registeredEditorClasses.set(editorClass, editorWrapper);\n}\n\nexport { _register as registerEditor, _getItem as getEditor, _getEditorInstance as getEditorInstance, hasItem as hasEditor, getNames as getRegisteredEditorNames, getValues as getRegisteredEditors };","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react/node_modules/handsontable/es/editors/index.js"],"names":["staticRegister","Hooks","BaseEditor","AutocompleteEditor","CheckboxEditor","DateEditor","DropdownEditor","HandsontableEditor","NumericEditor","PasswordEditor","SelectEditor","TextEditor","registeredEditorClasses","WeakMap","_staticRegister","register","getItem","hasItem","getNames","getValues","_register","RegisteredEditor","editorClass","instances","Clazz","getConstructor","getInstance","hotInstance","guid","getSingleton","add","_getEditorInstance","name","editor","get","Error","concat","_getItem","editorWrapper","set","registerEditor","getEditor","getEditorInstance","hasEditor","getRegisteredEditorNames","getRegisteredEditors"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/es.weak-map\";\nimport \"core-js/modules/web.dom-collections.iterator\";\n\n/**\n * Utility to register editors and common namespace for keeping reference to all editor classes\n */\nimport staticRegister from './../utils/staticRegister';\nimport Hooks from './../pluginHooks';\nimport BaseEditor from './_baseEditor';\nimport AutocompleteEditor from './autocompleteEditor';\nimport CheckboxEditor from './checkboxEditor';\nimport DateEditor from './dateEditor';\nimport DropdownEditor from './dropdownEditor';\nimport HandsontableEditor from './handsontableEditor';\nimport NumericEditor from './numericEditor';\nimport PasswordEditor from './passwordEditor';\nimport SelectEditor from './selectEditor';\nimport TextEditor from './textEditor';\nvar registeredEditorClasses = new WeakMap();\n\nvar _staticRegister = staticRegister('editors'),\n    register = _staticRegister.register,\n    getItem = _staticRegister.getItem,\n    hasItem = _staticRegister.hasItem,\n    getNames = _staticRegister.getNames,\n    getValues = _staticRegister.getValues;\n\n_register('base', BaseEditor);\n\n_register('autocomplete', AutocompleteEditor);\n\n_register('checkbox', CheckboxEditor);\n\n_register('date', DateEditor);\n\n_register('dropdown', DropdownEditor);\n\n_register('handsontable', HandsontableEditor);\n\n_register('numeric', NumericEditor);\n\n_register('password', PasswordEditor);\n\n_register('select', SelectEditor);\n\n_register('text', TextEditor);\n\nexport function RegisteredEditor(editorClass) {\n  var instances = {};\n  var Clazz = editorClass;\n\n  this.getConstructor = function () {\n    return editorClass;\n  };\n\n  this.getInstance = function (hotInstance) {\n    if (!(hotInstance.guid in instances)) {\n      instances[hotInstance.guid] = new Clazz(hotInstance);\n    }\n\n    return instances[hotInstance.guid];\n  };\n\n  Hooks.getSingleton().add('afterDestroy', function () {\n    instances[this.guid] = null;\n  });\n}\n/**\n * Returns instance (singleton) of editor class.\n *\n * @param {String} name Name of an editor under which it has been stored.\n * @param {Object} hotInstance Instance of Handsontable.\n * @returns {Function} Returns instance of editor.\n */\n\nexport function _getEditorInstance(name, hotInstance) {\n  var editor;\n\n  if (typeof name === 'function') {\n    if (!registeredEditorClasses.get(name)) {\n      _register(null, name);\n    }\n\n    editor = registeredEditorClasses.get(name);\n  } else if (typeof name === 'string') {\n    editor = getItem(name);\n  } else {\n    throw Error('Only strings and functions can be passed as \"editor\" parameter');\n  }\n\n  if (!editor) {\n    throw Error(\"No editor registered under name \\\"\".concat(name, \"\\\"\"));\n  }\n\n  return editor.getInstance(hotInstance);\n}\n/**\n * Retrieve editor class.\n *\n * @param {String} name Editor identification.\n * @returns {Function} Returns editor class.\n */\n\nfunction _getItem(name) {\n  if (!hasItem(name)) {\n    throw Error(\"No registered editor found under \\\"\".concat(name, \"\\\" name\"));\n  }\n\n  return getItem(name).getConstructor();\n}\n/**\n * Register editor class under specified name.\n *\n * @param {String} name Editor identification.\n * @param {Function} editorClass Editor class.\n */\n\n\nfunction _register(name, editorClass) {\n  var editorWrapper = new RegisteredEditor(editorClass);\n\n  if (typeof name === 'string') {\n    register(name, editorWrapper);\n  }\n\n  registeredEditorClasses.set(editorClass, editorWrapper);\n}\n\nexport { _register as registerEditor, _getItem as getEditor, _getEditorInstance as getEditorInstance, hasItem as hasEditor, getNames as getRegisteredEditorNames, getValues as getRegisteredEditors };"]},"metadata":{},"sourceType":"module"}