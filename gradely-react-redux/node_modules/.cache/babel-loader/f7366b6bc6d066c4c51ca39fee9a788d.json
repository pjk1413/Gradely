{"ast":null,"code":"import \"core-js/modules/es.string.replace\";\nimport \"core-js/modules/web.immediate\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nimport { addClass, empty, isChildOfWebComponentTable, removeClass } from './helpers/dom/element';\nimport { columnFactory } from './helpers/setting';\nimport { isFunction } from './helpers/function';\nimport { warn } from './helpers/console';\nimport { isDefined, isUndefined, isRegExp, _injectProductInfo, isEmpty } from './helpers/mixed';\nimport { isMobileBrowser } from './helpers/browser';\nimport DataMap from './dataMap';\nimport EditorManager from './editorManager';\nimport EventManager from './eventManager';\nimport { deepClone, duckSchema, extend, isObject, isObjectEqual, deepObjectSize, hasOwnProperty, createObjectPropListener, objectEach } from './helpers/object';\nimport { arrayFlatten, arrayMap, arrayEach, arrayReduce } from './helpers/array';\nimport { instanceToHTML } from './utils/parseTable';\nimport { getPlugin } from './plugins';\nimport { getRenderer } from './renderers';\nimport { getValidator } from './validators';\nimport { randomString } from './helpers/string';\nimport { rangeEach, rangeEachReverse } from './helpers/number';\nimport TableView from './tableView';\nimport DataSource from './dataSource';\nimport { translateRowsToColumns, cellMethodLookupFactory, spreadsheetColumnLabel } from './helpers/data';\nimport { getTranslator } from './utils/recordTranslator';\nimport { registerAsRootInstance, hasValidParameter, isRootInstance } from './utils/rootInstance';\nimport { CellCoords, ViewportColumnsCalculator } from './3rdparty/walkontable/src';\nimport Hooks from './pluginHooks';\nimport DefaultSettings from './defaultSettings';\nimport { getCellType } from './cellTypes';\nimport { getTranslatedPhrase } from './i18n';\nimport { hasLanguageDictionary } from './i18n/dictionariesManager';\nimport { warnUserAboutLanguageRegistration, applyLanguageSetting, normalizeLanguageCode } from './i18n/utils';\nimport { startObserving as keyStateStartObserving, stopObserving as keyStateStopObserving } from './utils/keyStateObserver';\nimport { Selection } from './selection';\nvar activeGuid = null;\n/**\n * Handsontable constructor\n *\n * @core\n * @constructor Core\n * @description\n *\n * After Handsontable is constructed, you can modify the grid behavior using the available public methods.\n *\n * ---\n * ## How to call methods\n *\n * These are 2 equal ways to call a Handsontable method:\n *\n * ```js\n * // all following examples assume that you constructed Handsontable like this\n * const hot = new Handsontable(document.getElementById('example1'), options);\n *\n * // now, to use setDataAtCell method, you can either:\n * ht.setDataAtCell(0, 0, 'new value');\n * ```\n *\n * Alternatively, you can call the method using jQuery wrapper (__obsolete__, requires initialization using our jQuery guide\n * ```js\n *   $('#example1').handsontable('setDataAtCell', 0, 0, 'new value');\n * ```\n * ---\n */\n\nexport default function Core(rootElement, userSettings) {\n  var _this = this;\n\n  var rootInstanceSymbol = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var preventScrollingToCell = false;\n  var instance = this;\n\n  var GridSettings = function GridSettings() {};\n\n  var eventManager = new EventManager(instance);\n  var priv;\n  var datamap;\n  var dataSource;\n  var grid;\n  var editorManager;\n  extend(GridSettings.prototype, DefaultSettings.prototype); // create grid settings as a copy of default settings\n\n  extend(GridSettings.prototype, userSettings); // overwrite defaults with user settings\n\n  extend(GridSettings.prototype, expandType(userSettings));\n  applyLanguageSetting(GridSettings.prototype, userSettings.language);\n\n  if (hasValidParameter(rootInstanceSymbol)) {\n    registerAsRootInstance(this);\n  } // TODO: check if references to DOM elements should be move to UI layer (Walkontable)\n\n  /**\n   * Reference to the container element.\n   *\n   * @private\n   * @type {HTMLElement}\n   */\n\n\n  this.rootElement = rootElement;\n  /**\n   * The nearest document over container.\n   *\n   * @private\n   * @type {Document}\n   */\n\n  this.rootDocument = rootElement.ownerDocument;\n  /**\n   * Window object over container's document.\n   *\n   * @private\n   * @type {Window}\n   */\n\n  this.rootWindow = this.rootDocument.defaultView;\n  keyStateStartObserving(this.rootDocument);\n  this.isDestroyed = false;\n  this.isHotTableEnv = isChildOfWebComponentTable(this.rootElement);\n  EventManager.isHotTableEnv = this.isHotTableEnv;\n  this.container = this.rootDocument.createElement('div');\n  this.renderCall = false;\n  rootElement.insertBefore(this.container, rootElement.firstChild);\n\n  if (isRootInstance(this)) {\n    _injectProductInfo(userSettings.licenseKey, rootElement);\n  }\n\n  this.guid = \"ht_\".concat(randomString()); // this is the namespace for global events\n\n  var recordTranslator = getTranslator(instance);\n  dataSource = new DataSource(instance);\n\n  if (!this.rootElement.id || this.rootElement.id.substring(0, 3) === 'ht_') {\n    this.rootElement.id = this.guid; // if root element does not have an id, assign a random id\n  }\n\n  priv = {\n    cellSettings: [],\n    columnSettings: [],\n    columnsSettingConflicts: ['data', 'width', 'language'],\n    settings: new GridSettings(),\n    // current settings instance\n    selRange: null,\n    // exposed by public method `getSelectedRange`\n    isPopulated: null,\n    scrollable: null,\n    firstRun: true\n  };\n  var selection = new Selection(priv.settings, {\n    countCols: function countCols() {\n      return instance.countCols();\n    },\n    countRows: function countRows() {\n      return instance.countRows();\n    },\n    propToCol: function propToCol(prop) {\n      return datamap.propToCol(prop);\n    },\n    isEditorOpened: function isEditorOpened() {\n      return instance.getActiveEditor() ? instance.getActiveEditor().isOpened() : false;\n    }\n  });\n  this.selection = selection;\n  this.selection.addLocalHook('beforeSetRangeStart', function (cellCoords) {\n    _this.runHooks('beforeSetRangeStart', cellCoords);\n  });\n  this.selection.addLocalHook('beforeSetRangeStartOnly', function (cellCoords) {\n    _this.runHooks('beforeSetRangeStartOnly', cellCoords);\n  });\n  this.selection.addLocalHook('beforeSetRangeEnd', function (cellCoords) {\n    _this.runHooks('beforeSetRangeEnd', cellCoords);\n\n    if (cellCoords.row < 0) {\n      cellCoords.row = _this.view.wt.wtTable.getFirstVisibleRow();\n    }\n\n    if (cellCoords.col < 0) {\n      cellCoords.col = _this.view.wt.wtTable.getFirstVisibleColumn();\n    }\n  });\n  this.selection.addLocalHook('afterSetRangeEnd', function (cellCoords) {\n    var preventScrolling = createObjectPropListener(false);\n\n    var selectionRange = _this.selection.getSelectedRange();\n\n    var _selectionRange$curre = selectionRange.current(),\n        from = _selectionRange$curre.from,\n        to = _selectionRange$curre.to;\n\n    var selectionLayerLevel = selectionRange.size() - 1;\n\n    _this.runHooks('afterSelection', from.row, from.col, to.row, to.col, preventScrolling, selectionLayerLevel);\n\n    _this.runHooks('afterSelectionByProp', from.row, instance.colToProp(from.col), to.row, instance.colToProp(to.col), preventScrolling, selectionLayerLevel);\n\n    var isSelectedByAnyHeader = _this.selection.isSelectedByAnyHeader();\n\n    var currentSelectedRange = _this.selection.selectedRange.current();\n\n    var scrollToCell = true;\n\n    if (preventScrollingToCell) {\n      scrollToCell = false;\n    }\n\n    if (preventScrolling.isTouched()) {\n      scrollToCell = !preventScrolling.value;\n    }\n\n    var isSelectedByRowHeader = _this.selection.isSelectedByRowHeader();\n\n    var isSelectedByColumnHeader = _this.selection.isSelectedByColumnHeader();\n\n    if (scrollToCell !== false) {\n      if (!isSelectedByAnyHeader) {\n        if (currentSelectedRange && !_this.selection.isMultiple()) {\n          _this.view.scrollViewport(currentSelectedRange.from);\n        } else {\n          _this.view.scrollViewport(cellCoords);\n        }\n      } else if (isSelectedByRowHeader) {\n        _this.view.scrollViewportVertically(cellCoords.row);\n      } else if (isSelectedByColumnHeader) {\n        _this.view.scrollViewportHorizontally(cellCoords.col);\n      }\n    } // @TODO: These CSS classes are no longer needed anymore. They are used only as a indicator of the selected\n    // rows/columns in the MergedCells plugin (via border.js#L520 in the walkontable module). After fixing\n    // the Border class this should be removed.\n\n\n    if (isSelectedByRowHeader && isSelectedByColumnHeader) {\n      addClass(_this.rootElement, ['ht__selection--rows', 'ht__selection--columns']);\n    } else if (isSelectedByRowHeader) {\n      removeClass(_this.rootElement, 'ht__selection--columns');\n      addClass(_this.rootElement, 'ht__selection--rows');\n    } else if (isSelectedByColumnHeader) {\n      removeClass(_this.rootElement, 'ht__selection--rows');\n      addClass(_this.rootElement, 'ht__selection--columns');\n    } else {\n      removeClass(_this.rootElement, ['ht__selection--rows', 'ht__selection--columns']);\n    }\n\n    _this._refreshBorders(null);\n  });\n  this.selection.addLocalHook('afterSelectionFinished', function (cellRanges) {\n    var selectionLayerLevel = cellRanges.length - 1;\n    var _cellRanges$selection = cellRanges[selectionLayerLevel],\n        from = _cellRanges$selection.from,\n        to = _cellRanges$selection.to;\n\n    _this.runHooks('afterSelectionEnd', from.row, from.col, to.row, to.col, selectionLayerLevel);\n\n    _this.runHooks('afterSelectionEndByProp', from.row, instance.colToProp(from.col), to.row, instance.colToProp(to.col), selectionLayerLevel);\n  });\n  this.selection.addLocalHook('afterIsMultipleSelection', function (isMultiple) {\n    var changedIsMultiple = _this.runHooks('afterIsMultipleSelection', isMultiple.value);\n\n    if (isMultiple.value) {\n      isMultiple.value = changedIsMultiple;\n    }\n  });\n  this.selection.addLocalHook('beforeModifyTransformStart', function (cellCoordsDelta) {\n    _this.runHooks('modifyTransformStart', cellCoordsDelta);\n  });\n  this.selection.addLocalHook('afterModifyTransformStart', function (coords, rowTransformDir, colTransformDir) {\n    _this.runHooks('afterModifyTransformStart', coords, rowTransformDir, colTransformDir);\n  });\n  this.selection.addLocalHook('beforeModifyTransformEnd', function (cellCoordsDelta) {\n    _this.runHooks('modifyTransformEnd', cellCoordsDelta);\n  });\n  this.selection.addLocalHook('afterModifyTransformEnd', function (coords, rowTransformDir, colTransformDir) {\n    _this.runHooks('afterModifyTransformEnd', coords, rowTransformDir, colTransformDir);\n  });\n  this.selection.addLocalHook('afterDeselect', function () {\n    editorManager.destroyEditor();\n\n    _this._refreshBorders();\n\n    removeClass(_this.rootElement, ['ht__selection--rows', 'ht__selection--columns']);\n\n    _this.runHooks('afterDeselect');\n  });\n  this.selection.addLocalHook('insertRowRequire', function (totalRows) {\n    _this.alter('insert_row', totalRows, 1, 'auto');\n  });\n  this.selection.addLocalHook('insertColRequire', function (totalCols) {\n    _this.alter('insert_col', totalCols, 1, 'auto');\n  });\n  grid = {\n    /**\n     * Inserts or removes rows and columns.\n     *\n     * @memberof Core#\n     * @function alter\n     * @private\n     * @param {String} action Possible values: \"insert_row\", \"insert_col\", \"remove_row\", \"remove_col\".\n     * @param {Number|Array} index Row or column visual index which from the alter action will be triggered.\n     *                             Alter actions such as \"remove_row\" and \"remove_col\" support array indexes in the\n     *                             format `[[index, amount], [index, amount]...]` this can be used to remove\n     *                             non-consecutive columns or rows in one call.\n     * @param {Number} [amount=1] Ammount rows or columns to remove.\n     * @param {String} [source] Optional. Source of hook runner.\n     * @param {Boolean} [keepEmptyRows] Optional. Flag for preventing deletion of empty rows.\n     */\n    alter: function alter(action, index) {\n      var amount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var source = arguments.length > 3 ? arguments[3] : undefined;\n      var keepEmptyRows = arguments.length > 4 ? arguments[4] : undefined;\n      var delta;\n\n      function spliceWith(data, startIndex, count, toInject) {\n        var valueFactory = function valueFactory() {\n          var result;\n\n          if (toInject === 'array') {\n            result = [];\n          } else if (toInject === 'object') {\n            result = {};\n          }\n\n          return result;\n        };\n\n        var spliceArgs = arrayMap(new Array(count), function () {\n          return valueFactory();\n        });\n        spliceArgs.unshift(startIndex, 0);\n        data.splice.apply(data, _toConsumableArray(spliceArgs));\n      }\n\n      var normalizeIndexesGroup = function normalizeIndexesGroup(indexes) {\n        if (indexes.length === 0) {\n          return [];\n        }\n\n        var sortedIndexes = _toConsumableArray(indexes); // Sort the indexes in ascending order.\n\n\n        sortedIndexes.sort(function (_ref, _ref2) {\n          var _ref3 = _slicedToArray(_ref, 1),\n              indexA = _ref3[0];\n\n          var _ref4 = _slicedToArray(_ref2, 1),\n              indexB = _ref4[0];\n\n          if (indexA === indexB) {\n            return 0;\n          }\n\n          return indexA > indexB ? 1 : -1;\n        }); // Normalize the {index, amount} groups into bigger groups.\n\n        var normalizedIndexes = arrayReduce(sortedIndexes, function (acc, _ref5) {\n          var _ref6 = _slicedToArray(_ref5, 2),\n              groupIndex = _ref6[0],\n              groupAmount = _ref6[1];\n\n          var previousItem = acc[acc.length - 1];\n\n          var _previousItem = _slicedToArray(previousItem, 2),\n              prevIndex = _previousItem[0],\n              prevAmount = _previousItem[1];\n\n          var prevLastIndex = prevIndex + prevAmount;\n\n          if (groupIndex <= prevLastIndex) {\n            var amountToAdd = Math.max(groupAmount - (prevLastIndex - groupIndex), 0);\n            previousItem[1] += amountToAdd;\n          } else {\n            acc.push([groupIndex, groupAmount]);\n          }\n\n          return acc;\n        }, [sortedIndexes[0]]);\n        return normalizedIndexes;\n      };\n      /* eslint-disable no-case-declarations */\n\n\n      switch (action) {\n        case 'insert_row':\n          var numberOfSourceRows = instance.countSourceRows();\n\n          if (instance.getSettings().maxRows === numberOfSourceRows) {\n            return;\n          } // eslint-disable-next-line no-param-reassign\n\n\n          index = isDefined(index) ? index : numberOfSourceRows;\n          delta = datamap.createRow(index, amount, source);\n          spliceWith(priv.cellSettings, index, amount, 'array');\n\n          if (delta) {\n            if (selection.isSelected() && selection.selectedRange.current().from.row >= index) {\n              selection.selectedRange.current().from.row += delta;\n              selection.transformEnd(delta, 0); // will call render() internally\n            } else {\n              instance._refreshBorders(); // it will call render and prepare methods\n\n            }\n          }\n\n          break;\n\n        case 'insert_col':\n          delta = datamap.createCol(index, amount, source);\n\n          for (var row = 0, len = instance.countSourceRows(); row < len; row++) {\n            if (priv.cellSettings[row]) {\n              spliceWith(priv.cellSettings[row], index, amount);\n            }\n          }\n\n          if (delta) {\n            if (Array.isArray(instance.getSettings().colHeaders)) {\n              var spliceArray = [index, 0];\n              spliceArray.length += delta; // inserts empty (undefined) elements at the end of an array\n\n              Array.prototype.splice.apply(instance.getSettings().colHeaders, spliceArray); // inserts empty (undefined) elements into the colHeader array\n            }\n\n            if (selection.isSelected() && selection.selectedRange.current().from.col >= index) {\n              selection.selectedRange.current().from.col += delta;\n              selection.transformEnd(0, delta); // will call render() internally\n            } else {\n              instance._refreshBorders(); // it will call render and prepare methods\n\n            }\n          }\n\n          break;\n\n        case 'remove_row':\n          var removeRow = function removeRow(indexes) {\n            var offset = 0; // Normalize the {index, amount} groups into bigger groups.\n\n            arrayEach(indexes, function (_ref7) {\n              var _ref8 = _slicedToArray(_ref7, 2),\n                  groupIndex = _ref8[0],\n                  groupAmount = _ref8[1];\n\n              var calcIndex = isEmpty(groupIndex) ? instance.countRows() - 1 : Math.max(groupIndex - offset, 0); // If the 'index' is an integer decrease it by 'offset' otherwise pass it through to make the value\n              // compatible with datamap.removeCol method.\n\n              if (Number.isInteger(groupIndex)) {\n                // eslint-disable-next-line no-param-reassign\n                groupIndex = Math.max(groupIndex - offset, 0);\n              } // TODO: for datamap.removeRow index should be passed as it is (with undefined and null values). If not, the logic\n              // inside the datamap.removeRow breaks the removing functionality.\n\n\n              datamap.removeRow(groupIndex, groupAmount, source);\n              priv.cellSettings.splice(calcIndex, amount);\n              var totalRows = instance.countRows();\n              var fixedRowsTop = instance.getSettings().fixedRowsTop;\n\n              if (fixedRowsTop >= calcIndex + 1) {\n                instance.getSettings().fixedRowsTop -= Math.min(groupAmount, fixedRowsTop - calcIndex);\n              }\n\n              var fixedRowsBottom = instance.getSettings().fixedRowsBottom;\n\n              if (fixedRowsBottom && calcIndex >= totalRows - fixedRowsBottom) {\n                instance.getSettings().fixedRowsBottom -= Math.min(groupAmount, fixedRowsBottom);\n              }\n\n              offset += groupAmount;\n            });\n          };\n\n          if (Array.isArray(index)) {\n            removeRow(normalizeIndexesGroup(index));\n          } else {\n            removeRow([[index, amount]]);\n          }\n\n          grid.adjustRowsAndCols();\n\n          instance._refreshBorders(); // it will call render and prepare methods\n\n\n          break;\n\n        case 'remove_col':\n          var removeCol = function removeCol(indexes) {\n            var offset = 0; // Normalize the {index, amount} groups into bigger groups.\n\n            arrayEach(indexes, function (_ref9) {\n              var _ref10 = _slicedToArray(_ref9, 2),\n                  groupIndex = _ref10[0],\n                  groupAmount = _ref10[1];\n\n              var calcIndex = isEmpty(groupIndex) ? instance.countCols() - 1 : Math.max(groupIndex - offset, 0);\n              var visualColumnIndex = recordTranslator.toPhysicalColumn(calcIndex); // If the 'index' is an integer decrease it by 'offset' otherwise pass it through to make the value\n              // compatible with datamap.removeCol method.\n\n              if (Number.isInteger(groupIndex)) {\n                // eslint-disable-next-line no-param-reassign\n                groupIndex = Math.max(groupIndex - offset, 0);\n              } // TODO: for datamap.removeCol index should be passed as it is (with undefined and null values). If not, the logic\n              // inside the datamap.removeCol breaks the removing functionality.\n\n\n              datamap.removeCol(groupIndex, groupAmount, source);\n\n              for (var _row = 0, _len = instance.countSourceRows(); _row < _len; _row++) {\n                if (priv.cellSettings[_row]) {\n                  // if row hasn't been rendered it wouldn't have cellSettings\n                  priv.cellSettings[_row].splice(visualColumnIndex, groupAmount);\n                }\n              }\n\n              var fixedColumnsLeft = instance.getSettings().fixedColumnsLeft;\n\n              if (fixedColumnsLeft >= calcIndex + 1) {\n                instance.getSettings().fixedColumnsLeft -= Math.min(groupAmount, fixedColumnsLeft - calcIndex);\n              }\n\n              if (Array.isArray(instance.getSettings().colHeaders)) {\n                if (typeof visualColumnIndex === 'undefined') {\n                  visualColumnIndex = -1;\n                }\n\n                instance.getSettings().colHeaders.splice(visualColumnIndex, groupAmount);\n              }\n\n              offset += groupAmount;\n            });\n          };\n\n          if (Array.isArray(index)) {\n            removeCol(normalizeIndexesGroup(index));\n          } else {\n            removeCol([[index, amount]]);\n          }\n\n          grid.adjustRowsAndCols();\n\n          instance._refreshBorders(); // it will call render and prepare methods\n\n\n          break;\n\n        default:\n          throw new Error(\"There is no such action \\\"\".concat(action, \"\\\"\"));\n      }\n\n      if (!keepEmptyRows) {\n        grid.adjustRowsAndCols(); // makes sure that we did not add rows that will be removed in next refresh\n      }\n    },\n\n    /**\n     * Makes sure there are empty rows at the bottom of the table\n     */\n    adjustRowsAndCols: function adjustRowsAndCols() {\n      if (priv.settings.minRows) {\n        // should I add empty rows to data source to meet minRows?\n        var rows = instance.countRows();\n\n        if (rows < priv.settings.minRows) {\n          for (var r = 0, minRows = priv.settings.minRows; r < minRows - rows; r++) {\n            datamap.createRow(instance.countRows(), 1, 'auto');\n          }\n        }\n      }\n\n      if (priv.settings.minSpareRows) {\n        var emptyRows = instance.countEmptyRows(true); // should I add empty rows to meet minSpareRows?\n\n        if (emptyRows < priv.settings.minSpareRows) {\n          for (; emptyRows < priv.settings.minSpareRows && instance.countSourceRows() < priv.settings.maxRows; emptyRows++) {\n            datamap.createRow(instance.countRows(), 1, 'auto');\n          }\n        }\n      }\n\n      {\n        var emptyCols; // count currently empty cols\n\n        if (priv.settings.minCols || priv.settings.minSpareCols) {\n          emptyCols = instance.countEmptyCols(true);\n        } // should I add empty cols to meet minCols?\n\n\n        if (priv.settings.minCols && !priv.settings.columns && instance.countCols() < priv.settings.minCols) {\n          for (; instance.countCols() < priv.settings.minCols; emptyCols++) {\n            datamap.createCol(instance.countCols(), 1, 'auto');\n          }\n        } // should I add empty cols to meet minSpareCols?\n\n\n        if (priv.settings.minSpareCols && !priv.settings.columns && instance.dataType === 'array' && emptyCols < priv.settings.minSpareCols) {\n          for (; emptyCols < priv.settings.minSpareCols && instance.countCols() < priv.settings.maxCols; emptyCols++) {\n            datamap.createCol(instance.countCols(), 1, 'auto');\n          }\n        }\n      }\n      var rowCount = instance.countRows();\n      var colCount = instance.countCols();\n\n      if (rowCount === 0 || colCount === 0) {\n        selection.deselect();\n      }\n\n      if (selection.isSelected()) {\n        arrayEach(selection.selectedRange, function (range) {\n          var selectionChanged = false;\n          var fromRow = range.from.row;\n          var fromCol = range.from.col;\n          var toRow = range.to.row;\n          var toCol = range.to.col; // if selection is outside, move selection to last row\n\n          if (fromRow > rowCount - 1) {\n            fromRow = rowCount - 1;\n            selectionChanged = true;\n\n            if (toRow > fromRow) {\n              toRow = fromRow;\n            }\n          } else if (toRow > rowCount - 1) {\n            toRow = rowCount - 1;\n            selectionChanged = true;\n\n            if (fromRow > toRow) {\n              fromRow = toRow;\n            }\n          } // if selection is outside, move selection to last row\n\n\n          if (fromCol > colCount - 1) {\n            fromCol = colCount - 1;\n            selectionChanged = true;\n\n            if (toCol > fromCol) {\n              toCol = fromCol;\n            }\n          } else if (toCol > colCount - 1) {\n            toCol = colCount - 1;\n            selectionChanged = true;\n\n            if (fromCol > toCol) {\n              fromCol = toCol;\n            }\n          }\n\n          if (selectionChanged) {\n            instance.selectCell(fromRow, fromCol, toRow, toCol);\n          }\n        });\n      }\n\n      if (instance.view) {\n        instance.view.wt.wtOverlays.adjustElementsSize();\n      }\n    },\n\n    /**\n     * Populate the data from the provided 2d array from the given cell coordinates.\n     *\n     * @private\n     * @param {Object} start Start selection position. Visual indexes.\n     * @param {Array} input 2d data array.\n     * @param {Object} [end] End selection position (only for drag-down mode). Visual indexes.\n     * @param {String} [source=\"populateFromArray\"] Source information string.\n     * @param {String} [method=\"overwrite\"] Populate method. Possible options: `shift_down`, `shift_right`, `overwrite`.\n     * @param {String} direction (left|right|up|down) String specifying the direction.\n     * @param {Array} deltas The deltas array. A difference between values of adjacent cells.\n     *                       Useful **only** when the type of handled cells is `numeric`.\n     * @returns {Object|undefined} ending td in pasted area (only if any cell was changed).\n     */\n    populateFromArray: function populateFromArray(start, input, end, source, method, direction, deltas) {\n      // TODO: either remove or implement the `direction` argument. Currently it's not working at all.\n      var r;\n      var rlen;\n      var c;\n      var clen;\n      var setData = [];\n      var current = {};\n      rlen = input.length;\n\n      if (rlen === 0) {\n        return false;\n      }\n\n      var repeatCol;\n      var repeatRow;\n      var cmax;\n      var rmax;\n      /* eslint-disable no-case-declarations */\n      // insert data with specified pasteMode method\n\n      switch (method) {\n        case 'shift_down':\n          repeatCol = end ? end.col - start.col + 1 : 0;\n          repeatRow = end ? end.row - start.row + 1 : 0; // eslint-disable-next-line no-param-reassign\n\n          input = translateRowsToColumns(input);\n\n          for (c = 0, clen = input.length, cmax = Math.max(clen, repeatCol); c < cmax; c++) {\n            if (c < clen) {\n              var _instance;\n\n              for (r = 0, rlen = input[c].length; r < repeatRow - rlen; r++) {\n                input[c].push(input[c][r % rlen]);\n              }\n\n              input[c].unshift(start.col + c, start.row, 0);\n\n              (_instance = instance).spliceCol.apply(_instance, _toConsumableArray(input[c]));\n            } else {\n              var _instance2;\n\n              input[c % clen][0] = start.col + c;\n\n              (_instance2 = instance).spliceCol.apply(_instance2, _toConsumableArray(input[c % clen]));\n            }\n          }\n\n          break;\n\n        case 'shift_right':\n          repeatCol = end ? end.col - start.col + 1 : 0;\n          repeatRow = end ? end.row - start.row + 1 : 0;\n\n          for (r = 0, rlen = input.length, rmax = Math.max(rlen, repeatRow); r < rmax; r++) {\n            if (r < rlen) {\n              var _instance3;\n\n              for (c = 0, clen = input[r].length; c < repeatCol - clen; c++) {\n                input[r].push(input[r][c % clen]);\n              }\n\n              input[r].unshift(start.row + r, start.col, 0);\n\n              (_instance3 = instance).spliceRow.apply(_instance3, _toConsumableArray(input[r]));\n            } else {\n              var _instance4;\n\n              input[r % rlen][0] = start.row + r;\n\n              (_instance4 = instance).spliceRow.apply(_instance4, _toConsumableArray(input[r % rlen]));\n            }\n          }\n\n          break;\n\n        case 'overwrite':\n        default:\n          // overwrite and other not specified options\n          current.row = start.row;\n          current.col = start.col;\n          var selected = {\n            // selected range\n            row: end && start ? end.row - start.row + 1 : 1,\n            col: end && start ? end.col - start.col + 1 : 1\n          };\n          var skippedRow = 0;\n          var skippedColumn = 0;\n          var pushData = true;\n          var cellMeta;\n\n          var getInputValue = function getInputValue(row) {\n            var col = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            var rowValue = input[row % input.length];\n\n            if (col !== null) {\n              return rowValue[col % rowValue.length];\n            }\n\n            return rowValue;\n          };\n\n          var rowInputLength = input.length;\n          var rowSelectionLength = end ? end.row - start.row + 1 : 0;\n\n          if (end) {\n            rlen = rowSelectionLength;\n          } else {\n            rlen = Math.max(rowInputLength, rowSelectionLength);\n          }\n\n          for (r = 0; r < rlen; r++) {\n            if (end && current.row > end.row && rowSelectionLength > rowInputLength || !priv.settings.allowInsertRow && current.row > instance.countRows() - 1 || current.row >= priv.settings.maxRows) {\n              break;\n            }\n\n            var visualRow = r - skippedRow;\n            var colInputLength = getInputValue(visualRow).length;\n            var colSelectionLength = end ? end.col - start.col + 1 : 0;\n\n            if (end) {\n              clen = colSelectionLength;\n            } else {\n              clen = Math.max(colInputLength, colSelectionLength);\n            }\n\n            current.col = start.col;\n            cellMeta = instance.getCellMeta(current.row, current.col);\n\n            if ((source === 'CopyPaste.paste' || source === 'Autofill.fill') && cellMeta.skipRowOnPaste) {\n              skippedRow += 1;\n              current.row += 1;\n              rlen += 1;\n              /* eslint-disable no-continue */\n\n              continue;\n            }\n\n            skippedColumn = 0;\n\n            for (c = 0; c < clen; c++) {\n              if (end && current.col > end.col && colSelectionLength > colInputLength || !priv.settings.allowInsertColumn && current.col > instance.countCols() - 1 || current.col >= priv.settings.maxCols) {\n                break;\n              }\n\n              cellMeta = instance.getCellMeta(current.row, current.col);\n\n              if ((source === 'CopyPaste.paste' || source === 'Autofill.fill') && cellMeta.skipColumnOnPaste) {\n                skippedColumn += 1;\n                current.col += 1;\n                clen += 1;\n                continue;\n              }\n\n              if (cellMeta.readOnly) {\n                current.col += 1;\n                /* eslint-disable no-continue */\n\n                continue;\n              }\n\n              var visualColumn = c - skippedColumn;\n              var value = getInputValue(visualRow, visualColumn);\n              var orgValue = instance.getDataAtCell(current.row, current.col);\n              var index = {\n                row: visualRow,\n                col: visualColumn\n              };\n\n              if (source === 'Autofill.fill') {\n                var result = instance.runHooks('beforeAutofillInsidePopulate', index, direction, input, deltas, {}, selected);\n\n                if (result) {\n                  value = isUndefined(result.value) ? value : result.value;\n                }\n              }\n\n              if (value !== null && _typeof(value) === 'object') {\n                // when 'value' is array and 'orgValue' is null, set 'orgValue' to\n                // an empty array so that the null value can be compared to 'value'\n                // as an empty value for the array context\n                if (Array.isArray(value) && orgValue === null) orgValue = [];\n\n                if (orgValue === null || _typeof(orgValue) !== 'object') {\n                  pushData = false;\n                } else {\n                  var orgValueSchema = duckSchema(Array.isArray(orgValue) ? orgValue : orgValue[0] || orgValue);\n                  var valueSchema = duckSchema(Array.isArray(value) ? value : value[0] || value);\n                  /* eslint-disable max-depth */\n\n                  if (isObjectEqual(orgValueSchema, valueSchema)) {\n                    value = deepClone(value);\n                  } else {\n                    pushData = false;\n                  }\n                }\n              } else if (orgValue !== null && _typeof(orgValue) === 'object') {\n                pushData = false;\n              }\n\n              if (pushData) {\n                setData.push([current.row, current.col, value]);\n              }\n\n              pushData = true;\n              current.col += 1;\n            }\n\n            current.row += 1;\n          }\n\n          instance.setDataAtCell(setData, null, null, source || 'populateFromArray');\n          break;\n      }\n    }\n  };\n  /**\n   * Internal function to set `language` key of settings.\n   *\n   * @private\n   * @param {String} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'\n   * @fires Hooks#afterLanguageChange\n   */\n\n  function setLanguage(languageCode) {\n    var normalizedLanguageCode = normalizeLanguageCode(languageCode);\n\n    if (hasLanguageDictionary(normalizedLanguageCode)) {\n      instance.runHooks('beforeLanguageChange', normalizedLanguageCode);\n      GridSettings.prototype.language = normalizedLanguageCode;\n      instance.runHooks('afterLanguageChange', normalizedLanguageCode);\n    } else {\n      warnUserAboutLanguageRegistration(languageCode);\n    }\n  }\n\n  this.init = function () {\n    dataSource.setData(priv.settings.data);\n    instance.runHooks('beforeInit');\n\n    if (isMobileBrowser()) {\n      addClass(instance.rootElement, 'mobile');\n    }\n\n    this.updateSettings(priv.settings, true);\n    this.view = new TableView(this);\n    editorManager = EditorManager.getInstance(instance, priv, selection, datamap);\n    this.forceFullRender = true; // used when data was changed\n\n    instance.runHooks('init');\n    this.view.render();\n\n    if (_typeof(priv.firstRun) === 'object') {\n      instance.runHooks('afterChange', priv.firstRun[0], priv.firstRun[1]);\n      priv.firstRun = false;\n    }\n\n    instance.runHooks('afterInit');\n  };\n\n  function ValidatorsQueue() {\n    // moved this one level up so it can be used in any function here. Probably this should be moved to a separate file\n    var resolved = false;\n    return {\n      validatorsInQueue: 0,\n      valid: true,\n      addValidatorToQueue: function addValidatorToQueue() {\n        this.validatorsInQueue += 1;\n        resolved = false;\n      },\n      removeValidatorFormQueue: function removeValidatorFormQueue() {\n        this.validatorsInQueue = this.validatorsInQueue - 1 < 0 ? 0 : this.validatorsInQueue - 1;\n        this.checkIfQueueIsEmpty();\n      },\n      onQueueEmpty: function onQueueEmpty() {},\n      checkIfQueueIsEmpty: function checkIfQueueIsEmpty() {\n        if (this.validatorsInQueue === 0 && resolved === false) {\n          resolved = true;\n          this.onQueueEmpty(this.valid);\n        }\n      }\n    };\n  }\n  /**\n   * Get parsed number from numeric string.\n   *\n   * @private\n   * @param {String} numericData Float (separated by a dot or a comma) or integer.\n   * @returns {Number} Number if we get data in parsable format, not changed value otherwise.\n   */\n\n\n  function getParsedNumber(numericData) {\n    // Unifying \"float like\" string. Change from value with comma determiner to value with dot determiner,\n    // for example from `450,65` to `450.65`.\n    var unifiedNumericData = numericData.replace(',', '.');\n\n    if (isNaN(parseFloat(unifiedNumericData)) === false) {\n      return parseFloat(unifiedNumericData);\n    }\n\n    return numericData;\n  }\n\n  function validateChanges(changes, source, callback) {\n    if (!changes.length) {\n      return;\n    }\n\n    var activeEditor = instance.getActiveEditor();\n    var beforeChangeResult = instance.runHooks('beforeChange', changes, source || 'edit');\n    var shouldBeCanceled = true;\n\n    if (isFunction(beforeChangeResult)) {\n      warn('Your beforeChange callback returns a function. It\\'s not supported since Handsontable 0.12.1 (and the returned function will not be executed).');\n    } else if (beforeChangeResult === false) {\n      if (activeEditor) {\n        activeEditor.cancelChanges();\n      }\n\n      return;\n    }\n\n    var waitingForValidator = new ValidatorsQueue();\n\n    var isNumericData = function isNumericData(value) {\n      return value.length > 0 && /^\\s*[+-.]?\\s*(?:(?:\\d+(?:(\\.|,)\\d+)?(?:e[+-]?\\d+)?)|(?:0x[a-f\\d]+))\\s*$/.test(value);\n    };\n\n    waitingForValidator.onQueueEmpty = function (isValid) {\n      if (activeEditor && shouldBeCanceled) {\n        activeEditor.cancelChanges();\n      }\n\n      callback(isValid); // called when async validators are resolved and beforeChange was not async\n    };\n\n    for (var i = changes.length - 1; i >= 0; i--) {\n      if (changes[i] === null) {\n        changes.splice(i, 1);\n      } else {\n        var _changes$i = _slicedToArray(changes[i], 4),\n            row = _changes$i[0],\n            prop = _changes$i[1],\n            newValue = _changes$i[3];\n\n        var col = datamap.propToCol(prop);\n        var cellProperties = instance.getCellMeta(row, col);\n\n        if (cellProperties.type === 'numeric' && typeof newValue === 'string' && isNumericData(newValue)) {\n          changes[i][3] = getParsedNumber(newValue);\n        }\n        /* eslint-disable no-loop-func */\n\n\n        if (instance.getCellValidator(cellProperties)) {\n          waitingForValidator.addValidatorToQueue();\n          instance.validateCell(changes[i][3], cellProperties, function (index, cellPropertiesReference) {\n            return function (result) {\n              if (typeof result !== 'boolean') {\n                throw new Error('Validation error: result is not boolean');\n              }\n\n              if (result === false && cellPropertiesReference.allowInvalid === false) {\n                shouldBeCanceled = false;\n                changes.splice(index, 1); // cancel the change\n\n                cellPropertiesReference.valid = true; // we cancelled the change, so cell value is still valid\n\n                var cell = instance.getCell(cellPropertiesReference.visualRow, cellPropertiesReference.visualCol);\n\n                if (cell !== null) {\n                  removeClass(cell, instance.getSettings().invalidCellClassName);\n                } // index -= 1;\n\n              }\n\n              waitingForValidator.removeValidatorFormQueue();\n            };\n          }(i, cellProperties), source);\n        }\n      }\n    }\n\n    waitingForValidator.checkIfQueueIsEmpty();\n  }\n  /**\n   * Internal function to apply changes. Called after validateChanges\n   *\n   * @private\n   * @param {Array} changes Array in form of [row, prop, oldValue, newValue]\n   * @param {String} source String that identifies how this change will be described in changes array (useful in onChange callback)\n   * @fires Hooks#beforeChangeRender\n   * @fires Hooks#afterChange\n   */\n\n\n  function applyChanges(changes, source) {\n    var i = changes.length - 1;\n\n    if (i < 0) {\n      return;\n    }\n\n    for (; i >= 0; i--) {\n      var skipThisChange = false;\n\n      if (changes[i] === null) {\n        changes.splice(i, 1);\n        /* eslint-disable no-continue */\n\n        continue;\n      }\n\n      if ((changes[i][2] === null || changes[i][2] === void 0) && (changes[i][3] === null || changes[i][3] === void 0)) {\n        /* eslint-disable no-continue */\n        continue;\n      }\n\n      if (priv.settings.allowInsertRow) {\n        while (changes[i][0] > instance.countRows() - 1) {\n          var numberOfCreatedRows = datamap.createRow(void 0, void 0, source);\n\n          if (numberOfCreatedRows === 0) {\n            skipThisChange = true;\n            break;\n          }\n        }\n      }\n\n      if (instance.dataType === 'array' && (!priv.settings.columns || priv.settings.columns.length === 0) && priv.settings.allowInsertColumn) {\n        while (datamap.propToCol(changes[i][1]) > instance.countCols() - 1) {\n          var numberOfCreatedColumns = datamap.createCol(void 0, void 0, source);\n\n          if (numberOfCreatedColumns === 0) {\n            skipThisChange = true;\n            break;\n          }\n        }\n      }\n\n      if (skipThisChange) {\n        /* eslint-disable no-continue */\n        continue;\n      }\n\n      datamap.set(changes[i][0], changes[i][1], changes[i][3]);\n    }\n\n    instance.forceFullRender = true; // used when data was changed\n\n    grid.adjustRowsAndCols();\n    instance.runHooks('beforeChangeRender', changes, source);\n    editorManager.lockEditor();\n\n    instance._refreshBorders(null);\n\n    editorManager.unlockEditor();\n    instance.view.wt.wtOverlays.adjustElementsSize();\n    instance.runHooks('afterChange', changes, source || 'edit');\n    var activeEditor = instance.getActiveEditor();\n\n    if (activeEditor && isDefined(activeEditor.refreshValue)) {\n      activeEditor.refreshValue();\n    }\n  }\n  /**\n   * Validate a single cell.\n   *\n   * @param {String|Number} value\n   * @param cellProperties\n   * @param callback\n   * @param source\n   */\n\n\n  this.validateCell = function (value, cellProperties, callback, source) {\n    var validator = instance.getCellValidator(cellProperties); // the `canBeValidated = false` argument suggests, that the cell passes validation by default.\n\n    function done(valid) {\n      var canBeValidated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true; // Fixes GH#3903\n\n      if (!canBeValidated || cellProperties.hidden === true) {\n        callback(valid);\n        return;\n      }\n\n      var col = cellProperties.visualCol;\n      var row = cellProperties.visualRow;\n      var td = instance.getCell(row, col, true);\n\n      if (td && td.nodeName !== 'TH') {\n        instance.view.wt.wtSettings.settings.cellRenderer(row, col, td);\n      }\n\n      callback(valid);\n    }\n\n    if (isRegExp(validator)) {\n      validator = function (expression) {\n        return function (cellValue, validatorCallback) {\n          validatorCallback(expression.test(cellValue));\n        };\n      }(validator);\n    }\n\n    if (isFunction(validator)) {\n      // eslint-disable-next-line no-param-reassign\n      value = instance.runHooks('beforeValidate', value, cellProperties.visualRow, cellProperties.prop, source); // To provide consistent behaviour, validation should be always asynchronous\n\n      instance._registerImmediate(function () {\n        validator.call(cellProperties, value, function (valid) {\n          if (!instance) {\n            return;\n          } // eslint-disable-next-line no-param-reassign\n\n\n          valid = instance.runHooks('afterValidate', valid, value, cellProperties.visualRow, cellProperties.prop, source);\n          cellProperties.valid = valid;\n          done(valid);\n          instance.runHooks('postAfterValidate', valid, value, cellProperties.visualRow, cellProperties.prop, source);\n        });\n      });\n    } else {\n      // resolve callback even if validator function was not found\n      instance._registerImmediate(function () {\n        cellProperties.valid = true;\n        done(cellProperties.valid, false);\n      });\n    }\n  };\n\n  function setDataInputToArray(row, propOrCol, value) {\n    if (_typeof(row) === 'object') {\n      // is it an array of changes\n      return row;\n    }\n\n    return [[row, propOrCol, value]];\n  }\n  /**\n   * @description\n   * Set new value to a cell. To change many cells at once (recommended way), pass an array of `changes` in format\n   * `[[row, col, value],...]` as the first argument.\n   *\n   * @memberof Core#\n   * @function setDataAtCell\n   * @param {Number|Array} row Visual row index or array of changes in format `[[row, col, value],...]`.\n   * @param {Number} [column] Visual column index.\n   * @param {String} [value] New value.\n   * @param {String} [source] String that identifies how this change will be described in the changes array (useful in onAfterChange or onBeforeChange callback).\n   */\n\n\n  this.setDataAtCell = function (row, column, value, source) {\n    var input = setDataInputToArray(row, column, value);\n    var changes = [];\n    var changeSource = source;\n    var i;\n    var ilen;\n    var prop;\n\n    for (i = 0, ilen = input.length; i < ilen; i++) {\n      if (_typeof(input[i]) !== 'object') {\n        throw new Error('Method `setDataAtCell` accepts row number or changes array of arrays as its first parameter');\n      }\n\n      if (typeof input[i][1] !== 'number') {\n        throw new Error('Method `setDataAtCell` accepts row and column number as its parameters. If you want to use object property name, use method `setDataAtRowProp`');\n      }\n\n      var physicalRow = recordTranslator.toPhysicalRow(input[i][0]);\n      prop = datamap.colToProp(input[i][1]);\n      changes.push([input[i][0], prop, dataSource.getAtCell(physicalRow, input[i][1]), input[i][2]]);\n    }\n\n    if (!changeSource && _typeof(row) === 'object') {\n      changeSource = column;\n    }\n\n    instance.runHooks('afterSetDataAtCell', changes, changeSource);\n    validateChanges(changes, changeSource, function () {\n      applyChanges(changes, changeSource);\n    });\n  };\n  /**\n   * @description\n   * Set new value to a cell. To change many cells at once (recommended way), pass an array of `changes` in format\n   * `[[row, prop, value],...]` as the first argument.\n   *\n   * @memberof Core#\n   * @function setDataAtRowProp\n   * @param {Number|Array} row Visual row index or array of changes in format `[[row, prop, value], ...]`.\n   * @param {String} prop Property name or the source string (e.g. `'first.name'` or `'0'`).\n   * @param {String} value Value to be set.\n   * @param {String} [source] String that identifies how this change will be described in changes array (useful in onChange callback).\n   */\n\n\n  this.setDataAtRowProp = function (row, prop, value, source) {\n    var input = setDataInputToArray(row, prop, value);\n    var changes = [];\n    var changeSource = source;\n    var i;\n    var ilen;\n\n    for (i = 0, ilen = input.length; i < ilen; i++) {\n      var physicalRow = recordTranslator.toPhysicalRow(input[i][0]);\n      changes.push([input[i][0], input[i][1], dataSource.getAtCell(physicalRow, input[i][1]), input[i][2]]);\n    }\n\n    if (!changeSource && _typeof(row) === 'object') {\n      changeSource = prop;\n    }\n\n    instance.runHooks('afterSetDataAtRowProp', changes, changeSource);\n    validateChanges(changes, changeSource, function () {\n      applyChanges(changes, changeSource);\n    });\n  };\n  /**\n   * Listen to the keyboard input on document body. This allows Handsontable to capture keyboard events and respond\n   * in the right way.\n   *\n   * @memberof Core#\n   * @function listen\n   * @param {Boolean} [modifyDocumentFocus=true] If `true`, currently focused element will be blured (which returns focus\n   *                                             to the document.body). Otherwise the active element does not lose its focus.\n   * @fires Hooks#afterListen\n   */\n\n\n  this.listen = function () {\n    var modifyDocumentFocus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    var _instance5 = instance,\n        rootDocument = _instance5.rootDocument;\n\n    if (modifyDocumentFocus) {\n      var invalidActiveElement = !rootDocument.activeElement || rootDocument.activeElement && rootDocument.activeElement.nodeName === void 0;\n\n      if (rootDocument.activeElement && rootDocument.activeElement !== rootDocument.body && !invalidActiveElement) {\n        rootDocument.activeElement.blur();\n      } else if (invalidActiveElement) {\n        // IE\n        rootDocument.body.focus();\n      }\n    }\n\n    if (instance && !instance.isListening()) {\n      activeGuid = instance.guid;\n      instance.runHooks('afterListen');\n    }\n  };\n  /**\n   * Stop listening to keyboard input on the document body. Calling this method makes the Handsontable inactive for\n   * any keyboard events.\n   *\n   * @memberof Core#\n   * @function unlisten\n   */\n\n\n  this.unlisten = function () {\n    if (this.isListening()) {\n      activeGuid = null;\n      instance.runHooks('afterUnlisten');\n    }\n  };\n  /**\n   * Returns `true` if the current Handsontable instance is listening to keyboard input on document body.\n   *\n   * @memberof Core#\n   * @function isListening\n   * @returns {Boolean} `true` if the instance is listening, `false` otherwise.\n   */\n\n\n  this.isListening = function () {\n    return activeGuid === instance.guid;\n  };\n  /**\n   * Destroys the current editor, render the table and prepares the editor of the newly selected cell.\n   *\n   * @memberof Core#\n   * @function destroyEditor\n   * @param {Boolean} [revertOriginal=false] If `true`, the previous value will be restored. Otherwise, the edited value will be saved.\n   * @param {Boolean} [prepareEditorIfNeeded=true] If `true` the editor under the selected cell will be prepared to open.\n   */\n\n\n  this.destroyEditor = function () {\n    var revertOriginal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var prepareEditorIfNeeded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    instance._refreshBorders(revertOriginal, prepareEditorIfNeeded);\n  };\n  /**\n   * Populate cells at position with 2D input array (e.g. `[[1, 2], [3, 4]]`). Use `endRow`, `endCol` when you\n   * want to cut input when a certain row is reached.\n   *\n   * Optional `method` argument has the same effect as pasteMode option (see {@link Options#pasteMode}).\n   *\n   * @memberof Core#\n   * @function populateFromArray\n   * @param {Number} row Start visual row index.\n   * @param {Number} column Start visual column index.\n   * @param {Array} input 2d array\n   * @param {Number} [endRow] End visual row index (use when you want to cut input when certain row is reached).\n   * @param {Number} [endCol] End visual column index (use when you want to cut input when certain column is reached).\n   * @param {String} [source=populateFromArray] Used to identify this call in the resulting events (beforeChange, afterChange).\n   * @param {String} [method=overwrite] Populate method, possible values: `'shift_down'`, `'shift_right'`, `'overwrite'`.\n   * @param {String} direction Populate direction, possible values: `'left'`, `'right'`, `'up'`, `'down'`.\n   * @param {Array} deltas The deltas array. A difference between values of adjacent cells.\n   *                       Useful **only** when the type of handled cells is `numeric`.\n   */\n\n\n  this.populateFromArray = function (row, column, input, endRow, endCol, source, method, direction, deltas) {\n    if (!(_typeof(input) === 'object' && _typeof(input[0]) === 'object')) {\n      throw new Error('populateFromArray parameter `input` must be an array of arrays'); // API changed in 0.9-beta2, let's check if you use it correctly\n    }\n\n    var c = typeof endRow === 'number' ? new CellCoords(endRow, endCol) : null;\n    return grid.populateFromArray(new CellCoords(row, column), input, c, source, method, direction, deltas);\n  };\n  /**\n   * Adds/removes data from the column. This method works the same as Array.splice for arrays (see {@link DataMap#spliceCol}).\n   *\n   * @memberof Core#\n   * @function spliceCol\n   * @param {Number} column Index of the column in which do you want to do splice.\n   * @param {Number} index Index at which to start changing the array. If negative, will begin that many elements from the end.\n   * @param {Number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed.\n   * @param {...Number} [elements] The elements to add to the array. If you don't specify any elements, spliceCol simply removes elements from the array.\n   */\n\n\n  this.spliceCol = function (column, index, amount) {\n    var _datamap;\n\n    for (var _len2 = arguments.length, elements = new Array(_len2 > 3 ? _len2 - 3 : 0), _key = 3; _key < _len2; _key++) {\n      elements[_key - 3] = arguments[_key];\n    }\n\n    return (_datamap = datamap).spliceCol.apply(_datamap, [column, index, amount].concat(elements));\n  };\n  /**\n   * Adds/removes data from the row. This method works the same as Array.splice for arrays (see {@link DataMap#spliceRow}).\n   *\n   * @memberof Core#\n   * @function spliceRow\n   * @param {Number} row Index of column in which do you want to do splice.\n   * @param {Number} index Index at which to start changing the array. If negative, will begin that many elements from the end.\n   * @param {Number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed.\n   * @param {...Number} [elements] The elements to add to the array. If you don't specify any elements, spliceCol simply removes elements from the array.\n   */\n\n\n  this.spliceRow = function (row, index, amount) {\n    var _datamap2;\n\n    for (var _len3 = arguments.length, elements = new Array(_len3 > 3 ? _len3 - 3 : 0), _key2 = 3; _key2 < _len3; _key2++) {\n      elements[_key2 - 3] = arguments[_key2];\n    }\n\n    return (_datamap2 = datamap).spliceRow.apply(_datamap2, [row, index, amount].concat(elements));\n  };\n  /**\n   * Returns indexes of the currently selected cells as an array of arrays `[[startRow, startCol, endRow, endCol],...]`.\n   *\n   * Start row and start column are the coordinates of the active cell (where the selection was started).\n   *\n   * The version 0.36.0 adds a non-consecutive selection feature. Since this version, the method returns an array of arrays.\n   * Additionally to collect the coordinates of the currently selected area (as it was previously done by the method)\n   * you need to use `getSelectedLast` method.\n   *\n   * @memberof Core#\n   * @function getSelected\n   * @returns {Array[]|undefined} An array of arrays of the selection's coordinates.\n   */\n\n\n  this.getSelected = function () {\n    // https://github.com/handsontable/handsontable/issues/44  //cjl\n    if (selection.isSelected()) {\n      return arrayMap(selection.getSelectedRange(), function (_ref11) {\n        var from = _ref11.from,\n            to = _ref11.to;\n        return [from.row, from.col, to.row, to.col];\n      });\n    }\n  };\n  /**\n   * Returns the last coordinates applied to the table as a an array `[startRow, startCol, endRow, endCol]`.\n   *\n   * @since 0.36.0\n   * @memberof Core#\n   * @function getSelectedLast\n   * @returns {Array|undefined} An array of the selection's coordinates.\n   */\n\n\n  this.getSelectedLast = function () {\n    var selected = this.getSelected();\n    var result;\n\n    if (selected && selected.length > 0) {\n      result = selected[selected.length - 1];\n    }\n\n    return result;\n  };\n  /**\n   * Returns the current selection as an array of CellRange objects.\n   *\n   * The version 0.36.0 adds a non-consecutive selection feature. Since this version, the method returns an array of arrays.\n   * Additionally to collect the coordinates of the currently selected area (as it was previously done by the method)\n   * you need to use `getSelectedRangeLast` method.\n   *\n   * @memberof Core#\n   * @function getSelectedRange\n   * @returns {CellRange[]|undefined} Selected range object or undefined if there is no selection.\n   */\n\n\n  this.getSelectedRange = function () {\n    // https://github.com/handsontable/handsontable/issues/44  //cjl\n    if (selection.isSelected()) {\n      return Array.from(selection.getSelectedRange());\n    }\n  };\n  /**\n  * Returns the last coordinates applied to the table as a CellRange object.\n  *\n  * @memberof Core#\n  * @function getSelectedRangeLast\n  * @since 0.36.0\n  * @returns {CellRange|undefined} Selected range object or undefined` if there is no selection.\n   */\n\n\n  this.getSelectedRangeLast = function () {\n    var selectedRange = this.getSelectedRange();\n    var result;\n\n    if (selectedRange && selectedRange.length > 0) {\n      result = selectedRange[selectedRange.length - 1];\n    }\n\n    return result;\n  };\n  /**\n   * Erases content from cells that have been selected in the table.\n   *\n   * @memberof Core#\n   * @function emptySelectedCells\n   * @param {String} [source] String that identifies how this change will be described in the changes array (useful in onAfterChange or onBeforeChange callback).\n   * @since 0.36.0\n   */\n\n\n  this.emptySelectedCells = function (source) {\n    var _this2 = this;\n\n    if (!selection.isSelected()) {\n      return;\n    }\n\n    var changes = [];\n    arrayEach(selection.getSelectedRange(), function (cellRange) {\n      var topLeft = cellRange.getTopLeftCorner();\n      var bottomRight = cellRange.getBottomRightCorner();\n      rangeEach(topLeft.row, bottomRight.row, function (row) {\n        rangeEach(topLeft.col, bottomRight.col, function (column) {\n          if (!_this2.getCellMeta(row, column).readOnly) {\n            changes.push([row, column, null]);\n          }\n        });\n      });\n    });\n\n    if (changes.length > 0) {\n      this.setDataAtCell(changes, source);\n    }\n  };\n  /**\n   * Rerender the table. Calling this method starts the process of recalculating, redrawing and applying the changes\n   * to the DOM. While rendering the table all cell renderers are recalled.\n   *\n   * Calling this method manually is not recommended. Handsontable tries to render itself by choosing the most\n   * optimal moments in its lifecycle.\n   *\n   * @memberof Core#\n   * @function render\n   */\n\n\n  this.render = function () {\n    if (instance.view) {\n      instance.renderCall = true;\n      instance.forceFullRender = true; // used when data was changed\n\n      editorManager.lockEditor();\n\n      instance._refreshBorders(null);\n\n      editorManager.unlockEditor();\n    }\n  };\n\n  this.refreshDimensions = function () {\n    if (!instance.view) {\n      return;\n    }\n\n    var _instance$view$getLas = instance.view.getLastSize(),\n        lastWidth = _instance$view$getLas.width,\n        lastHeight = _instance$view$getLas.height;\n\n    var _instance$rootElement = instance.rootElement.getBoundingClientRect(),\n        width = _instance$rootElement.width,\n        height = _instance$rootElement.height;\n\n    var isSizeChanged = width !== lastWidth || height !== lastHeight;\n    var isResizeBlocked = instance.runHooks('beforeRefreshDimensions', {\n      width: lastWidth,\n      height: lastHeight\n    }, {\n      width: width,\n      height: height\n    }, isSizeChanged) === false;\n\n    if (isResizeBlocked) {\n      return;\n    }\n\n    if (isSizeChanged || instance.view.wt.wtOverlays.scrollableElement === instance.rootWindow) {\n      instance.view.setLastSize(width, height);\n      instance.render();\n    }\n\n    instance.runHooks('afterRefreshDimensions', {\n      width: lastWidth,\n      height: lastHeight\n    }, {\n      width: width,\n      height: height\n    }, isSizeChanged);\n  };\n  /**\n   * Loads new data to Handsontable. Loading new data resets the cell meta.\n   *\n   * @memberof Core#\n   * @function loadData\n   * @param {Array} data Array of arrays or array of objects containing data.\n   * @fires Hooks#afterLoadData\n   * @fires Hooks#afterChange\n   */\n\n\n  this.loadData = function (data) {\n    if (Array.isArray(priv.settings.dataSchema)) {\n      instance.dataType = 'array';\n    } else if (isFunction(priv.settings.dataSchema)) {\n      instance.dataType = 'function';\n    } else {\n      instance.dataType = 'object';\n    }\n\n    if (datamap) {\n      datamap.destroy();\n    }\n\n    datamap = new DataMap(instance, priv, GridSettings);\n\n    if (_typeof(data) === 'object' && data !== null) {\n      if (!(data.push && data.splice)) {\n        // check if data is array. Must use duck-type check so Backbone Collections also pass it\n        // when data is not an array, attempt to make a single-row array of it\n        // eslint-disable-next-line no-param-reassign\n        data = [data];\n      }\n    } else if (data === null) {\n      var dataSchema = datamap.getSchema(); // eslint-disable-next-line no-param-reassign\n\n      data = [];\n      var row;\n      var r = 0;\n      var rlen = 0;\n\n      for (r = 0, rlen = priv.settings.startRows; r < rlen; r++) {\n        if ((instance.dataType === 'object' || instance.dataType === 'function') && priv.settings.dataSchema) {\n          row = deepClone(dataSchema);\n          data.push(row);\n        } else if (instance.dataType === 'array') {\n          row = deepClone(dataSchema[0]);\n          data.push(row);\n        } else {\n          row = [];\n\n          for (var c = 0, clen = priv.settings.startCols; c < clen; c++) {\n            row.push(null);\n          }\n\n          data.push(row);\n        }\n      }\n    } else {\n      throw new Error(\"loadData only accepts array of objects or array of arrays (\".concat(_typeof(data), \" given)\"));\n    }\n\n    priv.isPopulated = false;\n    GridSettings.prototype.data = data;\n\n    if (Array.isArray(data[0])) {\n      instance.dataType = 'array';\n    }\n\n    datamap.dataSource = data;\n    dataSource.data = data;\n    dataSource.dataType = instance.dataType;\n    dataSource.colToProp = datamap.colToProp.bind(datamap);\n    dataSource.propToCol = datamap.propToCol.bind(datamap);\n    clearCellSettingCache();\n    grid.adjustRowsAndCols();\n    instance.runHooks('afterLoadData', priv.firstRun);\n\n    if (priv.firstRun) {\n      priv.firstRun = [null, 'loadData'];\n    } else {\n      instance.runHooks('afterChange', null, 'loadData');\n      instance.render();\n    }\n\n    priv.isPopulated = true;\n\n    function clearCellSettingCache() {\n      priv.cellSettings.length = 0;\n    }\n  };\n  /**\n   * Returns the current data object (the same one that was passed by `data` configuration option or `loadData` method,\n   * unless the `modifyRow` hook was used to trim some of the rows. If that's the case - use the {@link Core#getSourceData} method.).\n   *\n   * Optionally you can provide cell range by defining `row`, `column`, `row2`, `column2` to get only a fragment of table data.\n   *\n   * @memberof Core#\n   * @function getData\n   * @param {Number} [row] From visual row index.\n   * @param {Number} [column] From visual column index.\n   * @param {Number} [row2] To visual row index.\n   * @param {Number} [column2] To visual column index.\n   * @returns {Array[]} Array with the data.\n   * @example\n   * ```js\n   * // Get all data (in order how it is rendered in the table).\n   * hot.getData();\n   * // Get data fragment (from top-left 0, 0 to bottom-right 3, 3).\n   * hot.getData(3, 3);\n   * // Get data fragment (from top-left 2, 1 to bottom-right 3, 3).\n   * hot.getData(2, 1, 3, 3);\n   * ```\n   */\n\n\n  this.getData = function (row, column, row2, column2) {\n    if (isUndefined(row)) {\n      return datamap.getAll();\n    }\n\n    return datamap.getRange(new CellCoords(row, column), new CellCoords(row2, column2), datamap.DESTINATION_RENDERER);\n  };\n  /**\n   * Returns a string value of the selected range. Each column is separated by tab, each row is separated by a new\n   * line character (see {@link DataMap#getCopyableText}).\n   *\n   * @memberof Core#\n   * @function getCopyableText\n   * @param {Number} startRow From visual row index.\n   * @param {Number} startCol From visual column index.\n   * @param {Number} endRow To visual row index.\n   * @param {Number} endCol To visual column index.\n   * @returns {String}\n   */\n\n\n  this.getCopyableText = function (startRow, startCol, endRow, endCol) {\n    return datamap.getCopyableText(new CellCoords(startRow, startCol), new CellCoords(endRow, endCol));\n  };\n  /**\n   * Returns the data's copyable value at specified `row` and `column` index (see {@link DataMap#getCopyable}).\n   *\n   * @memberof Core#\n   * @function getCopyableData\n   * @param {Number} row Visual row index.\n   * @param {Number} column Visual column index.\n   * @returns {String}\n   */\n\n\n  this.getCopyableData = function (row, column) {\n    return datamap.getCopyable(row, datamap.colToProp(column));\n  };\n  /**\n   * Returns schema provided by constructor settings. If it doesn't exist then it returns the schema based on the data\n   * structure in the first row.\n   *\n   * @memberof Core#\n   * @function getSchema\n   * @returns {Object} Schema object.\n   */\n\n\n  this.getSchema = function () {\n    return datamap.getSchema();\n  };\n  /**\n   * Use it if you need to change configuration after initialization. The `settings` argument is an object containing the new\n   * settings, declared the same way as in the initial settings object.\n   *\n   * __Note__, that although the `updateSettings` method doesn't overwrite the previously declared settings, it might reset\n   * the settings made post-initialization. (for example - ignore changes made using the columnResize feature).\n   *\n   * @memberof Core#\n   * @function updateSettings\n   * @param {Object} settings New settings object (see {@link Options}).\n   * @param {Boolean} [init=false] Internally used for in initialization mode.\n   * @example\n   * ```js\n   * hot.updateSettings({\n   *    contextMenu: true,\n   *    colHeaders: true,\n   *    fixedRowsTop: 2\n   * });\n   * ```\n   * @fires Hooks#afterCellMetaReset\n   * @fires Hooks#afterUpdateSettings\n   */\n\n\n  this.updateSettings = function (settings) {\n    var init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var columnsAsFunc = false;\n    var i;\n    var j;\n    var clen;\n\n    if (isDefined(settings.rows)) {\n      throw new Error('\"rows\" setting is no longer supported. do you mean startRows, minRows or maxRows?');\n    }\n\n    if (isDefined(settings.cols)) {\n      throw new Error('\"cols\" setting is no longer supported. do you mean startCols, minCols or maxCols?');\n    } // eslint-disable-next-line no-restricted-syntax\n\n\n    for (i in settings) {\n      if (i === 'data') {\n        /* eslint-disable-next-line no-continue */\n        continue; // loadData will be triggered later\n      } else if (i === 'language') {\n        setLanguage(settings.language);\n        /* eslint-disable-next-line no-continue */\n\n        continue;\n      } else if (Hooks.getSingleton().getRegistered().indexOf(i) > -1) {\n        if (isFunction(settings[i]) || Array.isArray(settings[i])) {\n          settings[i].initialHook = true;\n          instance.addHook(i, settings[i]);\n        }\n      } else if (!init && hasOwnProperty(settings, i)) {\n        // Update settings\n        GridSettings.prototype[i] = settings[i];\n      }\n    } // Load data or create data map\n\n\n    if (settings.data === void 0 && priv.settings.data === void 0) {\n      instance.loadData(null); // data source created just now\n    } else if (settings.data !== void 0) {\n      instance.loadData(settings.data); // data source given as option\n    } else if (settings.columns !== void 0) {\n      datamap.createMap();\n    }\n\n    clen = instance.countCols();\n    var columnSetting = settings.columns || GridSettings.prototype.columns; // Init columns constructors configuration\n\n    if (columnSetting && isFunction(columnSetting)) {\n      clen = instance.countSourceCols();\n      columnsAsFunc = true;\n    } // Clear cellSettings cache\n\n\n    if (settings.cell !== void 0 || settings.cells !== void 0 || settings.columns !== void 0) {\n      priv.cellSettings.length = 0;\n    }\n\n    if (clen > 0) {\n      var proto;\n      var column;\n\n      for (i = 0, j = 0; i < clen; i++) {\n        if (columnsAsFunc && !columnSetting(i)) {\n          /* eslint-disable no-continue */\n          continue;\n        }\n\n        priv.columnSettings[j] = columnFactory(GridSettings, priv.columnsSettingConflicts); // shortcut for prototype\n\n        proto = priv.columnSettings[j].prototype; // Use settings provided by user\n\n        if (columnSetting) {\n          if (columnsAsFunc) {\n            column = columnSetting(i);\n          } else {\n            column = columnSetting[j];\n          }\n\n          if (column) {\n            extend(proto, column);\n            extend(proto, expandType(column));\n          }\n        }\n\n        j += 1;\n      }\n    }\n\n    if (isDefined(settings.cell)) {\n      objectEach(settings.cell, function (cell) {\n        instance.setCellMetaObject(cell.row, cell.col, cell);\n      });\n    }\n\n    instance.runHooks('afterCellMetaReset');\n\n    if (isDefined(settings.className)) {\n      if (GridSettings.prototype.className) {\n        removeClass(instance.rootElement, GridSettings.prototype.className);\n      }\n\n      if (settings.className) {\n        addClass(instance.rootElement, settings.className);\n      }\n    }\n\n    var currentHeight = instance.rootElement.style.height;\n\n    if (currentHeight !== '') {\n      currentHeight = parseInt(instance.rootElement.style.height, 10);\n    }\n\n    var height = settings.height;\n\n    if (isFunction(height)) {\n      height = height();\n    }\n\n    if (init) {\n      var initialStyle = instance.rootElement.getAttribute('style');\n\n      if (initialStyle) {\n        instance.rootElement.setAttribute('data-initialstyle', instance.rootElement.getAttribute('style'));\n      }\n    }\n\n    if (height === null) {\n      var _initialStyle = instance.rootElement.getAttribute('data-initialstyle');\n\n      if (_initialStyle && (_initialStyle.indexOf('height') > -1 || _initialStyle.indexOf('overflow') > -1)) {\n        instance.rootElement.setAttribute('style', _initialStyle);\n      } else {\n        instance.rootElement.style.height = '';\n        instance.rootElement.style.overflow = '';\n      }\n    } else if (height !== void 0) {\n      instance.rootElement.style.height = isNaN(height) ? \"\".concat(height) : \"\".concat(height, \"px\");\n      instance.rootElement.style.overflow = 'hidden';\n    }\n\n    if (typeof settings.width !== 'undefined') {\n      var width = settings.width;\n\n      if (isFunction(width)) {\n        width = width();\n      }\n\n      instance.rootElement.style.width = isNaN(width) ? \"\".concat(width) : \"\".concat(width, \"px\");\n    }\n\n    if (!init) {\n      datamap.clearLengthCache(); // force clear cache length on updateSettings() #3416\n\n      if (instance.view) {\n        instance.view.wt.wtViewport.resetHasOversizedColumnHeadersMarked();\n      }\n\n      instance.runHooks('afterUpdateSettings', settings);\n    }\n\n    grid.adjustRowsAndCols();\n\n    if (instance.view && !priv.firstRun) {\n      instance.forceFullRender = true; // used when data was changed\n\n      editorManager.lockEditor();\n\n      instance._refreshBorders(null);\n\n      editorManager.unlockEditor();\n    }\n\n    if (!init && instance.view && (currentHeight === '' || height === '' || height === void 0) && currentHeight !== height) {\n      instance.view.wt.wtOverlays.updateMainScrollableElements();\n    }\n  };\n  /**\n   * Get value from the selected cell.\n   *\n   * @memberof Core#\n   * @function getValue\n   * @returns {*} Value of selected cell.\n   */\n\n\n  this.getValue = function () {\n    var sel = instance.getSelectedLast();\n\n    if (GridSettings.prototype.getValue) {\n      if (isFunction(GridSettings.prototype.getValue)) {\n        return GridSettings.prototype.getValue.call(instance);\n      } else if (sel) {\n        return instance.getData()[sel[0][0]][GridSettings.prototype.getValue];\n      }\n    } else if (sel) {\n      return instance.getDataAtCell(sel[0], sel[1]);\n    }\n  };\n\n  function expandType(obj) {\n    if (!hasOwnProperty(obj, 'type')) {\n      // ignore obj.prototype.type\n      return;\n    }\n\n    var expandedType = {};\n    var type;\n\n    if (_typeof(obj.type) === 'object') {\n      type = obj.type;\n    } else if (typeof obj.type === 'string') {\n      type = getCellType(obj.type);\n    } // eslint-disable-next-line no-restricted-syntax\n\n\n    for (var i in type) {\n      if (hasOwnProperty(type, i) && !hasOwnProperty(obj, i)) {\n        expandedType[i] = type[i];\n      }\n    }\n\n    return expandedType;\n  }\n  /**\n   * Returns the object settings.\n   *\n   * @memberof Core#\n   * @function getSettings\n   * @returns {Object} Object containing the current table settings.\n   */\n\n\n  this.getSettings = function () {\n    return priv.settings;\n  };\n  /**\n   * Clears the data from the table (the table settings remain intact).\n   *\n   * @memberof Core#\n   * @function clear\n   */\n\n\n  this.clear = function () {\n    this.selectAll();\n    this.emptySelectedCells();\n  };\n  /**\n   * Allows altering the table structure by either inserting/removing rows or columns.\n   *\n   * @memberof Core#\n   * @function alter\n   * @param {String} action Possible alter operations:\n   *  * `'insert_row'`\n   *  * `'insert_col'`\n   *  * `'remove_row'`\n   *  * `'remove_col'`\n   * @param {Number|Number[]} index Visual index of the row/column before which the new row/column will be\n   *                                inserted/removed or an array of arrays in format `[[index, amount],...]`.\n   * @param {Number} [amount=1] Amount of rows/columns to be inserted or removed.\n   * @param {String} [source] Source indicator.\n   * @param {Boolean} [keepEmptyRows] Flag for preventing deletion of empty rows.\n   * @example\n   * ```js\n   * // Insert new row above the row at given visual index.\n   * hot.alter('insert_row', 10);\n   * // Insert 3 new columns before 10th column.\n   * hot.alter('insert_col', 10, 3);\n   * // Remove 2 rows starting from 10th row.\n   * hot.alter('remove_row', 10, 2);\n   * // Remove 5 non-contiquous rows (it removes 3 rows from visual index 1 and 2 rows from visual index 5).\n   * hot.alter('remove_row', [[1, 3], [5, 2]]);\n   * ```\n   */\n\n\n  this.alter = function (action, index, amount, source, keepEmptyRows) {\n    grid.alter(action, index, amount, source, keepEmptyRows);\n  };\n  /**\n   * Returns a TD element for the given `row` and `column` arguments, if it is rendered on screen.\n   * Returns `null` if the TD is not rendered on screen (probably because that part of the table is not visible).\n   *\n   * @memberof Core#\n   * @function getCell\n   * @param {Number} row Visual row index.\n   * @param {Number} column Visual column index.\n   * @param {Boolean} [topmost=false] If set to `true`, it returns the TD element from the topmost overlay. For example,\n   * if the wanted cell is in the range of fixed rows, it will return a TD element from the `top` overlay.\n   * @returns {HTMLTableCellElement|null} The cell's TD element.\n   */\n\n\n  this.getCell = function (row, column) {\n    var topmost = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    return instance.view.getCellAtCoords(new CellCoords(row, column), topmost);\n  };\n  /**\n   * Returns the coordinates of the cell, provided as a HTML table cell element.\n   *\n   * @memberof Core#\n   * @function getCoords\n   * @param {HTMLTableCellElement} element The HTML Element representing the cell.\n   * @returns {CellCoords} Visual coordinates object.\n   * @example\n   * ```js\n   * hot.getCoords(hot.getCell(1, 1));\n   * // it returns CellCoords object instance with props row: 1 and col: 1.\n   * ```\n   */\n\n\n  this.getCoords = function (element) {\n    return this.view.wt.wtTable.getCoords.call(this.view.wt.wtTable, element);\n  };\n  /**\n   * Returns the property name that corresponds with the given column index (see {@link DataMap#colToProp}).\n   * If the data source is an array of arrays, it returns the columns index.\n   *\n   * @memberof Core#\n   * @function colToProp\n   * @param {Number} column Visual column index.\n   * @returns {String|Number} Column property or physical column index.\n   */\n\n\n  this.colToProp = function (column) {\n    return datamap.colToProp(column);\n  };\n  /**\n   * Returns column index that corresponds with the given property (see {@link DataMap#propToCol}).\n   *\n   * @memberof Core#\n   * @function propToCol\n   * @param {String|Number} prop Property name or physical column index.\n   * @returns {Number} Visual column index.\n   */\n\n\n  this.propToCol = function (prop) {\n    return datamap.propToCol(prop);\n  };\n  /**\n   * Translate physical row index into visual.\n   *\n   * This method is useful when you want to retrieve visual row index which can be reordered, moved or trimmed\n   * based on a physical index\n   *\n   * @memberof Core#\n   * @function toVisualRow\n   * @param {Number} row Physical row index.\n   * @returns {Number} Returns visual row index.\n   */\n\n\n  this.toVisualRow = function (row) {\n    return recordTranslator.toVisualRow(row);\n  };\n  /**\n   * Translate physical column index into visual.\n   *\n   * This method is useful when you want to retrieve visual column index which can be reordered, moved or trimmed\n   * based on a physical index\n   *\n   * @memberof Core#\n   * @function toVisualColumn\n   * @param {Number} column Physical column index.\n   * @returns {Number} Returns visual column index.\n   */\n\n\n  this.toVisualColumn = function (column) {\n    return recordTranslator.toVisualColumn(column);\n  };\n  /**\n   * Translate visual row index into physical.\n   *\n   * This method is useful when you want to retrieve physical row index based on a visual index which can be\n   * reordered, moved or trimmed.\n   *\n   * @memberof Core#\n   * @function toPhysicalRow\n   * @param {Number} row Visual row index.\n   * @returns {Number} Returns physical row index.\n   */\n\n\n  this.toPhysicalRow = function (row) {\n    return recordTranslator.toPhysicalRow(row);\n  };\n  /**\n   * Translate visual column index into physical.\n   *\n   * This method is useful when you want to retrieve physical column index based on a visual index which can be\n   * reordered, moved or trimmed.\n   *\n   * @memberof Core#\n   * @function toPhysicalColumn\n   * @param {Number} column Visual column index.\n   * @returns {Number} Returns physical column index.\n   */\n\n\n  this.toPhysicalColumn = function (column) {\n    return recordTranslator.toPhysicalColumn(column);\n  };\n  /**\n   * @description\n   * Returns the cell value at `row`, `column`.\n   *\n   * __Note__: If data is reordered, sorted or trimmed, the currently visible order will be used.\n   *\n   * @memberof Core#\n   * @function getDataAtCell\n   * @param {Number} row Visual row index.\n   * @param {Number} column Visual column index.\n   * @returns {*} Data at cell.\n   */\n\n\n  this.getDataAtCell = function (row, column) {\n    return datamap.get(row, datamap.colToProp(column));\n  };\n  /**\n   * Returns value at visual `row` and `prop` indexes (see {@link DataMap#get}).\n   *\n   * __Note__: If data is reordered, sorted or trimmed, the currently visible order will be used.\n   *\n   * @memberof Core#\n   * @function getDataAtRowProp\n   * @param {Number} row Visual row index.\n   * @param {String} prop Property name.\n   * @returns {*} Cell value.\n   */\n\n\n  this.getDataAtRowProp = function (row, prop) {\n    return datamap.get(row, prop);\n  };\n  /**\n   * @description\n   * Returns array of column values from the data source.\n   *\n   * __Note__: If columns were reordered or sorted, the currently visible order will be used.\n   *\n   * @memberof Core#\n   * @function getDataAtCol\n   * @param {Number} column Visual column index.\n   * @returns {Array} Array of cell values.\n   */\n\n\n  this.getDataAtCol = function (column) {\n    var _ref12;\n\n    return (_ref12 = []).concat.apply(_ref12, _toConsumableArray(datamap.getRange(new CellCoords(0, column), new CellCoords(priv.settings.data.length - 1, column), datamap.DESTINATION_RENDERER)));\n  };\n  /**\n   * Given the object property name (e.g. `'first.name'` or `'0'`), returns an array of column's values from the table data.\n   * You can also provide a column index as the first argument.\n   *\n   * @memberof Core#\n   * @function getDataAtProp\n   * @param {String|Number} prop Property name or physical column index.\n   * @returns {Array} Array of cell values.\n   */\n  // TODO: Getting data from `datamap` should work on visual indexes.\n\n\n  this.getDataAtProp = function (prop) {\n    var _ref13;\n\n    var range = datamap.getRange(new CellCoords(0, datamap.propToCol(prop)), new CellCoords(priv.settings.data.length - 1, datamap.propToCol(prop)), datamap.DESTINATION_RENDERER);\n    return (_ref13 = []).concat.apply(_ref13, _toConsumableArray(range));\n  };\n  /**\n   * Returns the source data object (the same that was passed by `data` configuration option or `loadData` method).\n   * Optionally you can provide a cell range by using the `row`, `column`, `row2`, `column2` arguments, to get only a\n   * fragment of the table data.\n   *\n   * __Note__: This method does not participate in data transformation. If the visual data of the table is reordered,\n   * sorted or trimmed only physical indexes are correct.\n   *\n   * @memberof Core#\n   * @function getSourceData\n   * @param {Number} [row] From physical row index.\n   * @param {Number} [column] From physical column index (or visual index, if data type is an array of objects).\n   * @param {Number} [row2] To physical row index.\n   * @param {Number} [column2] To physical column index (or visual index, if data type is an array of objects).\n   * @returns {Array[]|Object[]} The table data.\n   */\n\n\n  this.getSourceData = function (row, column, row2, column2) {\n    var data;\n\n    if (row === void 0) {\n      data = dataSource.getData();\n    } else {\n      data = dataSource.getByRange(new CellCoords(row, column), new CellCoords(row2, column2));\n    }\n\n    return data;\n  };\n  /**\n   * Returns the source data object as an arrays of arrays format even when source data was provided in another format.\n   * Optionally you can provide a cell range by using the `row`, `column`, `row2`, `column2` arguments, to get only a\n   * fragment of the table data.\n   *\n   * __Note__: This method does not participate in data transformation. If the visual data of the table is reordered,\n   * sorted or trimmed only physical indexes are correct.\n   *\n   * @memberof Core#\n   * @function getSourceDataArray\n   * @param {Number} [row] From physical row index.\n   * @param {Number} [column] From physical column index (or visual index, if data type is an array of objects).\n   * @param {Number} [row2] To physical row index.\n   * @param {Number} [column2] To physical column index (or visual index, if data type is an array of objects).\n   * @returns {Array} An array of arrays.\n   */\n\n\n  this.getSourceDataArray = function (row, column, row2, column2) {\n    var data;\n\n    if (row === void 0) {\n      data = dataSource.getData(true);\n    } else {\n      data = dataSource.getByRange(new CellCoords(row, column), new CellCoords(row2, column2), true);\n    }\n\n    return data;\n  };\n  /**\n   * Returns an array of column values from the data source.\n   *\n   * @memberof Core#\n   * @function getSourceDataAtCol\n   * @param {Number} column Visual column index.\n   * @returns {Array} Array of the column's cell values.\n   */\n  // TODO: Getting data from `sourceData` should work always on physical indexes.\n\n\n  this.getSourceDataAtCol = function (column) {\n    return dataSource.getAtColumn(column);\n  };\n  /**\n   * Returns a single row of the data (array or object, depending on what data format you use).\n   *\n   * __Note__: This method does not participate in data transformation. If the visual data of the table is reordered,\n   * sorted or trimmed only physical indexes are correct.\n   *\n   * @memberof Core#\n   * @function getSourceDataAtRow\n   * @param {Number} row Physical row index.\n   * @returns {Array|Object} Single row of data.\n   */\n\n\n  this.getSourceDataAtRow = function (row) {\n    return dataSource.getAtRow(row);\n  };\n  /**\n   * Returns a single value from the data source.\n   *\n   * @memberof Core#\n   * @function getSourceDataAtCell\n   * @param {Number} row Physical row index.\n   * @param {Number} column Visual column index.\n   * @returns {*} Cell data.\n   */\n  // TODO: Getting data from `sourceData` should work always on physical indexes.\n\n\n  this.getSourceDataAtCell = function (row, column) {\n    return dataSource.getAtCell(row, column);\n  };\n  /**\n   * @description\n   * Returns a single row of the data.\n   *\n   * __Note__: If rows were reordered, sorted or trimmed, the currently visible order will be used.\n   *\n   * @memberof Core#\n   * @function getDataAtRow\n   * @param {Number} row Visual row index.\n   * @returns {Array} Array of row's cell data.\n   */\n\n\n  this.getDataAtRow = function (row) {\n    var data = datamap.getRange(new CellCoords(row, 0), new CellCoords(row, this.countCols() - 1), datamap.DESTINATION_RENDERER);\n    return data[0] || [];\n  };\n  /**\n   * @description\n   * Returns a data type defined in the Handsontable settings under the `type` key ([Options#type](http://docs.handsontable.com/Options.html#type)).\n   * If there are cells with different types in the selected range, it returns `'mixed'`.\n   *\n   * __Note__: If data is reordered, sorted or trimmed, the currently visible order will be used.\n   *\n   * @memberof Core#\n   * @function getDataType\n   * @param {Number} rowFrom From visual row index.\n   * @param {Number} columnFrom From visual column index.\n   * @param {Number} rowTo To visual row index.\n   * @param {Number} columnTo To visual column index.\n   * @returns {String} Cell type (e.q: `'mixed'`, `'text'`, `'numeric'`, `'autocomplete'`).\n   */\n\n\n  this.getDataType = function (rowFrom, columnFrom, rowTo, columnTo) {\n    var _this3 = this;\n\n    var coords = rowFrom === void 0 ? [0, 0, this.countRows(), this.countCols()] : [rowFrom, columnFrom, rowTo, columnTo];\n    var rowStart = coords[0],\n        columnStart = coords[1];\n    var rowEnd = coords[2],\n        columnEnd = coords[3];\n    var previousType = null;\n    var currentType = null;\n\n    if (rowEnd === void 0) {\n      rowEnd = rowStart;\n    }\n\n    if (columnEnd === void 0) {\n      columnEnd = columnStart;\n    }\n\n    var type = 'mixed';\n    rangeEach(Math.min(rowStart, rowEnd), Math.max(rowStart, rowEnd), function (row) {\n      var isTypeEqual = true;\n      rangeEach(Math.min(columnStart, columnEnd), Math.max(columnStart, columnEnd), function (column) {\n        var cellType = _this3.getCellMeta(row, column);\n\n        currentType = cellType.type;\n\n        if (previousType) {\n          isTypeEqual = previousType === currentType;\n        } else {\n          previousType = currentType;\n        }\n\n        return isTypeEqual;\n      });\n      type = isTypeEqual ? currentType : 'mixed';\n      return isTypeEqual;\n    });\n    return type;\n  };\n  /**\n   * Remove a property defined by the `key` argument from the cell meta object for the provided `row` and `column` coordinates.\n   *\n   * @memberof Core#\n   * @function removeCellMeta\n   * @param {Number} row Visual row index.\n   * @param {Number} column Visual column index.\n   * @param {String} key Property name.\n   * @fires Hooks#beforeRemoveCellMeta\n   * @fires Hooks#afterRemoveCellMeta\n   */\n\n\n  this.removeCellMeta = function (row, column, key) {\n    var _recordTranslator$toP = recordTranslator.toPhysical(row, column),\n        _recordTranslator$toP2 = _slicedToArray(_recordTranslator$toP, 2),\n        physicalRow = _recordTranslator$toP2[0],\n        physicalColumn = _recordTranslator$toP2[1];\n\n    var cachedValue = priv.cellSettings[physicalRow][physicalColumn][key];\n    var hookResult = instance.runHooks('beforeRemoveCellMeta', row, column, key, cachedValue);\n\n    if (hookResult !== false) {\n      delete priv.cellSettings[physicalRow][physicalColumn][key];\n      instance.runHooks('afterRemoveCellMeta', row, column, key, cachedValue);\n    }\n\n    cachedValue = null;\n  };\n  /**\n   * Remove one or more rows from the cell meta object.\n   *\n   * @since 0.30.0\n   * @param {Number} index An integer that specifies at what position to add/remove items, Use negative values to specify the position from the end of the array.\n   * @param {Number} deleteAmount The number of items to be removed. If set to 0, no items will be removed.\n   * @param {Array} items The new items to be added to the array.\n   */\n\n\n  this.spliceCellsMeta = function (index, deleteAmount) {\n    var _priv$cellSettings;\n\n    for (var _len4 = arguments.length, items = new Array(_len4 > 2 ? _len4 - 2 : 0), _key3 = 2; _key3 < _len4; _key3++) {\n      items[_key3 - 2] = arguments[_key3];\n    }\n\n    (_priv$cellSettings = priv.cellSettings).splice.apply(_priv$cellSettings, [index, deleteAmount].concat(items));\n  };\n  /**\n   * Set cell meta data object defined by `prop` to the corresponding params `row` and `column`.\n   *\n   * @memberof Core#\n   * @function setCellMetaObject\n   * @param {Number} row Visual row index.\n   * @param {Number} column Visual column index.\n   * @param {Object} prop Meta object.\n   */\n\n\n  this.setCellMetaObject = function (row, column, prop) {\n    var _this4 = this;\n\n    if (_typeof(prop) === 'object') {\n      objectEach(prop, function (value, key) {\n        _this4.setCellMeta(row, column, key, value);\n      });\n    }\n  };\n  /**\n   * Sets a property defined by the `key` property to the meta object of a cell corresponding to params `row` and `column`.\n   *\n   * @memberof Core#\n   * @function setCellMeta\n   * @param {Number} row Visual row index.\n   * @param {Number} column Visual column index.\n   * @param {String} key Property name.\n   * @param {String} value Property value.\n   * @fires Hooks#afterSetCellMeta\n   */\n\n\n  this.setCellMeta = function (row, column, key, value) {\n    var _recordTranslator$toP3 = recordTranslator.toPhysical(row, column),\n        _recordTranslator$toP4 = _slicedToArray(_recordTranslator$toP3, 2),\n        physicalRow = _recordTranslator$toP4[0],\n        physicalColumn = _recordTranslator$toP4[1];\n\n    if (!priv.columnSettings[physicalColumn]) {\n      priv.columnSettings[physicalColumn] = columnFactory(GridSettings, priv.columnsSettingConflicts);\n    }\n\n    if (!priv.cellSettings[physicalRow]) {\n      priv.cellSettings[physicalRow] = [];\n    }\n\n    if (!priv.cellSettings[physicalRow][physicalColumn]) {\n      priv.cellSettings[physicalRow][physicalColumn] = new priv.columnSettings[physicalColumn]();\n    }\n\n    priv.cellSettings[physicalRow][physicalColumn][key] = value;\n    instance.runHooks('afterSetCellMeta', row, column, key, value);\n  };\n  /**\n   * Get all the cells meta settings at least once generated in the table (in order of cell initialization).\n   *\n   * @memberof Core#\n   * @function getCellsMeta\n   * @returns {Array} Returns an array of ColumnSettings object instances.\n   */\n\n\n  this.getCellsMeta = function () {\n    return arrayFlatten(priv.cellSettings);\n  };\n  /**\n   * Returns the cell properties object for the given `row` and `column` coordinates.\n   *\n   * @memberof Core#\n   * @function getCellMeta\n   * @param {Number} row Visual row index.\n   * @param {Number} column Visual column index.\n   * @returns {Object} The cell properties object.\n   * @fires Hooks#beforeGetCellMeta\n   * @fires Hooks#afterGetCellMeta\n   */\n\n\n  this.getCellMeta = function (row, column) {\n    var prop = datamap.colToProp(column);\n\n    var _recordTranslator$toP5 = recordTranslator.toPhysical(row, column),\n        _recordTranslator$toP6 = _slicedToArray(_recordTranslator$toP5, 2),\n        potentialPhysicalRow = _recordTranslator$toP6[0],\n        physicalColumn = _recordTranslator$toP6[1];\n\n    var physicalRow = potentialPhysicalRow; // Workaround for #11. Connected also with #3849. It should be fixed within #4497.\n\n    if (physicalRow === null) {\n      physicalRow = row;\n    }\n\n    if (!priv.columnSettings[physicalColumn]) {\n      priv.columnSettings[physicalColumn] = columnFactory(GridSettings, priv.columnsSettingConflicts);\n    }\n\n    if (!priv.cellSettings[physicalRow]) {\n      priv.cellSettings[physicalRow] = [];\n    }\n\n    if (!priv.cellSettings[physicalRow][physicalColumn]) {\n      priv.cellSettings[physicalRow][physicalColumn] = new priv.columnSettings[physicalColumn]();\n    }\n\n    var cellProperties = priv.cellSettings[physicalRow][physicalColumn]; // retrieve cellProperties from cache\n\n    cellProperties.row = physicalRow;\n    cellProperties.col = physicalColumn;\n    cellProperties.visualRow = row;\n    cellProperties.visualCol = column;\n    cellProperties.prop = prop;\n    cellProperties.instance = instance;\n    instance.runHooks('beforeGetCellMeta', row, column, cellProperties);\n    extend(cellProperties, expandType(cellProperties)); // for `type` added in beforeGetCellMeta\n\n    if (cellProperties.cells) {\n      var settings = cellProperties.cells.call(cellProperties, physicalRow, physicalColumn, prop);\n\n      if (settings) {\n        extend(cellProperties, settings);\n        extend(cellProperties, expandType(settings)); // for `type` added in cells\n      }\n    }\n\n    instance.runHooks('afterGetCellMeta', row, column, cellProperties);\n    return cellProperties;\n  };\n  /**\n   * Returns an array of cell meta objects for specyfied physical row index.\n   *\n   * @memberof Core#\n   * @function getCellMetaAtRow\n   * @param {Number} row Physical row index.\n   * @returns {Array}\n   */\n\n\n  this.getCellMetaAtRow = function (row) {\n    return priv.cellSettings[row];\n  };\n  /**\n   * Checks if the data format and config allows user to modify the column structure.\n   *\n   * @memberof Core#\n   * @function isColumnModificationAllowed\n   * @returns {Boolean}\n   */\n\n\n  this.isColumnModificationAllowed = function () {\n    return !(instance.dataType === 'object' || instance.getSettings().columns);\n  };\n\n  var rendererLookup = cellMethodLookupFactory('renderer');\n  /**\n   * Returns the cell renderer function by given `row` and `column` arguments.\n   *\n   * @memberof Core#\n   * @function getCellRenderer\n   * @param {Number|Object} row Visual row index or cell meta object (see {@link Core#getCellMeta}).\n   * @param {Number} column Visual column index.\n   * @returns {Function} The renderer function.\n   * @example\n   * ```js\n   * // Get cell renderer using `row` and `column` coordinates.\n   * hot.getCellRenderer(1, 1);\n   * // Get cell renderer using cell meta object.\n   * hot.getCellRenderer(hot.getCellMeta(1, 1));\n   * ```\n   */\n\n  this.getCellRenderer = function (row, column) {\n    return getRenderer(rendererLookup.call(this, row, column));\n  };\n  /**\n   * Returns the cell editor class by the provided `row` and `column` arguments.\n   *\n   * @memberof Core#\n   * @function getCellEditor\n   * @param {Number} row Visual row index or cell meta object (see {@link Core#getCellMeta}).\n   * @param {Number} column Visual column index.\n   * @returns {Function} The editor class.\n   * @example\n   * ```js\n   * // Get cell editor class using `row` and `column` coordinates.\n   * hot.getCellEditor(1, 1);\n   * // Get cell editor class using cell meta object.\n   * hot.getCellEditor(hot.getCellMeta(1, 1));\n   * ```\n   */\n\n\n  this.getCellEditor = cellMethodLookupFactory('editor');\n  var validatorLookup = cellMethodLookupFactory('validator');\n  /**\n   * Returns the cell validator by `row` and `column`.\n   *\n   * @memberof Core#\n   * @function getCellValidator\n   * @param {Number|Object} row Visual row index or cell meta object (see {@link Core#getCellMeta}).\n   * @param {Number} column Visual column index.\n   * @returns {Function|RegExp|undefined} The validator function.\n   * @example\n   * ```js\n   * // Get cell valiator using `row` and `column` coordinates.\n   * hot.getCellValidator(1, 1);\n   * // Get cell valiator using cell meta object.\n   * hot.getCellValidator(hot.getCellMeta(1, 1));\n   * ```\n   */\n\n  this.getCellValidator = function (row, column) {\n    var validator = validatorLookup.call(this, row, column);\n\n    if (typeof validator === 'string') {\n      validator = getValidator(validator);\n    }\n\n    return validator;\n  };\n  /**\n   * Validates all cells using their validator functions and calls callback when finished.\n   *\n   * If one of the cells is invalid, the callback will be fired with `'valid'` arguments as `false` - otherwise it\n   * would equal `true`.\n   *\n   * @memberof Core#\n   * @function validateCells\n   * @param {Function} [callback] The callback function.\n   * @example\n   * ```js\n   * hot.validateCells((valid) => {\n   *   if (valid) {\n   *     // ... code for validated cells\n   *   }\n   * })\n   * ```\n   */\n\n\n  this.validateCells = function (callback) {\n    this._validateCells(callback);\n  };\n  /**\n   * Validates rows using their validator functions and calls callback when finished.\n   *\n   * If one of the cells is invalid, the callback will be fired with `'valid'` arguments as `false` - otherwise it\n   *  would equal `true`.\n   *\n   * @memberof Core#\n   * @function validateRows\n   * @param {Array} [rows] Array of validation target visual row indexes.\n   * @param {Function} [callback] The callback function.\n   * @example\n   * ```js\n   * hot.validateRows([3, 4, 5], (valid) => {\n   *   if (valid) {\n   *     // ... code for validated rows\n   *   }\n   * })\n   * ```\n   */\n\n\n  this.validateRows = function (rows, callback) {\n    if (!Array.isArray(rows)) {\n      throw new Error('validateRows parameter `rows` must be an array');\n    }\n\n    this._validateCells(callback, rows);\n  };\n  /**\n   * Validates columns using their validator functions and calls callback when finished.\n   *\n   * If one of the cells is invalid, the callback will be fired with `'valid'` arguments as `false` - otherwise it\n   *  would equal `true`.\n   *\n   * @memberof Core#\n   * @function validateColumns\n   * @param {Array} [columns] Array of validation target visual columns indexes.\n   * @param {Function} [callback] The callback function.\n   * @example\n   * ```js\n   * hot.validateColumns([3, 4, 5], (valid) => {\n   *   if (valid) {\n   *     // ... code for validated columns\n   *   }\n   * })\n   * ```\n   */\n\n\n  this.validateColumns = function (columns, callback) {\n    if (!Array.isArray(columns)) {\n      throw new Error('validateColumns parameter `columns` must be an array');\n    }\n\n    this._validateCells(callback, undefined, columns);\n  };\n  /**\n   * Validates all cells using their validator functions and calls callback when finished.\n   *\n   * If one of the cells is invalid, the callback will be fired with `'valid'` arguments as `false` - otherwise it would equal `true`.\n   *\n   * Private use intended.\n   *\n   * @private\n   * @memberof Core#\n   * @function _validateCells\n   * @param {Function} [callback] The callback function.\n   * @param {Array} [rows] An array of validation target visual row indexes.\n   * @param {Array} [columns] An array of validation target visual column indexes.\n   */\n\n\n  this._validateCells = function (callback, rows, columns) {\n    var waitingForValidator = new ValidatorsQueue();\n\n    if (callback) {\n      waitingForValidator.onQueueEmpty = callback;\n    }\n\n    var i = instance.countRows() - 1;\n\n    while (i >= 0) {\n      if (rows !== undefined && rows.indexOf(i) === -1) {\n        i -= 1;\n        continue;\n      }\n\n      var j = instance.countCols() - 1;\n\n      while (j >= 0) {\n        if (columns !== undefined && columns.indexOf(j) === -1) {\n          j -= 1;\n          continue;\n        }\n\n        waitingForValidator.addValidatorToQueue();\n        instance.validateCell(instance.getDataAtCell(i, j), instance.getCellMeta(i, j), function (result) {\n          if (typeof result !== 'boolean') {\n            throw new Error('Validation error: result is not boolean');\n          }\n\n          if (result === false) {\n            waitingForValidator.valid = false;\n          }\n\n          waitingForValidator.removeValidatorFormQueue();\n        }, 'validateCells');\n        j -= 1;\n      }\n\n      i -= 1;\n    }\n\n    waitingForValidator.checkIfQueueIsEmpty();\n  };\n  /**\n   * Returns an array of row headers' values (if they are enabled). If param `row` was given, it returns the header of the given row as a string.\n   *\n   * @memberof Core#\n   * @function getRowHeader\n   * @param {Number} [row] Visual row index.\n   * @fires Hooks#modifyRowHeader\n   * @returns {Array|String|Number} Array of header values / single header value.\n   */\n\n\n  this.getRowHeader = function (row) {\n    var rowHeader = priv.settings.rowHeaders;\n    var physicalRow = row;\n\n    if (physicalRow !== void 0) {\n      physicalRow = instance.runHooks('modifyRowHeader', physicalRow);\n    }\n\n    if (physicalRow === void 0) {\n      rowHeader = [];\n      rangeEach(instance.countRows() - 1, function (i) {\n        rowHeader.push(instance.getRowHeader(i));\n      });\n    } else if (Array.isArray(rowHeader) && rowHeader[physicalRow] !== void 0) {\n      rowHeader = rowHeader[physicalRow];\n    } else if (isFunction(rowHeader)) {\n      rowHeader = rowHeader(physicalRow);\n    } else if (rowHeader && typeof rowHeader !== 'string' && typeof rowHeader !== 'number') {\n      rowHeader = physicalRow + 1;\n    }\n\n    return rowHeader;\n  };\n  /**\n   * Returns information about if this table is configured to display row headers.\n   *\n   * @memberof Core#\n   * @function hasRowHeaders\n   * @returns {Boolean} `true` if the instance has the row headers enabled, `false` otherwise.\n   */\n\n\n  this.hasRowHeaders = function () {\n    return !!priv.settings.rowHeaders;\n  };\n  /**\n   * Returns information about if this table is configured to display column headers.\n   *\n   * @memberof Core#\n   * @function hasColHeaders\n   * @returns {Boolean} `true` if the instance has the column headers enabled, `false` otherwise.\n   */\n\n\n  this.hasColHeaders = function () {\n    if (priv.settings.colHeaders !== void 0 && priv.settings.colHeaders !== null) {\n      // Polymer has empty value = null\n      return !!priv.settings.colHeaders;\n    }\n\n    for (var i = 0, ilen = instance.countCols(); i < ilen; i++) {\n      if (instance.getColHeader(i)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Returns an array of column headers (in string format, if they are enabled). If param `column` is given, it\n   * returns the header at the given column.\n   *\n   * @memberof Core#\n   * @function getColHeader\n   * @param {Number} [column] Visual column index.\n   * @fires Hooks#modifyColHeader\n   * @returns {Array|String|Number} The column header(s).\n   */\n\n\n  this.getColHeader = function (column) {\n    var columnsAsFunc = priv.settings.columns && isFunction(priv.settings.columns);\n    var columnIndex = instance.runHooks('modifyColHeader', column);\n    var result = priv.settings.colHeaders;\n\n    if (columnIndex === void 0) {\n      var out = [];\n      var ilen = columnsAsFunc ? instance.countSourceCols() : instance.countCols();\n\n      for (var i = 0; i < ilen; i++) {\n        out.push(instance.getColHeader(i));\n      }\n\n      result = out;\n    } else {\n      var translateVisualIndexToColumns = function translateVisualIndexToColumns(visualColumnIndex) {\n        var arr = [];\n        var columnsLen = instance.countSourceCols();\n        var index = 0;\n\n        for (; index < columnsLen; index++) {\n          if (isFunction(instance.getSettings().columns) && instance.getSettings().columns(index)) {\n            arr.push(index);\n          }\n        }\n\n        return arr[visualColumnIndex];\n      };\n\n      var baseCol = columnIndex;\n      var physicalColumn = instance.runHooks('modifyCol', baseCol);\n      var prop = translateVisualIndexToColumns(physicalColumn);\n\n      if (priv.settings.colHeaders === false) {\n        result = null;\n      } else if (priv.settings.columns && isFunction(priv.settings.columns) && priv.settings.columns(prop) && priv.settings.columns(prop).title) {\n        result = priv.settings.columns(prop).title;\n      } else if (priv.settings.columns && priv.settings.columns[physicalColumn] && priv.settings.columns[physicalColumn].title) {\n        result = priv.settings.columns[physicalColumn].title;\n      } else if (Array.isArray(priv.settings.colHeaders) && priv.settings.colHeaders[physicalColumn] !== void 0) {\n        result = priv.settings.colHeaders[physicalColumn];\n      } else if (isFunction(priv.settings.colHeaders)) {\n        result = priv.settings.colHeaders(physicalColumn);\n      } else if (priv.settings.colHeaders && typeof priv.settings.colHeaders !== 'string' && typeof priv.settings.colHeaders !== 'number') {\n        result = spreadsheetColumnLabel(baseCol); // see #1458\n      }\n    }\n\n    return result;\n  };\n  /**\n   * Return column width from settings (no guessing). Private use intended.\n   *\n   * @private\n   * @memberof Core#\n   * @function _getColWidthFromSettings\n   * @param {Number} col Visual col index.\n   * @returns {Number}\n   */\n\n\n  this._getColWidthFromSettings = function (col) {\n    var cellProperties = instance.getCellMeta(0, col);\n    var width = cellProperties.width;\n\n    if (width === void 0 || width === priv.settings.width) {\n      width = cellProperties.colWidths;\n    }\n\n    if (width !== void 0 && width !== null) {\n      switch (_typeof(width)) {\n        case 'object':\n          // array\n          width = width[col];\n          break;\n\n        case 'function':\n          width = width(col);\n          break;\n\n        default:\n          break;\n      }\n\n      if (typeof width === 'string') {\n        width = parseInt(width, 10);\n      }\n    }\n\n    return width;\n  };\n  /**\n   * Returns the width of the requested column.\n   *\n   * @memberof Core#\n   * @function getColWidth\n   * @param {Number} column Visual column index.\n   * @returns {Number} Column width.\n   * @fires Hooks#modifyColWidth\n   */\n\n\n  this.getColWidth = function (column) {\n    var width = instance._getColWidthFromSettings(column);\n\n    width = instance.runHooks('modifyColWidth', width, column);\n\n    if (width === void 0) {\n      width = ViewportColumnsCalculator.DEFAULT_WIDTH;\n    }\n\n    return width;\n  };\n  /**\n   * Return row height from settings (no guessing). Private use intended.\n   *\n   * @private\n   * @memberof Core#\n   * @function _getRowHeightFromSettings\n   * @param {Number} row Visual row index.\n   * @returns {Number}\n   */\n\n\n  this._getRowHeightFromSettings = function (row) {\n    // let cellProperties = instance.getCellMeta(row, 0);\n    // let height = cellProperties.height;\n    //\n    // if (height === void 0 || height === priv.settings.height) {\n    //  height = cellProperties.rowHeights;\n    // }\n    var height = priv.settings.rowHeights;\n\n    if (height !== void 0 && height !== null) {\n      switch (_typeof(height)) {\n        case 'object':\n          // array\n          height = height[row];\n          break;\n\n        case 'function':\n          height = height(row);\n          break;\n\n        default:\n          break;\n      }\n\n      if (typeof height === 'string') {\n        height = parseInt(height, 10);\n      }\n    }\n\n    return height;\n  };\n  /**\n   * Returns the row height.\n   *\n   * @memberof Core#\n   * @function getRowHeight\n   * @param {Number} row Visual row index.\n   * @returns {Number} The given row's height.\n   * @fires Hooks#modifyRowHeight\n   */\n\n\n  this.getRowHeight = function (row) {\n    var height = instance._getRowHeightFromSettings(row);\n\n    height = instance.runHooks('modifyRowHeight', height, row);\n    return height;\n  };\n  /**\n   * Returns the total number of rows in the data source.\n   *\n   * @memberof Core#\n   * @function countSourceRows\n   * @returns {Number} Total number of rows.\n   */\n\n\n  this.countSourceRows = function () {\n    var sourceLength = instance.runHooks('modifySourceLength');\n    return sourceLength || (instance.getSourceData() ? instance.getSourceData().length : 0);\n  };\n  /**\n   * Returns the total number of columns in the data source.\n   *\n   * @memberof Core#\n   * @function countSourceCols\n   * @returns {Number} Total number of columns.\n   */\n\n\n  this.countSourceCols = function () {\n    var len = 0;\n    var obj = instance.getSourceData() && instance.getSourceData()[0] ? instance.getSourceData()[0] : [];\n\n    if (isObject(obj)) {\n      len = deepObjectSize(obj);\n    } else {\n      len = obj.length || 0;\n    }\n\n    return len;\n  };\n  /**\n   * Returns the total number of visual rows in the table.\n   *\n   * @memberof Core#\n   * @function countRows\n   * @returns {Number} Total number of rows.\n   */\n\n\n  this.countRows = function () {\n    return datamap.getLength();\n  };\n  /**\n   * Returns the total number of visible columns in the table.\n   *\n   * @memberof Core#\n   * @function countCols\n   * @returns {Number} Total number of columns.\n   */\n\n\n  this.countCols = function () {\n    var maxCols = this.getSettings().maxCols;\n    var dataHasLength = false;\n    var dataLen = 0;\n\n    if (instance.dataType === 'array') {\n      dataHasLength = priv.settings.data && priv.settings.data[0] && priv.settings.data[0].length;\n    }\n\n    if (dataHasLength) {\n      dataLen = priv.settings.data[0].length;\n    }\n\n    if (priv.settings.columns) {\n      var columnsIsFunction = isFunction(priv.settings.columns);\n\n      if (columnsIsFunction) {\n        if (instance.dataType === 'array') {\n          var columnLen = 0;\n\n          for (var i = 0; i < dataLen; i++) {\n            if (priv.settings.columns(i)) {\n              columnLen += 1;\n            }\n          }\n\n          dataLen = columnLen;\n        } else if (instance.dataType === 'object' || instance.dataType === 'function') {\n          dataLen = datamap.colToPropCache.length;\n        }\n      } else {\n        dataLen = priv.settings.columns.length;\n      }\n    } else if (instance.dataType === 'object' || instance.dataType === 'function') {\n      dataLen = datamap.colToPropCache.length;\n    }\n\n    return Math.min(maxCols, dataLen);\n  };\n  /**\n   * Returns an visual index of the first rendered row.\n   * Returns -1 if no row is rendered.\n   *\n   * @memberof Core#\n   * @function rowOffset\n   * @returns {Number} Visual index of first rendered row.\n   */\n\n\n  this.rowOffset = function () {\n    return instance.view.wt.wtTable.getFirstRenderedRow();\n  };\n  /**\n   * Returns the visual index of the first rendered column.\n   * Returns -1 if no column is rendered.\n   *\n   * @memberof Core#\n   * @function colOffset\n   * @returns {Number} Visual index of the first visible column.\n   */\n\n\n  this.colOffset = function () {\n    return instance.view.wt.wtTable.getFirstRenderedColumn();\n  };\n  /**\n   * Returns the number of rendered rows (including rows partially or fully rendered outside viewport).\n   *\n   * @memberof Core#\n   * @function countRenderedRows\n   * @returns {Number} Returns -1 if table is not visible.\n   */\n\n\n  this.countRenderedRows = function () {\n    return instance.view.wt.drawn ? instance.view.wt.wtTable.getRenderedRowsCount() : -1;\n  };\n  /**\n   * Returns the number of visible rows (rendered rows that fully fit inside viewport).\n   *\n   * @memberof Core#\n   * @function countVisibleRows\n   * @returns {Number} Number of visible rows or -1.\n   */\n\n\n  this.countVisibleRows = function () {\n    return instance.view.wt.drawn ? instance.view.wt.wtTable.getVisibleRowsCount() : -1;\n  };\n  /**\n   * Returns the number of rendered columns (including columns partially or fully rendered outside viewport).\n   *\n   * @memberof Core#\n   * @function countRenderedCols\n   * @returns {Number} Returns -1 if table is not visible.\n   */\n\n\n  this.countRenderedCols = function () {\n    return instance.view.wt.drawn ? instance.view.wt.wtTable.getRenderedColumnsCount() : -1;\n  };\n  /**\n   * Returns the number of visible columns. Returns -1 if table is not visible\n   *\n   * @memberof Core#\n   * @function countVisibleCols\n   * @return {Number} Number of visible columns or -1.\n   */\n\n\n  this.countVisibleCols = function () {\n    return instance.view.wt.drawn ? instance.view.wt.wtTable.getVisibleColumnsCount() : -1;\n  };\n  /**\n   * Returns the number of empty rows. If the optional ending parameter is `true`, returns the\n   * number of empty rows at the bottom of the table.\n   *\n   * @memberof Core#\n   * @function countEmptyRows\n   * @param {Boolean} [ending=false] If `true`, will only count empty rows at the end of the data source.\n   * @returns {Number} Count empty rows.\n   */\n\n\n  this.countEmptyRows = function () {\n    var ending = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var emptyRows = 0;\n    rangeEachReverse(instance.countRows() - 1, function (visualIndex) {\n      if (instance.isEmptyRow(visualIndex)) {\n        emptyRows += 1;\n      } else if (ending === true) {\n        return false;\n      }\n    });\n    return emptyRows;\n  };\n  /**\n   * Returns the number of empty columns. If the optional ending parameter is `true`, returns the number of empty\n   * columns at right hand edge of the table.\n   *\n   * @memberof Core#\n   * @function countEmptyCols\n   * @param {Boolean} [ending=false] If `true`, will only count empty columns at the end of the data source row.\n   * @returns {Number} Count empty cols.\n   */\n\n\n  this.countEmptyCols = function () {\n    var ending = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if (instance.countRows() < 1) {\n      return 0;\n    }\n\n    var emptyColumns = 0;\n    rangeEachReverse(instance.countCols() - 1, function (visualIndex) {\n      if (instance.isEmptyCol(visualIndex)) {\n        emptyColumns += 1;\n      } else if (ending === true) {\n        return false;\n      }\n    });\n    return emptyColumns;\n  };\n  /**\n   * Check if all cells in the row declared by the `row` argument are empty.\n   *\n   * @memberof Core#\n   * @function isEmptyRow\n   * @param {Number} row Visual row index.\n   * @returns {Boolean} `true` if the row at the given `row` is empty, `false` otherwise.\n   */\n\n\n  this.isEmptyRow = function (row) {\n    return priv.settings.isEmptyRow.call(instance, row);\n  };\n  /**\n   * Check if all cells in the the column declared by the `column` argument are empty.\n   *\n   * @memberof Core#\n   * @function isEmptyCol\n   * @param {Number} column Column index.\n   * @returns {Boolean} `true` if the column at the given `col` is empty, `false` otherwise.\n   */\n\n\n  this.isEmptyCol = function (column) {\n    return priv.settings.isEmptyCol.call(instance, column);\n  };\n  /**\n   * Select cell specified by `row` and `column` values or a range of cells finishing at `endRow`, `endCol`. If the table\n   * was configured to support data column properties that properties can be used to making a selection.\n   *\n   * By default, viewport will be scrolled to the selection. After the `selectCell` method had finished, the instance\n   * will be listening to keyboard input on the document.\n   *\n   * @example\n   * ```js\n   * // select a single cell\n   * hot.selectCell(2, 4);\n   * // select a single cell using column property\n   * hot.selectCell(2, 'address');\n   * // select a range of cells\n   * hot.selectCell(2, 4, 3, 5);\n   * // select a range of cells using column properties\n   * hot.selectCell(2, 'address', 3, 'phone_number');\n   * // select a range of cells without scrolling to them\n   * hot.selectCell(2, 'address', 3, 'phone_number', false);\n   * ```\n   *\n   * @memberof Core#\n   * @function selectCell\n   * @param {Number} row Visual row index.\n   * @param {Number|String} column Visual column index or column property.\n   * @param {Number} [endRow] Visual end row index (if selecting a range).\n   * @param {Number|String} [endColumn] Visual end column index or column property (if selecting a range).\n   * @param {Boolean} [scrollToCell=true] If `true`, the viewport will be scrolled to the selection.\n   * @param {Boolean} [changeListener=true] If `false`, Handsontable will not change keyboard events listener to himself.\n   * @returns {Boolean} `true` if selection was successful, `false` otherwise.\n   */\n\n\n  this.selectCell = function (row, column, endRow, endColumn) {\n    var scrollToCell = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    var changeListener = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n\n    if (isUndefined(row) || isUndefined(column)) {\n      return false;\n    }\n\n    return this.selectCells([[row, column, endRow, endColumn]], scrollToCell, changeListener);\n  };\n  /**\n   * Make multiple, non-contiguous selection specified by `row` and `column` values or a range of cells\n   * finishing at `endRow`, `endColumn`. The method supports two input formats which are the same as that\n   * produces by `getSelected` and `getSelectedRange` methods.\n   *\n   * By default, viewport will be scrolled to selection. After the `selectCells` method had finished, the instance\n   * will be listening to keyboard input on the document.\n   *\n   * @example\n   * ```js\n   * // Using an array of arrays.\n   * hot.selectCells([[1, 1, 2, 2], [3, 3], [6, 2, 0, 2]]);\n   * // Using an array of arrays with defined columns as props.\n   * hot.selectCells([[1, 'id', 2, 'first_name'], [3, 'full_name'], [6, 'last_name', 0, 'first_name']]);\n   * // Using an array of CellRange objects (produced by `.getSelectedRange()` method).\n   * const selected = hot.getSelectedRange();\n   *\n   * selected[0].from.row = 0;\n   * selected[0].from.col = 0;\n   *\n   * hot.selectCells(selected);\n   * ```\n   *\n   * @memberof Core#\n   * @since 0.38.0\n   * @function selectCells\n   * @param {Array[]|CellRange[]} coords Visual coords passed as an array of array (`[[rowStart, columnStart, rowEnd, columnEnd], ...]`)\n   *                                     the same format as `getSelected` method returns or as an CellRange objects\n   *                                     which is the same format what `getSelectedRange` method returns.\n   * @param {Boolean} [scrollToCell=true] If `true`, the viewport will be scrolled to the selection.\n   * @param {Boolean} [changeListener=true] If `false`, Handsontable will not change keyboard events listener to himself.\n   * @returns {Boolean} `true` if selection was successful, `false` otherwise.\n   */\n\n\n  this.selectCells = function () {\n    var coords = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [[]];\n    var scrollToCell = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var changeListener = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    if (scrollToCell === false) {\n      preventScrollingToCell = true;\n    }\n\n    var wasSelected = selection.selectCells(coords);\n\n    if (wasSelected && changeListener) {\n      instance.listen();\n    }\n\n    preventScrollingToCell = false;\n    return wasSelected;\n  };\n  /**\n   * Select column specified by `startColumn` visual index, column property or a range of columns finishing at `endColumn`.\n   *\n   * @example\n   * ```js\n   * // Select column using visual index.\n   * hot.selectColumns(1);\n   * // Select column using column property.\n   * hot.selectColumns('id');\n   * // Select range of columns using visual indexes.\n   * hot.selectColumns(1, 4);\n   * // Select range of columns using column properties.\n   * hot.selectColumns('id', 'last_name');\n   * ```\n   *\n   * @memberof Core#\n   * @since 0.38.0\n   * @function selectColumns\n   * @param {Number} startColumn The visual column index from which the selection starts.\n   * @param {Number} [endColumn=startColumn] The visual column index to which the selection finishes. If `endColumn`\n   *                                         is not defined the column defined by `startColumn` will be selected.\n   * @returns {Boolean} `true` if selection was successful, `false` otherwise.\n   */\n\n\n  this.selectColumns = function (startColumn) {\n    var endColumn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : startColumn;\n    return selection.selectColumns(startColumn, endColumn);\n  };\n  /**\n   * Select row specified by `startRow` visual index or a range of rows finishing at `endRow`.\n   *\n   * @example\n   * ```js\n   * // Select row using visual index.\n   * hot.selectRows(1);\n   * // Select range of rows using visual indexes.\n   * hot.selectRows(1, 4);\n   * ```\n   *\n   * @memberof Core#\n   * @since 0.38.0\n   * @function selectRows\n   * @param {Number} startRow The visual row index from which the selection starts.\n   * @param {Number} [endRow=startRow] The visual row index to which the selection finishes. If `endRow`\n   *                                   is not defined the row defined by `startRow` will be selected.\n   * @returns {Boolean} `true` if selection was successful, `false` otherwise.\n   */\n\n\n  this.selectRows = function (startRow) {\n    var endRow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : startRow;\n    return selection.selectRows(startRow, endRow);\n  };\n  /**\n   * Deselects the current cell selection on the table.\n   *\n   * @memberof Core#\n   * @function deselectCell\n   */\n\n\n  this.deselectCell = function () {\n    selection.deselect();\n  };\n  /**\n   * Select the whole table. The previous selection will be overwritten.\n   *\n   * @since 0.38.2\n   * @memberof Core#\n   * @function selectAll\n   */\n\n\n  this.selectAll = function () {\n    preventScrollingToCell = true;\n    selection.selectAll();\n    preventScrollingToCell = false;\n  };\n  /**\n   * Scroll viewport to coordinates specified by the `row` and `column` arguments.\n   *\n   * @memberof Core#\n   * @function scrollViewportTo\n   * @param {Number} [row] Visual row index.\n   * @param {Number} [column] Visual column index.\n   * @param {Boolean} [snapToBottom = false] If `true`, viewport is scrolled to show the cell on the bottom of the table.\n   * @param {Boolean} [snapToRight = false] If `true`, viewport is scrolled to show the cell on the right side of the table.\n   * @returns {Boolean} `true` if scroll was successful, `false` otherwise.\n   */\n\n\n  this.scrollViewportTo = function (row, column) {\n    var snapToBottom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var snapToRight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var snapToTop = !snapToBottom;\n    var snapToLeft = !snapToRight;\n    var result = false;\n\n    if (row !== void 0 && column !== void 0) {\n      result = instance.view.scrollViewport(new CellCoords(row, column), snapToTop, snapToRight, snapToBottom, snapToLeft);\n    }\n\n    if (typeof row === 'number' && typeof column !== 'number') {\n      result = instance.view.scrollViewportVertically(row, snapToTop, snapToBottom);\n    }\n\n    if (typeof column === 'number' && typeof row !== 'number') {\n      result = instance.view.scrollViewportHorizontally(column, snapToRight, snapToLeft);\n    }\n\n    return result;\n  };\n  /**\n   * Removes the table from the DOM and destroys the instance of the Handsontable.\n   *\n   * @memberof Core#\n   * @function destroy\n   * @fires Hooks#afterDestroy\n   */\n\n\n  this.destroy = function () {\n    instance._clearTimeouts();\n\n    instance._clearImmediates();\n\n    if (instance.view) {\n      // in case HT is destroyed before initialization has finished\n      instance.view.destroy();\n    }\n\n    if (dataSource) {\n      dataSource.destroy();\n    }\n\n    dataSource = null;\n    keyStateStopObserving();\n\n    if (isRootInstance(instance)) {\n      var licenseInfo = this.rootDocument.querySelector('#hot-display-license-info');\n\n      if (licenseInfo) {\n        licenseInfo.parentNode.removeChild(licenseInfo);\n      }\n    }\n\n    empty(instance.rootElement);\n    eventManager.destroy();\n\n    if (editorManager) {\n      editorManager.destroy();\n    }\n\n    instance.runHooks('afterDestroy');\n    Hooks.getSingleton().destroy(instance);\n    objectEach(instance, function (property, key, obj) {\n      // replace instance methods with post mortem\n      if (isFunction(property)) {\n        obj[key] = postMortem(key);\n      } else if (key !== 'guid') {\n        // replace instance properties with null (restores memory)\n        // it should not be necessary but this prevents a memory leak side effects that show itself in Jasmine tests\n        obj[key] = null;\n      }\n    });\n    instance.isDestroyed = true; // replace private properties with null (restores memory)\n    // it should not be necessary but this prevents a memory leak side effects that show itself in Jasmine tests\n\n    if (datamap) {\n      datamap.destroy();\n    }\n\n    datamap = null;\n    priv = null;\n    grid = null;\n    selection = null;\n    editorManager = null;\n    instance = null;\n    GridSettings = null;\n  };\n  /**\n   * Replacement for all methods after Handsotnable was destroyed.\n   *\n   * @private\n   */\n\n\n  function postMortem(method) {\n    return function () {\n      throw new Error(\"The \\\"\".concat(method, \"\\\" method cannot be called because this Handsontable instance has been destroyed\"));\n    };\n  }\n  /**\n   * Returns the active editor class instance.\n   *\n   * @memberof Core#\n   * @function getActiveEditor\n   * @returns {BaseEditor} The active editor instance.\n   */\n\n\n  this.getActiveEditor = function () {\n    return editorManager.getActiveEditor();\n  };\n  /**\n   * Returns plugin instance by provided its name.\n   *\n   * @memberof Core#\n   * @function getPlugin\n   * @param {String} pluginName The plugin name.\n   * @returns {BasePlugin} The plugin instance.\n   */\n\n\n  this.getPlugin = function (pluginName) {\n    return getPlugin(this, pluginName);\n  };\n  /**\n   * Returns the Handsontable instance.\n   *\n   * @memberof Core#\n   * @function getInstance\n   * @returns {Handsontable} The Handsontable instance.\n   */\n\n\n  this.getInstance = function () {\n    return instance;\n  };\n  /**\n   * Adds listener to the specified hook name (only for this Handsontable instance).\n   *\n   * @memberof Core#\n   * @function addHook\n   * @see Hooks#add\n   * @param {String} key Hook name (see {@link Hooks}).\n   * @param {Function|Array} callback Function or array of functions.\n   * @example\n   * ```js\n   * hot.addHook('beforeInit', myCallback);\n   * ```\n   */\n\n\n  this.addHook = function (key, callback) {\n    Hooks.getSingleton().add(key, callback, instance);\n  };\n  /**\n   * Check if for a specified hook name there are added listeners (only for this Handsontable instance). All available\n   * hooks you will find {@link Hooks}.\n   *\n   * @memberof Core#\n   * @function hasHook\n   * @see Hooks#has\n   * @param {String} key Hook name\n   * @return {Boolean}\n   *\n   * @example\n   * ```js\n   * const hasBeforeInitListeners = hot.hasHook('beforeInit');\n   * ```\n   */\n\n\n  this.hasHook = function (key) {\n    return Hooks.getSingleton().has(key, instance);\n  };\n  /**\n   * Adds listener to specified hook name (only for this Handsontable instance). After the listener is triggered,\n   * it will be automatically removed.\n   *\n   * @memberof Core#\n   * @function addHookOnce\n   * @see Hooks#once\n   * @param {String} key Hook name (see {@link Hooks}).\n   * @param {Function|Array} callback Function or array of functions.\n   * @example\n   * ```js\n   * hot.addHookOnce('beforeInit', myCallback);\n   * ```\n   */\n\n\n  this.addHookOnce = function (key, callback) {\n    Hooks.getSingleton().once(key, callback, instance);\n  };\n  /**\n   * Removes the hook listener previously registered with {@link Core#addHook}.\n   *\n   * @memberof Core#\n   * @function removeHook\n   * @see Hooks#remove\n   * @param {String} key Hook name.\n   * @param {Function} callback Reference to the function which has been registered using {@link Core#addHook}.\n   *\n   * @example\n   * ```js\n   * hot.removeHook('beforeInit', myCallback);\n   * ```\n   */\n\n\n  this.removeHook = function (key, callback) {\n    Hooks.getSingleton().remove(key, callback, instance);\n  };\n  /**\n   * Run the callbacks for the hook provided in the `key` argument using the parameters given in the other arguments.\n   *\n   * @memberof Core#\n   * @function runHooks\n   * @see Hooks#run\n   * @param {String} key Hook name.\n   * @param {*} [p1] Argument passed to the callback.\n   * @param {*} [p2] Argument passed to the callback.\n   * @param {*} [p3] Argument passed to the callback.\n   * @param {*} [p4] Argument passed to the callback.\n   * @param {*} [p5] Argument passed to the callback.\n   * @param {*} [p6] Argument passed to the callback.\n   * @returns {*}\n   *\n   * @example\n   * ```js\n   * // Run built-in hook\n   * hot.runHooks('beforeInit');\n   * // Run custom hook\n   * hot.runHooks('customAction', 10, 'foo');\n   * ```\n   */\n\n\n  this.runHooks = function (key, p1, p2, p3, p4, p5, p6) {\n    return Hooks.getSingleton().run(instance, key, p1, p2, p3, p4, p5, p6);\n  };\n  /**\n   * Get language phrase for specified dictionary key.\n   *\n   * @memberof Core#\n   * @function getTranslatedPhrase\n   * @since 0.35.0\n   * @param {String} dictionaryKey Constant which is dictionary key.\n   * @param {*} extraArguments Arguments which will be handled by formatters.\n   * @returns {String}\n   */\n\n\n  this.getTranslatedPhrase = function (dictionaryKey, extraArguments) {\n    return getTranslatedPhrase(priv.settings.language, dictionaryKey, extraArguments);\n  };\n  /**\n   * Converts instance into outerHTML of HTMLTableElement.\n   *\n   * @memberof Core#\n   * @function toHTML\n   * @since 7.1.0\n   * @returns {String}\n   */\n\n\n  this.toHTML = function () {\n    return instanceToHTML(_this);\n  };\n  /**\n   * Converts instance into HTMLTableElement.\n   *\n   * @memberof Core#\n   * @function toTableElement\n   * @since 7.1.0\n   * @returns {HTMLTableElement}\n   */\n\n\n  this.toTableElement = function () {\n    var tempElement = _this.rootDocument.createElement('div');\n\n    tempElement.insertAdjacentHTML('afterbegin', instanceToHTML(_this));\n    return tempElement.firstElementChild;\n  };\n\n  this.timeouts = [];\n  /**\n   * Sets timeout. Purpose of this method is to clear all known timeouts when `destroy` method is called.\n   *\n   * @param {Number|Function} handle Handler returned from setTimeout or function to execute (it will be automatically wraped\n   *                                 by setTimeout function).\n   * @param {Number} [delay=0] If first argument is passed as a function this argument set delay of the execution of that function.\n   * @private\n   */\n\n  this._registerTimeout = function (handle) {\n    var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var handleFunc = handle;\n\n    if (typeof handleFunc === 'function') {\n      handleFunc = setTimeout(handleFunc, delay);\n    }\n\n    this.timeouts.push(handleFunc);\n  };\n  /**\n   * Clears all known timeouts.\n   *\n   * @private\n   */\n\n\n  this._clearTimeouts = function () {\n    arrayEach(this.timeouts, function (handler) {\n      clearTimeout(handler);\n    });\n  };\n\n  this.immediates = [];\n  /**\n   * Execute function execution to the next event loop cycle. Purpose of this method is to clear all known timeouts when `destroy` method is called.\n   *\n   * @param {Function} callback Function to be delayed in execution.\n   * @private\n   */\n\n  this._registerImmediate = function (callback) {\n    this.immediates.push(setImmediate(callback));\n  };\n  /**\n   * Clears all known timeouts.\n   *\n   * @private\n   */\n\n\n  this._clearImmediates = function () {\n    arrayEach(this.immediates, function (handler) {\n      clearImmediate(handler);\n    });\n  };\n  /**\n   * Refresh selection borders. This is temporary method relic after selection rewrite.\n   *\n   * @private\n   * @param {Boolean} [revertOriginal=false] If `true`, the previous value will be restored. Otherwise, the edited value will be saved.\n   * @param {Boolean} [prepareEditorIfNeeded=true] If `true` the editor under the selected cell will be prepared to open.\n   */\n\n\n  this._refreshBorders = function () {\n    var revertOriginal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var prepareEditorIfNeeded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    editorManager.destroyEditor(revertOriginal);\n    instance.view.render();\n\n    if (prepareEditorIfNeeded && selection.isSelected()) {\n      editorManager.prepareEditor();\n    }\n  };\n\n  Hooks.getSingleton().run(instance, 'construct');\n}","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react/node_modules/handsontable/es/core.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","TypeError","Object","toString","call","_arr","_n","_d","_e","undefined","_i","_s","next","done","push","value","length","err","Array","isArray","_toConsumableArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","iter","from","arr2","addClass","empty","isChildOfWebComponentTable","removeClass","columnFactory","isFunction","warn","isDefined","isUndefined","isRegExp","_injectProductInfo","isEmpty","isMobileBrowser","DataMap","EditorManager","EventManager","deepClone","duckSchema","extend","isObject","isObjectEqual","deepObjectSize","hasOwnProperty","createObjectPropListener","objectEach","arrayFlatten","arrayMap","arrayEach","arrayReduce","instanceToHTML","getPlugin","getRenderer","getValidator","randomString","rangeEach","rangeEachReverse","TableView","DataSource","translateRowsToColumns","cellMethodLookupFactory","spreadsheetColumnLabel","getTranslator","registerAsRootInstance","hasValidParameter","isRootInstance","CellCoords","ViewportColumnsCalculator","Hooks","DefaultSettings","getCellType","getTranslatedPhrase","hasLanguageDictionary","warnUserAboutLanguageRegistration","applyLanguageSetting","normalizeLanguageCode","startObserving","keyStateStartObserving","stopObserving","keyStateStopObserving","Selection","activeGuid","Core","rootElement","userSettings","_this","rootInstanceSymbol","arguments","preventScrollingToCell","instance","GridSettings","eventManager","priv","datamap","dataSource","grid","editorManager","expandType","language","rootDocument","ownerDocument","rootWindow","defaultView","isDestroyed","isHotTableEnv","container","createElement","renderCall","insertBefore","firstChild","licenseKey","guid","concat","recordTranslator","id","substring","cellSettings","columnSettings","columnsSettingConflicts","settings","selRange","isPopulated","scrollable","firstRun","selection","countCols","countRows","propToCol","prop","isEditorOpened","getActiveEditor","isOpened","addLocalHook","cellCoords","runHooks","row","view","wt","wtTable","getFirstVisibleRow","col","getFirstVisibleColumn","preventScrolling","selectionRange","getSelectedRange","_selectionRange$curre","current","to","selectionLayerLevel","size","colToProp","isSelectedByAnyHeader","currentSelectedRange","selectedRange","scrollToCell","isTouched","isSelectedByRowHeader","isSelectedByColumnHeader","isMultiple","scrollViewport","scrollViewportVertically","scrollViewportHorizontally","_refreshBorders","cellRanges","_cellRanges$selection","changedIsMultiple","cellCoordsDelta","coords","rowTransformDir","colTransformDir","destroyEditor","totalRows","alter","totalCols","action","index","amount","source","keepEmptyRows","delta","spliceWith","data","startIndex","count","toInject","valueFactory","result","spliceArgs","unshift","splice","apply","normalizeIndexesGroup","indexes","sortedIndexes","sort","_ref","_ref2","_ref3","indexA","_ref4","indexB","normalizedIndexes","acc","_ref5","_ref6","groupIndex","groupAmount","previousItem","_previousItem","prevIndex","prevAmount","prevLastIndex","amountToAdd","Math","max","numberOfSourceRows","countSourceRows","getSettings","maxRows","createRow","isSelected","transformEnd","createCol","len","colHeaders","spliceArray","removeRow","offset","_ref7","_ref8","calcIndex","Number","isInteger","fixedRowsTop","min","fixedRowsBottom","adjustRowsAndCols","removeCol","_ref9","_ref10","visualColumnIndex","toPhysicalColumn","_row","_len","fixedColumnsLeft","Error","minRows","rows","r","minSpareRows","emptyRows","countEmptyRows","emptyCols","minCols","minSpareCols","countEmptyCols","columns","dataType","maxCols","rowCount","colCount","deselect","range","selectionChanged","fromRow","fromCol","toRow","toCol","selectCell","wtOverlays","adjustElementsSize","populateFromArray","start","input","end","method","direction","deltas","rlen","c","clen","setData","repeatCol","repeatRow","cmax","rmax","_instance","spliceCol","_instance2","_instance3","spliceRow","_instance4","selected","skippedRow","skippedColumn","pushData","cellMeta","getInputValue","rowValue","rowInputLength","rowSelectionLength","allowInsertRow","visualRow","colInputLength","colSelectionLength","getCellMeta","skipRowOnPaste","allowInsertColumn","skipColumnOnPaste","readOnly","visualColumn","orgValue","getDataAtCell","orgValueSchema","valueSchema","setDataAtCell","setLanguage","languageCode","normalizedLanguageCode","init","updateSettings","getInstance","forceFullRender","render","ValidatorsQueue","resolved","validatorsInQueue","valid","addValidatorToQueue","removeValidatorFormQueue","checkIfQueueIsEmpty","onQueueEmpty","getParsedNumber","numericData","unifiedNumericData","replace","isNaN","parseFloat","validateChanges","changes","callback","activeEditor","beforeChangeResult","shouldBeCanceled","cancelChanges","waitingForValidator","isNumericData","test","isValid","_changes$i","newValue","cellProperties","type","getCellValidator","validateCell","cellPropertiesReference","allowInvalid","cell","getCell","visualCol","invalidCellClassName","applyChanges","skipThisChange","numberOfCreatedRows","numberOfCreatedColumns","set","lockEditor","unlockEditor","refreshValue","validator","canBeValidated","hidden","td","nodeName","wtSettings","cellRenderer","expression","cellValue","validatorCallback","_registerImmediate","setDataInputToArray","propOrCol","column","changeSource","ilen","physicalRow","toPhysicalRow","getAtCell","setDataAtRowProp","listen","modifyDocumentFocus","_instance5","invalidActiveElement","activeElement","body","blur","focus","isListening","unlisten","revertOriginal","prepareEditorIfNeeded","endRow","endCol","_datamap","_len2","elements","_key","_datamap2","_len3","_key2","getSelected","_ref11","getSelectedLast","getSelectedRangeLast","emptySelectedCells","_this2","cellRange","topLeft","getTopLeftCorner","bottomRight","getBottomRightCorner","refreshDimensions","_instance$view$getLas","getLastSize","lastWidth","width","lastHeight","height","_instance$rootElement","getBoundingClientRect","isSizeChanged","isResizeBlocked","scrollableElement","setLastSize","loadData","dataSchema","destroy","getSchema","startRows","startCols","bind","clearCellSettingCache","getData","row2","column2","getAll","getRange","DESTINATION_RENDERER","getCopyableText","startRow","startCol","getCopyableData","getCopyable","columnsAsFunc","j","cols","getSingleton","getRegistered","indexOf","initialHook","addHook","createMap","columnSetting","countSourceCols","cells","proto","setCellMetaObject","className","currentHeight","style","parseInt","initialStyle","getAttribute","setAttribute","_initialStyle","overflow","clearLengthCache","wtViewport","resetHasOversizedColumnHeadersMarked","updateMainScrollableElements","getValue","sel","expandedType","clear","selectAll","topmost","getCellAtCoords","getCoords","element","toVisualRow","toVisualColumn","get","getDataAtRowProp","getDataAtCol","_ref12","getDataAtProp","_ref13","getSourceData","getByRange","getSourceDataArray","getSourceDataAtCol","getAtColumn","getSourceDataAtRow","getAtRow","getSourceDataAtCell","getDataAtRow","getDataType","rowFrom","columnFrom","rowTo","columnTo","_this3","rowStart","columnStart","rowEnd","columnEnd","previousType","currentType","isTypeEqual","cellType","removeCellMeta","key","_recordTranslator$toP","toPhysical","_recordTranslator$toP2","physicalColumn","cachedValue","hookResult","spliceCellsMeta","deleteAmount","_priv$cellSettings","_len4","items","_key3","_this4","setCellMeta","_recordTranslator$toP3","_recordTranslator$toP4","getCellsMeta","_recordTranslator$toP5","_recordTranslator$toP6","potentialPhysicalRow","getCellMetaAtRow","isColumnModificationAllowed","rendererLookup","getCellRenderer","getCellEditor","validatorLookup","validateCells","_validateCells","validateRows","validateColumns","getRowHeader","rowHeader","rowHeaders","hasRowHeaders","hasColHeaders","getColHeader","columnIndex","out","translateVisualIndexToColumns","columnsLen","baseCol","title","_getColWidthFromSettings","colWidths","getColWidth","DEFAULT_WIDTH","_getRowHeightFromSettings","rowHeights","getRowHeight","sourceLength","getLength","dataHasLength","dataLen","columnsIsFunction","columnLen","colToPropCache","rowOffset","getFirstRenderedRow","colOffset","getFirstRenderedColumn","countRenderedRows","drawn","getRenderedRowsCount","countVisibleRows","getVisibleRowsCount","countRenderedCols","getRenderedColumnsCount","countVisibleCols","getVisibleColumnsCount","ending","visualIndex","isEmptyRow","emptyColumns","isEmptyCol","endColumn","changeListener","selectCells","wasSelected","selectColumns","startColumn","selectRows","deselectCell","scrollViewportTo","snapToBottom","snapToRight","snapToTop","snapToLeft","_clearTimeouts","_clearImmediates","licenseInfo","querySelector","parentNode","removeChild","property","postMortem","pluginName","add","hasHook","has","addHookOnce","once","removeHook","remove","p1","p2","p3","p4","p5","p6","run","dictionaryKey","extraArguments","toHTML","toTableElement","tempElement","insertAdjacentHTML","firstElementChild","timeouts","_registerTimeout","handle","delay","handleFunc","setTimeout","handler","clearTimeout","immediates","setImmediate","clearImmediate","prepareEditor"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.symbol\";\nimport \"core-js/modules/es.symbol.description\";\nimport \"core-js/modules/es.symbol.iterator\";\nimport \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.array.from\";\nimport \"core-js/modules/es.array.index-of\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.array.sort\";\nimport \"core-js/modules/es.array.splice\";\nimport \"core-js/modules/es.number.constructor\";\nimport \"core-js/modules/es.number.is-integer\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.regexp.exec\";\nimport \"core-js/modules/es.regexp.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/es.string.replace\";\nimport \"core-js/modules/web.dom-collections.iterator\";\nimport \"core-js/modules/web.immediate\";\nimport \"core-js/modules/web.timers\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nimport { addClass, empty, isChildOfWebComponentTable, removeClass } from './helpers/dom/element';\nimport { columnFactory } from './helpers/setting';\nimport { isFunction } from './helpers/function';\nimport { warn } from './helpers/console';\nimport { isDefined, isUndefined, isRegExp, _injectProductInfo, isEmpty } from './helpers/mixed';\nimport { isMobileBrowser } from './helpers/browser';\nimport DataMap from './dataMap';\nimport EditorManager from './editorManager';\nimport EventManager from './eventManager';\nimport { deepClone, duckSchema, extend, isObject, isObjectEqual, deepObjectSize, hasOwnProperty, createObjectPropListener, objectEach } from './helpers/object';\nimport { arrayFlatten, arrayMap, arrayEach, arrayReduce } from './helpers/array';\nimport { instanceToHTML } from './utils/parseTable';\nimport { getPlugin } from './plugins';\nimport { getRenderer } from './renderers';\nimport { getValidator } from './validators';\nimport { randomString } from './helpers/string';\nimport { rangeEach, rangeEachReverse } from './helpers/number';\nimport TableView from './tableView';\nimport DataSource from './dataSource';\nimport { translateRowsToColumns, cellMethodLookupFactory, spreadsheetColumnLabel } from './helpers/data';\nimport { getTranslator } from './utils/recordTranslator';\nimport { registerAsRootInstance, hasValidParameter, isRootInstance } from './utils/rootInstance';\nimport { CellCoords, ViewportColumnsCalculator } from './3rdparty/walkontable/src';\nimport Hooks from './pluginHooks';\nimport DefaultSettings from './defaultSettings';\nimport { getCellType } from './cellTypes';\nimport { getTranslatedPhrase } from './i18n';\nimport { hasLanguageDictionary } from './i18n/dictionariesManager';\nimport { warnUserAboutLanguageRegistration, applyLanguageSetting, normalizeLanguageCode } from './i18n/utils';\nimport { startObserving as keyStateStartObserving, stopObserving as keyStateStopObserving } from './utils/keyStateObserver';\nimport { Selection } from './selection';\nvar activeGuid = null;\n/**\n * Handsontable constructor\n *\n * @core\n * @constructor Core\n * @description\n *\n * After Handsontable is constructed, you can modify the grid behavior using the available public methods.\n *\n * ---\n * ## How to call methods\n *\n * These are 2 equal ways to call a Handsontable method:\n *\n * ```js\n * // all following examples assume that you constructed Handsontable like this\n * const hot = new Handsontable(document.getElementById('example1'), options);\n *\n * // now, to use setDataAtCell method, you can either:\n * ht.setDataAtCell(0, 0, 'new value');\n * ```\n *\n * Alternatively, you can call the method using jQuery wrapper (__obsolete__, requires initialization using our jQuery guide\n * ```js\n *   $('#example1').handsontable('setDataAtCell', 0, 0, 'new value');\n * ```\n * ---\n */\n\nexport default function Core(rootElement, userSettings) {\n  var _this = this;\n\n  var rootInstanceSymbol = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var preventScrollingToCell = false;\n  var instance = this;\n\n  var GridSettings = function GridSettings() {};\n\n  var eventManager = new EventManager(instance);\n  var priv;\n  var datamap;\n  var dataSource;\n  var grid;\n  var editorManager;\n  extend(GridSettings.prototype, DefaultSettings.prototype); // create grid settings as a copy of default settings\n\n  extend(GridSettings.prototype, userSettings); // overwrite defaults with user settings\n\n  extend(GridSettings.prototype, expandType(userSettings));\n  applyLanguageSetting(GridSettings.prototype, userSettings.language);\n\n  if (hasValidParameter(rootInstanceSymbol)) {\n    registerAsRootInstance(this);\n  } // TODO: check if references to DOM elements should be move to UI layer (Walkontable)\n\n  /**\n   * Reference to the container element.\n   *\n   * @private\n   * @type {HTMLElement}\n   */\n\n\n  this.rootElement = rootElement;\n  /**\n   * The nearest document over container.\n   *\n   * @private\n   * @type {Document}\n   */\n\n  this.rootDocument = rootElement.ownerDocument;\n  /**\n   * Window object over container's document.\n   *\n   * @private\n   * @type {Window}\n   */\n\n  this.rootWindow = this.rootDocument.defaultView;\n  keyStateStartObserving(this.rootDocument);\n  this.isDestroyed = false;\n  this.isHotTableEnv = isChildOfWebComponentTable(this.rootElement);\n  EventManager.isHotTableEnv = this.isHotTableEnv;\n  this.container = this.rootDocument.createElement('div');\n  this.renderCall = false;\n  rootElement.insertBefore(this.container, rootElement.firstChild);\n\n  if (isRootInstance(this)) {\n    _injectProductInfo(userSettings.licenseKey, rootElement);\n  }\n\n  this.guid = \"ht_\".concat(randomString()); // this is the namespace for global events\n\n  var recordTranslator = getTranslator(instance);\n  dataSource = new DataSource(instance);\n\n  if (!this.rootElement.id || this.rootElement.id.substring(0, 3) === 'ht_') {\n    this.rootElement.id = this.guid; // if root element does not have an id, assign a random id\n  }\n\n  priv = {\n    cellSettings: [],\n    columnSettings: [],\n    columnsSettingConflicts: ['data', 'width', 'language'],\n    settings: new GridSettings(),\n    // current settings instance\n    selRange: null,\n    // exposed by public method `getSelectedRange`\n    isPopulated: null,\n    scrollable: null,\n    firstRun: true\n  };\n  var selection = new Selection(priv.settings, {\n    countCols: function countCols() {\n      return instance.countCols();\n    },\n    countRows: function countRows() {\n      return instance.countRows();\n    },\n    propToCol: function propToCol(prop) {\n      return datamap.propToCol(prop);\n    },\n    isEditorOpened: function isEditorOpened() {\n      return instance.getActiveEditor() ? instance.getActiveEditor().isOpened() : false;\n    }\n  });\n  this.selection = selection;\n  this.selection.addLocalHook('beforeSetRangeStart', function (cellCoords) {\n    _this.runHooks('beforeSetRangeStart', cellCoords);\n  });\n  this.selection.addLocalHook('beforeSetRangeStartOnly', function (cellCoords) {\n    _this.runHooks('beforeSetRangeStartOnly', cellCoords);\n  });\n  this.selection.addLocalHook('beforeSetRangeEnd', function (cellCoords) {\n    _this.runHooks('beforeSetRangeEnd', cellCoords);\n\n    if (cellCoords.row < 0) {\n      cellCoords.row = _this.view.wt.wtTable.getFirstVisibleRow();\n    }\n\n    if (cellCoords.col < 0) {\n      cellCoords.col = _this.view.wt.wtTable.getFirstVisibleColumn();\n    }\n  });\n  this.selection.addLocalHook('afterSetRangeEnd', function (cellCoords) {\n    var preventScrolling = createObjectPropListener(false);\n\n    var selectionRange = _this.selection.getSelectedRange();\n\n    var _selectionRange$curre = selectionRange.current(),\n        from = _selectionRange$curre.from,\n        to = _selectionRange$curre.to;\n\n    var selectionLayerLevel = selectionRange.size() - 1;\n\n    _this.runHooks('afterSelection', from.row, from.col, to.row, to.col, preventScrolling, selectionLayerLevel);\n\n    _this.runHooks('afterSelectionByProp', from.row, instance.colToProp(from.col), to.row, instance.colToProp(to.col), preventScrolling, selectionLayerLevel);\n\n    var isSelectedByAnyHeader = _this.selection.isSelectedByAnyHeader();\n\n    var currentSelectedRange = _this.selection.selectedRange.current();\n\n    var scrollToCell = true;\n\n    if (preventScrollingToCell) {\n      scrollToCell = false;\n    }\n\n    if (preventScrolling.isTouched()) {\n      scrollToCell = !preventScrolling.value;\n    }\n\n    var isSelectedByRowHeader = _this.selection.isSelectedByRowHeader();\n\n    var isSelectedByColumnHeader = _this.selection.isSelectedByColumnHeader();\n\n    if (scrollToCell !== false) {\n      if (!isSelectedByAnyHeader) {\n        if (currentSelectedRange && !_this.selection.isMultiple()) {\n          _this.view.scrollViewport(currentSelectedRange.from);\n        } else {\n          _this.view.scrollViewport(cellCoords);\n        }\n      } else if (isSelectedByRowHeader) {\n        _this.view.scrollViewportVertically(cellCoords.row);\n      } else if (isSelectedByColumnHeader) {\n        _this.view.scrollViewportHorizontally(cellCoords.col);\n      }\n    } // @TODO: These CSS classes are no longer needed anymore. They are used only as a indicator of the selected\n    // rows/columns in the MergedCells plugin (via border.js#L520 in the walkontable module). After fixing\n    // the Border class this should be removed.\n\n\n    if (isSelectedByRowHeader && isSelectedByColumnHeader) {\n      addClass(_this.rootElement, ['ht__selection--rows', 'ht__selection--columns']);\n    } else if (isSelectedByRowHeader) {\n      removeClass(_this.rootElement, 'ht__selection--columns');\n      addClass(_this.rootElement, 'ht__selection--rows');\n    } else if (isSelectedByColumnHeader) {\n      removeClass(_this.rootElement, 'ht__selection--rows');\n      addClass(_this.rootElement, 'ht__selection--columns');\n    } else {\n      removeClass(_this.rootElement, ['ht__selection--rows', 'ht__selection--columns']);\n    }\n\n    _this._refreshBorders(null);\n  });\n  this.selection.addLocalHook('afterSelectionFinished', function (cellRanges) {\n    var selectionLayerLevel = cellRanges.length - 1;\n    var _cellRanges$selection = cellRanges[selectionLayerLevel],\n        from = _cellRanges$selection.from,\n        to = _cellRanges$selection.to;\n\n    _this.runHooks('afterSelectionEnd', from.row, from.col, to.row, to.col, selectionLayerLevel);\n\n    _this.runHooks('afterSelectionEndByProp', from.row, instance.colToProp(from.col), to.row, instance.colToProp(to.col), selectionLayerLevel);\n  });\n  this.selection.addLocalHook('afterIsMultipleSelection', function (isMultiple) {\n    var changedIsMultiple = _this.runHooks('afterIsMultipleSelection', isMultiple.value);\n\n    if (isMultiple.value) {\n      isMultiple.value = changedIsMultiple;\n    }\n  });\n  this.selection.addLocalHook('beforeModifyTransformStart', function (cellCoordsDelta) {\n    _this.runHooks('modifyTransformStart', cellCoordsDelta);\n  });\n  this.selection.addLocalHook('afterModifyTransformStart', function (coords, rowTransformDir, colTransformDir) {\n    _this.runHooks('afterModifyTransformStart', coords, rowTransformDir, colTransformDir);\n  });\n  this.selection.addLocalHook('beforeModifyTransformEnd', function (cellCoordsDelta) {\n    _this.runHooks('modifyTransformEnd', cellCoordsDelta);\n  });\n  this.selection.addLocalHook('afterModifyTransformEnd', function (coords, rowTransformDir, colTransformDir) {\n    _this.runHooks('afterModifyTransformEnd', coords, rowTransformDir, colTransformDir);\n  });\n  this.selection.addLocalHook('afterDeselect', function () {\n    editorManager.destroyEditor();\n\n    _this._refreshBorders();\n\n    removeClass(_this.rootElement, ['ht__selection--rows', 'ht__selection--columns']);\n\n    _this.runHooks('afterDeselect');\n  });\n  this.selection.addLocalHook('insertRowRequire', function (totalRows) {\n    _this.alter('insert_row', totalRows, 1, 'auto');\n  });\n  this.selection.addLocalHook('insertColRequire', function (totalCols) {\n    _this.alter('insert_col', totalCols, 1, 'auto');\n  });\n  grid = {\n    /**\n     * Inserts or removes rows and columns.\n     *\n     * @memberof Core#\n     * @function alter\n     * @private\n     * @param {String} action Possible values: \"insert_row\", \"insert_col\", \"remove_row\", \"remove_col\".\n     * @param {Number|Array} index Row or column visual index which from the alter action will be triggered.\n     *                             Alter actions such as \"remove_row\" and \"remove_col\" support array indexes in the\n     *                             format `[[index, amount], [index, amount]...]` this can be used to remove\n     *                             non-consecutive columns or rows in one call.\n     * @param {Number} [amount=1] Ammount rows or columns to remove.\n     * @param {String} [source] Optional. Source of hook runner.\n     * @param {Boolean} [keepEmptyRows] Optional. Flag for preventing deletion of empty rows.\n     */\n    alter: function alter(action, index) {\n      var amount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var source = arguments.length > 3 ? arguments[3] : undefined;\n      var keepEmptyRows = arguments.length > 4 ? arguments[4] : undefined;\n      var delta;\n\n      function spliceWith(data, startIndex, count, toInject) {\n        var valueFactory = function valueFactory() {\n          var result;\n\n          if (toInject === 'array') {\n            result = [];\n          } else if (toInject === 'object') {\n            result = {};\n          }\n\n          return result;\n        };\n\n        var spliceArgs = arrayMap(new Array(count), function () {\n          return valueFactory();\n        });\n        spliceArgs.unshift(startIndex, 0);\n        data.splice.apply(data, _toConsumableArray(spliceArgs));\n      }\n\n      var normalizeIndexesGroup = function normalizeIndexesGroup(indexes) {\n        if (indexes.length === 0) {\n          return [];\n        }\n\n        var sortedIndexes = _toConsumableArray(indexes); // Sort the indexes in ascending order.\n\n\n        sortedIndexes.sort(function (_ref, _ref2) {\n          var _ref3 = _slicedToArray(_ref, 1),\n              indexA = _ref3[0];\n\n          var _ref4 = _slicedToArray(_ref2, 1),\n              indexB = _ref4[0];\n\n          if (indexA === indexB) {\n            return 0;\n          }\n\n          return indexA > indexB ? 1 : -1;\n        }); // Normalize the {index, amount} groups into bigger groups.\n\n        var normalizedIndexes = arrayReduce(sortedIndexes, function (acc, _ref5) {\n          var _ref6 = _slicedToArray(_ref5, 2),\n              groupIndex = _ref6[0],\n              groupAmount = _ref6[1];\n\n          var previousItem = acc[acc.length - 1];\n\n          var _previousItem = _slicedToArray(previousItem, 2),\n              prevIndex = _previousItem[0],\n              prevAmount = _previousItem[1];\n\n          var prevLastIndex = prevIndex + prevAmount;\n\n          if (groupIndex <= prevLastIndex) {\n            var amountToAdd = Math.max(groupAmount - (prevLastIndex - groupIndex), 0);\n            previousItem[1] += amountToAdd;\n          } else {\n            acc.push([groupIndex, groupAmount]);\n          }\n\n          return acc;\n        }, [sortedIndexes[0]]);\n        return normalizedIndexes;\n      };\n      /* eslint-disable no-case-declarations */\n\n\n      switch (action) {\n        case 'insert_row':\n          var numberOfSourceRows = instance.countSourceRows();\n\n          if (instance.getSettings().maxRows === numberOfSourceRows) {\n            return;\n          } // eslint-disable-next-line no-param-reassign\n\n\n          index = isDefined(index) ? index : numberOfSourceRows;\n          delta = datamap.createRow(index, amount, source);\n          spliceWith(priv.cellSettings, index, amount, 'array');\n\n          if (delta) {\n            if (selection.isSelected() && selection.selectedRange.current().from.row >= index) {\n              selection.selectedRange.current().from.row += delta;\n              selection.transformEnd(delta, 0); // will call render() internally\n            } else {\n              instance._refreshBorders(); // it will call render and prepare methods\n\n            }\n          }\n\n          break;\n\n        case 'insert_col':\n          delta = datamap.createCol(index, amount, source);\n\n          for (var row = 0, len = instance.countSourceRows(); row < len; row++) {\n            if (priv.cellSettings[row]) {\n              spliceWith(priv.cellSettings[row], index, amount);\n            }\n          }\n\n          if (delta) {\n            if (Array.isArray(instance.getSettings().colHeaders)) {\n              var spliceArray = [index, 0];\n              spliceArray.length += delta; // inserts empty (undefined) elements at the end of an array\n\n              Array.prototype.splice.apply(instance.getSettings().colHeaders, spliceArray); // inserts empty (undefined) elements into the colHeader array\n            }\n\n            if (selection.isSelected() && selection.selectedRange.current().from.col >= index) {\n              selection.selectedRange.current().from.col += delta;\n              selection.transformEnd(0, delta); // will call render() internally\n            } else {\n              instance._refreshBorders(); // it will call render and prepare methods\n\n            }\n          }\n\n          break;\n\n        case 'remove_row':\n          var removeRow = function removeRow(indexes) {\n            var offset = 0; // Normalize the {index, amount} groups into bigger groups.\n\n            arrayEach(indexes, function (_ref7) {\n              var _ref8 = _slicedToArray(_ref7, 2),\n                  groupIndex = _ref8[0],\n                  groupAmount = _ref8[1];\n\n              var calcIndex = isEmpty(groupIndex) ? instance.countRows() - 1 : Math.max(groupIndex - offset, 0); // If the 'index' is an integer decrease it by 'offset' otherwise pass it through to make the value\n              // compatible with datamap.removeCol method.\n\n              if (Number.isInteger(groupIndex)) {\n                // eslint-disable-next-line no-param-reassign\n                groupIndex = Math.max(groupIndex - offset, 0);\n              } // TODO: for datamap.removeRow index should be passed as it is (with undefined and null values). If not, the logic\n              // inside the datamap.removeRow breaks the removing functionality.\n\n\n              datamap.removeRow(groupIndex, groupAmount, source);\n              priv.cellSettings.splice(calcIndex, amount);\n              var totalRows = instance.countRows();\n              var fixedRowsTop = instance.getSettings().fixedRowsTop;\n\n              if (fixedRowsTop >= calcIndex + 1) {\n                instance.getSettings().fixedRowsTop -= Math.min(groupAmount, fixedRowsTop - calcIndex);\n              }\n\n              var fixedRowsBottom = instance.getSettings().fixedRowsBottom;\n\n              if (fixedRowsBottom && calcIndex >= totalRows - fixedRowsBottom) {\n                instance.getSettings().fixedRowsBottom -= Math.min(groupAmount, fixedRowsBottom);\n              }\n\n              offset += groupAmount;\n            });\n          };\n\n          if (Array.isArray(index)) {\n            removeRow(normalizeIndexesGroup(index));\n          } else {\n            removeRow([[index, amount]]);\n          }\n\n          grid.adjustRowsAndCols();\n\n          instance._refreshBorders(); // it will call render and prepare methods\n\n\n          break;\n\n        case 'remove_col':\n          var removeCol = function removeCol(indexes) {\n            var offset = 0; // Normalize the {index, amount} groups into bigger groups.\n\n            arrayEach(indexes, function (_ref9) {\n              var _ref10 = _slicedToArray(_ref9, 2),\n                  groupIndex = _ref10[0],\n                  groupAmount = _ref10[1];\n\n              var calcIndex = isEmpty(groupIndex) ? instance.countCols() - 1 : Math.max(groupIndex - offset, 0);\n              var visualColumnIndex = recordTranslator.toPhysicalColumn(calcIndex); // If the 'index' is an integer decrease it by 'offset' otherwise pass it through to make the value\n              // compatible with datamap.removeCol method.\n\n              if (Number.isInteger(groupIndex)) {\n                // eslint-disable-next-line no-param-reassign\n                groupIndex = Math.max(groupIndex - offset, 0);\n              } // TODO: for datamap.removeCol index should be passed as it is (with undefined and null values). If not, the logic\n              // inside the datamap.removeCol breaks the removing functionality.\n\n\n              datamap.removeCol(groupIndex, groupAmount, source);\n\n              for (var _row = 0, _len = instance.countSourceRows(); _row < _len; _row++) {\n                if (priv.cellSettings[_row]) {\n                  // if row hasn't been rendered it wouldn't have cellSettings\n                  priv.cellSettings[_row].splice(visualColumnIndex, groupAmount);\n                }\n              }\n\n              var fixedColumnsLeft = instance.getSettings().fixedColumnsLeft;\n\n              if (fixedColumnsLeft >= calcIndex + 1) {\n                instance.getSettings().fixedColumnsLeft -= Math.min(groupAmount, fixedColumnsLeft - calcIndex);\n              }\n\n              if (Array.isArray(instance.getSettings().colHeaders)) {\n                if (typeof visualColumnIndex === 'undefined') {\n                  visualColumnIndex = -1;\n                }\n\n                instance.getSettings().colHeaders.splice(visualColumnIndex, groupAmount);\n              }\n\n              offset += groupAmount;\n            });\n          };\n\n          if (Array.isArray(index)) {\n            removeCol(normalizeIndexesGroup(index));\n          } else {\n            removeCol([[index, amount]]);\n          }\n\n          grid.adjustRowsAndCols();\n\n          instance._refreshBorders(); // it will call render and prepare methods\n\n\n          break;\n\n        default:\n          throw new Error(\"There is no such action \\\"\".concat(action, \"\\\"\"));\n      }\n\n      if (!keepEmptyRows) {\n        grid.adjustRowsAndCols(); // makes sure that we did not add rows that will be removed in next refresh\n      }\n    },\n\n    /**\n     * Makes sure there are empty rows at the bottom of the table\n     */\n    adjustRowsAndCols: function adjustRowsAndCols() {\n      if (priv.settings.minRows) {\n        // should I add empty rows to data source to meet minRows?\n        var rows = instance.countRows();\n\n        if (rows < priv.settings.minRows) {\n          for (var r = 0, minRows = priv.settings.minRows; r < minRows - rows; r++) {\n            datamap.createRow(instance.countRows(), 1, 'auto');\n          }\n        }\n      }\n\n      if (priv.settings.minSpareRows) {\n        var emptyRows = instance.countEmptyRows(true); // should I add empty rows to meet minSpareRows?\n\n        if (emptyRows < priv.settings.minSpareRows) {\n          for (; emptyRows < priv.settings.minSpareRows && instance.countSourceRows() < priv.settings.maxRows; emptyRows++) {\n            datamap.createRow(instance.countRows(), 1, 'auto');\n          }\n        }\n      }\n\n      {\n        var emptyCols; // count currently empty cols\n\n        if (priv.settings.minCols || priv.settings.minSpareCols) {\n          emptyCols = instance.countEmptyCols(true);\n        } // should I add empty cols to meet minCols?\n\n\n        if (priv.settings.minCols && !priv.settings.columns && instance.countCols() < priv.settings.minCols) {\n          for (; instance.countCols() < priv.settings.minCols; emptyCols++) {\n            datamap.createCol(instance.countCols(), 1, 'auto');\n          }\n        } // should I add empty cols to meet minSpareCols?\n\n\n        if (priv.settings.minSpareCols && !priv.settings.columns && instance.dataType === 'array' && emptyCols < priv.settings.minSpareCols) {\n          for (; emptyCols < priv.settings.minSpareCols && instance.countCols() < priv.settings.maxCols; emptyCols++) {\n            datamap.createCol(instance.countCols(), 1, 'auto');\n          }\n        }\n      }\n      var rowCount = instance.countRows();\n      var colCount = instance.countCols();\n\n      if (rowCount === 0 || colCount === 0) {\n        selection.deselect();\n      }\n\n      if (selection.isSelected()) {\n        arrayEach(selection.selectedRange, function (range) {\n          var selectionChanged = false;\n          var fromRow = range.from.row;\n          var fromCol = range.from.col;\n          var toRow = range.to.row;\n          var toCol = range.to.col; // if selection is outside, move selection to last row\n\n          if (fromRow > rowCount - 1) {\n            fromRow = rowCount - 1;\n            selectionChanged = true;\n\n            if (toRow > fromRow) {\n              toRow = fromRow;\n            }\n          } else if (toRow > rowCount - 1) {\n            toRow = rowCount - 1;\n            selectionChanged = true;\n\n            if (fromRow > toRow) {\n              fromRow = toRow;\n            }\n          } // if selection is outside, move selection to last row\n\n\n          if (fromCol > colCount - 1) {\n            fromCol = colCount - 1;\n            selectionChanged = true;\n\n            if (toCol > fromCol) {\n              toCol = fromCol;\n            }\n          } else if (toCol > colCount - 1) {\n            toCol = colCount - 1;\n            selectionChanged = true;\n\n            if (fromCol > toCol) {\n              fromCol = toCol;\n            }\n          }\n\n          if (selectionChanged) {\n            instance.selectCell(fromRow, fromCol, toRow, toCol);\n          }\n        });\n      }\n\n      if (instance.view) {\n        instance.view.wt.wtOverlays.adjustElementsSize();\n      }\n    },\n\n    /**\n     * Populate the data from the provided 2d array from the given cell coordinates.\n     *\n     * @private\n     * @param {Object} start Start selection position. Visual indexes.\n     * @param {Array} input 2d data array.\n     * @param {Object} [end] End selection position (only for drag-down mode). Visual indexes.\n     * @param {String} [source=\"populateFromArray\"] Source information string.\n     * @param {String} [method=\"overwrite\"] Populate method. Possible options: `shift_down`, `shift_right`, `overwrite`.\n     * @param {String} direction (left|right|up|down) String specifying the direction.\n     * @param {Array} deltas The deltas array. A difference between values of adjacent cells.\n     *                       Useful **only** when the type of handled cells is `numeric`.\n     * @returns {Object|undefined} ending td in pasted area (only if any cell was changed).\n     */\n    populateFromArray: function populateFromArray(start, input, end, source, method, direction, deltas) {\n      // TODO: either remove or implement the `direction` argument. Currently it's not working at all.\n      var r;\n      var rlen;\n      var c;\n      var clen;\n      var setData = [];\n      var current = {};\n      rlen = input.length;\n\n      if (rlen === 0) {\n        return false;\n      }\n\n      var repeatCol;\n      var repeatRow;\n      var cmax;\n      var rmax;\n      /* eslint-disable no-case-declarations */\n      // insert data with specified pasteMode method\n\n      switch (method) {\n        case 'shift_down':\n          repeatCol = end ? end.col - start.col + 1 : 0;\n          repeatRow = end ? end.row - start.row + 1 : 0; // eslint-disable-next-line no-param-reassign\n\n          input = translateRowsToColumns(input);\n\n          for (c = 0, clen = input.length, cmax = Math.max(clen, repeatCol); c < cmax; c++) {\n            if (c < clen) {\n              var _instance;\n\n              for (r = 0, rlen = input[c].length; r < repeatRow - rlen; r++) {\n                input[c].push(input[c][r % rlen]);\n              }\n\n              input[c].unshift(start.col + c, start.row, 0);\n\n              (_instance = instance).spliceCol.apply(_instance, _toConsumableArray(input[c]));\n            } else {\n              var _instance2;\n\n              input[c % clen][0] = start.col + c;\n\n              (_instance2 = instance).spliceCol.apply(_instance2, _toConsumableArray(input[c % clen]));\n            }\n          }\n\n          break;\n\n        case 'shift_right':\n          repeatCol = end ? end.col - start.col + 1 : 0;\n          repeatRow = end ? end.row - start.row + 1 : 0;\n\n          for (r = 0, rlen = input.length, rmax = Math.max(rlen, repeatRow); r < rmax; r++) {\n            if (r < rlen) {\n              var _instance3;\n\n              for (c = 0, clen = input[r].length; c < repeatCol - clen; c++) {\n                input[r].push(input[r][c % clen]);\n              }\n\n              input[r].unshift(start.row + r, start.col, 0);\n\n              (_instance3 = instance).spliceRow.apply(_instance3, _toConsumableArray(input[r]));\n            } else {\n              var _instance4;\n\n              input[r % rlen][0] = start.row + r;\n\n              (_instance4 = instance).spliceRow.apply(_instance4, _toConsumableArray(input[r % rlen]));\n            }\n          }\n\n          break;\n\n        case 'overwrite':\n        default:\n          // overwrite and other not specified options\n          current.row = start.row;\n          current.col = start.col;\n          var selected = {\n            // selected range\n            row: end && start ? end.row - start.row + 1 : 1,\n            col: end && start ? end.col - start.col + 1 : 1\n          };\n          var skippedRow = 0;\n          var skippedColumn = 0;\n          var pushData = true;\n          var cellMeta;\n\n          var getInputValue = function getInputValue(row) {\n            var col = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            var rowValue = input[row % input.length];\n\n            if (col !== null) {\n              return rowValue[col % rowValue.length];\n            }\n\n            return rowValue;\n          };\n\n          var rowInputLength = input.length;\n          var rowSelectionLength = end ? end.row - start.row + 1 : 0;\n\n          if (end) {\n            rlen = rowSelectionLength;\n          } else {\n            rlen = Math.max(rowInputLength, rowSelectionLength);\n          }\n\n          for (r = 0; r < rlen; r++) {\n            if (end && current.row > end.row && rowSelectionLength > rowInputLength || !priv.settings.allowInsertRow && current.row > instance.countRows() - 1 || current.row >= priv.settings.maxRows) {\n              break;\n            }\n\n            var visualRow = r - skippedRow;\n            var colInputLength = getInputValue(visualRow).length;\n            var colSelectionLength = end ? end.col - start.col + 1 : 0;\n\n            if (end) {\n              clen = colSelectionLength;\n            } else {\n              clen = Math.max(colInputLength, colSelectionLength);\n            }\n\n            current.col = start.col;\n            cellMeta = instance.getCellMeta(current.row, current.col);\n\n            if ((source === 'CopyPaste.paste' || source === 'Autofill.fill') && cellMeta.skipRowOnPaste) {\n              skippedRow += 1;\n              current.row += 1;\n              rlen += 1;\n              /* eslint-disable no-continue */\n\n              continue;\n            }\n\n            skippedColumn = 0;\n\n            for (c = 0; c < clen; c++) {\n              if (end && current.col > end.col && colSelectionLength > colInputLength || !priv.settings.allowInsertColumn && current.col > instance.countCols() - 1 || current.col >= priv.settings.maxCols) {\n                break;\n              }\n\n              cellMeta = instance.getCellMeta(current.row, current.col);\n\n              if ((source === 'CopyPaste.paste' || source === 'Autofill.fill') && cellMeta.skipColumnOnPaste) {\n                skippedColumn += 1;\n                current.col += 1;\n                clen += 1;\n                continue;\n              }\n\n              if (cellMeta.readOnly) {\n                current.col += 1;\n                /* eslint-disable no-continue */\n\n                continue;\n              }\n\n              var visualColumn = c - skippedColumn;\n              var value = getInputValue(visualRow, visualColumn);\n              var orgValue = instance.getDataAtCell(current.row, current.col);\n              var index = {\n                row: visualRow,\n                col: visualColumn\n              };\n\n              if (source === 'Autofill.fill') {\n                var result = instance.runHooks('beforeAutofillInsidePopulate', index, direction, input, deltas, {}, selected);\n\n                if (result) {\n                  value = isUndefined(result.value) ? value : result.value;\n                }\n              }\n\n              if (value !== null && _typeof(value) === 'object') {\n                // when 'value' is array and 'orgValue' is null, set 'orgValue' to\n                // an empty array so that the null value can be compared to 'value'\n                // as an empty value for the array context\n                if (Array.isArray(value) && orgValue === null) orgValue = [];\n\n                if (orgValue === null || _typeof(orgValue) !== 'object') {\n                  pushData = false;\n                } else {\n                  var orgValueSchema = duckSchema(Array.isArray(orgValue) ? orgValue : orgValue[0] || orgValue);\n                  var valueSchema = duckSchema(Array.isArray(value) ? value : value[0] || value);\n                  /* eslint-disable max-depth */\n\n                  if (isObjectEqual(orgValueSchema, valueSchema)) {\n                    value = deepClone(value);\n                  } else {\n                    pushData = false;\n                  }\n                }\n              } else if (orgValue !== null && _typeof(orgValue) === 'object') {\n                pushData = false;\n              }\n\n              if (pushData) {\n                setData.push([current.row, current.col, value]);\n              }\n\n              pushData = true;\n              current.col += 1;\n            }\n\n            current.row += 1;\n          }\n\n          instance.setDataAtCell(setData, null, null, source || 'populateFromArray');\n          break;\n      }\n    }\n  };\n  /**\n   * Internal function to set `language` key of settings.\n   *\n   * @private\n   * @param {String} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'\n   * @fires Hooks#afterLanguageChange\n   */\n\n  function setLanguage(languageCode) {\n    var normalizedLanguageCode = normalizeLanguageCode(languageCode);\n\n    if (hasLanguageDictionary(normalizedLanguageCode)) {\n      instance.runHooks('beforeLanguageChange', normalizedLanguageCode);\n      GridSettings.prototype.language = normalizedLanguageCode;\n      instance.runHooks('afterLanguageChange', normalizedLanguageCode);\n    } else {\n      warnUserAboutLanguageRegistration(languageCode);\n    }\n  }\n\n  this.init = function () {\n    dataSource.setData(priv.settings.data);\n    instance.runHooks('beforeInit');\n\n    if (isMobileBrowser()) {\n      addClass(instance.rootElement, 'mobile');\n    }\n\n    this.updateSettings(priv.settings, true);\n    this.view = new TableView(this);\n    editorManager = EditorManager.getInstance(instance, priv, selection, datamap);\n    this.forceFullRender = true; // used when data was changed\n\n    instance.runHooks('init');\n    this.view.render();\n\n    if (_typeof(priv.firstRun) === 'object') {\n      instance.runHooks('afterChange', priv.firstRun[0], priv.firstRun[1]);\n      priv.firstRun = false;\n    }\n\n    instance.runHooks('afterInit');\n  };\n\n  function ValidatorsQueue() {\n    // moved this one level up so it can be used in any function here. Probably this should be moved to a separate file\n    var resolved = false;\n    return {\n      validatorsInQueue: 0,\n      valid: true,\n      addValidatorToQueue: function addValidatorToQueue() {\n        this.validatorsInQueue += 1;\n        resolved = false;\n      },\n      removeValidatorFormQueue: function removeValidatorFormQueue() {\n        this.validatorsInQueue = this.validatorsInQueue - 1 < 0 ? 0 : this.validatorsInQueue - 1;\n        this.checkIfQueueIsEmpty();\n      },\n      onQueueEmpty: function onQueueEmpty() {},\n      checkIfQueueIsEmpty: function checkIfQueueIsEmpty() {\n        if (this.validatorsInQueue === 0 && resolved === false) {\n          resolved = true;\n          this.onQueueEmpty(this.valid);\n        }\n      }\n    };\n  }\n  /**\n   * Get parsed number from numeric string.\n   *\n   * @private\n   * @param {String} numericData Float (separated by a dot or a comma) or integer.\n   * @returns {Number} Number if we get data in parsable format, not changed value otherwise.\n   */\n\n\n  function getParsedNumber(numericData) {\n    // Unifying \"float like\" string. Change from value with comma determiner to value with dot determiner,\n    // for example from `450,65` to `450.65`.\n    var unifiedNumericData = numericData.replace(',', '.');\n\n    if (isNaN(parseFloat(unifiedNumericData)) === false) {\n      return parseFloat(unifiedNumericData);\n    }\n\n    return numericData;\n  }\n\n  function validateChanges(changes, source, callback) {\n    if (!changes.length) {\n      return;\n    }\n\n    var activeEditor = instance.getActiveEditor();\n    var beforeChangeResult = instance.runHooks('beforeChange', changes, source || 'edit');\n    var shouldBeCanceled = true;\n\n    if (isFunction(beforeChangeResult)) {\n      warn('Your beforeChange callback returns a function. It\\'s not supported since Handsontable 0.12.1 (and the returned function will not be executed).');\n    } else if (beforeChangeResult === false) {\n      if (activeEditor) {\n        activeEditor.cancelChanges();\n      }\n\n      return;\n    }\n\n    var waitingForValidator = new ValidatorsQueue();\n\n    var isNumericData = function isNumericData(value) {\n      return value.length > 0 && /^\\s*[+-.]?\\s*(?:(?:\\d+(?:(\\.|,)\\d+)?(?:e[+-]?\\d+)?)|(?:0x[a-f\\d]+))\\s*$/.test(value);\n    };\n\n    waitingForValidator.onQueueEmpty = function (isValid) {\n      if (activeEditor && shouldBeCanceled) {\n        activeEditor.cancelChanges();\n      }\n\n      callback(isValid); // called when async validators are resolved and beforeChange was not async\n    };\n\n    for (var i = changes.length - 1; i >= 0; i--) {\n      if (changes[i] === null) {\n        changes.splice(i, 1);\n      } else {\n        var _changes$i = _slicedToArray(changes[i], 4),\n            row = _changes$i[0],\n            prop = _changes$i[1],\n            newValue = _changes$i[3];\n\n        var col = datamap.propToCol(prop);\n        var cellProperties = instance.getCellMeta(row, col);\n\n        if (cellProperties.type === 'numeric' && typeof newValue === 'string' && isNumericData(newValue)) {\n          changes[i][3] = getParsedNumber(newValue);\n        }\n        /* eslint-disable no-loop-func */\n\n\n        if (instance.getCellValidator(cellProperties)) {\n          waitingForValidator.addValidatorToQueue();\n          instance.validateCell(changes[i][3], cellProperties, function (index, cellPropertiesReference) {\n            return function (result) {\n              if (typeof result !== 'boolean') {\n                throw new Error('Validation error: result is not boolean');\n              }\n\n              if (result === false && cellPropertiesReference.allowInvalid === false) {\n                shouldBeCanceled = false;\n                changes.splice(index, 1); // cancel the change\n\n                cellPropertiesReference.valid = true; // we cancelled the change, so cell value is still valid\n\n                var cell = instance.getCell(cellPropertiesReference.visualRow, cellPropertiesReference.visualCol);\n\n                if (cell !== null) {\n                  removeClass(cell, instance.getSettings().invalidCellClassName);\n                } // index -= 1;\n\n              }\n\n              waitingForValidator.removeValidatorFormQueue();\n            };\n          }(i, cellProperties), source);\n        }\n      }\n    }\n\n    waitingForValidator.checkIfQueueIsEmpty();\n  }\n  /**\n   * Internal function to apply changes. Called after validateChanges\n   *\n   * @private\n   * @param {Array} changes Array in form of [row, prop, oldValue, newValue]\n   * @param {String} source String that identifies how this change will be described in changes array (useful in onChange callback)\n   * @fires Hooks#beforeChangeRender\n   * @fires Hooks#afterChange\n   */\n\n\n  function applyChanges(changes, source) {\n    var i = changes.length - 1;\n\n    if (i < 0) {\n      return;\n    }\n\n    for (; i >= 0; i--) {\n      var skipThisChange = false;\n\n      if (changes[i] === null) {\n        changes.splice(i, 1);\n        /* eslint-disable no-continue */\n\n        continue;\n      }\n\n      if ((changes[i][2] === null || changes[i][2] === void 0) && (changes[i][3] === null || changes[i][3] === void 0)) {\n        /* eslint-disable no-continue */\n        continue;\n      }\n\n      if (priv.settings.allowInsertRow) {\n        while (changes[i][0] > instance.countRows() - 1) {\n          var numberOfCreatedRows = datamap.createRow(void 0, void 0, source);\n\n          if (numberOfCreatedRows === 0) {\n            skipThisChange = true;\n            break;\n          }\n        }\n      }\n\n      if (instance.dataType === 'array' && (!priv.settings.columns || priv.settings.columns.length === 0) && priv.settings.allowInsertColumn) {\n        while (datamap.propToCol(changes[i][1]) > instance.countCols() - 1) {\n          var numberOfCreatedColumns = datamap.createCol(void 0, void 0, source);\n\n          if (numberOfCreatedColumns === 0) {\n            skipThisChange = true;\n            break;\n          }\n        }\n      }\n\n      if (skipThisChange) {\n        /* eslint-disable no-continue */\n        continue;\n      }\n\n      datamap.set(changes[i][0], changes[i][1], changes[i][3]);\n    }\n\n    instance.forceFullRender = true; // used when data was changed\n\n    grid.adjustRowsAndCols();\n    instance.runHooks('beforeChangeRender', changes, source);\n    editorManager.lockEditor();\n\n    instance._refreshBorders(null);\n\n    editorManager.unlockEditor();\n    instance.view.wt.wtOverlays.adjustElementsSize();\n    instance.runHooks('afterChange', changes, source || 'edit');\n    var activeEditor = instance.getActiveEditor();\n\n    if (activeEditor && isDefined(activeEditor.refreshValue)) {\n      activeEditor.refreshValue();\n    }\n  }\n  /**\n   * Validate a single cell.\n   *\n   * @param {String|Number} value\n   * @param cellProperties\n   * @param callback\n   * @param source\n   */\n\n\n  this.validateCell = function (value, cellProperties, callback, source) {\n    var validator = instance.getCellValidator(cellProperties); // the `canBeValidated = false` argument suggests, that the cell passes validation by default.\n\n    function done(valid) {\n      var canBeValidated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      // Fixes GH#3903\n      if (!canBeValidated || cellProperties.hidden === true) {\n        callback(valid);\n        return;\n      }\n\n      var col = cellProperties.visualCol;\n      var row = cellProperties.visualRow;\n      var td = instance.getCell(row, col, true);\n\n      if (td && td.nodeName !== 'TH') {\n        instance.view.wt.wtSettings.settings.cellRenderer(row, col, td);\n      }\n\n      callback(valid);\n    }\n\n    if (isRegExp(validator)) {\n      validator = function (expression) {\n        return function (cellValue, validatorCallback) {\n          validatorCallback(expression.test(cellValue));\n        };\n      }(validator);\n    }\n\n    if (isFunction(validator)) {\n      // eslint-disable-next-line no-param-reassign\n      value = instance.runHooks('beforeValidate', value, cellProperties.visualRow, cellProperties.prop, source); // To provide consistent behaviour, validation should be always asynchronous\n\n      instance._registerImmediate(function () {\n        validator.call(cellProperties, value, function (valid) {\n          if (!instance) {\n            return;\n          } // eslint-disable-next-line no-param-reassign\n\n\n          valid = instance.runHooks('afterValidate', valid, value, cellProperties.visualRow, cellProperties.prop, source);\n          cellProperties.valid = valid;\n          done(valid);\n          instance.runHooks('postAfterValidate', valid, value, cellProperties.visualRow, cellProperties.prop, source);\n        });\n      });\n    } else {\n      // resolve callback even if validator function was not found\n      instance._registerImmediate(function () {\n        cellProperties.valid = true;\n        done(cellProperties.valid, false);\n      });\n    }\n  };\n\n  function setDataInputToArray(row, propOrCol, value) {\n    if (_typeof(row) === 'object') {\n      // is it an array of changes\n      return row;\n    }\n\n    return [[row, propOrCol, value]];\n  }\n  /**\n   * @description\n   * Set new value to a cell. To change many cells at once (recommended way), pass an array of `changes` in format\n   * `[[row, col, value],...]` as the first argument.\n   *\n   * @memberof Core#\n   * @function setDataAtCell\n   * @param {Number|Array} row Visual row index or array of changes in format `[[row, col, value],...]`.\n   * @param {Number} [column] Visual column index.\n   * @param {String} [value] New value.\n   * @param {String} [source] String that identifies how this change will be described in the changes array (useful in onAfterChange or onBeforeChange callback).\n   */\n\n\n  this.setDataAtCell = function (row, column, value, source) {\n    var input = setDataInputToArray(row, column, value);\n    var changes = [];\n    var changeSource = source;\n    var i;\n    var ilen;\n    var prop;\n\n    for (i = 0, ilen = input.length; i < ilen; i++) {\n      if (_typeof(input[i]) !== 'object') {\n        throw new Error('Method `setDataAtCell` accepts row number or changes array of arrays as its first parameter');\n      }\n\n      if (typeof input[i][1] !== 'number') {\n        throw new Error('Method `setDataAtCell` accepts row and column number as its parameters. If you want to use object property name, use method `setDataAtRowProp`');\n      }\n\n      var physicalRow = recordTranslator.toPhysicalRow(input[i][0]);\n      prop = datamap.colToProp(input[i][1]);\n      changes.push([input[i][0], prop, dataSource.getAtCell(physicalRow, input[i][1]), input[i][2]]);\n    }\n\n    if (!changeSource && _typeof(row) === 'object') {\n      changeSource = column;\n    }\n\n    instance.runHooks('afterSetDataAtCell', changes, changeSource);\n    validateChanges(changes, changeSource, function () {\n      applyChanges(changes, changeSource);\n    });\n  };\n  /**\n   * @description\n   * Set new value to a cell. To change many cells at once (recommended way), pass an array of `changes` in format\n   * `[[row, prop, value],...]` as the first argument.\n   *\n   * @memberof Core#\n   * @function setDataAtRowProp\n   * @param {Number|Array} row Visual row index or array of changes in format `[[row, prop, value], ...]`.\n   * @param {String} prop Property name or the source string (e.g. `'first.name'` or `'0'`).\n   * @param {String} value Value to be set.\n   * @param {String} [source] String that identifies how this change will be described in changes array (useful in onChange callback).\n   */\n\n\n  this.setDataAtRowProp = function (row, prop, value, source) {\n    var input = setDataInputToArray(row, prop, value);\n    var changes = [];\n    var changeSource = source;\n    var i;\n    var ilen;\n\n    for (i = 0, ilen = input.length; i < ilen; i++) {\n      var physicalRow = recordTranslator.toPhysicalRow(input[i][0]);\n      changes.push([input[i][0], input[i][1], dataSource.getAtCell(physicalRow, input[i][1]), input[i][2]]);\n    }\n\n    if (!changeSource && _typeof(row) === 'object') {\n      changeSource = prop;\n    }\n\n    instance.runHooks('afterSetDataAtRowProp', changes, changeSource);\n    validateChanges(changes, changeSource, function () {\n      applyChanges(changes, changeSource);\n    });\n  };\n  /**\n   * Listen to the keyboard input on document body. This allows Handsontable to capture keyboard events and respond\n   * in the right way.\n   *\n   * @memberof Core#\n   * @function listen\n   * @param {Boolean} [modifyDocumentFocus=true] If `true`, currently focused element will be blured (which returns focus\n   *                                             to the document.body). Otherwise the active element does not lose its focus.\n   * @fires Hooks#afterListen\n   */\n\n\n  this.listen = function () {\n    var modifyDocumentFocus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    var _instance5 = instance,\n        rootDocument = _instance5.rootDocument;\n\n    if (modifyDocumentFocus) {\n      var invalidActiveElement = !rootDocument.activeElement || rootDocument.activeElement && rootDocument.activeElement.nodeName === void 0;\n\n      if (rootDocument.activeElement && rootDocument.activeElement !== rootDocument.body && !invalidActiveElement) {\n        rootDocument.activeElement.blur();\n      } else if (invalidActiveElement) {\n        // IE\n        rootDocument.body.focus();\n      }\n    }\n\n    if (instance && !instance.isListening()) {\n      activeGuid = instance.guid;\n      instance.runHooks('afterListen');\n    }\n  };\n  /**\n   * Stop listening to keyboard input on the document body. Calling this method makes the Handsontable inactive for\n   * any keyboard events.\n   *\n   * @memberof Core#\n   * @function unlisten\n   */\n\n\n  this.unlisten = function () {\n    if (this.isListening()) {\n      activeGuid = null;\n      instance.runHooks('afterUnlisten');\n    }\n  };\n  /**\n   * Returns `true` if the current Handsontable instance is listening to keyboard input on document body.\n   *\n   * @memberof Core#\n   * @function isListening\n   * @returns {Boolean} `true` if the instance is listening, `false` otherwise.\n   */\n\n\n  this.isListening = function () {\n    return activeGuid === instance.guid;\n  };\n  /**\n   * Destroys the current editor, render the table and prepares the editor of the newly selected cell.\n   *\n   * @memberof Core#\n   * @function destroyEditor\n   * @param {Boolean} [revertOriginal=false] If `true`, the previous value will be restored. Otherwise, the edited value will be saved.\n   * @param {Boolean} [prepareEditorIfNeeded=true] If `true` the editor under the selected cell will be prepared to open.\n   */\n\n\n  this.destroyEditor = function () {\n    var revertOriginal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var prepareEditorIfNeeded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    instance._refreshBorders(revertOriginal, prepareEditorIfNeeded);\n  };\n  /**\n   * Populate cells at position with 2D input array (e.g. `[[1, 2], [3, 4]]`). Use `endRow`, `endCol` when you\n   * want to cut input when a certain row is reached.\n   *\n   * Optional `method` argument has the same effect as pasteMode option (see {@link Options#pasteMode}).\n   *\n   * @memberof Core#\n   * @function populateFromArray\n   * @param {Number} row Start visual row index.\n   * @param {Number} column Start visual column index.\n   * @param {Array} input 2d array\n   * @param {Number} [endRow] End visual row index (use when you want to cut input when certain row is reached).\n   * @param {Number} [endCol] End visual column index (use when you want to cut input when certain column is reached).\n   * @param {String} [source=populateFromArray] Used to identify this call in the resulting events (beforeChange, afterChange).\n   * @param {String} [method=overwrite] Populate method, possible values: `'shift_down'`, `'shift_right'`, `'overwrite'`.\n   * @param {String} direction Populate direction, possible values: `'left'`, `'right'`, `'up'`, `'down'`.\n   * @param {Array} deltas The deltas array. A difference between values of adjacent cells.\n   *                       Useful **only** when the type of handled cells is `numeric`.\n   */\n\n\n  this.populateFromArray = function (row, column, input, endRow, endCol, source, method, direction, deltas) {\n    if (!(_typeof(input) === 'object' && _typeof(input[0]) === 'object')) {\n      throw new Error('populateFromArray parameter `input` must be an array of arrays'); // API changed in 0.9-beta2, let's check if you use it correctly\n    }\n\n    var c = typeof endRow === 'number' ? new CellCoords(endRow, endCol) : null;\n    return grid.populateFromArray(new CellCoords(row, column), input, c, source, method, direction, deltas);\n  };\n  /**\n   * Adds/removes data from the column. This method works the same as Array.splice for arrays (see {@link DataMap#spliceCol}).\n   *\n   * @memberof Core#\n   * @function spliceCol\n   * @param {Number} column Index of the column in which do you want to do splice.\n   * @param {Number} index Index at which to start changing the array. If negative, will begin that many elements from the end.\n   * @param {Number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed.\n   * @param {...Number} [elements] The elements to add to the array. If you don't specify any elements, spliceCol simply removes elements from the array.\n   */\n\n\n  this.spliceCol = function (column, index, amount) {\n    var _datamap;\n\n    for (var _len2 = arguments.length, elements = new Array(_len2 > 3 ? _len2 - 3 : 0), _key = 3; _key < _len2; _key++) {\n      elements[_key - 3] = arguments[_key];\n    }\n\n    return (_datamap = datamap).spliceCol.apply(_datamap, [column, index, amount].concat(elements));\n  };\n  /**\n   * Adds/removes data from the row. This method works the same as Array.splice for arrays (see {@link DataMap#spliceRow}).\n   *\n   * @memberof Core#\n   * @function spliceRow\n   * @param {Number} row Index of column in which do you want to do splice.\n   * @param {Number} index Index at which to start changing the array. If negative, will begin that many elements from the end.\n   * @param {Number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed.\n   * @param {...Number} [elements] The elements to add to the array. If you don't specify any elements, spliceCol simply removes elements from the array.\n   */\n\n\n  this.spliceRow = function (row, index, amount) {\n    var _datamap2;\n\n    for (var _len3 = arguments.length, elements = new Array(_len3 > 3 ? _len3 - 3 : 0), _key2 = 3; _key2 < _len3; _key2++) {\n      elements[_key2 - 3] = arguments[_key2];\n    }\n\n    return (_datamap2 = datamap).spliceRow.apply(_datamap2, [row, index, amount].concat(elements));\n  };\n  /**\n   * Returns indexes of the currently selected cells as an array of arrays `[[startRow, startCol, endRow, endCol],...]`.\n   *\n   * Start row and start column are the coordinates of the active cell (where the selection was started).\n   *\n   * The version 0.36.0 adds a non-consecutive selection feature. Since this version, the method returns an array of arrays.\n   * Additionally to collect the coordinates of the currently selected area (as it was previously done by the method)\n   * you need to use `getSelectedLast` method.\n   *\n   * @memberof Core#\n   * @function getSelected\n   * @returns {Array[]|undefined} An array of arrays of the selection's coordinates.\n   */\n\n\n  this.getSelected = function () {\n    // https://github.com/handsontable/handsontable/issues/44  //cjl\n    if (selection.isSelected()) {\n      return arrayMap(selection.getSelectedRange(), function (_ref11) {\n        var from = _ref11.from,\n            to = _ref11.to;\n        return [from.row, from.col, to.row, to.col];\n      });\n    }\n  };\n  /**\n   * Returns the last coordinates applied to the table as a an array `[startRow, startCol, endRow, endCol]`.\n   *\n   * @since 0.36.0\n   * @memberof Core#\n   * @function getSelectedLast\n   * @returns {Array|undefined} An array of the selection's coordinates.\n   */\n\n\n  this.getSelectedLast = function () {\n    var selected = this.getSelected();\n    var result;\n\n    if (selected && selected.length > 0) {\n      result = selected[selected.length - 1];\n    }\n\n    return result;\n  };\n  /**\n   * Returns the current selection as an array of CellRange objects.\n   *\n   * The version 0.36.0 adds a non-consecutive selection feature. Since this version, the method returns an array of arrays.\n   * Additionally to collect the coordinates of the currently selected area (as it was previously done by the method)\n   * you need to use `getSelectedRangeLast` method.\n   *\n   * @memberof Core#\n   * @function getSelectedRange\n   * @returns {CellRange[]|undefined} Selected range object or undefined if there is no selection.\n   */\n\n\n  this.getSelectedRange = function () {\n    // https://github.com/handsontable/handsontable/issues/44  //cjl\n    if (selection.isSelected()) {\n      return Array.from(selection.getSelectedRange());\n    }\n  };\n  /**\n  * Returns the last coordinates applied to the table as a CellRange object.\n  *\n  * @memberof Core#\n  * @function getSelectedRangeLast\n  * @since 0.36.0\n  * @returns {CellRange|undefined} Selected range object or undefined` if there is no selection.\n   */\n\n\n  this.getSelectedRangeLast = function () {\n    var selectedRange = this.getSelectedRange();\n    var result;\n\n    if (selectedRange && selectedRange.length > 0) {\n      result = selectedRange[selectedRange.length - 1];\n    }\n\n    return result;\n  };\n  /**\n   * Erases content from cells that have been selected in the table.\n   *\n   * @memberof Core#\n   * @function emptySelectedCells\n   * @param {String} [source] String that identifies how this change will be described in the changes array (useful in onAfterChange or onBeforeChange callback).\n   * @since 0.36.0\n   */\n\n\n  this.emptySelectedCells = function (source) {\n    var _this2 = this;\n\n    if (!selection.isSelected()) {\n      return;\n    }\n\n    var changes = [];\n    arrayEach(selection.getSelectedRange(), function (cellRange) {\n      var topLeft = cellRange.getTopLeftCorner();\n      var bottomRight = cellRange.getBottomRightCorner();\n      rangeEach(topLeft.row, bottomRight.row, function (row) {\n        rangeEach(topLeft.col, bottomRight.col, function (column) {\n          if (!_this2.getCellMeta(row, column).readOnly) {\n            changes.push([row, column, null]);\n          }\n        });\n      });\n    });\n\n    if (changes.length > 0) {\n      this.setDataAtCell(changes, source);\n    }\n  };\n  /**\n   * Rerender the table. Calling this method starts the process of recalculating, redrawing and applying the changes\n   * to the DOM. While rendering the table all cell renderers are recalled.\n   *\n   * Calling this method manually is not recommended. Handsontable tries to render itself by choosing the most\n   * optimal moments in its lifecycle.\n   *\n   * @memberof Core#\n   * @function render\n   */\n\n\n  this.render = function () {\n    if (instance.view) {\n      instance.renderCall = true;\n      instance.forceFullRender = true; // used when data was changed\n\n      editorManager.lockEditor();\n\n      instance._refreshBorders(null);\n\n      editorManager.unlockEditor();\n    }\n  };\n\n  this.refreshDimensions = function () {\n    if (!instance.view) {\n      return;\n    }\n\n    var _instance$view$getLas = instance.view.getLastSize(),\n        lastWidth = _instance$view$getLas.width,\n        lastHeight = _instance$view$getLas.height;\n\n    var _instance$rootElement = instance.rootElement.getBoundingClientRect(),\n        width = _instance$rootElement.width,\n        height = _instance$rootElement.height;\n\n    var isSizeChanged = width !== lastWidth || height !== lastHeight;\n    var isResizeBlocked = instance.runHooks('beforeRefreshDimensions', {\n      width: lastWidth,\n      height: lastHeight\n    }, {\n      width: width,\n      height: height\n    }, isSizeChanged) === false;\n\n    if (isResizeBlocked) {\n      return;\n    }\n\n    if (isSizeChanged || instance.view.wt.wtOverlays.scrollableElement === instance.rootWindow) {\n      instance.view.setLastSize(width, height);\n      instance.render();\n    }\n\n    instance.runHooks('afterRefreshDimensions', {\n      width: lastWidth,\n      height: lastHeight\n    }, {\n      width: width,\n      height: height\n    }, isSizeChanged);\n  };\n  /**\n   * Loads new data to Handsontable. Loading new data resets the cell meta.\n   *\n   * @memberof Core#\n   * @function loadData\n   * @param {Array} data Array of arrays or array of objects containing data.\n   * @fires Hooks#afterLoadData\n   * @fires Hooks#afterChange\n   */\n\n\n  this.loadData = function (data) {\n    if (Array.isArray(priv.settings.dataSchema)) {\n      instance.dataType = 'array';\n    } else if (isFunction(priv.settings.dataSchema)) {\n      instance.dataType = 'function';\n    } else {\n      instance.dataType = 'object';\n    }\n\n    if (datamap) {\n      datamap.destroy();\n    }\n\n    datamap = new DataMap(instance, priv, GridSettings);\n\n    if (_typeof(data) === 'object' && data !== null) {\n      if (!(data.push && data.splice)) {\n        // check if data is array. Must use duck-type check so Backbone Collections also pass it\n        // when data is not an array, attempt to make a single-row array of it\n        // eslint-disable-next-line no-param-reassign\n        data = [data];\n      }\n    } else if (data === null) {\n      var dataSchema = datamap.getSchema(); // eslint-disable-next-line no-param-reassign\n\n      data = [];\n      var row;\n      var r = 0;\n      var rlen = 0;\n\n      for (r = 0, rlen = priv.settings.startRows; r < rlen; r++) {\n        if ((instance.dataType === 'object' || instance.dataType === 'function') && priv.settings.dataSchema) {\n          row = deepClone(dataSchema);\n          data.push(row);\n        } else if (instance.dataType === 'array') {\n          row = deepClone(dataSchema[0]);\n          data.push(row);\n        } else {\n          row = [];\n\n          for (var c = 0, clen = priv.settings.startCols; c < clen; c++) {\n            row.push(null);\n          }\n\n          data.push(row);\n        }\n      }\n    } else {\n      throw new Error(\"loadData only accepts array of objects or array of arrays (\".concat(_typeof(data), \" given)\"));\n    }\n\n    priv.isPopulated = false;\n    GridSettings.prototype.data = data;\n\n    if (Array.isArray(data[0])) {\n      instance.dataType = 'array';\n    }\n\n    datamap.dataSource = data;\n    dataSource.data = data;\n    dataSource.dataType = instance.dataType;\n    dataSource.colToProp = datamap.colToProp.bind(datamap);\n    dataSource.propToCol = datamap.propToCol.bind(datamap);\n    clearCellSettingCache();\n    grid.adjustRowsAndCols();\n    instance.runHooks('afterLoadData', priv.firstRun);\n\n    if (priv.firstRun) {\n      priv.firstRun = [null, 'loadData'];\n    } else {\n      instance.runHooks('afterChange', null, 'loadData');\n      instance.render();\n    }\n\n    priv.isPopulated = true;\n\n    function clearCellSettingCache() {\n      priv.cellSettings.length = 0;\n    }\n  };\n  /**\n   * Returns the current data object (the same one that was passed by `data` configuration option or `loadData` method,\n   * unless the `modifyRow` hook was used to trim some of the rows. If that's the case - use the {@link Core#getSourceData} method.).\n   *\n   * Optionally you can provide cell range by defining `row`, `column`, `row2`, `column2` to get only a fragment of table data.\n   *\n   * @memberof Core#\n   * @function getData\n   * @param {Number} [row] From visual row index.\n   * @param {Number} [column] From visual column index.\n   * @param {Number} [row2] To visual row index.\n   * @param {Number} [column2] To visual column index.\n   * @returns {Array[]} Array with the data.\n   * @example\n   * ```js\n   * // Get all data (in order how it is rendered in the table).\n   * hot.getData();\n   * // Get data fragment (from top-left 0, 0 to bottom-right 3, 3).\n   * hot.getData(3, 3);\n   * // Get data fragment (from top-left 2, 1 to bottom-right 3, 3).\n   * hot.getData(2, 1, 3, 3);\n   * ```\n   */\n\n\n  this.getData = function (row, column, row2, column2) {\n    if (isUndefined(row)) {\n      return datamap.getAll();\n    }\n\n    return datamap.getRange(new CellCoords(row, column), new CellCoords(row2, column2), datamap.DESTINATION_RENDERER);\n  };\n  /**\n   * Returns a string value of the selected range. Each column is separated by tab, each row is separated by a new\n   * line character (see {@link DataMap#getCopyableText}).\n   *\n   * @memberof Core#\n   * @function getCopyableText\n   * @param {Number} startRow From visual row index.\n   * @param {Number} startCol From visual column index.\n   * @param {Number} endRow To visual row index.\n   * @param {Number} endCol To visual column index.\n   * @returns {String}\n   */\n\n\n  this.getCopyableText = function (startRow, startCol, endRow, endCol) {\n    return datamap.getCopyableText(new CellCoords(startRow, startCol), new CellCoords(endRow, endCol));\n  };\n  /**\n   * Returns the data's copyable value at specified `row` and `column` index (see {@link DataMap#getCopyable}).\n   *\n   * @memberof Core#\n   * @function getCopyableData\n   * @param {Number} row Visual row index.\n   * @param {Number} column Visual column index.\n   * @returns {String}\n   */\n\n\n  this.getCopyableData = function (row, column) {\n    return datamap.getCopyable(row, datamap.colToProp(column));\n  };\n  /**\n   * Returns schema provided by constructor settings. If it doesn't exist then it returns the schema based on the data\n   * structure in the first row.\n   *\n   * @memberof Core#\n   * @function getSchema\n   * @returns {Object} Schema object.\n   */\n\n\n  this.getSchema = function () {\n    return datamap.getSchema();\n  };\n  /**\n   * Use it if you need to change configuration after initialization. The `settings` argument is an object containing the new\n   * settings, declared the same way as in the initial settings object.\n   *\n   * __Note__, that although the `updateSettings` method doesn't overwrite the previously declared settings, it might reset\n   * the settings made post-initialization. (for example - ignore changes made using the columnResize feature).\n   *\n   * @memberof Core#\n   * @function updateSettings\n   * @param {Object} settings New settings object (see {@link Options}).\n   * @param {Boolean} [init=false] Internally used for in initialization mode.\n   * @example\n   * ```js\n   * hot.updateSettings({\n   *    contextMenu: true,\n   *    colHeaders: true,\n   *    fixedRowsTop: 2\n   * });\n   * ```\n   * @fires Hooks#afterCellMetaReset\n   * @fires Hooks#afterUpdateSettings\n   */\n\n\n  this.updateSettings = function (settings) {\n    var init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var columnsAsFunc = false;\n    var i;\n    var j;\n    var clen;\n\n    if (isDefined(settings.rows)) {\n      throw new Error('\"rows\" setting is no longer supported. do you mean startRows, minRows or maxRows?');\n    }\n\n    if (isDefined(settings.cols)) {\n      throw new Error('\"cols\" setting is no longer supported. do you mean startCols, minCols or maxCols?');\n    } // eslint-disable-next-line no-restricted-syntax\n\n\n    for (i in settings) {\n      if (i === 'data') {\n        /* eslint-disable-next-line no-continue */\n        continue; // loadData will be triggered later\n      } else if (i === 'language') {\n        setLanguage(settings.language);\n        /* eslint-disable-next-line no-continue */\n\n        continue;\n      } else if (Hooks.getSingleton().getRegistered().indexOf(i) > -1) {\n        if (isFunction(settings[i]) || Array.isArray(settings[i])) {\n          settings[i].initialHook = true;\n          instance.addHook(i, settings[i]);\n        }\n      } else if (!init && hasOwnProperty(settings, i)) {\n        // Update settings\n        GridSettings.prototype[i] = settings[i];\n      }\n    } // Load data or create data map\n\n\n    if (settings.data === void 0 && priv.settings.data === void 0) {\n      instance.loadData(null); // data source created just now\n    } else if (settings.data !== void 0) {\n      instance.loadData(settings.data); // data source given as option\n    } else if (settings.columns !== void 0) {\n      datamap.createMap();\n    }\n\n    clen = instance.countCols();\n    var columnSetting = settings.columns || GridSettings.prototype.columns; // Init columns constructors configuration\n\n    if (columnSetting && isFunction(columnSetting)) {\n      clen = instance.countSourceCols();\n      columnsAsFunc = true;\n    } // Clear cellSettings cache\n\n\n    if (settings.cell !== void 0 || settings.cells !== void 0 || settings.columns !== void 0) {\n      priv.cellSettings.length = 0;\n    }\n\n    if (clen > 0) {\n      var proto;\n      var column;\n\n      for (i = 0, j = 0; i < clen; i++) {\n        if (columnsAsFunc && !columnSetting(i)) {\n          /* eslint-disable no-continue */\n          continue;\n        }\n\n        priv.columnSettings[j] = columnFactory(GridSettings, priv.columnsSettingConflicts); // shortcut for prototype\n\n        proto = priv.columnSettings[j].prototype; // Use settings provided by user\n\n        if (columnSetting) {\n          if (columnsAsFunc) {\n            column = columnSetting(i);\n          } else {\n            column = columnSetting[j];\n          }\n\n          if (column) {\n            extend(proto, column);\n            extend(proto, expandType(column));\n          }\n        }\n\n        j += 1;\n      }\n    }\n\n    if (isDefined(settings.cell)) {\n      objectEach(settings.cell, function (cell) {\n        instance.setCellMetaObject(cell.row, cell.col, cell);\n      });\n    }\n\n    instance.runHooks('afterCellMetaReset');\n\n    if (isDefined(settings.className)) {\n      if (GridSettings.prototype.className) {\n        removeClass(instance.rootElement, GridSettings.prototype.className);\n      }\n\n      if (settings.className) {\n        addClass(instance.rootElement, settings.className);\n      }\n    }\n\n    var currentHeight = instance.rootElement.style.height;\n\n    if (currentHeight !== '') {\n      currentHeight = parseInt(instance.rootElement.style.height, 10);\n    }\n\n    var height = settings.height;\n\n    if (isFunction(height)) {\n      height = height();\n    }\n\n    if (init) {\n      var initialStyle = instance.rootElement.getAttribute('style');\n\n      if (initialStyle) {\n        instance.rootElement.setAttribute('data-initialstyle', instance.rootElement.getAttribute('style'));\n      }\n    }\n\n    if (height === null) {\n      var _initialStyle = instance.rootElement.getAttribute('data-initialstyle');\n\n      if (_initialStyle && (_initialStyle.indexOf('height') > -1 || _initialStyle.indexOf('overflow') > -1)) {\n        instance.rootElement.setAttribute('style', _initialStyle);\n      } else {\n        instance.rootElement.style.height = '';\n        instance.rootElement.style.overflow = '';\n      }\n    } else if (height !== void 0) {\n      instance.rootElement.style.height = isNaN(height) ? \"\".concat(height) : \"\".concat(height, \"px\");\n      instance.rootElement.style.overflow = 'hidden';\n    }\n\n    if (typeof settings.width !== 'undefined') {\n      var width = settings.width;\n\n      if (isFunction(width)) {\n        width = width();\n      }\n\n      instance.rootElement.style.width = isNaN(width) ? \"\".concat(width) : \"\".concat(width, \"px\");\n    }\n\n    if (!init) {\n      datamap.clearLengthCache(); // force clear cache length on updateSettings() #3416\n\n      if (instance.view) {\n        instance.view.wt.wtViewport.resetHasOversizedColumnHeadersMarked();\n      }\n\n      instance.runHooks('afterUpdateSettings', settings);\n    }\n\n    grid.adjustRowsAndCols();\n\n    if (instance.view && !priv.firstRun) {\n      instance.forceFullRender = true; // used when data was changed\n\n      editorManager.lockEditor();\n\n      instance._refreshBorders(null);\n\n      editorManager.unlockEditor();\n    }\n\n    if (!init && instance.view && (currentHeight === '' || height === '' || height === void 0) && currentHeight !== height) {\n      instance.view.wt.wtOverlays.updateMainScrollableElements();\n    }\n  };\n  /**\n   * Get value from the selected cell.\n   *\n   * @memberof Core#\n   * @function getValue\n   * @returns {*} Value of selected cell.\n   */\n\n\n  this.getValue = function () {\n    var sel = instance.getSelectedLast();\n\n    if (GridSettings.prototype.getValue) {\n      if (isFunction(GridSettings.prototype.getValue)) {\n        return GridSettings.prototype.getValue.call(instance);\n      } else if (sel) {\n        return instance.getData()[sel[0][0]][GridSettings.prototype.getValue];\n      }\n    } else if (sel) {\n      return instance.getDataAtCell(sel[0], sel[1]);\n    }\n  };\n\n  function expandType(obj) {\n    if (!hasOwnProperty(obj, 'type')) {\n      // ignore obj.prototype.type\n      return;\n    }\n\n    var expandedType = {};\n    var type;\n\n    if (_typeof(obj.type) === 'object') {\n      type = obj.type;\n    } else if (typeof obj.type === 'string') {\n      type = getCellType(obj.type);\n    } // eslint-disable-next-line no-restricted-syntax\n\n\n    for (var i in type) {\n      if (hasOwnProperty(type, i) && !hasOwnProperty(obj, i)) {\n        expandedType[i] = type[i];\n      }\n    }\n\n    return expandedType;\n  }\n  /**\n   * Returns the object settings.\n   *\n   * @memberof Core#\n   * @function getSettings\n   * @returns {Object} Object containing the current table settings.\n   */\n\n\n  this.getSettings = function () {\n    return priv.settings;\n  };\n  /**\n   * Clears the data from the table (the table settings remain intact).\n   *\n   * @memberof Core#\n   * @function clear\n   */\n\n\n  this.clear = function () {\n    this.selectAll();\n    this.emptySelectedCells();\n  };\n  /**\n   * Allows altering the table structure by either inserting/removing rows or columns.\n   *\n   * @memberof Core#\n   * @function alter\n   * @param {String} action Possible alter operations:\n   *  * `'insert_row'`\n   *  * `'insert_col'`\n   *  * `'remove_row'`\n   *  * `'remove_col'`\n   * @param {Number|Number[]} index Visual index of the row/column before which the new row/column will be\n   *                                inserted/removed or an array of arrays in format `[[index, amount],...]`.\n   * @param {Number} [amount=1] Amount of rows/columns to be inserted or removed.\n   * @param {String} [source] Source indicator.\n   * @param {Boolean} [keepEmptyRows] Flag for preventing deletion of empty rows.\n   * @example\n   * ```js\n   * // Insert new row above the row at given visual index.\n   * hot.alter('insert_row', 10);\n   * // Insert 3 new columns before 10th column.\n   * hot.alter('insert_col', 10, 3);\n   * // Remove 2 rows starting from 10th row.\n   * hot.alter('remove_row', 10, 2);\n   * // Remove 5 non-contiquous rows (it removes 3 rows from visual index 1 and 2 rows from visual index 5).\n   * hot.alter('remove_row', [[1, 3], [5, 2]]);\n   * ```\n   */\n\n\n  this.alter = function (action, index, amount, source, keepEmptyRows) {\n    grid.alter(action, index, amount, source, keepEmptyRows);\n  };\n  /**\n   * Returns a TD element for the given `row` and `column` arguments, if it is rendered on screen.\n   * Returns `null` if the TD is not rendered on screen (probably because that part of the table is not visible).\n   *\n   * @memberof Core#\n   * @function getCell\n   * @param {Number} row Visual row index.\n   * @param {Number} column Visual column index.\n   * @param {Boolean} [topmost=false] If set to `true`, it returns the TD element from the topmost overlay. For example,\n   * if the wanted cell is in the range of fixed rows, it will return a TD element from the `top` overlay.\n   * @returns {HTMLTableCellElement|null} The cell's TD element.\n   */\n\n\n  this.getCell = function (row, column) {\n    var topmost = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    return instance.view.getCellAtCoords(new CellCoords(row, column), topmost);\n  };\n  /**\n   * Returns the coordinates of the cell, provided as a HTML table cell element.\n   *\n   * @memberof Core#\n   * @function getCoords\n   * @param {HTMLTableCellElement} element The HTML Element representing the cell.\n   * @returns {CellCoords} Visual coordinates object.\n   * @example\n   * ```js\n   * hot.getCoords(hot.getCell(1, 1));\n   * // it returns CellCoords object instance with props row: 1 and col: 1.\n   * ```\n   */\n\n\n  this.getCoords = function (element) {\n    return this.view.wt.wtTable.getCoords.call(this.view.wt.wtTable, element);\n  };\n  /**\n   * Returns the property name that corresponds with the given column index (see {@link DataMap#colToProp}).\n   * If the data source is an array of arrays, it returns the columns index.\n   *\n   * @memberof Core#\n   * @function colToProp\n   * @param {Number} column Visual column index.\n   * @returns {String|Number} Column property or physical column index.\n   */\n\n\n  this.colToProp = function (column) {\n    return datamap.colToProp(column);\n  };\n  /**\n   * Returns column index that corresponds with the given property (see {@link DataMap#propToCol}).\n   *\n   * @memberof Core#\n   * @function propToCol\n   * @param {String|Number} prop Property name or physical column index.\n   * @returns {Number} Visual column index.\n   */\n\n\n  this.propToCol = function (prop) {\n    return datamap.propToCol(prop);\n  };\n  /**\n   * Translate physical row index into visual.\n   *\n   * This method is useful when you want to retrieve visual row index which can be reordered, moved or trimmed\n   * based on a physical index\n   *\n   * @memberof Core#\n   * @function toVisualRow\n   * @param {Number} row Physical row index.\n   * @returns {Number} Returns visual row index.\n   */\n\n\n  this.toVisualRow = function (row) {\n    return recordTranslator.toVisualRow(row);\n  };\n  /**\n   * Translate physical column index into visual.\n   *\n   * This method is useful when you want to retrieve visual column index which can be reordered, moved or trimmed\n   * based on a physical index\n   *\n   * @memberof Core#\n   * @function toVisualColumn\n   * @param {Number} column Physical column index.\n   * @returns {Number} Returns visual column index.\n   */\n\n\n  this.toVisualColumn = function (column) {\n    return recordTranslator.toVisualColumn(column);\n  };\n  /**\n   * Translate visual row index into physical.\n   *\n   * This method is useful when you want to retrieve physical row index based on a visual index which can be\n   * reordered, moved or trimmed.\n   *\n   * @memberof Core#\n   * @function toPhysicalRow\n   * @param {Number} row Visual row index.\n   * @returns {Number} Returns physical row index.\n   */\n\n\n  this.toPhysicalRow = function (row) {\n    return recordTranslator.toPhysicalRow(row);\n  };\n  /**\n   * Translate visual column index into physical.\n   *\n   * This method is useful when you want to retrieve physical column index based on a visual index which can be\n   * reordered, moved or trimmed.\n   *\n   * @memberof Core#\n   * @function toPhysicalColumn\n   * @param {Number} column Visual column index.\n   * @returns {Number} Returns physical column index.\n   */\n\n\n  this.toPhysicalColumn = function (column) {\n    return recordTranslator.toPhysicalColumn(column);\n  };\n  /**\n   * @description\n   * Returns the cell value at `row`, `column`.\n   *\n   * __Note__: If data is reordered, sorted or trimmed, the currently visible order will be used.\n   *\n   * @memberof Core#\n   * @function getDataAtCell\n   * @param {Number} row Visual row index.\n   * @param {Number} column Visual column index.\n   * @returns {*} Data at cell.\n   */\n\n\n  this.getDataAtCell = function (row, column) {\n    return datamap.get(row, datamap.colToProp(column));\n  };\n  /**\n   * Returns value at visual `row` and `prop` indexes (see {@link DataMap#get}).\n   *\n   * __Note__: If data is reordered, sorted or trimmed, the currently visible order will be used.\n   *\n   * @memberof Core#\n   * @function getDataAtRowProp\n   * @param {Number} row Visual row index.\n   * @param {String} prop Property name.\n   * @returns {*} Cell value.\n   */\n\n\n  this.getDataAtRowProp = function (row, prop) {\n    return datamap.get(row, prop);\n  };\n  /**\n   * @description\n   * Returns array of column values from the data source.\n   *\n   * __Note__: If columns were reordered or sorted, the currently visible order will be used.\n   *\n   * @memberof Core#\n   * @function getDataAtCol\n   * @param {Number} column Visual column index.\n   * @returns {Array} Array of cell values.\n   */\n\n\n  this.getDataAtCol = function (column) {\n    var _ref12;\n\n    return (_ref12 = []).concat.apply(_ref12, _toConsumableArray(datamap.getRange(new CellCoords(0, column), new CellCoords(priv.settings.data.length - 1, column), datamap.DESTINATION_RENDERER)));\n  };\n  /**\n   * Given the object property name (e.g. `'first.name'` or `'0'`), returns an array of column's values from the table data.\n   * You can also provide a column index as the first argument.\n   *\n   * @memberof Core#\n   * @function getDataAtProp\n   * @param {String|Number} prop Property name or physical column index.\n   * @returns {Array} Array of cell values.\n   */\n  // TODO: Getting data from `datamap` should work on visual indexes.\n\n\n  this.getDataAtProp = function (prop) {\n    var _ref13;\n\n    var range = datamap.getRange(new CellCoords(0, datamap.propToCol(prop)), new CellCoords(priv.settings.data.length - 1, datamap.propToCol(prop)), datamap.DESTINATION_RENDERER);\n    return (_ref13 = []).concat.apply(_ref13, _toConsumableArray(range));\n  };\n  /**\n   * Returns the source data object (the same that was passed by `data` configuration option or `loadData` method).\n   * Optionally you can provide a cell range by using the `row`, `column`, `row2`, `column2` arguments, to get only a\n   * fragment of the table data.\n   *\n   * __Note__: This method does not participate in data transformation. If the visual data of the table is reordered,\n   * sorted or trimmed only physical indexes are correct.\n   *\n   * @memberof Core#\n   * @function getSourceData\n   * @param {Number} [row] From physical row index.\n   * @param {Number} [column] From physical column index (or visual index, if data type is an array of objects).\n   * @param {Number} [row2] To physical row index.\n   * @param {Number} [column2] To physical column index (or visual index, if data type is an array of objects).\n   * @returns {Array[]|Object[]} The table data.\n   */\n\n\n  this.getSourceData = function (row, column, row2, column2) {\n    var data;\n\n    if (row === void 0) {\n      data = dataSource.getData();\n    } else {\n      data = dataSource.getByRange(new CellCoords(row, column), new CellCoords(row2, column2));\n    }\n\n    return data;\n  };\n  /**\n   * Returns the source data object as an arrays of arrays format even when source data was provided in another format.\n   * Optionally you can provide a cell range by using the `row`, `column`, `row2`, `column2` arguments, to get only a\n   * fragment of the table data.\n   *\n   * __Note__: This method does not participate in data transformation. If the visual data of the table is reordered,\n   * sorted or trimmed only physical indexes are correct.\n   *\n   * @memberof Core#\n   * @function getSourceDataArray\n   * @param {Number} [row] From physical row index.\n   * @param {Number} [column] From physical column index (or visual index, if data type is an array of objects).\n   * @param {Number} [row2] To physical row index.\n   * @param {Number} [column2] To physical column index (or visual index, if data type is an array of objects).\n   * @returns {Array} An array of arrays.\n   */\n\n\n  this.getSourceDataArray = function (row, column, row2, column2) {\n    var data;\n\n    if (row === void 0) {\n      data = dataSource.getData(true);\n    } else {\n      data = dataSource.getByRange(new CellCoords(row, column), new CellCoords(row2, column2), true);\n    }\n\n    return data;\n  };\n  /**\n   * Returns an array of column values from the data source.\n   *\n   * @memberof Core#\n   * @function getSourceDataAtCol\n   * @param {Number} column Visual column index.\n   * @returns {Array} Array of the column's cell values.\n   */\n  // TODO: Getting data from `sourceData` should work always on physical indexes.\n\n\n  this.getSourceDataAtCol = function (column) {\n    return dataSource.getAtColumn(column);\n  };\n  /**\n   * Returns a single row of the data (array or object, depending on what data format you use).\n   *\n   * __Note__: This method does not participate in data transformation. If the visual data of the table is reordered,\n   * sorted or trimmed only physical indexes are correct.\n   *\n   * @memberof Core#\n   * @function getSourceDataAtRow\n   * @param {Number} row Physical row index.\n   * @returns {Array|Object} Single row of data.\n   */\n\n\n  this.getSourceDataAtRow = function (row) {\n    return dataSource.getAtRow(row);\n  };\n  /**\n   * Returns a single value from the data source.\n   *\n   * @memberof Core#\n   * @function getSourceDataAtCell\n   * @param {Number} row Physical row index.\n   * @param {Number} column Visual column index.\n   * @returns {*} Cell data.\n   */\n  // TODO: Getting data from `sourceData` should work always on physical indexes.\n\n\n  this.getSourceDataAtCell = function (row, column) {\n    return dataSource.getAtCell(row, column);\n  };\n  /**\n   * @description\n   * Returns a single row of the data.\n   *\n   * __Note__: If rows were reordered, sorted or trimmed, the currently visible order will be used.\n   *\n   * @memberof Core#\n   * @function getDataAtRow\n   * @param {Number} row Visual row index.\n   * @returns {Array} Array of row's cell data.\n   */\n\n\n  this.getDataAtRow = function (row) {\n    var data = datamap.getRange(new CellCoords(row, 0), new CellCoords(row, this.countCols() - 1), datamap.DESTINATION_RENDERER);\n    return data[0] || [];\n  };\n  /**\n   * @description\n   * Returns a data type defined in the Handsontable settings under the `type` key ([Options#type](http://docs.handsontable.com/Options.html#type)).\n   * If there are cells with different types in the selected range, it returns `'mixed'`.\n   *\n   * __Note__: If data is reordered, sorted or trimmed, the currently visible order will be used.\n   *\n   * @memberof Core#\n   * @function getDataType\n   * @param {Number} rowFrom From visual row index.\n   * @param {Number} columnFrom From visual column index.\n   * @param {Number} rowTo To visual row index.\n   * @param {Number} columnTo To visual column index.\n   * @returns {String} Cell type (e.q: `'mixed'`, `'text'`, `'numeric'`, `'autocomplete'`).\n   */\n\n\n  this.getDataType = function (rowFrom, columnFrom, rowTo, columnTo) {\n    var _this3 = this;\n\n    var coords = rowFrom === void 0 ? [0, 0, this.countRows(), this.countCols()] : [rowFrom, columnFrom, rowTo, columnTo];\n    var rowStart = coords[0],\n        columnStart = coords[1];\n    var rowEnd = coords[2],\n        columnEnd = coords[3];\n    var previousType = null;\n    var currentType = null;\n\n    if (rowEnd === void 0) {\n      rowEnd = rowStart;\n    }\n\n    if (columnEnd === void 0) {\n      columnEnd = columnStart;\n    }\n\n    var type = 'mixed';\n    rangeEach(Math.min(rowStart, rowEnd), Math.max(rowStart, rowEnd), function (row) {\n      var isTypeEqual = true;\n      rangeEach(Math.min(columnStart, columnEnd), Math.max(columnStart, columnEnd), function (column) {\n        var cellType = _this3.getCellMeta(row, column);\n\n        currentType = cellType.type;\n\n        if (previousType) {\n          isTypeEqual = previousType === currentType;\n        } else {\n          previousType = currentType;\n        }\n\n        return isTypeEqual;\n      });\n      type = isTypeEqual ? currentType : 'mixed';\n      return isTypeEqual;\n    });\n    return type;\n  };\n  /**\n   * Remove a property defined by the `key` argument from the cell meta object for the provided `row` and `column` coordinates.\n   *\n   * @memberof Core#\n   * @function removeCellMeta\n   * @param {Number} row Visual row index.\n   * @param {Number} column Visual column index.\n   * @param {String} key Property name.\n   * @fires Hooks#beforeRemoveCellMeta\n   * @fires Hooks#afterRemoveCellMeta\n   */\n\n\n  this.removeCellMeta = function (row, column, key) {\n    var _recordTranslator$toP = recordTranslator.toPhysical(row, column),\n        _recordTranslator$toP2 = _slicedToArray(_recordTranslator$toP, 2),\n        physicalRow = _recordTranslator$toP2[0],\n        physicalColumn = _recordTranslator$toP2[1];\n\n    var cachedValue = priv.cellSettings[physicalRow][physicalColumn][key];\n    var hookResult = instance.runHooks('beforeRemoveCellMeta', row, column, key, cachedValue);\n\n    if (hookResult !== false) {\n      delete priv.cellSettings[physicalRow][physicalColumn][key];\n      instance.runHooks('afterRemoveCellMeta', row, column, key, cachedValue);\n    }\n\n    cachedValue = null;\n  };\n  /**\n   * Remove one or more rows from the cell meta object.\n   *\n   * @since 0.30.0\n   * @param {Number} index An integer that specifies at what position to add/remove items, Use negative values to specify the position from the end of the array.\n   * @param {Number} deleteAmount The number of items to be removed. If set to 0, no items will be removed.\n   * @param {Array} items The new items to be added to the array.\n   */\n\n\n  this.spliceCellsMeta = function (index, deleteAmount) {\n    var _priv$cellSettings;\n\n    for (var _len4 = arguments.length, items = new Array(_len4 > 2 ? _len4 - 2 : 0), _key3 = 2; _key3 < _len4; _key3++) {\n      items[_key3 - 2] = arguments[_key3];\n    }\n\n    (_priv$cellSettings = priv.cellSettings).splice.apply(_priv$cellSettings, [index, deleteAmount].concat(items));\n  };\n  /**\n   * Set cell meta data object defined by `prop` to the corresponding params `row` and `column`.\n   *\n   * @memberof Core#\n   * @function setCellMetaObject\n   * @param {Number} row Visual row index.\n   * @param {Number} column Visual column index.\n   * @param {Object} prop Meta object.\n   */\n\n\n  this.setCellMetaObject = function (row, column, prop) {\n    var _this4 = this;\n\n    if (_typeof(prop) === 'object') {\n      objectEach(prop, function (value, key) {\n        _this4.setCellMeta(row, column, key, value);\n      });\n    }\n  };\n  /**\n   * Sets a property defined by the `key` property to the meta object of a cell corresponding to params `row` and `column`.\n   *\n   * @memberof Core#\n   * @function setCellMeta\n   * @param {Number} row Visual row index.\n   * @param {Number} column Visual column index.\n   * @param {String} key Property name.\n   * @param {String} value Property value.\n   * @fires Hooks#afterSetCellMeta\n   */\n\n\n  this.setCellMeta = function (row, column, key, value) {\n    var _recordTranslator$toP3 = recordTranslator.toPhysical(row, column),\n        _recordTranslator$toP4 = _slicedToArray(_recordTranslator$toP3, 2),\n        physicalRow = _recordTranslator$toP4[0],\n        physicalColumn = _recordTranslator$toP4[1];\n\n    if (!priv.columnSettings[physicalColumn]) {\n      priv.columnSettings[physicalColumn] = columnFactory(GridSettings, priv.columnsSettingConflicts);\n    }\n\n    if (!priv.cellSettings[physicalRow]) {\n      priv.cellSettings[physicalRow] = [];\n    }\n\n    if (!priv.cellSettings[physicalRow][physicalColumn]) {\n      priv.cellSettings[physicalRow][physicalColumn] = new priv.columnSettings[physicalColumn]();\n    }\n\n    priv.cellSettings[physicalRow][physicalColumn][key] = value;\n    instance.runHooks('afterSetCellMeta', row, column, key, value);\n  };\n  /**\n   * Get all the cells meta settings at least once generated in the table (in order of cell initialization).\n   *\n   * @memberof Core#\n   * @function getCellsMeta\n   * @returns {Array} Returns an array of ColumnSettings object instances.\n   */\n\n\n  this.getCellsMeta = function () {\n    return arrayFlatten(priv.cellSettings);\n  };\n  /**\n   * Returns the cell properties object for the given `row` and `column` coordinates.\n   *\n   * @memberof Core#\n   * @function getCellMeta\n   * @param {Number} row Visual row index.\n   * @param {Number} column Visual column index.\n   * @returns {Object} The cell properties object.\n   * @fires Hooks#beforeGetCellMeta\n   * @fires Hooks#afterGetCellMeta\n   */\n\n\n  this.getCellMeta = function (row, column) {\n    var prop = datamap.colToProp(column);\n\n    var _recordTranslator$toP5 = recordTranslator.toPhysical(row, column),\n        _recordTranslator$toP6 = _slicedToArray(_recordTranslator$toP5, 2),\n        potentialPhysicalRow = _recordTranslator$toP6[0],\n        physicalColumn = _recordTranslator$toP6[1];\n\n    var physicalRow = potentialPhysicalRow; // Workaround for #11. Connected also with #3849. It should be fixed within #4497.\n\n    if (physicalRow === null) {\n      physicalRow = row;\n    }\n\n    if (!priv.columnSettings[physicalColumn]) {\n      priv.columnSettings[physicalColumn] = columnFactory(GridSettings, priv.columnsSettingConflicts);\n    }\n\n    if (!priv.cellSettings[physicalRow]) {\n      priv.cellSettings[physicalRow] = [];\n    }\n\n    if (!priv.cellSettings[physicalRow][physicalColumn]) {\n      priv.cellSettings[physicalRow][physicalColumn] = new priv.columnSettings[physicalColumn]();\n    }\n\n    var cellProperties = priv.cellSettings[physicalRow][physicalColumn]; // retrieve cellProperties from cache\n\n    cellProperties.row = physicalRow;\n    cellProperties.col = physicalColumn;\n    cellProperties.visualRow = row;\n    cellProperties.visualCol = column;\n    cellProperties.prop = prop;\n    cellProperties.instance = instance;\n    instance.runHooks('beforeGetCellMeta', row, column, cellProperties);\n    extend(cellProperties, expandType(cellProperties)); // for `type` added in beforeGetCellMeta\n\n    if (cellProperties.cells) {\n      var settings = cellProperties.cells.call(cellProperties, physicalRow, physicalColumn, prop);\n\n      if (settings) {\n        extend(cellProperties, settings);\n        extend(cellProperties, expandType(settings)); // for `type` added in cells\n      }\n    }\n\n    instance.runHooks('afterGetCellMeta', row, column, cellProperties);\n    return cellProperties;\n  };\n  /**\n   * Returns an array of cell meta objects for specyfied physical row index.\n   *\n   * @memberof Core#\n   * @function getCellMetaAtRow\n   * @param {Number} row Physical row index.\n   * @returns {Array}\n   */\n\n\n  this.getCellMetaAtRow = function (row) {\n    return priv.cellSettings[row];\n  };\n  /**\n   * Checks if the data format and config allows user to modify the column structure.\n   *\n   * @memberof Core#\n   * @function isColumnModificationAllowed\n   * @returns {Boolean}\n   */\n\n\n  this.isColumnModificationAllowed = function () {\n    return !(instance.dataType === 'object' || instance.getSettings().columns);\n  };\n\n  var rendererLookup = cellMethodLookupFactory('renderer');\n  /**\n   * Returns the cell renderer function by given `row` and `column` arguments.\n   *\n   * @memberof Core#\n   * @function getCellRenderer\n   * @param {Number|Object} row Visual row index or cell meta object (see {@link Core#getCellMeta}).\n   * @param {Number} column Visual column index.\n   * @returns {Function} The renderer function.\n   * @example\n   * ```js\n   * // Get cell renderer using `row` and `column` coordinates.\n   * hot.getCellRenderer(1, 1);\n   * // Get cell renderer using cell meta object.\n   * hot.getCellRenderer(hot.getCellMeta(1, 1));\n   * ```\n   */\n\n  this.getCellRenderer = function (row, column) {\n    return getRenderer(rendererLookup.call(this, row, column));\n  };\n  /**\n   * Returns the cell editor class by the provided `row` and `column` arguments.\n   *\n   * @memberof Core#\n   * @function getCellEditor\n   * @param {Number} row Visual row index or cell meta object (see {@link Core#getCellMeta}).\n   * @param {Number} column Visual column index.\n   * @returns {Function} The editor class.\n   * @example\n   * ```js\n   * // Get cell editor class using `row` and `column` coordinates.\n   * hot.getCellEditor(1, 1);\n   * // Get cell editor class using cell meta object.\n   * hot.getCellEditor(hot.getCellMeta(1, 1));\n   * ```\n   */\n\n\n  this.getCellEditor = cellMethodLookupFactory('editor');\n  var validatorLookup = cellMethodLookupFactory('validator');\n  /**\n   * Returns the cell validator by `row` and `column`.\n   *\n   * @memberof Core#\n   * @function getCellValidator\n   * @param {Number|Object} row Visual row index or cell meta object (see {@link Core#getCellMeta}).\n   * @param {Number} column Visual column index.\n   * @returns {Function|RegExp|undefined} The validator function.\n   * @example\n   * ```js\n   * // Get cell valiator using `row` and `column` coordinates.\n   * hot.getCellValidator(1, 1);\n   * // Get cell valiator using cell meta object.\n   * hot.getCellValidator(hot.getCellMeta(1, 1));\n   * ```\n   */\n\n  this.getCellValidator = function (row, column) {\n    var validator = validatorLookup.call(this, row, column);\n\n    if (typeof validator === 'string') {\n      validator = getValidator(validator);\n    }\n\n    return validator;\n  };\n  /**\n   * Validates all cells using their validator functions and calls callback when finished.\n   *\n   * If one of the cells is invalid, the callback will be fired with `'valid'` arguments as `false` - otherwise it\n   * would equal `true`.\n   *\n   * @memberof Core#\n   * @function validateCells\n   * @param {Function} [callback] The callback function.\n   * @example\n   * ```js\n   * hot.validateCells((valid) => {\n   *   if (valid) {\n   *     // ... code for validated cells\n   *   }\n   * })\n   * ```\n   */\n\n\n  this.validateCells = function (callback) {\n    this._validateCells(callback);\n  };\n  /**\n   * Validates rows using their validator functions and calls callback when finished.\n   *\n   * If one of the cells is invalid, the callback will be fired with `'valid'` arguments as `false` - otherwise it\n   *  would equal `true`.\n   *\n   * @memberof Core#\n   * @function validateRows\n   * @param {Array} [rows] Array of validation target visual row indexes.\n   * @param {Function} [callback] The callback function.\n   * @example\n   * ```js\n   * hot.validateRows([3, 4, 5], (valid) => {\n   *   if (valid) {\n   *     // ... code for validated rows\n   *   }\n   * })\n   * ```\n   */\n\n\n  this.validateRows = function (rows, callback) {\n    if (!Array.isArray(rows)) {\n      throw new Error('validateRows parameter `rows` must be an array');\n    }\n\n    this._validateCells(callback, rows);\n  };\n  /**\n   * Validates columns using their validator functions and calls callback when finished.\n   *\n   * If one of the cells is invalid, the callback will be fired with `'valid'` arguments as `false` - otherwise it\n   *  would equal `true`.\n   *\n   * @memberof Core#\n   * @function validateColumns\n   * @param {Array} [columns] Array of validation target visual columns indexes.\n   * @param {Function} [callback] The callback function.\n   * @example\n   * ```js\n   * hot.validateColumns([3, 4, 5], (valid) => {\n   *   if (valid) {\n   *     // ... code for validated columns\n   *   }\n   * })\n   * ```\n   */\n\n\n  this.validateColumns = function (columns, callback) {\n    if (!Array.isArray(columns)) {\n      throw new Error('validateColumns parameter `columns` must be an array');\n    }\n\n    this._validateCells(callback, undefined, columns);\n  };\n  /**\n   * Validates all cells using their validator functions and calls callback when finished.\n   *\n   * If one of the cells is invalid, the callback will be fired with `'valid'` arguments as `false` - otherwise it would equal `true`.\n   *\n   * Private use intended.\n   *\n   * @private\n   * @memberof Core#\n   * @function _validateCells\n   * @param {Function} [callback] The callback function.\n   * @param {Array} [rows] An array of validation target visual row indexes.\n   * @param {Array} [columns] An array of validation target visual column indexes.\n   */\n\n\n  this._validateCells = function (callback, rows, columns) {\n    var waitingForValidator = new ValidatorsQueue();\n\n    if (callback) {\n      waitingForValidator.onQueueEmpty = callback;\n    }\n\n    var i = instance.countRows() - 1;\n\n    while (i >= 0) {\n      if (rows !== undefined && rows.indexOf(i) === -1) {\n        i -= 1;\n        continue;\n      }\n\n      var j = instance.countCols() - 1;\n\n      while (j >= 0) {\n        if (columns !== undefined && columns.indexOf(j) === -1) {\n          j -= 1;\n          continue;\n        }\n\n        waitingForValidator.addValidatorToQueue();\n        instance.validateCell(instance.getDataAtCell(i, j), instance.getCellMeta(i, j), function (result) {\n          if (typeof result !== 'boolean') {\n            throw new Error('Validation error: result is not boolean');\n          }\n\n          if (result === false) {\n            waitingForValidator.valid = false;\n          }\n\n          waitingForValidator.removeValidatorFormQueue();\n        }, 'validateCells');\n        j -= 1;\n      }\n\n      i -= 1;\n    }\n\n    waitingForValidator.checkIfQueueIsEmpty();\n  };\n  /**\n   * Returns an array of row headers' values (if they are enabled). If param `row` was given, it returns the header of the given row as a string.\n   *\n   * @memberof Core#\n   * @function getRowHeader\n   * @param {Number} [row] Visual row index.\n   * @fires Hooks#modifyRowHeader\n   * @returns {Array|String|Number} Array of header values / single header value.\n   */\n\n\n  this.getRowHeader = function (row) {\n    var rowHeader = priv.settings.rowHeaders;\n    var physicalRow = row;\n\n    if (physicalRow !== void 0) {\n      physicalRow = instance.runHooks('modifyRowHeader', physicalRow);\n    }\n\n    if (physicalRow === void 0) {\n      rowHeader = [];\n      rangeEach(instance.countRows() - 1, function (i) {\n        rowHeader.push(instance.getRowHeader(i));\n      });\n    } else if (Array.isArray(rowHeader) && rowHeader[physicalRow] !== void 0) {\n      rowHeader = rowHeader[physicalRow];\n    } else if (isFunction(rowHeader)) {\n      rowHeader = rowHeader(physicalRow);\n    } else if (rowHeader && typeof rowHeader !== 'string' && typeof rowHeader !== 'number') {\n      rowHeader = physicalRow + 1;\n    }\n\n    return rowHeader;\n  };\n  /**\n   * Returns information about if this table is configured to display row headers.\n   *\n   * @memberof Core#\n   * @function hasRowHeaders\n   * @returns {Boolean} `true` if the instance has the row headers enabled, `false` otherwise.\n   */\n\n\n  this.hasRowHeaders = function () {\n    return !!priv.settings.rowHeaders;\n  };\n  /**\n   * Returns information about if this table is configured to display column headers.\n   *\n   * @memberof Core#\n   * @function hasColHeaders\n   * @returns {Boolean} `true` if the instance has the column headers enabled, `false` otherwise.\n   */\n\n\n  this.hasColHeaders = function () {\n    if (priv.settings.colHeaders !== void 0 && priv.settings.colHeaders !== null) {\n      // Polymer has empty value = null\n      return !!priv.settings.colHeaders;\n    }\n\n    for (var i = 0, ilen = instance.countCols(); i < ilen; i++) {\n      if (instance.getColHeader(i)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Returns an array of column headers (in string format, if they are enabled). If param `column` is given, it\n   * returns the header at the given column.\n   *\n   * @memberof Core#\n   * @function getColHeader\n   * @param {Number} [column] Visual column index.\n   * @fires Hooks#modifyColHeader\n   * @returns {Array|String|Number} The column header(s).\n   */\n\n\n  this.getColHeader = function (column) {\n    var columnsAsFunc = priv.settings.columns && isFunction(priv.settings.columns);\n    var columnIndex = instance.runHooks('modifyColHeader', column);\n    var result = priv.settings.colHeaders;\n\n    if (columnIndex === void 0) {\n      var out = [];\n      var ilen = columnsAsFunc ? instance.countSourceCols() : instance.countCols();\n\n      for (var i = 0; i < ilen; i++) {\n        out.push(instance.getColHeader(i));\n      }\n\n      result = out;\n    } else {\n      var translateVisualIndexToColumns = function translateVisualIndexToColumns(visualColumnIndex) {\n        var arr = [];\n        var columnsLen = instance.countSourceCols();\n        var index = 0;\n\n        for (; index < columnsLen; index++) {\n          if (isFunction(instance.getSettings().columns) && instance.getSettings().columns(index)) {\n            arr.push(index);\n          }\n        }\n\n        return arr[visualColumnIndex];\n      };\n\n      var baseCol = columnIndex;\n      var physicalColumn = instance.runHooks('modifyCol', baseCol);\n      var prop = translateVisualIndexToColumns(physicalColumn);\n\n      if (priv.settings.colHeaders === false) {\n        result = null;\n      } else if (priv.settings.columns && isFunction(priv.settings.columns) && priv.settings.columns(prop) && priv.settings.columns(prop).title) {\n        result = priv.settings.columns(prop).title;\n      } else if (priv.settings.columns && priv.settings.columns[physicalColumn] && priv.settings.columns[physicalColumn].title) {\n        result = priv.settings.columns[physicalColumn].title;\n      } else if (Array.isArray(priv.settings.colHeaders) && priv.settings.colHeaders[physicalColumn] !== void 0) {\n        result = priv.settings.colHeaders[physicalColumn];\n      } else if (isFunction(priv.settings.colHeaders)) {\n        result = priv.settings.colHeaders(physicalColumn);\n      } else if (priv.settings.colHeaders && typeof priv.settings.colHeaders !== 'string' && typeof priv.settings.colHeaders !== 'number') {\n        result = spreadsheetColumnLabel(baseCol); // see #1458\n      }\n    }\n\n    return result;\n  };\n  /**\n   * Return column width from settings (no guessing). Private use intended.\n   *\n   * @private\n   * @memberof Core#\n   * @function _getColWidthFromSettings\n   * @param {Number} col Visual col index.\n   * @returns {Number}\n   */\n\n\n  this._getColWidthFromSettings = function (col) {\n    var cellProperties = instance.getCellMeta(0, col);\n    var width = cellProperties.width;\n\n    if (width === void 0 || width === priv.settings.width) {\n      width = cellProperties.colWidths;\n    }\n\n    if (width !== void 0 && width !== null) {\n      switch (_typeof(width)) {\n        case 'object':\n          // array\n          width = width[col];\n          break;\n\n        case 'function':\n          width = width(col);\n          break;\n\n        default:\n          break;\n      }\n\n      if (typeof width === 'string') {\n        width = parseInt(width, 10);\n      }\n    }\n\n    return width;\n  };\n  /**\n   * Returns the width of the requested column.\n   *\n   * @memberof Core#\n   * @function getColWidth\n   * @param {Number} column Visual column index.\n   * @returns {Number} Column width.\n   * @fires Hooks#modifyColWidth\n   */\n\n\n  this.getColWidth = function (column) {\n    var width = instance._getColWidthFromSettings(column);\n\n    width = instance.runHooks('modifyColWidth', width, column);\n\n    if (width === void 0) {\n      width = ViewportColumnsCalculator.DEFAULT_WIDTH;\n    }\n\n    return width;\n  };\n  /**\n   * Return row height from settings (no guessing). Private use intended.\n   *\n   * @private\n   * @memberof Core#\n   * @function _getRowHeightFromSettings\n   * @param {Number} row Visual row index.\n   * @returns {Number}\n   */\n\n\n  this._getRowHeightFromSettings = function (row) {\n    // let cellProperties = instance.getCellMeta(row, 0);\n    // let height = cellProperties.height;\n    //\n    // if (height === void 0 || height === priv.settings.height) {\n    //  height = cellProperties.rowHeights;\n    // }\n    var height = priv.settings.rowHeights;\n\n    if (height !== void 0 && height !== null) {\n      switch (_typeof(height)) {\n        case 'object':\n          // array\n          height = height[row];\n          break;\n\n        case 'function':\n          height = height(row);\n          break;\n\n        default:\n          break;\n      }\n\n      if (typeof height === 'string') {\n        height = parseInt(height, 10);\n      }\n    }\n\n    return height;\n  };\n  /**\n   * Returns the row height.\n   *\n   * @memberof Core#\n   * @function getRowHeight\n   * @param {Number} row Visual row index.\n   * @returns {Number} The given row's height.\n   * @fires Hooks#modifyRowHeight\n   */\n\n\n  this.getRowHeight = function (row) {\n    var height = instance._getRowHeightFromSettings(row);\n\n    height = instance.runHooks('modifyRowHeight', height, row);\n    return height;\n  };\n  /**\n   * Returns the total number of rows in the data source.\n   *\n   * @memberof Core#\n   * @function countSourceRows\n   * @returns {Number} Total number of rows.\n   */\n\n\n  this.countSourceRows = function () {\n    var sourceLength = instance.runHooks('modifySourceLength');\n    return sourceLength || (instance.getSourceData() ? instance.getSourceData().length : 0);\n  };\n  /**\n   * Returns the total number of columns in the data source.\n   *\n   * @memberof Core#\n   * @function countSourceCols\n   * @returns {Number} Total number of columns.\n   */\n\n\n  this.countSourceCols = function () {\n    var len = 0;\n    var obj = instance.getSourceData() && instance.getSourceData()[0] ? instance.getSourceData()[0] : [];\n\n    if (isObject(obj)) {\n      len = deepObjectSize(obj);\n    } else {\n      len = obj.length || 0;\n    }\n\n    return len;\n  };\n  /**\n   * Returns the total number of visual rows in the table.\n   *\n   * @memberof Core#\n   * @function countRows\n   * @returns {Number} Total number of rows.\n   */\n\n\n  this.countRows = function () {\n    return datamap.getLength();\n  };\n  /**\n   * Returns the total number of visible columns in the table.\n   *\n   * @memberof Core#\n   * @function countCols\n   * @returns {Number} Total number of columns.\n   */\n\n\n  this.countCols = function () {\n    var maxCols = this.getSettings().maxCols;\n    var dataHasLength = false;\n    var dataLen = 0;\n\n    if (instance.dataType === 'array') {\n      dataHasLength = priv.settings.data && priv.settings.data[0] && priv.settings.data[0].length;\n    }\n\n    if (dataHasLength) {\n      dataLen = priv.settings.data[0].length;\n    }\n\n    if (priv.settings.columns) {\n      var columnsIsFunction = isFunction(priv.settings.columns);\n\n      if (columnsIsFunction) {\n        if (instance.dataType === 'array') {\n          var columnLen = 0;\n\n          for (var i = 0; i < dataLen; i++) {\n            if (priv.settings.columns(i)) {\n              columnLen += 1;\n            }\n          }\n\n          dataLen = columnLen;\n        } else if (instance.dataType === 'object' || instance.dataType === 'function') {\n          dataLen = datamap.colToPropCache.length;\n        }\n      } else {\n        dataLen = priv.settings.columns.length;\n      }\n    } else if (instance.dataType === 'object' || instance.dataType === 'function') {\n      dataLen = datamap.colToPropCache.length;\n    }\n\n    return Math.min(maxCols, dataLen);\n  };\n  /**\n   * Returns an visual index of the first rendered row.\n   * Returns -1 if no row is rendered.\n   *\n   * @memberof Core#\n   * @function rowOffset\n   * @returns {Number} Visual index of first rendered row.\n   */\n\n\n  this.rowOffset = function () {\n    return instance.view.wt.wtTable.getFirstRenderedRow();\n  };\n  /**\n   * Returns the visual index of the first rendered column.\n   * Returns -1 if no column is rendered.\n   *\n   * @memberof Core#\n   * @function colOffset\n   * @returns {Number} Visual index of the first visible column.\n   */\n\n\n  this.colOffset = function () {\n    return instance.view.wt.wtTable.getFirstRenderedColumn();\n  };\n  /**\n   * Returns the number of rendered rows (including rows partially or fully rendered outside viewport).\n   *\n   * @memberof Core#\n   * @function countRenderedRows\n   * @returns {Number} Returns -1 if table is not visible.\n   */\n\n\n  this.countRenderedRows = function () {\n    return instance.view.wt.drawn ? instance.view.wt.wtTable.getRenderedRowsCount() : -1;\n  };\n  /**\n   * Returns the number of visible rows (rendered rows that fully fit inside viewport).\n   *\n   * @memberof Core#\n   * @function countVisibleRows\n   * @returns {Number} Number of visible rows or -1.\n   */\n\n\n  this.countVisibleRows = function () {\n    return instance.view.wt.drawn ? instance.view.wt.wtTable.getVisibleRowsCount() : -1;\n  };\n  /**\n   * Returns the number of rendered columns (including columns partially or fully rendered outside viewport).\n   *\n   * @memberof Core#\n   * @function countRenderedCols\n   * @returns {Number} Returns -1 if table is not visible.\n   */\n\n\n  this.countRenderedCols = function () {\n    return instance.view.wt.drawn ? instance.view.wt.wtTable.getRenderedColumnsCount() : -1;\n  };\n  /**\n   * Returns the number of visible columns. Returns -1 if table is not visible\n   *\n   * @memberof Core#\n   * @function countVisibleCols\n   * @return {Number} Number of visible columns or -1.\n   */\n\n\n  this.countVisibleCols = function () {\n    return instance.view.wt.drawn ? instance.view.wt.wtTable.getVisibleColumnsCount() : -1;\n  };\n  /**\n   * Returns the number of empty rows. If the optional ending parameter is `true`, returns the\n   * number of empty rows at the bottom of the table.\n   *\n   * @memberof Core#\n   * @function countEmptyRows\n   * @param {Boolean} [ending=false] If `true`, will only count empty rows at the end of the data source.\n   * @returns {Number} Count empty rows.\n   */\n\n\n  this.countEmptyRows = function () {\n    var ending = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var emptyRows = 0;\n    rangeEachReverse(instance.countRows() - 1, function (visualIndex) {\n      if (instance.isEmptyRow(visualIndex)) {\n        emptyRows += 1;\n      } else if (ending === true) {\n        return false;\n      }\n    });\n    return emptyRows;\n  };\n  /**\n   * Returns the number of empty columns. If the optional ending parameter is `true`, returns the number of empty\n   * columns at right hand edge of the table.\n   *\n   * @memberof Core#\n   * @function countEmptyCols\n   * @param {Boolean} [ending=false] If `true`, will only count empty columns at the end of the data source row.\n   * @returns {Number} Count empty cols.\n   */\n\n\n  this.countEmptyCols = function () {\n    var ending = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if (instance.countRows() < 1) {\n      return 0;\n    }\n\n    var emptyColumns = 0;\n    rangeEachReverse(instance.countCols() - 1, function (visualIndex) {\n      if (instance.isEmptyCol(visualIndex)) {\n        emptyColumns += 1;\n      } else if (ending === true) {\n        return false;\n      }\n    });\n    return emptyColumns;\n  };\n  /**\n   * Check if all cells in the row declared by the `row` argument are empty.\n   *\n   * @memberof Core#\n   * @function isEmptyRow\n   * @param {Number} row Visual row index.\n   * @returns {Boolean} `true` if the row at the given `row` is empty, `false` otherwise.\n   */\n\n\n  this.isEmptyRow = function (row) {\n    return priv.settings.isEmptyRow.call(instance, row);\n  };\n  /**\n   * Check if all cells in the the column declared by the `column` argument are empty.\n   *\n   * @memberof Core#\n   * @function isEmptyCol\n   * @param {Number} column Column index.\n   * @returns {Boolean} `true` if the column at the given `col` is empty, `false` otherwise.\n   */\n\n\n  this.isEmptyCol = function (column) {\n    return priv.settings.isEmptyCol.call(instance, column);\n  };\n  /**\n   * Select cell specified by `row` and `column` values or a range of cells finishing at `endRow`, `endCol`. If the table\n   * was configured to support data column properties that properties can be used to making a selection.\n   *\n   * By default, viewport will be scrolled to the selection. After the `selectCell` method had finished, the instance\n   * will be listening to keyboard input on the document.\n   *\n   * @example\n   * ```js\n   * // select a single cell\n   * hot.selectCell(2, 4);\n   * // select a single cell using column property\n   * hot.selectCell(2, 'address');\n   * // select a range of cells\n   * hot.selectCell(2, 4, 3, 5);\n   * // select a range of cells using column properties\n   * hot.selectCell(2, 'address', 3, 'phone_number');\n   * // select a range of cells without scrolling to them\n   * hot.selectCell(2, 'address', 3, 'phone_number', false);\n   * ```\n   *\n   * @memberof Core#\n   * @function selectCell\n   * @param {Number} row Visual row index.\n   * @param {Number|String} column Visual column index or column property.\n   * @param {Number} [endRow] Visual end row index (if selecting a range).\n   * @param {Number|String} [endColumn] Visual end column index or column property (if selecting a range).\n   * @param {Boolean} [scrollToCell=true] If `true`, the viewport will be scrolled to the selection.\n   * @param {Boolean} [changeListener=true] If `false`, Handsontable will not change keyboard events listener to himself.\n   * @returns {Boolean} `true` if selection was successful, `false` otherwise.\n   */\n\n\n  this.selectCell = function (row, column, endRow, endColumn) {\n    var scrollToCell = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    var changeListener = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n\n    if (isUndefined(row) || isUndefined(column)) {\n      return false;\n    }\n\n    return this.selectCells([[row, column, endRow, endColumn]], scrollToCell, changeListener);\n  };\n  /**\n   * Make multiple, non-contiguous selection specified by `row` and `column` values or a range of cells\n   * finishing at `endRow`, `endColumn`. The method supports two input formats which are the same as that\n   * produces by `getSelected` and `getSelectedRange` methods.\n   *\n   * By default, viewport will be scrolled to selection. After the `selectCells` method had finished, the instance\n   * will be listening to keyboard input on the document.\n   *\n   * @example\n   * ```js\n   * // Using an array of arrays.\n   * hot.selectCells([[1, 1, 2, 2], [3, 3], [6, 2, 0, 2]]);\n   * // Using an array of arrays with defined columns as props.\n   * hot.selectCells([[1, 'id', 2, 'first_name'], [3, 'full_name'], [6, 'last_name', 0, 'first_name']]);\n   * // Using an array of CellRange objects (produced by `.getSelectedRange()` method).\n   * const selected = hot.getSelectedRange();\n   *\n   * selected[0].from.row = 0;\n   * selected[0].from.col = 0;\n   *\n   * hot.selectCells(selected);\n   * ```\n   *\n   * @memberof Core#\n   * @since 0.38.0\n   * @function selectCells\n   * @param {Array[]|CellRange[]} coords Visual coords passed as an array of array (`[[rowStart, columnStart, rowEnd, columnEnd], ...]`)\n   *                                     the same format as `getSelected` method returns or as an CellRange objects\n   *                                     which is the same format what `getSelectedRange` method returns.\n   * @param {Boolean} [scrollToCell=true] If `true`, the viewport will be scrolled to the selection.\n   * @param {Boolean} [changeListener=true] If `false`, Handsontable will not change keyboard events listener to himself.\n   * @returns {Boolean} `true` if selection was successful, `false` otherwise.\n   */\n\n\n  this.selectCells = function () {\n    var coords = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [[]];\n    var scrollToCell = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var changeListener = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    if (scrollToCell === false) {\n      preventScrollingToCell = true;\n    }\n\n    var wasSelected = selection.selectCells(coords);\n\n    if (wasSelected && changeListener) {\n      instance.listen();\n    }\n\n    preventScrollingToCell = false;\n    return wasSelected;\n  };\n  /**\n   * Select column specified by `startColumn` visual index, column property or a range of columns finishing at `endColumn`.\n   *\n   * @example\n   * ```js\n   * // Select column using visual index.\n   * hot.selectColumns(1);\n   * // Select column using column property.\n   * hot.selectColumns('id');\n   * // Select range of columns using visual indexes.\n   * hot.selectColumns(1, 4);\n   * // Select range of columns using column properties.\n   * hot.selectColumns('id', 'last_name');\n   * ```\n   *\n   * @memberof Core#\n   * @since 0.38.0\n   * @function selectColumns\n   * @param {Number} startColumn The visual column index from which the selection starts.\n   * @param {Number} [endColumn=startColumn] The visual column index to which the selection finishes. If `endColumn`\n   *                                         is not defined the column defined by `startColumn` will be selected.\n   * @returns {Boolean} `true` if selection was successful, `false` otherwise.\n   */\n\n\n  this.selectColumns = function (startColumn) {\n    var endColumn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : startColumn;\n    return selection.selectColumns(startColumn, endColumn);\n  };\n  /**\n   * Select row specified by `startRow` visual index or a range of rows finishing at `endRow`.\n   *\n   * @example\n   * ```js\n   * // Select row using visual index.\n   * hot.selectRows(1);\n   * // Select range of rows using visual indexes.\n   * hot.selectRows(1, 4);\n   * ```\n   *\n   * @memberof Core#\n   * @since 0.38.0\n   * @function selectRows\n   * @param {Number} startRow The visual row index from which the selection starts.\n   * @param {Number} [endRow=startRow] The visual row index to which the selection finishes. If `endRow`\n   *                                   is not defined the row defined by `startRow` will be selected.\n   * @returns {Boolean} `true` if selection was successful, `false` otherwise.\n   */\n\n\n  this.selectRows = function (startRow) {\n    var endRow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : startRow;\n    return selection.selectRows(startRow, endRow);\n  };\n  /**\n   * Deselects the current cell selection on the table.\n   *\n   * @memberof Core#\n   * @function deselectCell\n   */\n\n\n  this.deselectCell = function () {\n    selection.deselect();\n  };\n  /**\n   * Select the whole table. The previous selection will be overwritten.\n   *\n   * @since 0.38.2\n   * @memberof Core#\n   * @function selectAll\n   */\n\n\n  this.selectAll = function () {\n    preventScrollingToCell = true;\n    selection.selectAll();\n    preventScrollingToCell = false;\n  };\n  /**\n   * Scroll viewport to coordinates specified by the `row` and `column` arguments.\n   *\n   * @memberof Core#\n   * @function scrollViewportTo\n   * @param {Number} [row] Visual row index.\n   * @param {Number} [column] Visual column index.\n   * @param {Boolean} [snapToBottom = false] If `true`, viewport is scrolled to show the cell on the bottom of the table.\n   * @param {Boolean} [snapToRight = false] If `true`, viewport is scrolled to show the cell on the right side of the table.\n   * @returns {Boolean} `true` if scroll was successful, `false` otherwise.\n   */\n\n\n  this.scrollViewportTo = function (row, column) {\n    var snapToBottom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var snapToRight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var snapToTop = !snapToBottom;\n    var snapToLeft = !snapToRight;\n    var result = false;\n\n    if (row !== void 0 && column !== void 0) {\n      result = instance.view.scrollViewport(new CellCoords(row, column), snapToTop, snapToRight, snapToBottom, snapToLeft);\n    }\n\n    if (typeof row === 'number' && typeof column !== 'number') {\n      result = instance.view.scrollViewportVertically(row, snapToTop, snapToBottom);\n    }\n\n    if (typeof column === 'number' && typeof row !== 'number') {\n      result = instance.view.scrollViewportHorizontally(column, snapToRight, snapToLeft);\n    }\n\n    return result;\n  };\n  /**\n   * Removes the table from the DOM and destroys the instance of the Handsontable.\n   *\n   * @memberof Core#\n   * @function destroy\n   * @fires Hooks#afterDestroy\n   */\n\n\n  this.destroy = function () {\n    instance._clearTimeouts();\n\n    instance._clearImmediates();\n\n    if (instance.view) {\n      // in case HT is destroyed before initialization has finished\n      instance.view.destroy();\n    }\n\n    if (dataSource) {\n      dataSource.destroy();\n    }\n\n    dataSource = null;\n    keyStateStopObserving();\n\n    if (isRootInstance(instance)) {\n      var licenseInfo = this.rootDocument.querySelector('#hot-display-license-info');\n\n      if (licenseInfo) {\n        licenseInfo.parentNode.removeChild(licenseInfo);\n      }\n    }\n\n    empty(instance.rootElement);\n    eventManager.destroy();\n\n    if (editorManager) {\n      editorManager.destroy();\n    }\n\n    instance.runHooks('afterDestroy');\n    Hooks.getSingleton().destroy(instance);\n    objectEach(instance, function (property, key, obj) {\n      // replace instance methods with post mortem\n      if (isFunction(property)) {\n        obj[key] = postMortem(key);\n      } else if (key !== 'guid') {\n        // replace instance properties with null (restores memory)\n        // it should not be necessary but this prevents a memory leak side effects that show itself in Jasmine tests\n        obj[key] = null;\n      }\n    });\n    instance.isDestroyed = true; // replace private properties with null (restores memory)\n    // it should not be necessary but this prevents a memory leak side effects that show itself in Jasmine tests\n\n    if (datamap) {\n      datamap.destroy();\n    }\n\n    datamap = null;\n    priv = null;\n    grid = null;\n    selection = null;\n    editorManager = null;\n    instance = null;\n    GridSettings = null;\n  };\n  /**\n   * Replacement for all methods after Handsotnable was destroyed.\n   *\n   * @private\n   */\n\n\n  function postMortem(method) {\n    return function () {\n      throw new Error(\"The \\\"\".concat(method, \"\\\" method cannot be called because this Handsontable instance has been destroyed\"));\n    };\n  }\n  /**\n   * Returns the active editor class instance.\n   *\n   * @memberof Core#\n   * @function getActiveEditor\n   * @returns {BaseEditor} The active editor instance.\n   */\n\n\n  this.getActiveEditor = function () {\n    return editorManager.getActiveEditor();\n  };\n  /**\n   * Returns plugin instance by provided its name.\n   *\n   * @memberof Core#\n   * @function getPlugin\n   * @param {String} pluginName The plugin name.\n   * @returns {BasePlugin} The plugin instance.\n   */\n\n\n  this.getPlugin = function (pluginName) {\n    return getPlugin(this, pluginName);\n  };\n  /**\n   * Returns the Handsontable instance.\n   *\n   * @memberof Core#\n   * @function getInstance\n   * @returns {Handsontable} The Handsontable instance.\n   */\n\n\n  this.getInstance = function () {\n    return instance;\n  };\n  /**\n   * Adds listener to the specified hook name (only for this Handsontable instance).\n   *\n   * @memberof Core#\n   * @function addHook\n   * @see Hooks#add\n   * @param {String} key Hook name (see {@link Hooks}).\n   * @param {Function|Array} callback Function or array of functions.\n   * @example\n   * ```js\n   * hot.addHook('beforeInit', myCallback);\n   * ```\n   */\n\n\n  this.addHook = function (key, callback) {\n    Hooks.getSingleton().add(key, callback, instance);\n  };\n  /**\n   * Check if for a specified hook name there are added listeners (only for this Handsontable instance). All available\n   * hooks you will find {@link Hooks}.\n   *\n   * @memberof Core#\n   * @function hasHook\n   * @see Hooks#has\n   * @param {String} key Hook name\n   * @return {Boolean}\n   *\n   * @example\n   * ```js\n   * const hasBeforeInitListeners = hot.hasHook('beforeInit');\n   * ```\n   */\n\n\n  this.hasHook = function (key) {\n    return Hooks.getSingleton().has(key, instance);\n  };\n  /**\n   * Adds listener to specified hook name (only for this Handsontable instance). After the listener is triggered,\n   * it will be automatically removed.\n   *\n   * @memberof Core#\n   * @function addHookOnce\n   * @see Hooks#once\n   * @param {String} key Hook name (see {@link Hooks}).\n   * @param {Function|Array} callback Function or array of functions.\n   * @example\n   * ```js\n   * hot.addHookOnce('beforeInit', myCallback);\n   * ```\n   */\n\n\n  this.addHookOnce = function (key, callback) {\n    Hooks.getSingleton().once(key, callback, instance);\n  };\n  /**\n   * Removes the hook listener previously registered with {@link Core#addHook}.\n   *\n   * @memberof Core#\n   * @function removeHook\n   * @see Hooks#remove\n   * @param {String} key Hook name.\n   * @param {Function} callback Reference to the function which has been registered using {@link Core#addHook}.\n   *\n   * @example\n   * ```js\n   * hot.removeHook('beforeInit', myCallback);\n   * ```\n   */\n\n\n  this.removeHook = function (key, callback) {\n    Hooks.getSingleton().remove(key, callback, instance);\n  };\n  /**\n   * Run the callbacks for the hook provided in the `key` argument using the parameters given in the other arguments.\n   *\n   * @memberof Core#\n   * @function runHooks\n   * @see Hooks#run\n   * @param {String} key Hook name.\n   * @param {*} [p1] Argument passed to the callback.\n   * @param {*} [p2] Argument passed to the callback.\n   * @param {*} [p3] Argument passed to the callback.\n   * @param {*} [p4] Argument passed to the callback.\n   * @param {*} [p5] Argument passed to the callback.\n   * @param {*} [p6] Argument passed to the callback.\n   * @returns {*}\n   *\n   * @example\n   * ```js\n   * // Run built-in hook\n   * hot.runHooks('beforeInit');\n   * // Run custom hook\n   * hot.runHooks('customAction', 10, 'foo');\n   * ```\n   */\n\n\n  this.runHooks = function (key, p1, p2, p3, p4, p5, p6) {\n    return Hooks.getSingleton().run(instance, key, p1, p2, p3, p4, p5, p6);\n  };\n  /**\n   * Get language phrase for specified dictionary key.\n   *\n   * @memberof Core#\n   * @function getTranslatedPhrase\n   * @since 0.35.0\n   * @param {String} dictionaryKey Constant which is dictionary key.\n   * @param {*} extraArguments Arguments which will be handled by formatters.\n   * @returns {String}\n   */\n\n\n  this.getTranslatedPhrase = function (dictionaryKey, extraArguments) {\n    return getTranslatedPhrase(priv.settings.language, dictionaryKey, extraArguments);\n  };\n  /**\n   * Converts instance into outerHTML of HTMLTableElement.\n   *\n   * @memberof Core#\n   * @function toHTML\n   * @since 7.1.0\n   * @returns {String}\n   */\n\n\n  this.toHTML = function () {\n    return instanceToHTML(_this);\n  };\n  /**\n   * Converts instance into HTMLTableElement.\n   *\n   * @memberof Core#\n   * @function toTableElement\n   * @since 7.1.0\n   * @returns {HTMLTableElement}\n   */\n\n\n  this.toTableElement = function () {\n    var tempElement = _this.rootDocument.createElement('div');\n\n    tempElement.insertAdjacentHTML('afterbegin', instanceToHTML(_this));\n    return tempElement.firstElementChild;\n  };\n\n  this.timeouts = [];\n  /**\n   * Sets timeout. Purpose of this method is to clear all known timeouts when `destroy` method is called.\n   *\n   * @param {Number|Function} handle Handler returned from setTimeout or function to execute (it will be automatically wraped\n   *                                 by setTimeout function).\n   * @param {Number} [delay=0] If first argument is passed as a function this argument set delay of the execution of that function.\n   * @private\n   */\n\n  this._registerTimeout = function (handle) {\n    var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var handleFunc = handle;\n\n    if (typeof handleFunc === 'function') {\n      handleFunc = setTimeout(handleFunc, delay);\n    }\n\n    this.timeouts.push(handleFunc);\n  };\n  /**\n   * Clears all known timeouts.\n   *\n   * @private\n   */\n\n\n  this._clearTimeouts = function () {\n    arrayEach(this.timeouts, function (handler) {\n      clearTimeout(handler);\n    });\n  };\n\n  this.immediates = [];\n  /**\n   * Execute function execution to the next event loop cycle. Purpose of this method is to clear all known timeouts when `destroy` method is called.\n   *\n   * @param {Function} callback Function to be delayed in execution.\n   * @private\n   */\n\n  this._registerImmediate = function (callback) {\n    this.immediates.push(setImmediate(callback));\n  };\n  /**\n   * Clears all known timeouts.\n   *\n   * @private\n   */\n\n\n  this._clearImmediates = function () {\n    arrayEach(this.immediates, function (handler) {\n      clearImmediate(handler);\n    });\n  };\n  /**\n   * Refresh selection borders. This is temporary method relic after selection rewrite.\n   *\n   * @private\n   * @param {Boolean} [revertOriginal=false] If `true`, the previous value will be restored. Otherwise, the edited value will be saved.\n   * @param {Boolean} [prepareEditorIfNeeded=true] If `true` the editor under the selected cell will be prepared to open.\n   */\n\n\n  this._refreshBorders = function () {\n    var revertOriginal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var prepareEditorIfNeeded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    editorManager.destroyEditor(revertOriginal);\n    instance.view.render();\n\n    if (prepareEditorIfNeeded && selection.isSelected()) {\n      editorManager.prepareEditor();\n    }\n  };\n\n  Hooks.getSingleton().run(instance, 'construct');\n}"]},"metadata":{},"sourceType":"module"}