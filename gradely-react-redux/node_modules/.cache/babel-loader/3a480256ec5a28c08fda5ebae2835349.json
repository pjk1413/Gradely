{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport { arrayEach, arrayFilter, arrayReduce } from '../../helpers/array';\nimport CellValue from './cell/value';\n/**\n * This component is responsible for storing all calculated cells which contain formula expressions (CellValue) and\n * register for all cell references (CellReference).\n *\n * CellValue is an object which represents a formula expression. It contains a calculated value of that formula,\n * an error if applied and cell references. Cell references are CellReference object instances which represent a cell\n * in a spreadsheet. One CellReference can be assigned to multiple CellValues as a precedent cell. Each cell\n * modification triggers a search through CellValues that are dependent of the CellReference. After\n * the match, the cells are marked as 'out of date'. In the next render cycle, all CellValues marked with\n * that state are recalculated.\n *\n * @class Matrix\n * @util\n */\n\nvar Matrix = /*#__PURE__*/function () {\n  function Matrix(recordTranslator) {\n    _classCallCheck(this, Matrix);\n    /**\n     * Record translator for translating visual records into psychical and vice versa.\n     *\n     * @type {RecordTranslator}\n     */\n\n\n    this.t = recordTranslator;\n    /**\n     * List of all cell values with theirs precedents.\n     *\n     * @type {Array}\n     */\n\n    this.data = [];\n    /**\n     * List of all created and registered cell references.\n     *\n     * @type {Array}\n     */\n\n    this.cellReferences = [];\n  }\n  /**\n   * Get cell value at given row and column index.\n   *\n   * @param {Number} row Physical row index.\n   * @param {Number} column Physical column index.\n   * @returns {CellValue|null} Returns CellValue instance or `null` if cell not found.\n   */\n\n\n  _createClass(Matrix, [{\n    key: \"getCellAt\",\n    value: function getCellAt(row, column) {\n      var result = null;\n      arrayEach(this.data, function (cell) {\n        if (cell.row === row && cell.column === column) {\n          result = cell;\n          return false;\n        }\n      });\n      return result;\n    }\n    /**\n     * Get all out of date cells.\n     *\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getOutOfDateCells\",\n    value: function getOutOfDateCells() {\n      return arrayFilter(this.data, function (cell) {\n        return cell.isState(CellValue.STATE_OUT_OFF_DATE);\n      });\n    }\n    /**\n     * Add cell value to the collection.\n     *\n     * @param {CellValue|Object} cellValue Cell value object.\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(cellValue) {\n      if (!arrayFilter(this.data, function (cell) {\n        return cell.isEqual(cellValue);\n      }).length) {\n        this.data.push(cellValue);\n      }\n    }\n    /**\n     * Remove cell value from the collection.\n     *\n     * @param {CellValue|Object|Array} cellValue Cell value object.\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(cellValue) {\n      var isArray = Array.isArray(cellValue);\n\n      var isEqual = function isEqual(cell, values) {\n        var result = false;\n\n        if (isArray) {\n          arrayEach(values, function (value) {\n            if (cell.isEqual(value)) {\n              result = true;\n              return false;\n            }\n          });\n        } else {\n          result = cell.isEqual(values);\n        }\n\n        return result;\n      };\n\n      this.data = arrayFilter(this.data, function (cell) {\n        return !isEqual(cell, cellValue);\n      });\n    }\n    /**\n     * Get cell dependencies using visual coordinates.\n     *\n     * @param {Object} cellCoord Visual cell coordinates object.\n     */\n\n  }, {\n    key: \"getDependencies\",\n    value: function getDependencies(cellCoord) {\n      var _this = this;\n      /* eslint-disable arrow-body-style */\n\n\n      var getDependencies = function getDependencies(cell) {\n        return arrayReduce(_this.data, function (acc, cellValue) {\n          if (cellValue.hasPrecedent(cell) && acc.indexOf(cellValue) === -1) {\n            acc.push(cellValue);\n          }\n\n          return acc;\n        }, []);\n      };\n\n      var getTotalDependencies = function getTotalDependencies(cell) {\n        var deps = getDependencies(cell);\n\n        if (deps.length) {\n          arrayEach(deps, function (cellValue) {\n            if (cellValue.hasPrecedents()) {\n              deps = deps.concat(getTotalDependencies(_this.t.toVisual(cellValue)));\n            }\n          });\n        }\n\n        return deps;\n      };\n\n      return getTotalDependencies(cellCoord);\n    }\n    /**\n     * Register cell reference to the collection.\n     *\n     * @param {CellReference|Object} cellReference Cell reference object.\n     */\n\n  }, {\n    key: \"registerCellRef\",\n    value: function registerCellRef(cellReference) {\n      if (!arrayFilter(this.cellReferences, function (cell) {\n        return cell.isEqual(cellReference);\n      }).length) {\n        this.cellReferences.push(cellReference);\n      }\n    }\n    /**\n     * Remove cell references from the collection.\n     *\n     * @param {Object} start Start visual coordinate.\n     * @param {Object} end End visual coordinate.\n     * @returns {Array} Returns removed cell references.\n     */\n\n  }, {\n    key: \"removeCellRefsAtRange\",\n    value: function removeCellRefsAtRange(_ref, _ref2) {\n      var startRow = _ref.row,\n          startColumn = _ref.column;\n      var endRow = _ref2.row,\n          endColumn = _ref2.column;\n      var removed = [];\n\n      var rowMatch = function rowMatch(cell) {\n        return startRow === void 0 ? true : cell.row >= startRow && cell.row <= endRow;\n      };\n\n      var colMatch = function colMatch(cell) {\n        return startColumn === void 0 ? true : cell.column >= startColumn && cell.column <= endColumn;\n      };\n\n      this.cellReferences = arrayFilter(this.cellReferences, function (cell) {\n        if (rowMatch(cell) && colMatch(cell)) {\n          removed.push(cell);\n          return false;\n        }\n\n        return true;\n      });\n      return removed;\n    }\n    /**\n     * Reset matrix data.\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.data.length = 0;\n      this.cellReferences.length = 0;\n    }\n  }]);\n\n  return Matrix;\n}();\n\nexport default Matrix;","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/node_modules/handsontable/es/plugins/formulas/matrix.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","arrayEach","arrayFilter","arrayReduce","CellValue","Matrix","recordTranslator","t","data","cellReferences","value","getCellAt","row","column","result","cell","getOutOfDateCells","isState","STATE_OUT_OFF_DATE","add","cellValue","isEqual","push","remove","isArray","Array","values","getDependencies","cellCoord","_this","acc","hasPrecedent","indexOf","getTotalDependencies","deps","hasPrecedents","concat","toVisual","registerCellRef","cellReference","removeCellRefsAtRange","_ref","_ref2","startRow","startColumn","endRow","endColumn","removed","rowMatch","colMatch","reset"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.array.index-of\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { arrayEach, arrayFilter, arrayReduce } from '../../helpers/array';\nimport CellValue from './cell/value';\n/**\n * This component is responsible for storing all calculated cells which contain formula expressions (CellValue) and\n * register for all cell references (CellReference).\n *\n * CellValue is an object which represents a formula expression. It contains a calculated value of that formula,\n * an error if applied and cell references. Cell references are CellReference object instances which represent a cell\n * in a spreadsheet. One CellReference can be assigned to multiple CellValues as a precedent cell. Each cell\n * modification triggers a search through CellValues that are dependent of the CellReference. After\n * the match, the cells are marked as 'out of date'. In the next render cycle, all CellValues marked with\n * that state are recalculated.\n *\n * @class Matrix\n * @util\n */\n\nvar Matrix =\n/*#__PURE__*/\nfunction () {\n  function Matrix(recordTranslator) {\n    _classCallCheck(this, Matrix);\n\n    /**\n     * Record translator for translating visual records into psychical and vice versa.\n     *\n     * @type {RecordTranslator}\n     */\n    this.t = recordTranslator;\n    /**\n     * List of all cell values with theirs precedents.\n     *\n     * @type {Array}\n     */\n\n    this.data = [];\n    /**\n     * List of all created and registered cell references.\n     *\n     * @type {Array}\n     */\n\n    this.cellReferences = [];\n  }\n  /**\n   * Get cell value at given row and column index.\n   *\n   * @param {Number} row Physical row index.\n   * @param {Number} column Physical column index.\n   * @returns {CellValue|null} Returns CellValue instance or `null` if cell not found.\n   */\n\n\n  _createClass(Matrix, [{\n    key: \"getCellAt\",\n    value: function getCellAt(row, column) {\n      var result = null;\n      arrayEach(this.data, function (cell) {\n        if (cell.row === row && cell.column === column) {\n          result = cell;\n          return false;\n        }\n      });\n      return result;\n    }\n    /**\n     * Get all out of date cells.\n     *\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getOutOfDateCells\",\n    value: function getOutOfDateCells() {\n      return arrayFilter(this.data, function (cell) {\n        return cell.isState(CellValue.STATE_OUT_OFF_DATE);\n      });\n    }\n    /**\n     * Add cell value to the collection.\n     *\n     * @param {CellValue|Object} cellValue Cell value object.\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(cellValue) {\n      if (!arrayFilter(this.data, function (cell) {\n        return cell.isEqual(cellValue);\n      }).length) {\n        this.data.push(cellValue);\n      }\n    }\n    /**\n     * Remove cell value from the collection.\n     *\n     * @param {CellValue|Object|Array} cellValue Cell value object.\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(cellValue) {\n      var isArray = Array.isArray(cellValue);\n\n      var isEqual = function isEqual(cell, values) {\n        var result = false;\n\n        if (isArray) {\n          arrayEach(values, function (value) {\n            if (cell.isEqual(value)) {\n              result = true;\n              return false;\n            }\n          });\n        } else {\n          result = cell.isEqual(values);\n        }\n\n        return result;\n      };\n\n      this.data = arrayFilter(this.data, function (cell) {\n        return !isEqual(cell, cellValue);\n      });\n    }\n    /**\n     * Get cell dependencies using visual coordinates.\n     *\n     * @param {Object} cellCoord Visual cell coordinates object.\n     */\n\n  }, {\n    key: \"getDependencies\",\n    value: function getDependencies(cellCoord) {\n      var _this = this;\n\n      /* eslint-disable arrow-body-style */\n      var getDependencies = function getDependencies(cell) {\n        return arrayReduce(_this.data, function (acc, cellValue) {\n          if (cellValue.hasPrecedent(cell) && acc.indexOf(cellValue) === -1) {\n            acc.push(cellValue);\n          }\n\n          return acc;\n        }, []);\n      };\n\n      var getTotalDependencies = function getTotalDependencies(cell) {\n        var deps = getDependencies(cell);\n\n        if (deps.length) {\n          arrayEach(deps, function (cellValue) {\n            if (cellValue.hasPrecedents()) {\n              deps = deps.concat(getTotalDependencies(_this.t.toVisual(cellValue)));\n            }\n          });\n        }\n\n        return deps;\n      };\n\n      return getTotalDependencies(cellCoord);\n    }\n    /**\n     * Register cell reference to the collection.\n     *\n     * @param {CellReference|Object} cellReference Cell reference object.\n     */\n\n  }, {\n    key: \"registerCellRef\",\n    value: function registerCellRef(cellReference) {\n      if (!arrayFilter(this.cellReferences, function (cell) {\n        return cell.isEqual(cellReference);\n      }).length) {\n        this.cellReferences.push(cellReference);\n      }\n    }\n    /**\n     * Remove cell references from the collection.\n     *\n     * @param {Object} start Start visual coordinate.\n     * @param {Object} end End visual coordinate.\n     * @returns {Array} Returns removed cell references.\n     */\n\n  }, {\n    key: \"removeCellRefsAtRange\",\n    value: function removeCellRefsAtRange(_ref, _ref2) {\n      var startRow = _ref.row,\n          startColumn = _ref.column;\n      var endRow = _ref2.row,\n          endColumn = _ref2.column;\n      var removed = [];\n\n      var rowMatch = function rowMatch(cell) {\n        return startRow === void 0 ? true : cell.row >= startRow && cell.row <= endRow;\n      };\n\n      var colMatch = function colMatch(cell) {\n        return startColumn === void 0 ? true : cell.column >= startColumn && cell.column <= endColumn;\n      };\n\n      this.cellReferences = arrayFilter(this.cellReferences, function (cell) {\n        if (rowMatch(cell) && colMatch(cell)) {\n          removed.push(cell);\n          return false;\n        }\n\n        return true;\n      });\n      return removed;\n    }\n    /**\n     * Reset matrix data.\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.data.length = 0;\n      this.cellReferences.length = 0;\n    }\n  }]);\n\n  return Matrix;\n}();\n\nexport default Matrix;"]},"metadata":{},"sourceType":"module"}