{"ast":null,"code":"function _toArray(arr) {\n  return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n/* eslint-disable import/prefer-default-export */\n\n\nimport { getCompareFunctionFactory } from './sortService';\n/**\n * Sort comparator handled by conventional sort algorithm.\n *\n * @param {Array} sortOrders Sort orders (`asc` for ascending, `desc` for descending).\n * @param {Array} columnMetas Column meta objects.\n * @returns {Function}\n */\n\nexport function rootComparator(sortingOrders, columnMetas) {\n  return function (rowIndexWithValues, nextRowIndexWithValues) {\n    // We sort array of arrays. Single array is in form [rowIndex, ...values].\n    // We compare just values, stored at second index of array.\n    var _rowIndexWithValues = _toArray(rowIndexWithValues),\n        values = _rowIndexWithValues.slice(1);\n\n    var _nextRowIndexWithValu = _toArray(nextRowIndexWithValues),\n        nextValues = _nextRowIndexWithValu.slice(1);\n\n    return function getCompareResult(column) {\n      var sortingOrder = sortingOrders[column];\n      var columnMeta = columnMetas[column];\n      var value = values[column];\n      var nextValue = nextValues[column];\n      var pluginSettings = columnMeta.columnSorting;\n      var compareFunctionFactory = pluginSettings.compareFunctionFactory ? pluginSettings.compareFunctionFactory : getCompareFunctionFactory(columnMeta.type);\n      var compareResult = compareFunctionFactory(sortingOrder, columnMeta, pluginSettings)(value, nextValue); // DIFF - MultiColumnSorting & ColumnSorting: removed iteration through next sorted columns.\n\n      return compareResult;\n    }(0);\n  };\n}","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react/node_modules/handsontable/es/plugins/columnSorting/rootComparator.js"],"names":["_toArray","arr","_arrayWithHoles","_iterableToArray","_nonIterableRest","TypeError","iter","Symbol","iterator","Object","prototype","toString","call","Array","from","isArray","getCompareFunctionFactory","rootComparator","sortingOrders","columnMetas","rowIndexWithValues","nextRowIndexWithValues","_rowIndexWithValues","values","slice","_nextRowIndexWithValu","nextValues","getCompareResult","column","sortingOrder","columnMeta","value","nextValue","pluginSettings","columnSorting","compareFunctionFactory","type","compareResult"],"mappings":"AAWA,SAASA,QAAT,CAAkBC,GAAlB,EAAuB;AAAE,SAAOC,eAAe,CAACD,GAAD,CAAf,IAAwBE,gBAAgB,CAACF,GAAD,CAAxC,IAAiDG,gBAAgB,EAAxE;AAA6E;;AAEtG,SAASA,gBAAT,GAA4B;AAAE,QAAM,IAAIC,SAAJ,CAAc,sDAAd,CAAN;AAA8E;;AAE5G,SAASF,gBAAT,CAA0BG,IAA1B,EAAgC;AAAE,MAAIC,MAAM,CAACC,QAAP,IAAmBC,MAAM,CAACH,IAAD,CAAzB,IAAmCG,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BN,IAA/B,MAAyC,oBAAhF,EAAsG,OAAOO,KAAK,CAACC,IAAN,CAAWR,IAAX,CAAP;AAA0B;;AAElK,SAASJ,eAAT,CAAyBD,GAAzB,EAA8B;AAAE,MAAIY,KAAK,CAACE,OAAN,CAAcd,GAAd,CAAJ,EAAwB,OAAOA,GAAP;AAAa;AAErE;;;AACA,SAASe,yBAAT,QAA0C,eAA1C;AACA;;;;;;;;AAQA,OAAO,SAASC,cAAT,CAAwBC,aAAxB,EAAuCC,WAAvC,EAAoD;AACzD,SAAO,UAAUC,kBAAV,EAA8BC,sBAA9B,EAAsD;AAC3D;AACA;AACA,QAAIC,mBAAmB,GAAGtB,QAAQ,CAACoB,kBAAD,CAAlC;AAAA,QACIG,MAAM,GAAGD,mBAAmB,CAACE,KAApB,CAA0B,CAA1B,CADb;;AAGA,QAAIC,qBAAqB,GAAGzB,QAAQ,CAACqB,sBAAD,CAApC;AAAA,QACIK,UAAU,GAAGD,qBAAqB,CAACD,KAAtB,CAA4B,CAA5B,CADjB;;AAGA,WAAO,SAASG,gBAAT,CAA0BC,MAA1B,EAAkC;AACvC,UAAIC,YAAY,GAAGX,aAAa,CAACU,MAAD,CAAhC;AACA,UAAIE,UAAU,GAAGX,WAAW,CAACS,MAAD,CAA5B;AACA,UAAIG,KAAK,GAAGR,MAAM,CAACK,MAAD,CAAlB;AACA,UAAII,SAAS,GAAGN,UAAU,CAACE,MAAD,CAA1B;AACA,UAAIK,cAAc,GAAGH,UAAU,CAACI,aAAhC;AACA,UAAIC,sBAAsB,GAAGF,cAAc,CAACE,sBAAf,GAAwCF,cAAc,CAACE,sBAAvD,GAAgFnB,yBAAyB,CAACc,UAAU,CAACM,IAAZ,CAAtI;AACA,UAAIC,aAAa,GAAGF,sBAAsB,CAACN,YAAD,EAAeC,UAAf,EAA2BG,cAA3B,CAAtB,CAAiEF,KAAjE,EAAwEC,SAAxE,CAApB,CAPuC,CAOiE;;AAExG,aAAOK,aAAP;AACD,KAVM,CAUL,CAVK,CAAP;AAWD,GApBD;AAqBD","sourcesContent":["import \"core-js/modules/es.symbol\";\nimport \"core-js/modules/es.symbol.description\";\nimport \"core-js/modules/es.symbol.iterator\";\nimport \"core-js/modules/es.array.from\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.array.slice\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.regexp.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/web.dom-collections.iterator\";\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/* eslint-disable import/prefer-default-export */\nimport { getCompareFunctionFactory } from './sortService';\n/**\n * Sort comparator handled by conventional sort algorithm.\n *\n * @param {Array} sortOrders Sort orders (`asc` for ascending, `desc` for descending).\n * @param {Array} columnMetas Column meta objects.\n * @returns {Function}\n */\n\nexport function rootComparator(sortingOrders, columnMetas) {\n  return function (rowIndexWithValues, nextRowIndexWithValues) {\n    // We sort array of arrays. Single array is in form [rowIndex, ...values].\n    // We compare just values, stored at second index of array.\n    var _rowIndexWithValues = _toArray(rowIndexWithValues),\n        values = _rowIndexWithValues.slice(1);\n\n    var _nextRowIndexWithValu = _toArray(nextRowIndexWithValues),\n        nextValues = _nextRowIndexWithValu.slice(1);\n\n    return function getCompareResult(column) {\n      var sortingOrder = sortingOrders[column];\n      var columnMeta = columnMetas[column];\n      var value = values[column];\n      var nextValue = nextValues[column];\n      var pluginSettings = columnMeta.columnSorting;\n      var compareFunctionFactory = pluginSettings.compareFunctionFactory ? pluginSettings.compareFunctionFactory : getCompareFunctionFactory(columnMeta.type);\n      var compareResult = compareFunctionFactory(sortingOrder, columnMeta, pluginSettings)(value, nextValue); // DIFF - MultiColumnSorting & ColumnSorting: removed iteration through next sorted columns.\n\n      return compareResult;\n    }(0);\n  };\n}"]},"metadata":{},"sourceType":"module"}