{"ast":null,"code":"/* eslint-disable import/prefer-default-export */\n\n/**\n * Get normalized Date object for the ISO formatted date strings.\n * Natively, the date object parsed from a ISO 8601 string will be offsetted by the timezone difference, which may result in returning a wrong date.\n * See: Github issue #3338.\n *\n * @param {String} dateString String representing the date.\n * @returns {Date} The proper Date object.\n */\nexport function getNormalizedDate(dateString) {\n  var nativeDate = new Date(dateString); // NaN if dateString is not in ISO format\n\n  if (!isNaN(new Date(\"\".concat(dateString, \"T00:00\")).getDate())) {\n    // Compensate timezone offset\n    return new Date(nativeDate.getTime() + nativeDate.getTimezoneOffset() * 60000);\n  }\n\n  return nativeDate;\n}","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/node_modules/handsontable/es/helpers/date.js"],"names":["getNormalizedDate","dateString","nativeDate","Date","isNaN","concat","getDate","getTime","getTimezoneOffset"],"mappings":"AAAA;;AAEA;;;;;;;;AAQA,OAAO,SAASA,iBAAT,CAA2BC,UAA3B,EAAuC;AAC5C,MAAIC,UAAU,GAAG,IAAIC,IAAJ,CAASF,UAAT,CAAjB,CAD4C,CACL;;AAEvC,MAAI,CAACG,KAAK,CAAC,IAAID,IAAJ,CAAS,GAAGE,MAAH,CAAUJ,UAAV,EAAsB,QAAtB,CAAT,EAA0CK,OAA1C,EAAD,CAAV,EAAiE;AAC/D;AACA,WAAO,IAAIH,IAAJ,CAASD,UAAU,CAACK,OAAX,KAAuBL,UAAU,CAACM,iBAAX,KAAiC,KAAjE,CAAP;AACD;;AAED,SAAON,UAAP;AACD","sourcesContent":["/* eslint-disable import/prefer-default-export */\n\n/**\n * Get normalized Date object for the ISO formatted date strings.\n * Natively, the date object parsed from a ISO 8601 string will be offsetted by the timezone difference, which may result in returning a wrong date.\n * See: Github issue #3338.\n *\n * @param {String} dateString String representing the date.\n * @returns {Date} The proper Date object.\n */\nexport function getNormalizedDate(dateString) {\n  var nativeDate = new Date(dateString); // NaN if dateString is not in ISO format\n\n  if (!isNaN(new Date(\"\".concat(dateString, \"T00:00\")).getDate())) {\n    // Compensate timezone offset\n    return new Date(nativeDate.getTime() + nativeDate.getTimezoneOffset() * 60000);\n  }\n\n  return nativeDate;\n}"]},"metadata":{},"sourceType":"module"}