{"ast":null,"code":"import mergeSort from '../../../utils/sortingAlgorithms/mergeSort';\nimport { getRootComparator } from './registry';\nexport var DO_NOT_SWAP = 0;\nexport var FIRST_BEFORE_SECOND = -1;\nexport var FIRST_AFTER_SECOND = 1;\nexport function sort(indexesWithData, rootComparatorId) {\n  var rootComparator = getRootComparator(rootComparatorId);\n\n  for (var _len = arguments.length, argsForRootComparator = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    argsForRootComparator[_key - 2] = arguments[_key];\n  }\n\n  mergeSort(indexesWithData, rootComparator.apply(void 0, argsForRootComparator));\n}","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react/node_modules/handsontable/es/plugins/columnSorting/sortService/engine.js"],"names":["mergeSort","getRootComparator","DO_NOT_SWAP","FIRST_BEFORE_SECOND","FIRST_AFTER_SECOND","sort","indexesWithData","rootComparatorId","rootComparator","_len","arguments","length","argsForRootComparator","Array","_key","apply"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,4CAAtB;AACA,SAASC,iBAAT,QAAkC,YAAlC;AACA,OAAO,IAAIC,WAAW,GAAG,CAAlB;AACP,OAAO,IAAIC,mBAAmB,GAAG,CAAC,CAA3B;AACP,OAAO,IAAIC,kBAAkB,GAAG,CAAzB;AACP,OAAO,SAASC,IAAT,CAAcC,eAAd,EAA+BC,gBAA/B,EAAiD;AACtD,MAAIC,cAAc,GAAGP,iBAAiB,CAACM,gBAAD,CAAtC;;AAEA,OAAK,IAAIE,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,qBAAqB,GAAG,IAAIC,KAAJ,CAAUJ,IAAI,GAAG,CAAP,GAAWA,IAAI,GAAG,CAAlB,GAAsB,CAAhC,CAArD,EAAyFK,IAAI,GAAG,CAArG,EAAwGA,IAAI,GAAGL,IAA/G,EAAqHK,IAAI,EAAzH,EAA6H;AAC3HF,IAAAA,qBAAqB,CAACE,IAAI,GAAG,CAAR,CAArB,GAAkCJ,SAAS,CAACI,IAAD,CAA3C;AACD;;AAEDd,EAAAA,SAAS,CAACM,eAAD,EAAkBE,cAAc,CAACO,KAAf,CAAqB,KAAK,CAA1B,EAA6BH,qBAA7B,CAAlB,CAAT;AACD","sourcesContent":["import mergeSort from '../../../utils/sortingAlgorithms/mergeSort';\nimport { getRootComparator } from './registry';\nexport var DO_NOT_SWAP = 0;\nexport var FIRST_BEFORE_SECOND = -1;\nexport var FIRST_AFTER_SECOND = 1;\nexport function sort(indexesWithData, rootComparatorId) {\n  var rootComparator = getRootComparator(rootComparatorId);\n\n  for (var _len = arguments.length, argsForRootComparator = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    argsForRootComparator[_key - 2] = arguments[_key];\n  }\n\n  mergeSort(indexesWithData, rootComparator.apply(void 0, argsForRootComparator));\n}"]},"metadata":{},"sourceType":"module"}