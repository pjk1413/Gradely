{"ast":null,"code":"import \"core-js/modules/es.string.replace\";\n\n/* eslint-disable import/prefer-default-export */\nimport { arrayReduce } from '../helpers/array';\n/**\n * Tags a multiline string and return new one without line break characters and following spaces.\n *\n * @param {Array} strings Parts of the entire string without expressions.\n * @param {...String} expressions Expressions converted to strings, which are added to the entire string.\n * @returns {String}\n */\n\nexport function toSingleLine(strings) {\n  for (var _len = arguments.length, expressions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    expressions[_key - 1] = arguments[_key];\n  }\n\n  var result = arrayReduce(strings, function (previousValue, currentValue, index) {\n    var valueWithoutWhiteSpaces = currentValue.replace(/(?:\\r?\\n\\s+)/g, '');\n    var expressionForIndex = expressions[index] ? expressions[index] : '';\n    return previousValue + valueWithoutWhiteSpaces + expressionForIndex;\n  }, '');\n  return result.trim();\n}","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/node_modules/handsontable/es/helpers/templateLiteralTag.js"],"names":["arrayReduce","toSingleLine","strings","_len","arguments","length","expressions","Array","_key","result","previousValue","currentValue","index","valueWithoutWhiteSpaces","replace","expressionForIndex","trim"],"mappings":"AACA,OAAO,mCAAP;;AAGA;AACA,SAASA,WAAT,QAA4B,kBAA5B;AACA;;;;;;;;AAQA,OAAO,SAASC,YAAT,CAAsBC,OAAtB,EAA+B;AACpC,OAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,WAAW,GAAG,IAAIC,KAAJ,CAAUJ,IAAI,GAAG,CAAP,GAAWA,IAAI,GAAG,CAAlB,GAAsB,CAAhC,CAA3C,EAA+EK,IAAI,GAAG,CAA3F,EAA8FA,IAAI,GAAGL,IAArG,EAA2GK,IAAI,EAA/G,EAAmH;AACjHF,IAAAA,WAAW,CAACE,IAAI,GAAG,CAAR,CAAX,GAAwBJ,SAAS,CAACI,IAAD,CAAjC;AACD;;AAED,MAAIC,MAAM,GAAGT,WAAW,CAACE,OAAD,EAAU,UAAUQ,aAAV,EAAyBC,YAAzB,EAAuCC,KAAvC,EAA8C;AAC9E,QAAIC,uBAAuB,GAAGF,YAAY,CAACG,OAAb,CAAqB,eAArB,EAAsC,EAAtC,CAA9B;AACA,QAAIC,kBAAkB,GAAGT,WAAW,CAACM,KAAD,CAAX,GAAqBN,WAAW,CAACM,KAAD,CAAhC,GAA0C,EAAnE;AACA,WAAOF,aAAa,GAAGG,uBAAhB,GAA0CE,kBAAjD;AACD,GAJuB,EAIrB,EAJqB,CAAxB;AAKA,SAAON,MAAM,CAACO,IAAP,EAAP;AACD","sourcesContent":["import \"core-js/modules/es.regexp.exec\";\nimport \"core-js/modules/es.string.replace\";\nimport \"core-js/modules/es.string.trim\";\n\n/* eslint-disable import/prefer-default-export */\nimport { arrayReduce } from '../helpers/array';\n/**\n * Tags a multiline string and return new one without line break characters and following spaces.\n *\n * @param {Array} strings Parts of the entire string without expressions.\n * @param {...String} expressions Expressions converted to strings, which are added to the entire string.\n * @returns {String}\n */\n\nexport function toSingleLine(strings) {\n  for (var _len = arguments.length, expressions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    expressions[_key - 1] = arguments[_key];\n  }\n\n  var result = arrayReduce(strings, function (previousValue, currentValue, index) {\n    var valueWithoutWhiteSpaces = currentValue.replace(/(?:\\r?\\n\\s+)/g, '');\n    var expressionForIndex = expressions[index] ? expressions[index] : '';\n    return previousValue + valueWithoutWhiteSpaces + expressionForIndex;\n  }, '');\n  return result.trim();\n}"]},"metadata":{},"sourceType":"module"}