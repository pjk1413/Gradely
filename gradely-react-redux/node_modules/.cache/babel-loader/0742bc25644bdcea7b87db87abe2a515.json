{"ast":null,"code":"/* eslint-disable import/prefer-default-export */\nimport { ASC_SORT_STATE, DESC_SORT_STATE } from './utils';\nvar HEADER_CLASS_ASC_SORT = 'ascending';\nvar HEADER_CLASS_DESC_SORT = 'descending';\nvar HEADER_CLASS_INDICATOR_DISABLED = 'indicatorDisabled';\nvar HEADER_SORT_CLASS = 'columnSorting';\nvar HEADER_ACTION_CLASS = 'sortAction';\nvar orderToCssClass = new Map([[ASC_SORT_STATE, HEADER_CLASS_ASC_SORT], [DESC_SORT_STATE, HEADER_CLASS_DESC_SORT]]);\n/**\n * Get CSS classes which should be added to particular column header.\n * @param {Object} columnStatesManager Instance of column state manager.\n * @param {Number} column Physical column index.\n * @param {Boolean} showSortIndicator Indicates if indicator should be shown for the particular column.\n * @param {Boolean} headerAction Indicates if header click to sort should be possible.\n * @returns {Array} Array of CSS classes.\n */\n\nexport function getClassesToAdd(columnStatesManager, column, showSortIndicator, headerAction) {\n  var cssClasses = [HEADER_SORT_CLASS];\n\n  if (headerAction) {\n    cssClasses.push(HEADER_ACTION_CLASS);\n  }\n\n  if (showSortIndicator === false) {\n    cssClasses.push(HEADER_CLASS_INDICATOR_DISABLED);\n  } else if (columnStatesManager.isColumnSorted(column)) {\n    var columnOrder = columnStatesManager.getSortOrderOfColumn(column);\n    cssClasses.push(orderToCssClass.get(columnOrder));\n  }\n\n  return cssClasses;\n}\n/**\n * Get CSS classes which should be removed from column header.\n *\n * @returns {Array} Array of CSS classes.\n */\n\nexport function getClassedToRemove() {\n  return Array.from(orderToCssClass.values()).concat(HEADER_ACTION_CLASS, HEADER_CLASS_INDICATOR_DISABLED, HEADER_SORT_CLASS);\n}","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/node_modules/handsontable/es/plugins/columnSorting/domHelpers.js"],"names":["ASC_SORT_STATE","DESC_SORT_STATE","HEADER_CLASS_ASC_SORT","HEADER_CLASS_DESC_SORT","HEADER_CLASS_INDICATOR_DISABLED","HEADER_SORT_CLASS","HEADER_ACTION_CLASS","orderToCssClass","Map","getClassesToAdd","columnStatesManager","column","showSortIndicator","headerAction","cssClasses","push","isColumnSorted","columnOrder","getSortOrderOfColumn","get","getClassedToRemove","Array","from","values","concat"],"mappings":"AAQA;AACA,SAASA,cAAT,EAAyBC,eAAzB,QAAgD,SAAhD;AACA,IAAIC,qBAAqB,GAAG,WAA5B;AACA,IAAIC,sBAAsB,GAAG,YAA7B;AACA,IAAIC,+BAA+B,GAAG,mBAAtC;AACA,IAAIC,iBAAiB,GAAG,eAAxB;AACA,IAAIC,mBAAmB,GAAG,YAA1B;AACA,IAAIC,eAAe,GAAG,IAAIC,GAAJ,CAAQ,CAAC,CAACR,cAAD,EAAiBE,qBAAjB,CAAD,EAA0C,CAACD,eAAD,EAAkBE,sBAAlB,CAA1C,CAAR,CAAtB;AACA;;;;;;;;;AASA,OAAO,SAASM,eAAT,CAAyBC,mBAAzB,EAA8CC,MAA9C,EAAsDC,iBAAtD,EAAyEC,YAAzE,EAAuF;AAC5F,MAAIC,UAAU,GAAG,CAACT,iBAAD,CAAjB;;AAEA,MAAIQ,YAAJ,EAAkB;AAChBC,IAAAA,UAAU,CAACC,IAAX,CAAgBT,mBAAhB;AACD;;AAED,MAAIM,iBAAiB,KAAK,KAA1B,EAAiC;AAC/BE,IAAAA,UAAU,CAACC,IAAX,CAAgBX,+BAAhB;AACD,GAFD,MAEO,IAAIM,mBAAmB,CAACM,cAApB,CAAmCL,MAAnC,CAAJ,EAAgD;AACrD,QAAIM,WAAW,GAAGP,mBAAmB,CAACQ,oBAApB,CAAyCP,MAAzC,CAAlB;AACAG,IAAAA,UAAU,CAACC,IAAX,CAAgBR,eAAe,CAACY,GAAhB,CAAoBF,WAApB,CAAhB;AACD;;AAED,SAAOH,UAAP;AACD;AACD;;;;;;AAMA,OAAO,SAASM,kBAAT,GAA8B;AACnC,SAAOC,KAAK,CAACC,IAAN,CAAWf,eAAe,CAACgB,MAAhB,EAAX,EAAqCC,MAArC,CAA4ClB,mBAA5C,EAAiEF,+BAAjE,EAAkGC,iBAAlG,CAAP;AACD","sourcesContent":["import \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.array.from\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.map\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/web.dom-collections.iterator\";\n\n/* eslint-disable import/prefer-default-export */\nimport { ASC_SORT_STATE, DESC_SORT_STATE } from './utils';\nvar HEADER_CLASS_ASC_SORT = 'ascending';\nvar HEADER_CLASS_DESC_SORT = 'descending';\nvar HEADER_CLASS_INDICATOR_DISABLED = 'indicatorDisabled';\nvar HEADER_SORT_CLASS = 'columnSorting';\nvar HEADER_ACTION_CLASS = 'sortAction';\nvar orderToCssClass = new Map([[ASC_SORT_STATE, HEADER_CLASS_ASC_SORT], [DESC_SORT_STATE, HEADER_CLASS_DESC_SORT]]);\n/**\n * Get CSS classes which should be added to particular column header.\n * @param {Object} columnStatesManager Instance of column state manager.\n * @param {Number} column Physical column index.\n * @param {Boolean} showSortIndicator Indicates if indicator should be shown for the particular column.\n * @param {Boolean} headerAction Indicates if header click to sort should be possible.\n * @returns {Array} Array of CSS classes.\n */\n\nexport function getClassesToAdd(columnStatesManager, column, showSortIndicator, headerAction) {\n  var cssClasses = [HEADER_SORT_CLASS];\n\n  if (headerAction) {\n    cssClasses.push(HEADER_ACTION_CLASS);\n  }\n\n  if (showSortIndicator === false) {\n    cssClasses.push(HEADER_CLASS_INDICATOR_DISABLED);\n  } else if (columnStatesManager.isColumnSorted(column)) {\n    var columnOrder = columnStatesManager.getSortOrderOfColumn(column);\n    cssClasses.push(orderToCssClass.get(columnOrder));\n  }\n\n  return cssClasses;\n}\n/**\n * Get CSS classes which should be removed from column header.\n *\n * @returns {Array} Array of CSS classes.\n */\n\nexport function getClassedToRemove() {\n  return Array.from(orderToCssClass.values()).concat(HEADER_ACTION_CLASS, HEADER_CLASS_INDICATOR_DISABLED, HEADER_SORT_CLASS);\n}"]},"metadata":{},"sourceType":"module"}