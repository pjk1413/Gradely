{"ast":null,"code":"import { arrayEach } from './../helpers/array';\nimport { getLanguageDictionary } from './dictionariesManager';\nimport { getPhraseFormatters } from './phraseFormatters';\nimport { isUndefined } from '../helpers/mixed';\n/**\n * Get phrase for specified dictionary key.\n *\n * @param {String} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n * @param {String} dictionaryKey Constant which is dictionary key.\n * @param {*} argumentsForFormatters Arguments which will be handled by formatters.\n *\n * @returns {String}\n */\n// eslint-disable-next-line import/prefer-default-export\n\nexport function getTranslatedPhrase(languageCode, dictionaryKey, argumentsForFormatters) {\n  var languageDictionary = getLanguageDictionary(languageCode);\n\n  if (languageDictionary === null) {\n    return null;\n  }\n\n  var phrasePropositions = languageDictionary[dictionaryKey];\n\n  if (isUndefined(phrasePropositions)) {\n    return null;\n  }\n\n  var formattedPhrase = getFormattedPhrase(phrasePropositions, argumentsForFormatters);\n\n  if (Array.isArray(formattedPhrase)) {\n    return formattedPhrase[0];\n  }\n\n  return formattedPhrase;\n}\n/**\n * Get formatted phrase from phrases propositions for specified dictionary key.\n *\n * @private\n * @param {Array|string} phrasePropositions List of phrase propositions.\n * @param {*} argumentsForFormatters Arguments which will be handled by formatters.\n *\n * @returns {Array|string}\n */\n\nfunction getFormattedPhrase(phrasePropositions, argumentsForFormatters) {\n  var formattedPhrasePropositions = phrasePropositions;\n  arrayEach(getPhraseFormatters(), function (formatter) {\n    formattedPhrasePropositions = formatter(phrasePropositions, argumentsForFormatters);\n  });\n  return formattedPhrasePropositions;\n}","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react/node_modules/handsontable/es/i18n/index.js"],"names":["arrayEach","getLanguageDictionary","getPhraseFormatters","isUndefined","getTranslatedPhrase","languageCode","dictionaryKey","argumentsForFormatters","languageDictionary","phrasePropositions","formattedPhrase","getFormattedPhrase","Array","isArray","formattedPhrasePropositions","formatter"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,SAASC,qBAAT,QAAsC,uBAAtC;AACA,SAASC,mBAAT,QAAoC,oBAApC;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA;;;;;;;;;AASA;;AAEA,OAAO,SAASC,mBAAT,CAA6BC,YAA7B,EAA2CC,aAA3C,EAA0DC,sBAA1D,EAAkF;AACvF,MAAIC,kBAAkB,GAAGP,qBAAqB,CAACI,YAAD,CAA9C;;AAEA,MAAIG,kBAAkB,KAAK,IAA3B,EAAiC;AAC/B,WAAO,IAAP;AACD;;AAED,MAAIC,kBAAkB,GAAGD,kBAAkB,CAACF,aAAD,CAA3C;;AAEA,MAAIH,WAAW,CAACM,kBAAD,CAAf,EAAqC;AACnC,WAAO,IAAP;AACD;;AAED,MAAIC,eAAe,GAAGC,kBAAkB,CAACF,kBAAD,EAAqBF,sBAArB,CAAxC;;AAEA,MAAIK,KAAK,CAACC,OAAN,CAAcH,eAAd,CAAJ,EAAoC;AAClC,WAAOA,eAAe,CAAC,CAAD,CAAtB;AACD;;AAED,SAAOA,eAAP;AACD;AACD;;;;;;;;;;AAUA,SAASC,kBAAT,CAA4BF,kBAA5B,EAAgDF,sBAAhD,EAAwE;AACtE,MAAIO,2BAA2B,GAAGL,kBAAlC;AACAT,EAAAA,SAAS,CAACE,mBAAmB,EAApB,EAAwB,UAAUa,SAAV,EAAqB;AACpDD,IAAAA,2BAA2B,GAAGC,SAAS,CAACN,kBAAD,EAAqBF,sBAArB,CAAvC;AACD,GAFQ,CAAT;AAGA,SAAOO,2BAAP;AACD","sourcesContent":["import { arrayEach } from './../helpers/array';\nimport { getLanguageDictionary } from './dictionariesManager';\nimport { getPhraseFormatters } from './phraseFormatters';\nimport { isUndefined } from '../helpers/mixed';\n/**\n * Get phrase for specified dictionary key.\n *\n * @param {String} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n * @param {String} dictionaryKey Constant which is dictionary key.\n * @param {*} argumentsForFormatters Arguments which will be handled by formatters.\n *\n * @returns {String}\n */\n// eslint-disable-next-line import/prefer-default-export\n\nexport function getTranslatedPhrase(languageCode, dictionaryKey, argumentsForFormatters) {\n  var languageDictionary = getLanguageDictionary(languageCode);\n\n  if (languageDictionary === null) {\n    return null;\n  }\n\n  var phrasePropositions = languageDictionary[dictionaryKey];\n\n  if (isUndefined(phrasePropositions)) {\n    return null;\n  }\n\n  var formattedPhrase = getFormattedPhrase(phrasePropositions, argumentsForFormatters);\n\n  if (Array.isArray(formattedPhrase)) {\n    return formattedPhrase[0];\n  }\n\n  return formattedPhrase;\n}\n/**\n * Get formatted phrase from phrases propositions for specified dictionary key.\n *\n * @private\n * @param {Array|string} phrasePropositions List of phrase propositions.\n * @param {*} argumentsForFormatters Arguments which will be handled by formatters.\n *\n * @returns {Array|string}\n */\n\nfunction getFormattedPhrase(phrasePropositions, argumentsForFormatters) {\n  var formattedPhrasePropositions = phrasePropositions;\n  arrayEach(getPhraseFormatters(), function (formatter) {\n    formattedPhrasePropositions = formatter(phrasePropositions, argumentsForFormatters);\n  });\n  return formattedPhrasePropositions;\n}"]},"metadata":{},"sourceType":"module"}