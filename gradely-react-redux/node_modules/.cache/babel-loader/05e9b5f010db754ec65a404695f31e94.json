{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport { objectEach, clone } from '../../helpers/object';\nimport { arrayEach } from '../../helpers/array';\nimport { rangeEach } from '../../helpers/number';\nimport { getAdditionalData, getEndDate, getStartDate, setEndDate, setStartDate } from './utils';\n/**\n * This class handles the data-related calculations for the GanttChart plugin.\n *\n * @plugin GanttChart\n */\n\nvar GanttChartDataFeed = /*#__PURE__*/function () {\n  function GanttChartDataFeed(chartInstance, data, startDateColumn, endDateColumn, additionalData, asyncUpdates) {\n    _classCallCheck(this, GanttChartDataFeed);\n\n    this.data = data;\n    this.chartInstance = chartInstance;\n    this.chartPlugin = this.chartInstance.getPlugin('ganttChart');\n    this.hotSource = null;\n    this.sourceHooks = {};\n    this.ongoingAsync = false;\n    this.applyData(data, startDateColumn, endDateColumn, additionalData, asyncUpdates || false);\n  }\n  /**\n   * Parse data accordingly to it's type (HOT instance / data object).\n   *\n   * @param {Object} data The source Handsontable instance or a data object.\n   * @param {Number} startDateColumn Index of the column containing the start dates.\n   * @param {Number} endDateColumn Index of the column containing the end dates.\n   * @param {Object} additionalData Object containing column and label information about additional data passed to the Gantt Plugin.\n   * @param {Boolean} asyncUpdates If set to true, the source instance updates will be applied asynchronously.\n   */\n\n\n  _createClass(GanttChartDataFeed, [{\n    key: \"applyData\",\n    value: function applyData(data, startDateColumn, endDateColumn, additionalData, asyncUpdates) {\n      if (Object.prototype.toString.call(data) === '[object Array]') {\n        if (data.length > 1) {\n          this.chartInstance.alter('insert_row', 0, data.length - 1, \"\".concat(this.pluginName, \".loadData\"));\n        }\n\n        this.loadData(data);\n      } else if (data instanceof this.chartInstance.constructor) {\n        var sourceRowCount = data.countRows();\n\n        if (sourceRowCount > 1) {\n          this.chartInstance.alter('insert_row', 0, sourceRowCount - 1, \"\".concat(this.pluginName, \".loadData\"));\n        }\n\n        this.bindWithHotInstance(data, startDateColumn, endDateColumn, additionalData, asyncUpdates);\n      }\n    }\n    /**\n     * Make another Handsontable instance be a live feed for the gantt chart.\n     *\n     * @param {Object} instance The source Handsontable instance.\n     * @param {Number} startDateColumn Index of the column containing the start dates.\n     * @param {Number} endDateColumn Index of the column containing the end dates.\n     * @param {Object} additionalData Object containing column and label information about additional data passed to the\n     * Gantt Plugin. See the example for more details.\n     * @param {Boolean} asyncUpdates If set to true, the source instance updates will be applied asynchronously.\n     *\n     * @example\n     * ```js\n     * hot.getPlugin('ganttChart').bindWithHotInstance(sourceInstance, 4, 5, {\n     *  vendor: 0, // data labeled 'vendor' is stored in the first sourceInstance column.\n     *  format: 1, // data labeled 'format' is stored in the second sourceInstance column.\n     *  market: 2 // data labeled 'market' is stored in the third sourceInstance column.\n     * });\n     * ```\n     */\n\n  }, {\n    key: \"bindWithHotInstance\",\n    value: function bindWithHotInstance(instance, startDateColumn, endDateColumn, additionalData, asyncUpdates) {\n      this.hotSource = {\n        instance: instance,\n        startColumn: startDateColumn,\n        endColumn: endDateColumn,\n        additionalData: additionalData,\n        asyncUpdates: asyncUpdates\n      };\n      this.addSourceHotHooks();\n      this.asyncCall(this.updateFromSource);\n    }\n    /**\n     * Run the provided function asynchronously.\n     *\n     * @param {Function} func\n     */\n\n  }, {\n    key: \"asyncCall\",\n    value: function asyncCall(func) {\n      var _this = this;\n\n      if (!this.hotSource.asyncUpdates) {\n        func.call(this);\n        return;\n      }\n\n      this.asyncStart();\n      setTimeout(function () {\n        func.call(_this);\n\n        _this.asyncEnd();\n      }, 0);\n    }\n  }, {\n    key: \"asyncStart\",\n    value: function asyncStart() {\n      this.ongoingAsync = true;\n    }\n  }, {\n    key: \"asyncEnd\",\n    value: function asyncEnd() {\n      this.ongoingAsync = false;\n    }\n    /**\n     * Add hooks to the source Handsontable instance.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"addSourceHotHooks\",\n    value: function addSourceHotHooks() {\n      var _this2 = this;\n\n      this.sourceHooks = {\n        afterLoadData: function afterLoadData() {\n          return _this2.onAfterSourceLoadData();\n        },\n        afterChange: function afterChange(changes) {\n          return _this2.onAfterSourceChange(changes);\n        },\n        afterColumnSort: function afterColumnSort() {\n          return _this2.onAfterColumnSort();\n        }\n      };\n      this.hotSource.instance.addHook('afterLoadData', this.sourceHooks.afterLoadData);\n      this.hotSource.instance.addHook('afterChange', this.sourceHooks.afterChange);\n      this.hotSource.instance.addHook('afterColumnSort', this.sourceHooks.afterColumnSort);\n    }\n    /**\n     * Remove hooks from the source Handsontable instance.\n     *\n     * @private\n     * @param {Object} hotSource The source Handsontable instance object.\n     */\n\n  }, {\n    key: \"removeSourceHotHooks\",\n    value: function removeSourceHotHooks(hotSource) {\n      if (this.sourceHooks.afterLoadData) {\n        hotSource.instance.removeHook('afterLoadData', this.sourceHooks.afterLoadData);\n      }\n\n      if (this.sourceHooks.afterChange) {\n        hotSource.instance.removeHook('afterChange', this.sourceHooks.afterChange);\n      }\n\n      if (this.sourceHooks.afterColumnSort) {\n        hotSource.instance.removeHook('afterColumnSort', this.sourceHooks.afterColumnSort);\n      }\n    }\n    /**\n     * Get data from the source Handsontable instance.\n     *\n     * @param {Number} [row] Source Handsontable instance row.\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getDataFromSource\",\n    value: function getDataFromSource(row) {\n      var additionalObjectData = {};\n      var hotSource = this.hotSource;\n      var sourceHotRows;\n      var rangeBarData = [];\n\n      if (row === void 0) {\n        sourceHotRows = hotSource.instance.getData(0, 0, hotSource.instance.countRows() - 1, hotSource.instance.countCols() - 1);\n      } else {\n        sourceHotRows = [];\n        sourceHotRows[row] = hotSource.instance.getDataAtRow(row);\n      }\n\n      var _loop = function _loop(i, dataLength) {\n        additionalObjectData = {};\n        var currentRow = sourceHotRows[i];\n\n        if (currentRow[hotSource.startColumn] === null || currentRow[hotSource.startColumn] === '') {\n          /* eslint-disable no-continue */\n          return \"continue\";\n        }\n        /* eslint-disable no-loop-func */\n\n\n        objectEach(hotSource.additionalData, function (prop, j) {\n          additionalObjectData[j] = currentRow[prop];\n        });\n        rangeBarData.push([i, currentRow[hotSource.startColumn], currentRow[hotSource.endColumn], additionalObjectData, i]);\n      };\n\n      for (var i = row || 0, dataLength = sourceHotRows.length; i < (row ? row + 1 : dataLength); i++) {\n        var _ret = _loop(i, dataLength);\n\n        if (_ret === \"continue\") continue;\n      }\n\n      return rangeBarData;\n    }\n    /**\n     * Update the Gantt Chart-enabled Handsontable instance with the data from the source Handsontable instance.\n     *\n     * @param {Number} [row] Index of the row which needs updating.\n     */\n\n  }, {\n    key: \"updateFromSource\",\n    value: function updateFromSource(row) {\n      var dataFromSource = this.getDataFromSource(row);\n\n      if (!row && isNaN(row)) {\n        this.chartPlugin.clearRangeBars();\n        this.chartPlugin.clearRangeList();\n      }\n\n      this.loadData(dataFromSource);\n      this.chartInstance.render();\n    }\n    /**\n     * Load chart data to the Handsontable instance.\n     *\n     * @param {Array} data Array of objects containing the range data.\n     *\n     * @example\n     * ```js\n     * [\n     *  {\n     *    additionalData: {vendor: 'Vendor One', format: 'Posters', market: 'New York, NY'},\n     *    startDate: '1/5/2015',\n     *    endDate: '1/20/2015'\n     *  },\n     *  {\n     *    additionalData: {vendor: 'Vendor Two', format: 'Malls', market: 'Los Angeles, CA'},\n     *    startDate: '1/11/2015',\n     *    endDate: '1/29/2015'\n     *  }\n     * ]\n     * ```\n     */\n\n  }, {\n    key: \"loadData\",\n    value: function loadData(data) {\n      var _this3 = this;\n\n      var allBars = [];\n      arrayEach(data, function (bar, i) {\n        bar.row = i;\n\n        var bars = _this3.splitRangeIfNeeded(bar);\n\n        allBars = allBars.concat(bars);\n      });\n      arrayEach(allBars, function (bar) {\n        _this3.chartPlugin.addRangeBar(bar.row, getStartDate(bar), getEndDate(bar), getAdditionalData(bar));\n\n        delete bar.row;\n      });\n    }\n    /**\n     * Split the provided range into maximum-year-long chunks.\n     *\n     * @param {Object} bar The range bar object.\n     * @returns {Array} An array of slip chunks (or a single-element array, if no splicing occured)\n     */\n\n  }, {\n    key: \"splitRangeIfNeeded\",\n    value: function splitRangeIfNeeded(bar) {\n      var splitBars = [];\n      var startDate = new Date(getStartDate(bar));\n      var endDate = new Date(getEndDate(bar));\n\n      if (typeof startDate === 'string' || typeof endDate === 'string') {\n        return false;\n      }\n\n      var startYear = startDate.getFullYear();\n      var endYear = endDate.getFullYear();\n\n      if (startYear === endYear) {\n        return [bar];\n      }\n\n      rangeEach(startYear, endYear, function (year) {\n        var newBar = clone(bar);\n\n        if (year !== startYear) {\n          setStartDate(newBar, \"01/01/\".concat(year));\n        }\n\n        if (year !== endYear) {\n          setEndDate(newBar, \"12/31/\".concat(year));\n        }\n\n        splitBars.push(newBar);\n      });\n      return splitBars;\n    }\n    /**\n     * afterChange hook callback for the source Handsontable instance.\n     *\n     * @private\n     * @param {Array} changes List of changes.\n     */\n\n  }, {\n    key: \"onAfterSourceChange\",\n    value: function onAfterSourceChange(changes) {\n      var _this4 = this;\n\n      this.asyncCall(function () {\n        if (!changes) {\n          return;\n        }\n\n        var changesByRows = {};\n\n        for (var i = 0, changesLength = changes.length; i < changesLength; i++) {\n          var currentChange = changes[i];\n          var row = parseInt(currentChange[0], 10);\n          var col = parseInt(currentChange[1], 10);\n\n          if (!changesByRows[row]) {\n            changesByRows[row] = {};\n          }\n\n          changesByRows[row][col] = [currentChange[2], currentChange[3]];\n        }\n\n        objectEach(changesByRows, function (prop, i) {\n          var row = parseInt(i, 10);\n\n          if (_this4.chartPlugin.getRangeBarCoordinates(row)) {\n            _this4.chartPlugin.removeRangeBarByColumn(row, _this4.chartPlugin.rangeList[row][1]);\n          }\n\n          _this4.updateFromSource(i);\n        });\n      });\n    }\n    /**\n     * afterLoadData hook callback for the source Handsontable instance.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onAfterSourceLoadData\",\n    value: function onAfterSourceLoadData() {\n      var _this5 = this;\n\n      this.asyncCall(function () {\n        _this5.chartPlugin.removeAllRangeBars();\n\n        _this5.updateFromSource();\n      });\n    }\n    /**\n     * afterColumnSort hook callback for the source Handsontable instance.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onAfterColumnSort\",\n    value: function onAfterColumnSort() {\n      var _this6 = this;\n\n      this.asyncCall(function () {\n        _this6.chartPlugin.removeAllRangeBars();\n\n        _this6.updateFromSource();\n      });\n    }\n  }]);\n\n  return GanttChartDataFeed;\n}();\n\nexport default GanttChartDataFeed;","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/node_modules/handsontable/es/plugins/ganttChart/ganttChartDataFeed.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","objectEach","clone","arrayEach","rangeEach","getAdditionalData","getEndDate","getStartDate","setEndDate","setStartDate","GanttChartDataFeed","chartInstance","data","startDateColumn","endDateColumn","additionalData","asyncUpdates","chartPlugin","getPlugin","hotSource","sourceHooks","ongoingAsync","applyData","value","toString","call","alter","concat","pluginName","loadData","constructor","sourceRowCount","countRows","bindWithHotInstance","startColumn","endColumn","addSourceHotHooks","asyncCall","updateFromSource","func","_this","asyncStart","setTimeout","asyncEnd","_this2","afterLoadData","onAfterSourceLoadData","afterChange","changes","onAfterSourceChange","afterColumnSort","onAfterColumnSort","addHook","removeSourceHotHooks","removeHook","getDataFromSource","row","additionalObjectData","sourceHotRows","rangeBarData","getData","countCols","getDataAtRow","_loop","dataLength","currentRow","prop","j","push","_ret","dataFromSource","isNaN","clearRangeBars","clearRangeList","render","_this3","allBars","bar","bars","splitRangeIfNeeded","addRangeBar","splitBars","startDate","Date","endDate","startYear","getFullYear","endYear","year","newBar","_this4","changesByRows","changesLength","currentChange","parseInt","col","getRangeBarCoordinates","removeRangeBarByColumn","rangeList","_this5","removeAllRangeBars","_this6"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.regexp.to-string\";\nimport \"core-js/modules/web.timers\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { objectEach, clone } from '../../helpers/object';\nimport { arrayEach } from '../../helpers/array';\nimport { rangeEach } from '../../helpers/number';\nimport { getAdditionalData, getEndDate, getStartDate, setEndDate, setStartDate } from './utils';\n/**\n * This class handles the data-related calculations for the GanttChart plugin.\n *\n * @plugin GanttChart\n */\n\nvar GanttChartDataFeed =\n/*#__PURE__*/\nfunction () {\n  function GanttChartDataFeed(chartInstance, data, startDateColumn, endDateColumn, additionalData, asyncUpdates) {\n    _classCallCheck(this, GanttChartDataFeed);\n\n    this.data = data;\n    this.chartInstance = chartInstance;\n    this.chartPlugin = this.chartInstance.getPlugin('ganttChart');\n    this.hotSource = null;\n    this.sourceHooks = {};\n    this.ongoingAsync = false;\n    this.applyData(data, startDateColumn, endDateColumn, additionalData, asyncUpdates || false);\n  }\n  /**\n   * Parse data accordingly to it's type (HOT instance / data object).\n   *\n   * @param {Object} data The source Handsontable instance or a data object.\n   * @param {Number} startDateColumn Index of the column containing the start dates.\n   * @param {Number} endDateColumn Index of the column containing the end dates.\n   * @param {Object} additionalData Object containing column and label information about additional data passed to the Gantt Plugin.\n   * @param {Boolean} asyncUpdates If set to true, the source instance updates will be applied asynchronously.\n   */\n\n\n  _createClass(GanttChartDataFeed, [{\n    key: \"applyData\",\n    value: function applyData(data, startDateColumn, endDateColumn, additionalData, asyncUpdates) {\n      if (Object.prototype.toString.call(data) === '[object Array]') {\n        if (data.length > 1) {\n          this.chartInstance.alter('insert_row', 0, data.length - 1, \"\".concat(this.pluginName, \".loadData\"));\n        }\n\n        this.loadData(data);\n      } else if (data instanceof this.chartInstance.constructor) {\n        var sourceRowCount = data.countRows();\n\n        if (sourceRowCount > 1) {\n          this.chartInstance.alter('insert_row', 0, sourceRowCount - 1, \"\".concat(this.pluginName, \".loadData\"));\n        }\n\n        this.bindWithHotInstance(data, startDateColumn, endDateColumn, additionalData, asyncUpdates);\n      }\n    }\n    /**\n     * Make another Handsontable instance be a live feed for the gantt chart.\n     *\n     * @param {Object} instance The source Handsontable instance.\n     * @param {Number} startDateColumn Index of the column containing the start dates.\n     * @param {Number} endDateColumn Index of the column containing the end dates.\n     * @param {Object} additionalData Object containing column and label information about additional data passed to the\n     * Gantt Plugin. See the example for more details.\n     * @param {Boolean} asyncUpdates If set to true, the source instance updates will be applied asynchronously.\n     *\n     * @example\n     * ```js\n     * hot.getPlugin('ganttChart').bindWithHotInstance(sourceInstance, 4, 5, {\n     *  vendor: 0, // data labeled 'vendor' is stored in the first sourceInstance column.\n     *  format: 1, // data labeled 'format' is stored in the second sourceInstance column.\n     *  market: 2 // data labeled 'market' is stored in the third sourceInstance column.\n     * });\n     * ```\n     */\n\n  }, {\n    key: \"bindWithHotInstance\",\n    value: function bindWithHotInstance(instance, startDateColumn, endDateColumn, additionalData, asyncUpdates) {\n      this.hotSource = {\n        instance: instance,\n        startColumn: startDateColumn,\n        endColumn: endDateColumn,\n        additionalData: additionalData,\n        asyncUpdates: asyncUpdates\n      };\n      this.addSourceHotHooks();\n      this.asyncCall(this.updateFromSource);\n    }\n    /**\n     * Run the provided function asynchronously.\n     *\n     * @param {Function} func\n     */\n\n  }, {\n    key: \"asyncCall\",\n    value: function asyncCall(func) {\n      var _this = this;\n\n      if (!this.hotSource.asyncUpdates) {\n        func.call(this);\n        return;\n      }\n\n      this.asyncStart();\n      setTimeout(function () {\n        func.call(_this);\n\n        _this.asyncEnd();\n      }, 0);\n    }\n  }, {\n    key: \"asyncStart\",\n    value: function asyncStart() {\n      this.ongoingAsync = true;\n    }\n  }, {\n    key: \"asyncEnd\",\n    value: function asyncEnd() {\n      this.ongoingAsync = false;\n    }\n    /**\n     * Add hooks to the source Handsontable instance.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"addSourceHotHooks\",\n    value: function addSourceHotHooks() {\n      var _this2 = this;\n\n      this.sourceHooks = {\n        afterLoadData: function afterLoadData() {\n          return _this2.onAfterSourceLoadData();\n        },\n        afterChange: function afterChange(changes) {\n          return _this2.onAfterSourceChange(changes);\n        },\n        afterColumnSort: function afterColumnSort() {\n          return _this2.onAfterColumnSort();\n        }\n      };\n      this.hotSource.instance.addHook('afterLoadData', this.sourceHooks.afterLoadData);\n      this.hotSource.instance.addHook('afterChange', this.sourceHooks.afterChange);\n      this.hotSource.instance.addHook('afterColumnSort', this.sourceHooks.afterColumnSort);\n    }\n    /**\n     * Remove hooks from the source Handsontable instance.\n     *\n     * @private\n     * @param {Object} hotSource The source Handsontable instance object.\n     */\n\n  }, {\n    key: \"removeSourceHotHooks\",\n    value: function removeSourceHotHooks(hotSource) {\n      if (this.sourceHooks.afterLoadData) {\n        hotSource.instance.removeHook('afterLoadData', this.sourceHooks.afterLoadData);\n      }\n\n      if (this.sourceHooks.afterChange) {\n        hotSource.instance.removeHook('afterChange', this.sourceHooks.afterChange);\n      }\n\n      if (this.sourceHooks.afterColumnSort) {\n        hotSource.instance.removeHook('afterColumnSort', this.sourceHooks.afterColumnSort);\n      }\n    }\n    /**\n     * Get data from the source Handsontable instance.\n     *\n     * @param {Number} [row] Source Handsontable instance row.\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getDataFromSource\",\n    value: function getDataFromSource(row) {\n      var additionalObjectData = {};\n      var hotSource = this.hotSource;\n      var sourceHotRows;\n      var rangeBarData = [];\n\n      if (row === void 0) {\n        sourceHotRows = hotSource.instance.getData(0, 0, hotSource.instance.countRows() - 1, hotSource.instance.countCols() - 1);\n      } else {\n        sourceHotRows = [];\n        sourceHotRows[row] = hotSource.instance.getDataAtRow(row);\n      }\n\n      var _loop = function _loop(i, dataLength) {\n        additionalObjectData = {};\n        var currentRow = sourceHotRows[i];\n\n        if (currentRow[hotSource.startColumn] === null || currentRow[hotSource.startColumn] === '') {\n          /* eslint-disable no-continue */\n          return \"continue\";\n        }\n        /* eslint-disable no-loop-func */\n\n\n        objectEach(hotSource.additionalData, function (prop, j) {\n          additionalObjectData[j] = currentRow[prop];\n        });\n        rangeBarData.push([i, currentRow[hotSource.startColumn], currentRow[hotSource.endColumn], additionalObjectData, i]);\n      };\n\n      for (var i = row || 0, dataLength = sourceHotRows.length; i < (row ? row + 1 : dataLength); i++) {\n        var _ret = _loop(i, dataLength);\n\n        if (_ret === \"continue\") continue;\n      }\n\n      return rangeBarData;\n    }\n    /**\n     * Update the Gantt Chart-enabled Handsontable instance with the data from the source Handsontable instance.\n     *\n     * @param {Number} [row] Index of the row which needs updating.\n     */\n\n  }, {\n    key: \"updateFromSource\",\n    value: function updateFromSource(row) {\n      var dataFromSource = this.getDataFromSource(row);\n\n      if (!row && isNaN(row)) {\n        this.chartPlugin.clearRangeBars();\n        this.chartPlugin.clearRangeList();\n      }\n\n      this.loadData(dataFromSource);\n      this.chartInstance.render();\n    }\n    /**\n     * Load chart data to the Handsontable instance.\n     *\n     * @param {Array} data Array of objects containing the range data.\n     *\n     * @example\n     * ```js\n     * [\n     *  {\n     *    additionalData: {vendor: 'Vendor One', format: 'Posters', market: 'New York, NY'},\n     *    startDate: '1/5/2015',\n     *    endDate: '1/20/2015'\n     *  },\n     *  {\n     *    additionalData: {vendor: 'Vendor Two', format: 'Malls', market: 'Los Angeles, CA'},\n     *    startDate: '1/11/2015',\n     *    endDate: '1/29/2015'\n     *  }\n     * ]\n     * ```\n     */\n\n  }, {\n    key: \"loadData\",\n    value: function loadData(data) {\n      var _this3 = this;\n\n      var allBars = [];\n      arrayEach(data, function (bar, i) {\n        bar.row = i;\n\n        var bars = _this3.splitRangeIfNeeded(bar);\n\n        allBars = allBars.concat(bars);\n      });\n      arrayEach(allBars, function (bar) {\n        _this3.chartPlugin.addRangeBar(bar.row, getStartDate(bar), getEndDate(bar), getAdditionalData(bar));\n\n        delete bar.row;\n      });\n    }\n    /**\n     * Split the provided range into maximum-year-long chunks.\n     *\n     * @param {Object} bar The range bar object.\n     * @returns {Array} An array of slip chunks (or a single-element array, if no splicing occured)\n     */\n\n  }, {\n    key: \"splitRangeIfNeeded\",\n    value: function splitRangeIfNeeded(bar) {\n      var splitBars = [];\n      var startDate = new Date(getStartDate(bar));\n      var endDate = new Date(getEndDate(bar));\n\n      if (typeof startDate === 'string' || typeof endDate === 'string') {\n        return false;\n      }\n\n      var startYear = startDate.getFullYear();\n      var endYear = endDate.getFullYear();\n\n      if (startYear === endYear) {\n        return [bar];\n      }\n\n      rangeEach(startYear, endYear, function (year) {\n        var newBar = clone(bar);\n\n        if (year !== startYear) {\n          setStartDate(newBar, \"01/01/\".concat(year));\n        }\n\n        if (year !== endYear) {\n          setEndDate(newBar, \"12/31/\".concat(year));\n        }\n\n        splitBars.push(newBar);\n      });\n      return splitBars;\n    }\n    /**\n     * afterChange hook callback for the source Handsontable instance.\n     *\n     * @private\n     * @param {Array} changes List of changes.\n     */\n\n  }, {\n    key: \"onAfterSourceChange\",\n    value: function onAfterSourceChange(changes) {\n      var _this4 = this;\n\n      this.asyncCall(function () {\n        if (!changes) {\n          return;\n        }\n\n        var changesByRows = {};\n\n        for (var i = 0, changesLength = changes.length; i < changesLength; i++) {\n          var currentChange = changes[i];\n          var row = parseInt(currentChange[0], 10);\n          var col = parseInt(currentChange[1], 10);\n\n          if (!changesByRows[row]) {\n            changesByRows[row] = {};\n          }\n\n          changesByRows[row][col] = [currentChange[2], currentChange[3]];\n        }\n\n        objectEach(changesByRows, function (prop, i) {\n          var row = parseInt(i, 10);\n\n          if (_this4.chartPlugin.getRangeBarCoordinates(row)) {\n            _this4.chartPlugin.removeRangeBarByColumn(row, _this4.chartPlugin.rangeList[row][1]);\n          }\n\n          _this4.updateFromSource(i);\n        });\n      });\n    }\n    /**\n     * afterLoadData hook callback for the source Handsontable instance.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onAfterSourceLoadData\",\n    value: function onAfterSourceLoadData() {\n      var _this5 = this;\n\n      this.asyncCall(function () {\n        _this5.chartPlugin.removeAllRangeBars();\n\n        _this5.updateFromSource();\n      });\n    }\n    /**\n     * afterColumnSort hook callback for the source Handsontable instance.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onAfterColumnSort\",\n    value: function onAfterColumnSort() {\n      var _this6 = this;\n\n      this.asyncCall(function () {\n        _this6.chartPlugin.removeAllRangeBars();\n\n        _this6.updateFromSource();\n      });\n    }\n  }]);\n\n  return GanttChartDataFeed;\n}();\n\nexport default GanttChartDataFeed;"]},"metadata":{},"sourceType":"module"}