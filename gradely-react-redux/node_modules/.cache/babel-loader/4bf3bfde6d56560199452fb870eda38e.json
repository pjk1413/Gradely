{"ast":null,"code":"import { isRightClick as isRightClickEvent, isLeftClick as isLeftClickEvent } from './../helpers/dom/event';\nimport { CellCoords } from './../3rdparty/walkontable/src';\n/**\n * MouseDown handler.\n *\n * @param {Object} options\n * @param {Boolean} options.isShiftKey The flag which indicates if the shift key is pressed.\n * @param {Boolean} options.isLeftClick The flag which indicates if the left mouse button is pressed.\n * @param {Boolean} options.isRightClick The flag which indicates if the right mouse button is pressed.\n * @param {CellRange} options.coords The CellCoords object with defined visual coordinates.\n * @param {Selection} options.selection The Selection class instance.\n * @param {Object} options.controller An object with keys `row`, `column`, `cell` which indicate what\n *                                    operation will be performed in later selection stages.\n */\n\nexport function mouseDown(_ref) {\n  var isShiftKey = _ref.isShiftKey,\n      isLeftClick = _ref.isLeftClick,\n      isRightClick = _ref.isRightClick,\n      coords = _ref.coords,\n      selection = _ref.selection,\n      controller = _ref.controller;\n  var currentSelection = selection.isSelected() ? selection.getSelectedRange().current() : null;\n  var selectedCorner = selection.isSelectedByCorner();\n  var selectedRow = selection.isSelectedByRowHeader();\n\n  if (isShiftKey && currentSelection) {\n    if (coords.row >= 0 && coords.col >= 0 && !controller.cells) {\n      selection.setRangeEnd(coords);\n    } else if ((selectedCorner || selectedRow) && coords.row >= 0 && coords.col >= 0 && !controller.cells) {\n      selection.setRangeEnd(new CellCoords(coords.row, coords.col));\n    } else if (selectedCorner && coords.row < 0 && !controller.column) {\n      selection.setRangeEnd(new CellCoords(currentSelection.to.row, coords.col));\n    } else if (selectedRow && coords.col < 0 && !controller.row) {\n      selection.setRangeEnd(new CellCoords(coords.row, currentSelection.to.col));\n    } else if ((!selectedCorner && !selectedRow && coords.col < 0 || selectedCorner && coords.col < 0) && !controller.row) {\n      selection.selectRows(currentSelection.from.row, coords.row);\n    } else if ((!selectedCorner && !selectedRow && coords.row < 0 || selectedRow && coords.row < 0) && !controller.column) {\n      selection.selectColumns(currentSelection.from.col, coords.col);\n    }\n  } else {\n    var newCoord = new CellCoords(coords.row, coords.col);\n\n    if (newCoord.row < 0) {\n      newCoord.row = 0;\n    }\n\n    if (newCoord.col < 0) {\n      newCoord.col = 0;\n    }\n\n    var allowRightClickSelection = !selection.inInSelection(newCoord);\n    var performSelection = isLeftClick || isRightClick && allowRightClickSelection; // clicked row header and when some column was selected\n\n    if (coords.row < 0 && coords.col >= 0 && !controller.column) {\n      if (performSelection) {\n        selection.selectColumns(coords.col);\n      } // clicked column header and when some row was selected\n\n    } else if (coords.col < 0 && coords.row >= 0 && !controller.row) {\n      if (performSelection) {\n        selection.selectRows(coords.row);\n      }\n    } else if (coords.col >= 0 && coords.row >= 0 && !controller.cells) {\n      if (performSelection) {\n        selection.setRangeStart(coords);\n      }\n    } else if (coords.col < 0 && coords.row < 0) {\n      selection.setRangeStart(coords);\n    }\n  }\n}\n/**\n * MouseOver handler.\n *\n * @param {Object} options\n * @param {Boolean} options.isLeftClick\n * @param {CellRange} options.coords The CellCoords object with defined visual coordinates.\n * @param {Selection} options.selection The Selection class instance.\n * @param {Object} options.controller An object with keys `row`, `column`, `cell` which indicate what\n *                                    operation will be performed in later selection stages.\n */\n\nexport function mouseOver(_ref2) {\n  var isLeftClick = _ref2.isLeftClick,\n      coords = _ref2.coords,\n      selection = _ref2.selection,\n      controller = _ref2.controller;\n\n  if (!isLeftClick) {\n    return;\n  }\n\n  var selectedRow = selection.isSelectedByRowHeader();\n  var selectedColumn = selection.isSelectedByColumnHeader();\n  var countCols = selection.tableProps.countCols();\n  var countRows = selection.tableProps.countRows();\n\n  if (selectedColumn && !controller.column) {\n    selection.setRangeEnd(new CellCoords(countRows - 1, coords.col));\n  } else if (selectedRow && !controller.row) {\n    selection.setRangeEnd(new CellCoords(coords.row, countCols - 1));\n  } else if (!controller.cell) {\n    selection.setRangeEnd(coords);\n  }\n}\nvar handlers = new Map([['mousedown', mouseDown], ['mouseover', mouseOver], ['touchstart', mouseDown]]);\n/**\n * Mouse handler for selection functionality.\n *\n * @param {Event} event An native event to handle.\n * @param {Object} options\n * @param {CellRange} options.coords The CellCoords object with defined visual coordinates.\n * @param {Selection} options.selection The Selection class instance.\n * @param {Object} options.controller An object with keys `row`, `column`, `cell` which indicate what\n *                                    operation will be performed in later selection stages.\n */\n\nexport function handleMouseEvent(event, _ref3) {\n  var coords = _ref3.coords,\n      selection = _ref3.selection,\n      controller = _ref3.controller;\n  handlers.get(event.type)({\n    coords: coords,\n    selection: selection,\n    controller: controller,\n    isShiftKey: event.shiftKey,\n    isLeftClick: isLeftClickEvent(event) || event.type === 'touchstart',\n    isRightClick: isRightClickEvent(event)\n  });\n}","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/node_modules/handsontable/es/selection/mouseEventHandler.js"],"names":["isRightClick","isRightClickEvent","isLeftClick","isLeftClickEvent","CellCoords","mouseDown","_ref","isShiftKey","coords","selection","controller","currentSelection","isSelected","getSelectedRange","current","selectedCorner","isSelectedByCorner","selectedRow","isSelectedByRowHeader","row","col","cells","setRangeEnd","column","to","selectRows","from","selectColumns","newCoord","allowRightClickSelection","inInSelection","performSelection","setRangeStart","mouseOver","_ref2","selectedColumn","isSelectedByColumnHeader","countCols","tableProps","countRows","cell","handlers","Map","handleMouseEvent","event","_ref3","get","type","shiftKey"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.map\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/web.dom-collections.iterator\";\nimport { isRightClick as isRightClickEvent, isLeftClick as isLeftClickEvent } from './../helpers/dom/event';\nimport { CellCoords } from './../3rdparty/walkontable/src';\n/**\n * MouseDown handler.\n *\n * @param {Object} options\n * @param {Boolean} options.isShiftKey The flag which indicates if the shift key is pressed.\n * @param {Boolean} options.isLeftClick The flag which indicates if the left mouse button is pressed.\n * @param {Boolean} options.isRightClick The flag which indicates if the right mouse button is pressed.\n * @param {CellRange} options.coords The CellCoords object with defined visual coordinates.\n * @param {Selection} options.selection The Selection class instance.\n * @param {Object} options.controller An object with keys `row`, `column`, `cell` which indicate what\n *                                    operation will be performed in later selection stages.\n */\n\nexport function mouseDown(_ref) {\n  var isShiftKey = _ref.isShiftKey,\n      isLeftClick = _ref.isLeftClick,\n      isRightClick = _ref.isRightClick,\n      coords = _ref.coords,\n      selection = _ref.selection,\n      controller = _ref.controller;\n  var currentSelection = selection.isSelected() ? selection.getSelectedRange().current() : null;\n  var selectedCorner = selection.isSelectedByCorner();\n  var selectedRow = selection.isSelectedByRowHeader();\n\n  if (isShiftKey && currentSelection) {\n    if (coords.row >= 0 && coords.col >= 0 && !controller.cells) {\n      selection.setRangeEnd(coords);\n    } else if ((selectedCorner || selectedRow) && coords.row >= 0 && coords.col >= 0 && !controller.cells) {\n      selection.setRangeEnd(new CellCoords(coords.row, coords.col));\n    } else if (selectedCorner && coords.row < 0 && !controller.column) {\n      selection.setRangeEnd(new CellCoords(currentSelection.to.row, coords.col));\n    } else if (selectedRow && coords.col < 0 && !controller.row) {\n      selection.setRangeEnd(new CellCoords(coords.row, currentSelection.to.col));\n    } else if ((!selectedCorner && !selectedRow && coords.col < 0 || selectedCorner && coords.col < 0) && !controller.row) {\n      selection.selectRows(currentSelection.from.row, coords.row);\n    } else if ((!selectedCorner && !selectedRow && coords.row < 0 || selectedRow && coords.row < 0) && !controller.column) {\n      selection.selectColumns(currentSelection.from.col, coords.col);\n    }\n  } else {\n    var newCoord = new CellCoords(coords.row, coords.col);\n\n    if (newCoord.row < 0) {\n      newCoord.row = 0;\n    }\n\n    if (newCoord.col < 0) {\n      newCoord.col = 0;\n    }\n\n    var allowRightClickSelection = !selection.inInSelection(newCoord);\n    var performSelection = isLeftClick || isRightClick && allowRightClickSelection; // clicked row header and when some column was selected\n\n    if (coords.row < 0 && coords.col >= 0 && !controller.column) {\n      if (performSelection) {\n        selection.selectColumns(coords.col);\n      } // clicked column header and when some row was selected\n\n    } else if (coords.col < 0 && coords.row >= 0 && !controller.row) {\n      if (performSelection) {\n        selection.selectRows(coords.row);\n      }\n    } else if (coords.col >= 0 && coords.row >= 0 && !controller.cells) {\n      if (performSelection) {\n        selection.setRangeStart(coords);\n      }\n    } else if (coords.col < 0 && coords.row < 0) {\n      selection.setRangeStart(coords);\n    }\n  }\n}\n/**\n * MouseOver handler.\n *\n * @param {Object} options\n * @param {Boolean} options.isLeftClick\n * @param {CellRange} options.coords The CellCoords object with defined visual coordinates.\n * @param {Selection} options.selection The Selection class instance.\n * @param {Object} options.controller An object with keys `row`, `column`, `cell` which indicate what\n *                                    operation will be performed in later selection stages.\n */\n\nexport function mouseOver(_ref2) {\n  var isLeftClick = _ref2.isLeftClick,\n      coords = _ref2.coords,\n      selection = _ref2.selection,\n      controller = _ref2.controller;\n\n  if (!isLeftClick) {\n    return;\n  }\n\n  var selectedRow = selection.isSelectedByRowHeader();\n  var selectedColumn = selection.isSelectedByColumnHeader();\n  var countCols = selection.tableProps.countCols();\n  var countRows = selection.tableProps.countRows();\n\n  if (selectedColumn && !controller.column) {\n    selection.setRangeEnd(new CellCoords(countRows - 1, coords.col));\n  } else if (selectedRow && !controller.row) {\n    selection.setRangeEnd(new CellCoords(coords.row, countCols - 1));\n  } else if (!controller.cell) {\n    selection.setRangeEnd(coords);\n  }\n}\nvar handlers = new Map([['mousedown', mouseDown], ['mouseover', mouseOver], ['touchstart', mouseDown]]);\n/**\n * Mouse handler for selection functionality.\n *\n * @param {Event} event An native event to handle.\n * @param {Object} options\n * @param {CellRange} options.coords The CellCoords object with defined visual coordinates.\n * @param {Selection} options.selection The Selection class instance.\n * @param {Object} options.controller An object with keys `row`, `column`, `cell` which indicate what\n *                                    operation will be performed in later selection stages.\n */\n\nexport function handleMouseEvent(event, _ref3) {\n  var coords = _ref3.coords,\n      selection = _ref3.selection,\n      controller = _ref3.controller;\n  handlers.get(event.type)({\n    coords: coords,\n    selection: selection,\n    controller: controller,\n    isShiftKey: event.shiftKey,\n    isLeftClick: isLeftClickEvent(event) || event.type === 'touchstart',\n    isRightClick: isRightClickEvent(event)\n  });\n}"]},"metadata":{},"sourceType":"module"}