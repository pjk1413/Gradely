{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport React from \"react\";\nimport * as PointMap from \"./point-map\";\nimport * as PointSet from \"./point-set\";\nimport * as Types from \"./types\";\nimport classnames from \"classnames\";\nimport { getCellDimensions } from \"./util\";\nimport \"./FloatingRect.css\";\n\nvar FloatingRect = function FloatingRect(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      top = _ref.top,\n      left = _ref.left,\n      className = _ref.className,\n      hidden = _ref.hidden;\n  return React.createElement(\"div\", {\n    className: classnames(\"FloatingRect\", {\n      hidden: hidden\n    }, className),\n    style: {\n      width: width,\n      height: height,\n      top: top,\n      left: left\n    }\n  });\n};\n\nvar getRangeDimensions = function getRangeDimensions(points, state) {\n  var _PointSet$reduce = PointSet.reduce(function (acc, point) {\n    var isOnEdge = PointSet.onEdge(points, point);\n    var dimensions = getCellDimensions(point, state);\n\n    if (dimensions) {\n      acc.width = isOnEdge.top ? acc.width + dimensions.width : acc.width;\n      acc.height = isOnEdge.left ? acc.height + dimensions.height : acc.height;\n      acc.left = isOnEdge.left && isOnEdge.top ? dimensions.left : acc.left;\n      acc.top = isOnEdge.left && isOnEdge.top ? dimensions.top : acc.top;\n    }\n\n    return acc;\n  }, points, {\n    left: 0,\n    top: 0,\n    width: 0,\n    height: 0\n  }),\n      width = _PointSet$reduce.width,\n      height = _PointSet$reduce.height,\n      left = _PointSet$reduce.left,\n      top = _PointSet$reduce.top;\n\n  return {\n    left: left,\n    top: top,\n    width: width,\n    height: height\n  };\n};\n\nexport var mapStateToProps = function mapStateToProps(cells) {\n  return function (state) {\n    return _objectSpread({}, getRangeDimensions(cells, state), {\n      hidden: PointSet.size(cells) === 0\n    });\n  };\n};\nexport default FloatingRect;","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/node_modules/react-spreadsheet/dist/FloatingRect.js"],"names":["_objectSpread","React","PointMap","PointSet","Types","classnames","getCellDimensions","FloatingRect","_ref","width","height","top","left","className","hidden","createElement","style","getRangeDimensions","points","state","_PointSet$reduce","reduce","acc","point","isOnEdge","onEdge","dimensions","mapStateToProps","cells","size"],"mappings":"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","sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport React from \"react\";\nimport * as PointMap from \"./point-map\";\nimport * as PointSet from \"./point-set\";\nimport * as Types from \"./types\";\nimport classnames from \"classnames\";\nimport { getCellDimensions } from \"./util\";\nimport \"./FloatingRect.css\";\n\nvar FloatingRect = function FloatingRect(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      top = _ref.top,\n      left = _ref.left,\n      className = _ref.className,\n      hidden = _ref.hidden;\n  return React.createElement(\"div\", {\n    className: classnames(\"FloatingRect\", {\n      hidden: hidden\n    }, className),\n    style: {\n      width: width,\n      height: height,\n      top: top,\n      left: left\n    }\n  });\n};\n\nvar getRangeDimensions = function getRangeDimensions(points, state) {\n  var _PointSet$reduce = PointSet.reduce(function (acc, point) {\n    var isOnEdge = PointSet.onEdge(points, point);\n    var dimensions = getCellDimensions(point, state);\n\n    if (dimensions) {\n      acc.width = isOnEdge.top ? acc.width + dimensions.width : acc.width;\n      acc.height = isOnEdge.left ? acc.height + dimensions.height : acc.height;\n      acc.left = isOnEdge.left && isOnEdge.top ? dimensions.left : acc.left;\n      acc.top = isOnEdge.left && isOnEdge.top ? dimensions.top : acc.top;\n    }\n\n    return acc;\n  }, points, {\n    left: 0,\n    top: 0,\n    width: 0,\n    height: 0\n  }),\n      width = _PointSet$reduce.width,\n      height = _PointSet$reduce.height,\n      left = _PointSet$reduce.left,\n      top = _PointSet$reduce.top;\n\n  return {\n    left: left,\n    top: top,\n    width: width,\n    height: height\n  };\n};\n\nexport var mapStateToProps = function mapStateToProps(cells) {\n  return function (state) {\n    return _objectSpread({}, getRangeDimensions(cells, state), {\n      hidden: PointSet.size(cells) === 0\n    });\n  };\n};\nexport default FloatingRect;"]},"metadata":{},"sourceType":"module"}