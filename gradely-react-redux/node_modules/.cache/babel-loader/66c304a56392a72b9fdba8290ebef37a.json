{"ast":null,"code":"import { empty, addClass } from './../helpers/dom/element';\nimport { equalsIgnoreCase } from './../helpers/string';\nimport EventManager from './../eventManager';\nimport { isKey } from './../helpers/unicode';\nimport { partial } from './../helpers/function';\nimport { stopImmediatePropagation, isImmediatePropagationStopped } from './../helpers/dom/event';\nimport { getRenderer } from './index';\nvar isListeningKeyDownEvent = new WeakMap();\nvar isCheckboxListenerAdded = new WeakMap();\nvar BAD_VALUE_CLASS = 'htBadValue';\n/**\n * Checkbox renderer\n *\n * @private\n * @param {Object} instance Handsontable instance\n * @param {Element} TD Table cell where to render\n * @param {Number} row\n * @param {Number} col\n * @param {String|Number} prop Row object property name\n * @param value Value to render (remember to escape unsafe HTML before inserting to DOM!)\n * @param {Object} cellProperties Cell properties (shared by cell renderer and editor)\n */\n\nfunction checkboxRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  var rootDocument = instance.rootDocument;\n\n  for (var _len = arguments.length, args = new Array(_len > 7 ? _len - 7 : 0), _key = 7; _key < _len; _key++) {\n    args[_key - 7] = arguments[_key];\n  }\n\n  getRenderer('base').apply(this, [instance, TD, row, col, prop, value, cellProperties].concat(args));\n  registerEvents(instance);\n  var input = createInput(rootDocument);\n  var labelOptions = cellProperties.label;\n  var badValue = false;\n\n  if (typeof cellProperties.checkedTemplate === 'undefined') {\n    cellProperties.checkedTemplate = true;\n  }\n\n  if (typeof cellProperties.uncheckedTemplate === 'undefined') {\n    cellProperties.uncheckedTemplate = false;\n  }\n\n  empty(TD); // TODO identify under what circumstances this line can be removed\n\n  if (value === cellProperties.checkedTemplate || equalsIgnoreCase(value, cellProperties.checkedTemplate)) {\n    input.checked = true;\n  } else if (value === cellProperties.uncheckedTemplate || equalsIgnoreCase(value, cellProperties.uncheckedTemplate)) {\n    input.checked = false;\n  } else if (value === null) {\n    // default value\n    addClass(input, 'noValue');\n  } else {\n    input.style.display = 'none';\n    addClass(input, BAD_VALUE_CLASS);\n    badValue = true;\n  }\n\n  input.setAttribute('data-row', row);\n  input.setAttribute('data-col', col);\n\n  if (!badValue && labelOptions) {\n    var labelText = '';\n\n    if (labelOptions.value) {\n      labelText = typeof labelOptions.value === 'function' ? labelOptions.value.call(this, row, col, prop, value) : labelOptions.value;\n    } else if (labelOptions.property) {\n      var labelValue = instance.getDataAtRowProp(row, labelOptions.property);\n      labelText = labelValue !== null ? labelValue : '';\n    }\n\n    var label = createLabel(rootDocument, labelText);\n\n    if (labelOptions.position === 'before') {\n      label.appendChild(input);\n    } else {\n      label.insertBefore(input, label.firstChild);\n    }\n\n    input = label;\n  }\n\n  TD.appendChild(input);\n\n  if (badValue) {\n    TD.appendChild(rootDocument.createTextNode('#bad-value#'));\n  }\n\n  if (!isListeningKeyDownEvent.has(instance)) {\n    isListeningKeyDownEvent.set(instance, true);\n    instance.addHook('beforeKeyDown', onBeforeKeyDown);\n  }\n  /**\n   * On before key down DOM listener.\n   *\n   * @private\n   * @param {Event} event\n   */\n\n\n  function onBeforeKeyDown(event) {\n    var toggleKeys = 'SPACE|ENTER';\n    var switchOffKeys = 'DELETE|BACKSPACE';\n    var isKeyCode = partial(isKey, event.keyCode);\n\n    if (!instance.getSettings().enterBeginsEditing && isKeyCode('ENTER')) {\n      return;\n    }\n\n    if (isKeyCode(\"\".concat(toggleKeys, \"|\").concat(switchOffKeys)) && !isImmediatePropagationStopped(event)) {\n      eachSelectedCheckboxCell(function () {\n        stopImmediatePropagation(event);\n        event.preventDefault();\n      });\n    }\n\n    if (isKeyCode(toggleKeys)) {\n      changeSelectedCheckboxesState();\n    }\n\n    if (isKeyCode(switchOffKeys)) {\n      changeSelectedCheckboxesState(true);\n    }\n  }\n  /**\n   * Change checkbox checked property\n   *\n   * @private\n   * @param {Boolean} [uncheckCheckbox=false]\n   */\n\n\n  function changeSelectedCheckboxesState() {\n    var uncheckCheckbox = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var selRange = instance.getSelectedRangeLast();\n\n    if (!selRange) {\n      return;\n    }\n\n    var _selRange$getTopLeftC = selRange.getTopLeftCorner(),\n        startRow = _selRange$getTopLeftC.row,\n        startColumn = _selRange$getTopLeftC.col;\n\n    var _selRange$getBottomRi = selRange.getBottomRightCorner(),\n        endRow = _selRange$getBottomRi.row,\n        endColumn = _selRange$getBottomRi.col;\n\n    var changes = [];\n\n    for (var visualRow = startRow; visualRow <= endRow; visualRow += 1) {\n      for (var visualColumn = startColumn; visualColumn <= endColumn; visualColumn += 1) {\n        var cachedCellProperties = instance.getCellMeta(visualRow, visualColumn);\n\n        if (cachedCellProperties.type !== 'checkbox') {\n          return;\n        }\n        /* eslint-disable no-continue */\n\n\n        if (cachedCellProperties.readOnly === true) {\n          continue;\n        }\n\n        if (typeof cachedCellProperties.checkedTemplate === 'undefined') {\n          cachedCellProperties.checkedTemplate = true;\n        }\n\n        if (typeof cachedCellProperties.uncheckedTemplate === 'undefined') {\n          cachedCellProperties.uncheckedTemplate = false;\n        }\n\n        var dataAtCell = instance.getDataAtCell(visualRow, visualColumn);\n\n        if (uncheckCheckbox === false) {\n          if ([cachedCellProperties.checkedTemplate, cachedCellProperties.checkedTemplate.toString()].includes(dataAtCell)) {\n            changes.push([visualRow, visualColumn, cachedCellProperties.uncheckedTemplate]);\n          } else if ([cachedCellProperties.uncheckedTemplate, cachedCellProperties.uncheckedTemplate.toString(), null, void 0].includes(dataAtCell)) {\n            changes.push([visualRow, visualColumn, cachedCellProperties.checkedTemplate]);\n          }\n        } else {\n          changes.push([visualRow, visualColumn, cachedCellProperties.uncheckedTemplate]);\n        }\n      }\n    }\n\n    if (changes.length > 0) {\n      instance.setDataAtCell(changes);\n    }\n  }\n  /**\n   * Call callback for each found selected cell with checkbox type.\n   *\n   * @private\n   * @param {Function} callback\n   */\n\n\n  function eachSelectedCheckboxCell(callback) {\n    var selRange = instance.getSelectedRangeLast();\n\n    if (!selRange) {\n      return;\n    }\n\n    var topLeft = selRange.getTopLeftCorner();\n    var bottomRight = selRange.getBottomRightCorner();\n\n    for (var visualRow = topLeft.row; visualRow <= bottomRight.row; visualRow++) {\n      for (var visualColumn = topLeft.col; visualColumn <= bottomRight.col; visualColumn++) {\n        var cachedCellProperties = instance.getCellMeta(visualRow, visualColumn);\n\n        if (cachedCellProperties.type !== 'checkbox') {\n          return;\n        }\n\n        var cell = instance.getCell(visualRow, visualColumn);\n\n        if (cell === null || cell === void 0) {\n          callback(visualRow, visualColumn, cachedCellProperties);\n        } else {\n          var checkboxes = cell.querySelectorAll('input[type=checkbox]');\n\n          if (checkboxes.length > 0 && !cachedCellProperties.readOnly) {\n            callback(checkboxes);\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Register checkbox listeners.\n *\n * @param {Handsontable} instance Handsontable instance.\n * @returns {EventManager}\n */\n\n\nfunction registerEvents(instance) {\n  var eventManager = isCheckboxListenerAdded.get(instance);\n\n  if (!eventManager) {\n    var rootElement = instance.rootElement;\n    eventManager = new EventManager(instance);\n    eventManager.addEventListener(rootElement, 'click', function (event) {\n      return onClick(event, instance);\n    });\n    eventManager.addEventListener(rootElement, 'mouseup', function (event) {\n      return onMouseUp(event, instance);\n    });\n    eventManager.addEventListener(rootElement, 'change', function (event) {\n      return onChange(event, instance);\n    });\n    isCheckboxListenerAdded.set(instance, eventManager);\n  }\n\n  return eventManager;\n}\n/**\n * Create input element.\n *\n * @param {Document} rootDocument\n * @returns {Node}\n */\n\n\nfunction createInput(rootDocument) {\n  var input = rootDocument.createElement('input');\n  input.className = 'htCheckboxRendererInput';\n  input.type = 'checkbox';\n  input.setAttribute('autocomplete', 'off');\n  input.setAttribute('tabindex', '-1');\n  return input.cloneNode(false);\n}\n/**\n * Create label element.\n *\n * @param {Document} rootDocument\n * @param {String} text\n * @returns {Node}\n */\n\n\nfunction createLabel(rootDocument, text) {\n  var label = rootDocument.createElement('label');\n  label.className = 'htCheckboxRendererLabel';\n  label.appendChild(rootDocument.createTextNode(text));\n  return label.cloneNode(true);\n}\n/**\n * `mouseup` callback.\n *\n * @private\n * @param {Event} event `mouseup` event.\n * @param {Object} instance Handsontable instance.\n */\n\n\nfunction onMouseUp(event, instance) {\n  if (!isCheckboxInput(event.target)) {\n    return;\n  }\n\n  setTimeout(instance.listen, 10);\n}\n/**\n * `click` callback.\n *\n * @private\n * @param {Event} event `click` event.\n * @param {Object} instance Handsontable instance.\n */\n\n\nfunction onClick(event, instance) {\n  if (!isCheckboxInput(event.target)) {\n    return false;\n  }\n\n  var row = parseInt(event.target.getAttribute('data-row'), 10);\n  var col = parseInt(event.target.getAttribute('data-col'), 10);\n  var cellProperties = instance.getCellMeta(row, col);\n\n  if (cellProperties.readOnly) {\n    event.preventDefault();\n  }\n}\n/**\n * `change` callback.\n *\n * @param {Event} event `change` event.\n * @param {Object} instance Handsontable instance.\n * @param {Object} cellProperties Reference to cell properties.\n * @returns {Boolean}\n */\n\n\nfunction onChange(event, instance) {\n  if (!isCheckboxInput(event.target)) {\n    return false;\n  }\n\n  var row = parseInt(event.target.getAttribute('data-row'), 10);\n  var col = parseInt(event.target.getAttribute('data-col'), 10);\n  var cellProperties = instance.getCellMeta(row, col);\n\n  if (!cellProperties.readOnly) {\n    var newCheckboxValue = null;\n\n    if (event.target.checked) {\n      newCheckboxValue = cellProperties.uncheckedTemplate === void 0 ? true : cellProperties.checkedTemplate;\n    } else {\n      newCheckboxValue = cellProperties.uncheckedTemplate === void 0 ? false : cellProperties.uncheckedTemplate;\n    }\n\n    instance.setDataAtCell(row, col, newCheckboxValue);\n  }\n}\n/**\n * Check if the provided element is the checkbox input.\n *\n * @private\n * @param {HTMLElement} element The element in question.\n * @returns {Boolean}\n */\n\n\nfunction isCheckboxInput(element) {\n  return element.tagName === 'INPUT' && element.getAttribute('type') === 'checkbox';\n}\n\nexport default checkboxRenderer;","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/node_modules/handsontable/es/renderers/checkboxRenderer.js"],"names":["empty","addClass","equalsIgnoreCase","EventManager","isKey","partial","stopImmediatePropagation","isImmediatePropagationStopped","getRenderer","isListeningKeyDownEvent","WeakMap","isCheckboxListenerAdded","BAD_VALUE_CLASS","checkboxRenderer","instance","TD","row","col","prop","value","cellProperties","rootDocument","_len","arguments","length","args","Array","_key","apply","concat","registerEvents","input","createInput","labelOptions","label","badValue","checkedTemplate","uncheckedTemplate","checked","style","display","setAttribute","labelText","call","property","labelValue","getDataAtRowProp","createLabel","position","appendChild","insertBefore","firstChild","createTextNode","has","set","addHook","onBeforeKeyDown","event","toggleKeys","switchOffKeys","isKeyCode","keyCode","getSettings","enterBeginsEditing","eachSelectedCheckboxCell","preventDefault","changeSelectedCheckboxesState","uncheckCheckbox","undefined","selRange","getSelectedRangeLast","_selRange$getTopLeftC","getTopLeftCorner","startRow","startColumn","_selRange$getBottomRi","getBottomRightCorner","endRow","endColumn","changes","visualRow","visualColumn","cachedCellProperties","getCellMeta","type","readOnly","dataAtCell","getDataAtCell","toString","includes","push","setDataAtCell","callback","topLeft","bottomRight","cell","getCell","checkboxes","querySelectorAll","eventManager","get","rootElement","addEventListener","onClick","onMouseUp","onChange","createElement","className","cloneNode","text","isCheckboxInput","target","setTimeout","listen","parseInt","getAttribute","newCheckboxValue","element","tagName"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.array.includes\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.regexp.to-string\";\nimport \"core-js/modules/es.string.includes\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/es.weak-map\";\nimport \"core-js/modules/web.dom-collections.iterator\";\nimport \"core-js/modules/web.timers\";\nimport { empty, addClass } from './../helpers/dom/element';\nimport { equalsIgnoreCase } from './../helpers/string';\nimport EventManager from './../eventManager';\nimport { isKey } from './../helpers/unicode';\nimport { partial } from './../helpers/function';\nimport { stopImmediatePropagation, isImmediatePropagationStopped } from './../helpers/dom/event';\nimport { getRenderer } from './index';\nvar isListeningKeyDownEvent = new WeakMap();\nvar isCheckboxListenerAdded = new WeakMap();\nvar BAD_VALUE_CLASS = 'htBadValue';\n/**\n * Checkbox renderer\n *\n * @private\n * @param {Object} instance Handsontable instance\n * @param {Element} TD Table cell where to render\n * @param {Number} row\n * @param {Number} col\n * @param {String|Number} prop Row object property name\n * @param value Value to render (remember to escape unsafe HTML before inserting to DOM!)\n * @param {Object} cellProperties Cell properties (shared by cell renderer and editor)\n */\n\nfunction checkboxRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  var rootDocument = instance.rootDocument;\n\n  for (var _len = arguments.length, args = new Array(_len > 7 ? _len - 7 : 0), _key = 7; _key < _len; _key++) {\n    args[_key - 7] = arguments[_key];\n  }\n\n  getRenderer('base').apply(this, [instance, TD, row, col, prop, value, cellProperties].concat(args));\n  registerEvents(instance);\n  var input = createInput(rootDocument);\n  var labelOptions = cellProperties.label;\n  var badValue = false;\n\n  if (typeof cellProperties.checkedTemplate === 'undefined') {\n    cellProperties.checkedTemplate = true;\n  }\n\n  if (typeof cellProperties.uncheckedTemplate === 'undefined') {\n    cellProperties.uncheckedTemplate = false;\n  }\n\n  empty(TD); // TODO identify under what circumstances this line can be removed\n\n  if (value === cellProperties.checkedTemplate || equalsIgnoreCase(value, cellProperties.checkedTemplate)) {\n    input.checked = true;\n  } else if (value === cellProperties.uncheckedTemplate || equalsIgnoreCase(value, cellProperties.uncheckedTemplate)) {\n    input.checked = false;\n  } else if (value === null) {\n    // default value\n    addClass(input, 'noValue');\n  } else {\n    input.style.display = 'none';\n    addClass(input, BAD_VALUE_CLASS);\n    badValue = true;\n  }\n\n  input.setAttribute('data-row', row);\n  input.setAttribute('data-col', col);\n\n  if (!badValue && labelOptions) {\n    var labelText = '';\n\n    if (labelOptions.value) {\n      labelText = typeof labelOptions.value === 'function' ? labelOptions.value.call(this, row, col, prop, value) : labelOptions.value;\n    } else if (labelOptions.property) {\n      var labelValue = instance.getDataAtRowProp(row, labelOptions.property);\n      labelText = labelValue !== null ? labelValue : '';\n    }\n\n    var label = createLabel(rootDocument, labelText);\n\n    if (labelOptions.position === 'before') {\n      label.appendChild(input);\n    } else {\n      label.insertBefore(input, label.firstChild);\n    }\n\n    input = label;\n  }\n\n  TD.appendChild(input);\n\n  if (badValue) {\n    TD.appendChild(rootDocument.createTextNode('#bad-value#'));\n  }\n\n  if (!isListeningKeyDownEvent.has(instance)) {\n    isListeningKeyDownEvent.set(instance, true);\n    instance.addHook('beforeKeyDown', onBeforeKeyDown);\n  }\n  /**\n   * On before key down DOM listener.\n   *\n   * @private\n   * @param {Event} event\n   */\n\n\n  function onBeforeKeyDown(event) {\n    var toggleKeys = 'SPACE|ENTER';\n    var switchOffKeys = 'DELETE|BACKSPACE';\n    var isKeyCode = partial(isKey, event.keyCode);\n\n    if (!instance.getSettings().enterBeginsEditing && isKeyCode('ENTER')) {\n      return;\n    }\n\n    if (isKeyCode(\"\".concat(toggleKeys, \"|\").concat(switchOffKeys)) && !isImmediatePropagationStopped(event)) {\n      eachSelectedCheckboxCell(function () {\n        stopImmediatePropagation(event);\n        event.preventDefault();\n      });\n    }\n\n    if (isKeyCode(toggleKeys)) {\n      changeSelectedCheckboxesState();\n    }\n\n    if (isKeyCode(switchOffKeys)) {\n      changeSelectedCheckboxesState(true);\n    }\n  }\n  /**\n   * Change checkbox checked property\n   *\n   * @private\n   * @param {Boolean} [uncheckCheckbox=false]\n   */\n\n\n  function changeSelectedCheckboxesState() {\n    var uncheckCheckbox = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var selRange = instance.getSelectedRangeLast();\n\n    if (!selRange) {\n      return;\n    }\n\n    var _selRange$getTopLeftC = selRange.getTopLeftCorner(),\n        startRow = _selRange$getTopLeftC.row,\n        startColumn = _selRange$getTopLeftC.col;\n\n    var _selRange$getBottomRi = selRange.getBottomRightCorner(),\n        endRow = _selRange$getBottomRi.row,\n        endColumn = _selRange$getBottomRi.col;\n\n    var changes = [];\n\n    for (var visualRow = startRow; visualRow <= endRow; visualRow += 1) {\n      for (var visualColumn = startColumn; visualColumn <= endColumn; visualColumn += 1) {\n        var cachedCellProperties = instance.getCellMeta(visualRow, visualColumn);\n\n        if (cachedCellProperties.type !== 'checkbox') {\n          return;\n        }\n        /* eslint-disable no-continue */\n\n\n        if (cachedCellProperties.readOnly === true) {\n          continue;\n        }\n\n        if (typeof cachedCellProperties.checkedTemplate === 'undefined') {\n          cachedCellProperties.checkedTemplate = true;\n        }\n\n        if (typeof cachedCellProperties.uncheckedTemplate === 'undefined') {\n          cachedCellProperties.uncheckedTemplate = false;\n        }\n\n        var dataAtCell = instance.getDataAtCell(visualRow, visualColumn);\n\n        if (uncheckCheckbox === false) {\n          if ([cachedCellProperties.checkedTemplate, cachedCellProperties.checkedTemplate.toString()].includes(dataAtCell)) {\n            changes.push([visualRow, visualColumn, cachedCellProperties.uncheckedTemplate]);\n          } else if ([cachedCellProperties.uncheckedTemplate, cachedCellProperties.uncheckedTemplate.toString(), null, void 0].includes(dataAtCell)) {\n            changes.push([visualRow, visualColumn, cachedCellProperties.checkedTemplate]);\n          }\n        } else {\n          changes.push([visualRow, visualColumn, cachedCellProperties.uncheckedTemplate]);\n        }\n      }\n    }\n\n    if (changes.length > 0) {\n      instance.setDataAtCell(changes);\n    }\n  }\n  /**\n   * Call callback for each found selected cell with checkbox type.\n   *\n   * @private\n   * @param {Function} callback\n   */\n\n\n  function eachSelectedCheckboxCell(callback) {\n    var selRange = instance.getSelectedRangeLast();\n\n    if (!selRange) {\n      return;\n    }\n\n    var topLeft = selRange.getTopLeftCorner();\n    var bottomRight = selRange.getBottomRightCorner();\n\n    for (var visualRow = topLeft.row; visualRow <= bottomRight.row; visualRow++) {\n      for (var visualColumn = topLeft.col; visualColumn <= bottomRight.col; visualColumn++) {\n        var cachedCellProperties = instance.getCellMeta(visualRow, visualColumn);\n\n        if (cachedCellProperties.type !== 'checkbox') {\n          return;\n        }\n\n        var cell = instance.getCell(visualRow, visualColumn);\n\n        if (cell === null || cell === void 0) {\n          callback(visualRow, visualColumn, cachedCellProperties);\n        } else {\n          var checkboxes = cell.querySelectorAll('input[type=checkbox]');\n\n          if (checkboxes.length > 0 && !cachedCellProperties.readOnly) {\n            callback(checkboxes);\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Register checkbox listeners.\n *\n * @param {Handsontable} instance Handsontable instance.\n * @returns {EventManager}\n */\n\n\nfunction registerEvents(instance) {\n  var eventManager = isCheckboxListenerAdded.get(instance);\n\n  if (!eventManager) {\n    var rootElement = instance.rootElement;\n    eventManager = new EventManager(instance);\n    eventManager.addEventListener(rootElement, 'click', function (event) {\n      return onClick(event, instance);\n    });\n    eventManager.addEventListener(rootElement, 'mouseup', function (event) {\n      return onMouseUp(event, instance);\n    });\n    eventManager.addEventListener(rootElement, 'change', function (event) {\n      return onChange(event, instance);\n    });\n    isCheckboxListenerAdded.set(instance, eventManager);\n  }\n\n  return eventManager;\n}\n/**\n * Create input element.\n *\n * @param {Document} rootDocument\n * @returns {Node}\n */\n\n\nfunction createInput(rootDocument) {\n  var input = rootDocument.createElement('input');\n  input.className = 'htCheckboxRendererInput';\n  input.type = 'checkbox';\n  input.setAttribute('autocomplete', 'off');\n  input.setAttribute('tabindex', '-1');\n  return input.cloneNode(false);\n}\n/**\n * Create label element.\n *\n * @param {Document} rootDocument\n * @param {String} text\n * @returns {Node}\n */\n\n\nfunction createLabel(rootDocument, text) {\n  var label = rootDocument.createElement('label');\n  label.className = 'htCheckboxRendererLabel';\n  label.appendChild(rootDocument.createTextNode(text));\n  return label.cloneNode(true);\n}\n/**\n * `mouseup` callback.\n *\n * @private\n * @param {Event} event `mouseup` event.\n * @param {Object} instance Handsontable instance.\n */\n\n\nfunction onMouseUp(event, instance) {\n  if (!isCheckboxInput(event.target)) {\n    return;\n  }\n\n  setTimeout(instance.listen, 10);\n}\n/**\n * `click` callback.\n *\n * @private\n * @param {Event} event `click` event.\n * @param {Object} instance Handsontable instance.\n */\n\n\nfunction onClick(event, instance) {\n  if (!isCheckboxInput(event.target)) {\n    return false;\n  }\n\n  var row = parseInt(event.target.getAttribute('data-row'), 10);\n  var col = parseInt(event.target.getAttribute('data-col'), 10);\n  var cellProperties = instance.getCellMeta(row, col);\n\n  if (cellProperties.readOnly) {\n    event.preventDefault();\n  }\n}\n/**\n * `change` callback.\n *\n * @param {Event} event `change` event.\n * @param {Object} instance Handsontable instance.\n * @param {Object} cellProperties Reference to cell properties.\n * @returns {Boolean}\n */\n\n\nfunction onChange(event, instance) {\n  if (!isCheckboxInput(event.target)) {\n    return false;\n  }\n\n  var row = parseInt(event.target.getAttribute('data-row'), 10);\n  var col = parseInt(event.target.getAttribute('data-col'), 10);\n  var cellProperties = instance.getCellMeta(row, col);\n\n  if (!cellProperties.readOnly) {\n    var newCheckboxValue = null;\n\n    if (event.target.checked) {\n      newCheckboxValue = cellProperties.uncheckedTemplate === void 0 ? true : cellProperties.checkedTemplate;\n    } else {\n      newCheckboxValue = cellProperties.uncheckedTemplate === void 0 ? false : cellProperties.uncheckedTemplate;\n    }\n\n    instance.setDataAtCell(row, col, newCheckboxValue);\n  }\n}\n/**\n * Check if the provided element is the checkbox input.\n *\n * @private\n * @param {HTMLElement} element The element in question.\n * @returns {Boolean}\n */\n\n\nfunction isCheckboxInput(element) {\n  return element.tagName === 'INPUT' && element.getAttribute('type') === 'checkbox';\n}\n\nexport default checkboxRenderer;"]},"metadata":{},"sourceType":"module"}