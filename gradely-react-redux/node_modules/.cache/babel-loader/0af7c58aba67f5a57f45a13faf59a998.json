{"ast":null,"code":"/**\n * Utility to register plugins and common namespace for keeping reference to all plugins classes\n */\nimport Hooks from './pluginHooks';\nimport { objectEach } from './helpers/object';\nimport { toUpperCaseFirst } from './helpers/string';\nvar registeredPlugins = new WeakMap();\n/**\n * Registers plugin under given name\n *\n * @param {String} pluginName\n * @param {Function} PluginClass\n */\n\nfunction registerPlugin(pluginName, PluginClass) {\n  var correctedPluginName = toUpperCaseFirst(pluginName);\n  Hooks.getSingleton().add('construct', function () {\n    if (!registeredPlugins.has(this)) {\n      registeredPlugins.set(this, {});\n    }\n\n    var holder = registeredPlugins.get(this);\n\n    if (!holder[correctedPluginName]) {\n      holder[correctedPluginName] = new PluginClass(this);\n    }\n  });\n  Hooks.getSingleton().add('afterDestroy', function () {\n    if (registeredPlugins.has(this)) {\n      var pluginsHolder = registeredPlugins.get(this);\n      objectEach(pluginsHolder, function (plugin) {\n        return plugin.destroy();\n      });\n      registeredPlugins.delete(this);\n    }\n  });\n}\n/**\n * @param {Object} instance\n * @param {String|Function} pluginName\n * @returns {Function} pluginClass Returns plugin instance if exists or `undefined` if not exists.\n */\n\n\nfunction getPlugin(instance, pluginName) {\n  if (typeof pluginName !== 'string') {\n    throw Error('Only strings can be passed as \"plugin\" parameter');\n  }\n\n  var _pluginName = toUpperCaseFirst(pluginName);\n\n  if (!registeredPlugins.has(instance) || !registeredPlugins.get(instance)[_pluginName]) {\n    return void 0;\n  }\n\n  return registeredPlugins.get(instance)[_pluginName];\n}\n/**\n * Get all registred plugins names for concrete Handsontable instance.\n *\n * @param {Object} hotInstance\n * @returns {Array}\n */\n\n\nfunction getRegistredPluginNames(hotInstance) {\n  return registeredPlugins.has(hotInstance) ? Object.keys(registeredPlugins.get(hotInstance)) : [];\n}\n/**\n * Get plugin name.\n *\n * @param {Object} hotInstance\n * @param {Object} plugin\n * @returns {String|null}\n */\n\n\nfunction getPluginName(hotInstance, plugin) {\n  var pluginName = null;\n\n  if (registeredPlugins.has(hotInstance)) {\n    objectEach(registeredPlugins.get(hotInstance), function (pluginInstance, name) {\n      if (pluginInstance === plugin) {\n        pluginName = name;\n      }\n    });\n  }\n\n  return pluginName;\n}\n\nexport { registerPlugin, getPlugin, getRegistredPluginNames, getPluginName };","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/node_modules/handsontable/es/plugins.js"],"names":["Hooks","objectEach","toUpperCaseFirst","registeredPlugins","WeakMap","registerPlugin","pluginName","PluginClass","correctedPluginName","getSingleton","add","has","set","holder","get","pluginsHolder","plugin","destroy","delete","getPlugin","instance","Error","_pluginName","getRegistredPluginNames","hotInstance","Object","keys","getPluginName","pluginInstance","name"],"mappings":"AAOA;;;AAGA,OAAOA,KAAP,MAAkB,eAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,IAAIC,iBAAiB,GAAG,IAAIC,OAAJ,EAAxB;AACA;;;;;;;AAOA,SAASC,cAAT,CAAwBC,UAAxB,EAAoCC,WAApC,EAAiD;AAC/C,MAAIC,mBAAmB,GAAGN,gBAAgB,CAACI,UAAD,CAA1C;AACAN,EAAAA,KAAK,CAACS,YAAN,GAAqBC,GAArB,CAAyB,WAAzB,EAAsC,YAAY;AAChD,QAAI,CAACP,iBAAiB,CAACQ,GAAlB,CAAsB,IAAtB,CAAL,EAAkC;AAChCR,MAAAA,iBAAiB,CAACS,GAAlB,CAAsB,IAAtB,EAA4B,EAA5B;AACD;;AAED,QAAIC,MAAM,GAAGV,iBAAiB,CAACW,GAAlB,CAAsB,IAAtB,CAAb;;AAEA,QAAI,CAACD,MAAM,CAACL,mBAAD,CAAX,EAAkC;AAChCK,MAAAA,MAAM,CAACL,mBAAD,CAAN,GAA8B,IAAID,WAAJ,CAAgB,IAAhB,CAA9B;AACD;AACF,GAVD;AAWAP,EAAAA,KAAK,CAACS,YAAN,GAAqBC,GAArB,CAAyB,cAAzB,EAAyC,YAAY;AACnD,QAAIP,iBAAiB,CAACQ,GAAlB,CAAsB,IAAtB,CAAJ,EAAiC;AAC/B,UAAII,aAAa,GAAGZ,iBAAiB,CAACW,GAAlB,CAAsB,IAAtB,CAApB;AACAb,MAAAA,UAAU,CAACc,aAAD,EAAgB,UAAUC,MAAV,EAAkB;AAC1C,eAAOA,MAAM,CAACC,OAAP,EAAP;AACD,OAFS,CAAV;AAGAd,MAAAA,iBAAiB,CAACe,MAAlB,CAAyB,IAAzB;AACD;AACF,GARD;AASD;AACD;;;;;;;AAOA,SAASC,SAAT,CAAmBC,QAAnB,EAA6Bd,UAA7B,EAAyC;AACvC,MAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAClC,UAAMe,KAAK,CAAC,kDAAD,CAAX;AACD;;AAED,MAAIC,WAAW,GAAGpB,gBAAgB,CAACI,UAAD,CAAlC;;AAEA,MAAI,CAACH,iBAAiB,CAACQ,GAAlB,CAAsBS,QAAtB,CAAD,IAAoC,CAACjB,iBAAiB,CAACW,GAAlB,CAAsBM,QAAtB,EAAgCE,WAAhC,CAAzC,EAAuF;AACrF,WAAO,KAAK,CAAZ;AACD;;AAED,SAAOnB,iBAAiB,CAACW,GAAlB,CAAsBM,QAAtB,EAAgCE,WAAhC,CAAP;AACD;AACD;;;;;;;;AAQA,SAASC,uBAAT,CAAiCC,WAAjC,EAA8C;AAC5C,SAAOrB,iBAAiB,CAACQ,GAAlB,CAAsBa,WAAtB,IAAqCC,MAAM,CAACC,IAAP,CAAYvB,iBAAiB,CAACW,GAAlB,CAAsBU,WAAtB,CAAZ,CAArC,GAAuF,EAA9F;AACD;AACD;;;;;;;;;AASA,SAASG,aAAT,CAAuBH,WAAvB,EAAoCR,MAApC,EAA4C;AAC1C,MAAIV,UAAU,GAAG,IAAjB;;AAEA,MAAIH,iBAAiB,CAACQ,GAAlB,CAAsBa,WAAtB,CAAJ,EAAwC;AACtCvB,IAAAA,UAAU,CAACE,iBAAiB,CAACW,GAAlB,CAAsBU,WAAtB,CAAD,EAAqC,UAAUI,cAAV,EAA0BC,IAA1B,EAAgC;AAC7E,UAAID,cAAc,KAAKZ,MAAvB,EAA+B;AAC7BV,QAAAA,UAAU,GAAGuB,IAAb;AACD;AACF,KAJS,CAAV;AAKD;;AAED,SAAOvB,UAAP;AACD;;AAED,SAASD,cAAT,EAAyBc,SAAzB,EAAoCI,uBAApC,EAA6DI,aAA7D","sourcesContent":["import \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.object.keys\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/es.weak-map\";\nimport \"core-js/modules/web.dom-collections.iterator\";\n\n/**\n * Utility to register plugins and common namespace for keeping reference to all plugins classes\n */\nimport Hooks from './pluginHooks';\nimport { objectEach } from './helpers/object';\nimport { toUpperCaseFirst } from './helpers/string';\nvar registeredPlugins = new WeakMap();\n/**\n * Registers plugin under given name\n *\n * @param {String} pluginName\n * @param {Function} PluginClass\n */\n\nfunction registerPlugin(pluginName, PluginClass) {\n  var correctedPluginName = toUpperCaseFirst(pluginName);\n  Hooks.getSingleton().add('construct', function () {\n    if (!registeredPlugins.has(this)) {\n      registeredPlugins.set(this, {});\n    }\n\n    var holder = registeredPlugins.get(this);\n\n    if (!holder[correctedPluginName]) {\n      holder[correctedPluginName] = new PluginClass(this);\n    }\n  });\n  Hooks.getSingleton().add('afterDestroy', function () {\n    if (registeredPlugins.has(this)) {\n      var pluginsHolder = registeredPlugins.get(this);\n      objectEach(pluginsHolder, function (plugin) {\n        return plugin.destroy();\n      });\n      registeredPlugins.delete(this);\n    }\n  });\n}\n/**\n * @param {Object} instance\n * @param {String|Function} pluginName\n * @returns {Function} pluginClass Returns plugin instance if exists or `undefined` if not exists.\n */\n\n\nfunction getPlugin(instance, pluginName) {\n  if (typeof pluginName !== 'string') {\n    throw Error('Only strings can be passed as \"plugin\" parameter');\n  }\n\n  var _pluginName = toUpperCaseFirst(pluginName);\n\n  if (!registeredPlugins.has(instance) || !registeredPlugins.get(instance)[_pluginName]) {\n    return void 0;\n  }\n\n  return registeredPlugins.get(instance)[_pluginName];\n}\n/**\n * Get all registred plugins names for concrete Handsontable instance.\n *\n * @param {Object} hotInstance\n * @returns {Array}\n */\n\n\nfunction getRegistredPluginNames(hotInstance) {\n  return registeredPlugins.has(hotInstance) ? Object.keys(registeredPlugins.get(hotInstance)) : [];\n}\n/**\n * Get plugin name.\n *\n * @param {Object} hotInstance\n * @param {Object} plugin\n * @returns {String|null}\n */\n\n\nfunction getPluginName(hotInstance, plugin) {\n  var pluginName = null;\n\n  if (registeredPlugins.has(hotInstance)) {\n    objectEach(registeredPlugins.get(hotInstance), function (pluginInstance, name) {\n      if (pluginInstance === plugin) {\n        pluginName = name;\n      }\n    });\n  }\n\n  return pluginName;\n}\n\nexport { registerPlugin, getPlugin, getRegistredPluginNames, getPluginName };"]},"metadata":{},"sourceType":"module"}