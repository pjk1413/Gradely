{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport { isObject, objectEach, deepClone } from '../../helpers/object';\nimport { arrayMap } from '../../helpers/array';\nvar inheritedColumnProperties = ['sortEmptyCells', 'indicator', 'headerAction', 'compareFunctionFactory'];\nvar SORT_EMPTY_CELLS_DEFAULT = false;\nvar SHOW_SORT_INDICATOR_DEFAULT = true;\nvar HEADER_ACTION_DEFAULT = true;\n/**\n * Store and manages states of sorted columns.\n *\n * @class ColumnStatesManager\n * @plugin ColumnSorting\n */\n// eslint-disable-next-line import/prefer-default-export\n\nexport var ColumnStatesManager = /*#__PURE__*/function () {\n  function ColumnStatesManager() {\n    _classCallCheck(this, ColumnStatesManager);\n    /**\n     * Queue of sort states containing sorted columns and their orders (Array of objects containing `column` and `sortOrder` properties).\n     *\n     * @type {Array}\n     */\n\n\n    this.sortedColumnsStates = [];\n    /**\n     * Determines whether we should sort empty cells.\n     *\n     * @type {Boolean}\n     */\n\n    this.sortEmptyCells = SORT_EMPTY_CELLS_DEFAULT;\n    /**\n     * Determines whether indicator should be visible (for sorted columns).\n     *\n     * @type {Boolean}\n     */\n\n    this.indicator = SHOW_SORT_INDICATOR_DEFAULT;\n    /**\n     * Determines whether click on the header perform sorting.\n     *\n     * @type {Boolean}\n     */\n\n    this.headerAction = HEADER_ACTION_DEFAULT;\n    /**\n     * Determines compare function factory. Method get as parameters `sortOder` and `columnMeta` and return compare function.\n     */\n\n    this.compareFunctionFactory = void 0;\n  }\n  /**\n   * Update column properties which affect the sorting result.\n   *\n   * **Note**: All column properties can be overwritten by [columns](https://docs.handsontable.com/pro/Options.html#columns) option.\n   *\n   * @param {Object} allSortSettings Column sorting plugin's configuration object.\n   */\n\n\n  _createClass(ColumnStatesManager, [{\n    key: \"updateAllColumnsProperties\",\n    value: function updateAllColumnsProperties(allSortSettings) {\n      var _this = this;\n\n      if (!isObject(allSortSettings)) {\n        return;\n      }\n\n      objectEach(allSortSettings, function (newValue, propertyName) {\n        if (inheritedColumnProperties.includes(propertyName)) {\n          _this[propertyName] = newValue;\n        }\n      });\n    }\n    /**\n     * Get all column properties which affect the sorting result.\n     *\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"getAllColumnsProperties\",\n    value: function getAllColumnsProperties() {\n      var columnProperties = {\n        sortEmptyCells: this.sortEmptyCells,\n        indicator: this.indicator,\n        headerAction: this.headerAction\n      };\n\n      if (typeof this.compareFunctionFactory === 'function') {\n        columnProperties.compareFunctionFactory = this.compareFunctionFactory;\n      }\n\n      return columnProperties;\n    }\n    /**\n     * Get index of first sorted column.\n     *\n     * @returns {Number|undefined}\n     */\n\n  }, {\n    key: \"getFirstSortedColumn\",\n    value: function getFirstSortedColumn() {\n      var firstSortedColumn;\n\n      if (this.getNumberOfSortedColumns() > 0) {\n        firstSortedColumn = this.sortedColumnsStates[0].column;\n      }\n\n      return firstSortedColumn;\n    }\n    /**\n     * Get sort order of column.\n     *\n     * @param {Number} searchedColumn Physical column index.\n     * @returns {String|undefined} Sort order (`asc` for ascending, `desc` for descending and undefined for not sorted).\n     */\n\n  }, {\n    key: \"getSortOrderOfColumn\",\n    value: function getSortOrderOfColumn(searchedColumn) {\n      var searchedState = this.sortedColumnsStates.find(function (_ref) {\n        var column = _ref.column;\n        return searchedColumn === column;\n      });\n      var sortOrder;\n\n      if (isObject(searchedState)) {\n        sortOrder = searchedState.sortOrder;\n      }\n\n      return sortOrder;\n    }\n    /**\n     * Get list of sorted columns.\n     *\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getSortedColumns\",\n    value: function getSortedColumns() {\n      return arrayMap(this.sortedColumnsStates, function (_ref2) {\n        var column = _ref2.column;\n        return column;\n      });\n    }\n    /**\n     * Get order of particular column in the states queue.\n     *\n     * @param {Number} column Physical column index.\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"getIndexOfColumnInSortQueue\",\n    value: function getIndexOfColumnInSortQueue(column) {\n      return this.getSortedColumns().indexOf(column);\n    }\n    /**\n     * Get number of sorted columns.\n     *\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"getNumberOfSortedColumns\",\n    value: function getNumberOfSortedColumns() {\n      return this.sortedColumnsStates.length;\n    }\n    /**\n     * Get if list of sorted columns is empty.\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isListOfSortedColumnsEmpty\",\n    value: function isListOfSortedColumnsEmpty() {\n      return this.getNumberOfSortedColumns() === 0;\n    }\n    /**\n     * Get if particular column is sorted.\n     *\n     * @param {Number} column Physical column index.\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isColumnSorted\",\n    value: function isColumnSorted(column) {\n      return this.getSortedColumns().includes(column);\n    }\n    /**\n     * Get states for all sorted columns.\n     *\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getSortStates\",\n    value: function getSortStates() {\n      return deepClone(this.sortedColumnsStates);\n    }\n    /**\n     * Get sort state for particular column. Object contains `column` and `sortOrder` properties.\n     *\n     * **Note**: Please keep in mind that returned objects expose **physical** column index under the `column` key.\n     *\n     * @param {Number} column Physical column index.\n     * @returns {Object|undefined}\n     */\n\n  }, {\n    key: \"getColumnSortState\",\n    value: function getColumnSortState(column) {\n      if (this.isColumnSorted(column)) {\n        return deepClone(this.sortedColumnsStates[this.getIndexOfColumnInSortQueue(column)]);\n      }\n    }\n    /**\n     * Set all sorted columns states.\n     *\n     * @param {Array} sortStates\n     */\n\n  }, {\n    key: \"setSortStates\",\n    value: function setSortStates(sortStates) {\n      this.sortedColumnsStates = sortStates;\n    }\n    /**\n     * Destroy the state manager.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.sortedColumnsStates.length = 0;\n      this.sortedColumnsStates = null;\n    }\n  }]);\n\n  return ColumnStatesManager;\n}();","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react/node_modules/handsontable/es/plugins/columnSorting/columnStatesManager.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","isObject","objectEach","deepClone","arrayMap","inheritedColumnProperties","SORT_EMPTY_CELLS_DEFAULT","SHOW_SORT_INDICATOR_DEFAULT","HEADER_ACTION_DEFAULT","ColumnStatesManager","sortedColumnsStates","sortEmptyCells","indicator","headerAction","compareFunctionFactory","value","updateAllColumnsProperties","allSortSettings","_this","newValue","propertyName","includes","getAllColumnsProperties","columnProperties","getFirstSortedColumn","firstSortedColumn","getNumberOfSortedColumns","column","getSortOrderOfColumn","searchedColumn","searchedState","find","_ref","sortOrder","getSortedColumns","_ref2","getIndexOfColumnInSortQueue","indexOf","isListOfSortedColumnsEmpty","isColumnSorted","getSortStates","getColumnSortState","setSortStates","sortStates","destroy"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.find\";\nimport \"core-js/modules/es.array.includes\";\nimport \"core-js/modules/es.array.index-of\";\nimport \"core-js/modules/es.string.includes\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { isObject, objectEach, deepClone } from '../../helpers/object';\nimport { arrayMap } from '../../helpers/array';\nvar inheritedColumnProperties = ['sortEmptyCells', 'indicator', 'headerAction', 'compareFunctionFactory'];\nvar SORT_EMPTY_CELLS_DEFAULT = false;\nvar SHOW_SORT_INDICATOR_DEFAULT = true;\nvar HEADER_ACTION_DEFAULT = true;\n/**\n * Store and manages states of sorted columns.\n *\n * @class ColumnStatesManager\n * @plugin ColumnSorting\n */\n// eslint-disable-next-line import/prefer-default-export\n\nexport var ColumnStatesManager =\n/*#__PURE__*/\nfunction () {\n  function ColumnStatesManager() {\n    _classCallCheck(this, ColumnStatesManager);\n\n    /**\n     * Queue of sort states containing sorted columns and their orders (Array of objects containing `column` and `sortOrder` properties).\n     *\n     * @type {Array}\n     */\n    this.sortedColumnsStates = [];\n    /**\n     * Determines whether we should sort empty cells.\n     *\n     * @type {Boolean}\n     */\n\n    this.sortEmptyCells = SORT_EMPTY_CELLS_DEFAULT;\n    /**\n     * Determines whether indicator should be visible (for sorted columns).\n     *\n     * @type {Boolean}\n     */\n\n    this.indicator = SHOW_SORT_INDICATOR_DEFAULT;\n    /**\n     * Determines whether click on the header perform sorting.\n     *\n     * @type {Boolean}\n     */\n\n    this.headerAction = HEADER_ACTION_DEFAULT;\n    /**\n     * Determines compare function factory. Method get as parameters `sortOder` and `columnMeta` and return compare function.\n     */\n\n    this.compareFunctionFactory = void 0;\n  }\n  /**\n   * Update column properties which affect the sorting result.\n   *\n   * **Note**: All column properties can be overwritten by [columns](https://docs.handsontable.com/pro/Options.html#columns) option.\n   *\n   * @param {Object} allSortSettings Column sorting plugin's configuration object.\n   */\n\n\n  _createClass(ColumnStatesManager, [{\n    key: \"updateAllColumnsProperties\",\n    value: function updateAllColumnsProperties(allSortSettings) {\n      var _this = this;\n\n      if (!isObject(allSortSettings)) {\n        return;\n      }\n\n      objectEach(allSortSettings, function (newValue, propertyName) {\n        if (inheritedColumnProperties.includes(propertyName)) {\n          _this[propertyName] = newValue;\n        }\n      });\n    }\n    /**\n     * Get all column properties which affect the sorting result.\n     *\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"getAllColumnsProperties\",\n    value: function getAllColumnsProperties() {\n      var columnProperties = {\n        sortEmptyCells: this.sortEmptyCells,\n        indicator: this.indicator,\n        headerAction: this.headerAction\n      };\n\n      if (typeof this.compareFunctionFactory === 'function') {\n        columnProperties.compareFunctionFactory = this.compareFunctionFactory;\n      }\n\n      return columnProperties;\n    }\n    /**\n     * Get index of first sorted column.\n     *\n     * @returns {Number|undefined}\n     */\n\n  }, {\n    key: \"getFirstSortedColumn\",\n    value: function getFirstSortedColumn() {\n      var firstSortedColumn;\n\n      if (this.getNumberOfSortedColumns() > 0) {\n        firstSortedColumn = this.sortedColumnsStates[0].column;\n      }\n\n      return firstSortedColumn;\n    }\n    /**\n     * Get sort order of column.\n     *\n     * @param {Number} searchedColumn Physical column index.\n     * @returns {String|undefined} Sort order (`asc` for ascending, `desc` for descending and undefined for not sorted).\n     */\n\n  }, {\n    key: \"getSortOrderOfColumn\",\n    value: function getSortOrderOfColumn(searchedColumn) {\n      var searchedState = this.sortedColumnsStates.find(function (_ref) {\n        var column = _ref.column;\n        return searchedColumn === column;\n      });\n      var sortOrder;\n\n      if (isObject(searchedState)) {\n        sortOrder = searchedState.sortOrder;\n      }\n\n      return sortOrder;\n    }\n    /**\n     * Get list of sorted columns.\n     *\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getSortedColumns\",\n    value: function getSortedColumns() {\n      return arrayMap(this.sortedColumnsStates, function (_ref2) {\n        var column = _ref2.column;\n        return column;\n      });\n    }\n    /**\n     * Get order of particular column in the states queue.\n     *\n     * @param {Number} column Physical column index.\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"getIndexOfColumnInSortQueue\",\n    value: function getIndexOfColumnInSortQueue(column) {\n      return this.getSortedColumns().indexOf(column);\n    }\n    /**\n     * Get number of sorted columns.\n     *\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"getNumberOfSortedColumns\",\n    value: function getNumberOfSortedColumns() {\n      return this.sortedColumnsStates.length;\n    }\n    /**\n     * Get if list of sorted columns is empty.\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isListOfSortedColumnsEmpty\",\n    value: function isListOfSortedColumnsEmpty() {\n      return this.getNumberOfSortedColumns() === 0;\n    }\n    /**\n     * Get if particular column is sorted.\n     *\n     * @param {Number} column Physical column index.\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isColumnSorted\",\n    value: function isColumnSorted(column) {\n      return this.getSortedColumns().includes(column);\n    }\n    /**\n     * Get states for all sorted columns.\n     *\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getSortStates\",\n    value: function getSortStates() {\n      return deepClone(this.sortedColumnsStates);\n    }\n    /**\n     * Get sort state for particular column. Object contains `column` and `sortOrder` properties.\n     *\n     * **Note**: Please keep in mind that returned objects expose **physical** column index under the `column` key.\n     *\n     * @param {Number} column Physical column index.\n     * @returns {Object|undefined}\n     */\n\n  }, {\n    key: \"getColumnSortState\",\n    value: function getColumnSortState(column) {\n      if (this.isColumnSorted(column)) {\n        return deepClone(this.sortedColumnsStates[this.getIndexOfColumnInSortQueue(column)]);\n      }\n    }\n    /**\n     * Set all sorted columns states.\n     *\n     * @param {Array} sortStates\n     */\n\n  }, {\n    key: \"setSortStates\",\n    value: function setSortStates(sortStates) {\n      this.sortedColumnsStates = sortStates;\n    }\n    /**\n     * Destroy the state manager.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.sortedColumnsStates.length = 0;\n      this.sortedColumnsStates = null;\n    }\n  }]);\n\n  return ColumnStatesManager;\n}();"]},"metadata":{},"sourceType":"module"}