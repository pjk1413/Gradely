{"ast":null,"code":"import \"core-js/modules/es.string.replace\";\n/**\n * Check if provided expression is valid formula expression.\n *\n * @param {*} expression Expression to check.\n * @returns {Boolean}\n */\n\nexport function isFormulaExpression(expression) {\n  return typeof expression === 'string' && expression.length >= 2 && expression.charAt(0) === '=';\n}\n/**\n * Check if provided formula expression is escaped.\n *\n * @param {*} expression Expression to check.\n * @returns {Boolean}\n */\n\nexport function isFormulaExpressionEscaped(expression) {\n  return typeof expression === 'string' && expression.charAt(0) === '\\'' && expression.charAt(1) === '=';\n}\n/**\n * Replace escaped formula expression into valid string.\n *\n * @param {String} expression Expression to process.\n * @returns {String}\n */\n\nexport function unescapeFormulaExpression(expression) {\n  return isFormulaExpressionEscaped(expression) ? expression.substr(1) : expression;\n}\n/**\n * Upper case formula expression.\n *\n * @param {String} expression Formula expression.\n * @returns {String}\n */\n\nexport function toUpperCaseFormula(expression) {\n  var PATTERN = /(\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\+))|(\\\\'|'(?:\\\\'|[^'])*'|(\\+))/g;\n  var strings = expression.match(PATTERN) || [];\n  var index = -1;\n  return expression.toUpperCase().replace(PATTERN, function () {\n    index += 1;\n    return strings[index];\n  });\n}\n/**\n * Cell coordinates function factory.\n *\n * @param {String} axis An axis name (`row` or `column`) which default index will be applied to.\n * @param {Number} defaultIndex Default index.\n * @returns {Function}\n */\n\nexport function cellCoordFactory(axis, defaultIndex) {\n  return function (cell) {\n    return {\n      row: axis === 'row' ? defaultIndex : cell.row,\n      column: axis === 'column' ? defaultIndex : cell.column\n    };\n  };\n}","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/node_modules/handsontable/es/plugins/formulas/utils.js"],"names":["isFormulaExpression","expression","length","charAt","isFormulaExpressionEscaped","unescapeFormulaExpression","substr","toUpperCaseFormula","PATTERN","strings","match","index","toUpperCase","replace","cellCoordFactory","axis","defaultIndex","cell","row","column"],"mappings":"AAEA,OAAO,mCAAP;AAEA;;;;;;;AAMA,OAAO,SAASA,mBAAT,CAA6BC,UAA7B,EAAyC;AAC9C,SAAO,OAAOA,UAAP,KAAsB,QAAtB,IAAkCA,UAAU,CAACC,MAAX,IAAqB,CAAvD,IAA4DD,UAAU,CAACE,MAAX,CAAkB,CAAlB,MAAyB,GAA5F;AACD;AACD;;;;;;;AAOA,OAAO,SAASC,0BAAT,CAAoCH,UAApC,EAAgD;AACrD,SAAO,OAAOA,UAAP,KAAsB,QAAtB,IAAkCA,UAAU,CAACE,MAAX,CAAkB,CAAlB,MAAyB,IAA3D,IAAmEF,UAAU,CAACE,MAAX,CAAkB,CAAlB,MAAyB,GAAnG;AACD;AACD;;;;;;;AAOA,OAAO,SAASE,yBAAT,CAAmCJ,UAAnC,EAA+C;AACpD,SAAOG,0BAA0B,CAACH,UAAD,CAA1B,GAAyCA,UAAU,CAACK,MAAX,CAAkB,CAAlB,CAAzC,GAAgEL,UAAvE;AACD;AACD;;;;;;;AAOA,OAAO,SAASM,kBAAT,CAA4BN,UAA5B,EAAwC;AAC7C,MAAIO,OAAO,GAAG,wDAAd;AACA,MAAIC,OAAO,GAAGR,UAAU,CAACS,KAAX,CAAiBF,OAAjB,KAA6B,EAA3C;AACA,MAAIG,KAAK,GAAG,CAAC,CAAb;AACA,SAAOV,UAAU,CAACW,WAAX,GAAyBC,OAAzB,CAAiCL,OAAjC,EAA0C,YAAY;AAC3DG,IAAAA,KAAK,IAAI,CAAT;AACA,WAAOF,OAAO,CAACE,KAAD,CAAd;AACD,GAHM,CAAP;AAID;AACD;;;;;;;;AAQA,OAAO,SAASG,gBAAT,CAA0BC,IAA1B,EAAgCC,YAAhC,EAA8C;AACnD,SAAO,UAAUC,IAAV,EAAgB;AACrB,WAAO;AACLC,MAAAA,GAAG,EAAEH,IAAI,KAAK,KAAT,GAAiBC,YAAjB,GAAgCC,IAAI,CAACC,GADrC;AAELC,MAAAA,MAAM,EAAEJ,IAAI,KAAK,QAAT,GAAoBC,YAApB,GAAmCC,IAAI,CAACE;AAF3C,KAAP;AAID,GALD;AAMD","sourcesContent":["import \"core-js/modules/es.regexp.exec\";\nimport \"core-js/modules/es.string.match\";\nimport \"core-js/modules/es.string.replace\";\n\n/**\n * Check if provided expression is valid formula expression.\n *\n * @param {*} expression Expression to check.\n * @returns {Boolean}\n */\nexport function isFormulaExpression(expression) {\n  return typeof expression === 'string' && expression.length >= 2 && expression.charAt(0) === '=';\n}\n/**\n * Check if provided formula expression is escaped.\n *\n * @param {*} expression Expression to check.\n * @returns {Boolean}\n */\n\nexport function isFormulaExpressionEscaped(expression) {\n  return typeof expression === 'string' && expression.charAt(0) === '\\'' && expression.charAt(1) === '=';\n}\n/**\n * Replace escaped formula expression into valid string.\n *\n * @param {String} expression Expression to process.\n * @returns {String}\n */\n\nexport function unescapeFormulaExpression(expression) {\n  return isFormulaExpressionEscaped(expression) ? expression.substr(1) : expression;\n}\n/**\n * Upper case formula expression.\n *\n * @param {String} expression Formula expression.\n * @returns {String}\n */\n\nexport function toUpperCaseFormula(expression) {\n  var PATTERN = /(\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\+))|(\\\\'|'(?:\\\\'|[^'])*'|(\\+))/g;\n  var strings = expression.match(PATTERN) || [];\n  var index = -1;\n  return expression.toUpperCase().replace(PATTERN, function () {\n    index += 1;\n    return strings[index];\n  });\n}\n/**\n * Cell coordinates function factory.\n *\n * @param {String} axis An axis name (`row` or `column`) which default index will be applied to.\n * @param {Number} defaultIndex Default index.\n * @returns {Function}\n */\n\nexport function cellCoordFactory(axis, defaultIndex) {\n  return function (cell) {\n    return {\n      row: axis === 'row' ? defaultIndex : cell.row,\n      column: axis === 'column' ? defaultIndex : cell.column\n    };\n  };\n}"]},"metadata":{},"sourceType":"module"}