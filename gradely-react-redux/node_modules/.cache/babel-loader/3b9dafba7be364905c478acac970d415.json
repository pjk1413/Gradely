{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport { mixin } from '../../helpers/object';\nimport localHooks from '../../mixins/localHooks';\nimport * as columnSorting from './alterOperation/columnSorting';\nimport * as insertColumn from './alterOperation/insertColumn';\nimport * as insertRow from './alterOperation/insertRow';\nimport * as removeColumn from './alterOperation/removeColumn';\nimport * as removeRow from './alterOperation/removeRow';\nvar operations = new Map();\nregisterOperation(columnSorting.OPERATION_NAME, columnSorting);\nregisterOperation(insertColumn.OPERATION_NAME, insertColumn);\nregisterOperation(insertRow.OPERATION_NAME, insertRow);\nregisterOperation(removeColumn.OPERATION_NAME, removeColumn);\nregisterOperation(removeRow.OPERATION_NAME, removeRow);\n/**\n * Alter Manager is a service that is responsible for changing the formula expressions (especially cell coordinates)\n * based on specific alter operation applied into the table.\n *\n * For example, when a user adds a new row the algorithm that moves all the cells below the added row down by one row\n * should be triggered (eq: cell A5 become A6 etc).\n *\n * All alter operations are defined in the \"alterOperation/\" directory.\n *\n * @class AlterManager\n * @util\n */\n\nvar AlterManager = /*#__PURE__*/function () {\n  function AlterManager(sheet) {\n    _classCallCheck(this, AlterManager);\n    /**\n     * Instance of {@link Sheet}.\n     *\n     * @type {Sheet}\n     */\n\n\n    this.sheet = sheet;\n    /**\n     * Handsontable instance.\n     *\n     * @type {Core}\n     */\n\n    this.hot = sheet.hot;\n    /**\n     * Instance of {@link DataProvider}.\n     *\n     * @type {DataProvider}\n     */\n\n    this.dataProvider = sheet.dataProvider;\n    /**\n     * Instance of {@link Matrix}.\n     *\n     * @type {Matrix}\n     */\n\n    this.matrix = sheet.matrix;\n  }\n  /**\n   * Prepare to execute an alter algorithm. This preparation can be useful for collecting some variables and\n   * states before specific algorithm will be executed.\n   *\n   * @param  {String} action One of the action defined in alterOperation.\n   * @param  {*} args Arguments pass to alter operation.\n   */\n\n\n  _createClass(AlterManager, [{\n    key: \"prepareAlter\",\n    value: function prepareAlter(action) {\n      if (!operations.has(action)) {\n        throw Error(\"Alter operation \\\"\".concat(action, \"\\\" not exist.\"));\n      }\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      operations.get(action).prepare.apply(this, args);\n    }\n    /**\n     * Trigger an alter algorithm and after executing code trigger local hook (\"afterAlter\").\n     *\n     * @param {String} action One of the action defined in alterOperation.\n     * @param {*} args Arguments pass to alter operation.\n     */\n\n  }, {\n    key: \"triggerAlter\",\n    value: function triggerAlter(action) {\n      if (!operations.has(action)) {\n        throw Error(\"Alter operation \\\"\".concat(action, \"\\\" not exist.\"));\n      }\n\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      operations.get(action).operate.apply(this, args);\n      this.runLocalHooks.apply(this, ['afterAlter'].concat(args));\n    }\n    /**\n     * Destroy class.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.sheet = null;\n      this.hot = null;\n      this.dataProvider = null;\n      this.matrix = null;\n    }\n  }]);\n\n  return AlterManager;\n}();\n\nmixin(AlterManager, localHooks);\nexport default AlterManager;\n\nvar empty = function empty() {};\n\nexport function registerOperation(name, descriptor) {\n  if (!operations.has(name)) {\n    operations.set(name, {\n      prepare: descriptor.prepare || empty,\n      operate: descriptor.operate || empty\n    });\n  }\n}","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react/node_modules/handsontable/es/plugins/formulas/alterManager.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","mixin","localHooks","columnSorting","insertColumn","insertRow","removeColumn","removeRow","operations","Map","registerOperation","OPERATION_NAME","AlterManager","sheet","hot","dataProvider","matrix","value","prepareAlter","action","has","Error","concat","_len","arguments","args","Array","_key","get","prepare","apply","triggerAlter","_len2","_key2","operate","runLocalHooks","destroy","empty","name","set"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.map\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/web.dom-collections.iterator\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { mixin } from '../../helpers/object';\nimport localHooks from '../../mixins/localHooks';\nimport * as columnSorting from './alterOperation/columnSorting';\nimport * as insertColumn from './alterOperation/insertColumn';\nimport * as insertRow from './alterOperation/insertRow';\nimport * as removeColumn from './alterOperation/removeColumn';\nimport * as removeRow from './alterOperation/removeRow';\nvar operations = new Map();\nregisterOperation(columnSorting.OPERATION_NAME, columnSorting);\nregisterOperation(insertColumn.OPERATION_NAME, insertColumn);\nregisterOperation(insertRow.OPERATION_NAME, insertRow);\nregisterOperation(removeColumn.OPERATION_NAME, removeColumn);\nregisterOperation(removeRow.OPERATION_NAME, removeRow);\n/**\n * Alter Manager is a service that is responsible for changing the formula expressions (especially cell coordinates)\n * based on specific alter operation applied into the table.\n *\n * For example, when a user adds a new row the algorithm that moves all the cells below the added row down by one row\n * should be triggered (eq: cell A5 become A6 etc).\n *\n * All alter operations are defined in the \"alterOperation/\" directory.\n *\n * @class AlterManager\n * @util\n */\n\nvar AlterManager =\n/*#__PURE__*/\nfunction () {\n  function AlterManager(sheet) {\n    _classCallCheck(this, AlterManager);\n\n    /**\n     * Instance of {@link Sheet}.\n     *\n     * @type {Sheet}\n     */\n    this.sheet = sheet;\n    /**\n     * Handsontable instance.\n     *\n     * @type {Core}\n     */\n\n    this.hot = sheet.hot;\n    /**\n     * Instance of {@link DataProvider}.\n     *\n     * @type {DataProvider}\n     */\n\n    this.dataProvider = sheet.dataProvider;\n    /**\n     * Instance of {@link Matrix}.\n     *\n     * @type {Matrix}\n     */\n\n    this.matrix = sheet.matrix;\n  }\n  /**\n   * Prepare to execute an alter algorithm. This preparation can be useful for collecting some variables and\n   * states before specific algorithm will be executed.\n   *\n   * @param  {String} action One of the action defined in alterOperation.\n   * @param  {*} args Arguments pass to alter operation.\n   */\n\n\n  _createClass(AlterManager, [{\n    key: \"prepareAlter\",\n    value: function prepareAlter(action) {\n      if (!operations.has(action)) {\n        throw Error(\"Alter operation \\\"\".concat(action, \"\\\" not exist.\"));\n      }\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      operations.get(action).prepare.apply(this, args);\n    }\n    /**\n     * Trigger an alter algorithm and after executing code trigger local hook (\"afterAlter\").\n     *\n     * @param {String} action One of the action defined in alterOperation.\n     * @param {*} args Arguments pass to alter operation.\n     */\n\n  }, {\n    key: \"triggerAlter\",\n    value: function triggerAlter(action) {\n      if (!operations.has(action)) {\n        throw Error(\"Alter operation \\\"\".concat(action, \"\\\" not exist.\"));\n      }\n\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      operations.get(action).operate.apply(this, args);\n      this.runLocalHooks.apply(this, ['afterAlter'].concat(args));\n    }\n    /**\n     * Destroy class.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.sheet = null;\n      this.hot = null;\n      this.dataProvider = null;\n      this.matrix = null;\n    }\n  }]);\n\n  return AlterManager;\n}();\n\nmixin(AlterManager, localHooks);\nexport default AlterManager;\n\nvar empty = function empty() {};\n\nexport function registerOperation(name, descriptor) {\n  if (!operations.has(name)) {\n    operations.set(name, {\n      prepare: descriptor.prepare || empty,\n      operate: descriptor.operate || empty\n    });\n  }\n}"]},"metadata":{},"sourceType":"module"}