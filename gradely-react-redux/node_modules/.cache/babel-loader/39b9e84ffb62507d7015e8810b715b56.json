{"ast":null,"code":"import { arrayEach } from '../../../helpers/array';\nimport { isFormulaExpression } from '../utils';\nimport CellValue from '../cell/value';\nimport ExpressionModifier from '../expressionModifier';\n/**\n * When \"column_sorting\" is triggered the following operations must be performed:\n *\n * - All formulas which contain cell coordinates must be updated and saved into source data - Column must be changed\n *   (decreased or increased) depends on new target position - previous position.\n * - Mark all formulas which need update with \"STATE_OUT_OFF_DATE\" flag, so they can be recalculated after the operation.\n */\n\nexport var OPERATION_NAME = 'column_sorting';\nvar visualRows;\n/**\n * Collect all previous visual rows from CellValues.\n */\n\nexport function prepare() {\n  var matrix = this.matrix,\n      dataProvider = this.dataProvider;\n  visualRows = new WeakMap();\n  arrayEach(matrix.data, function (cell) {\n    visualRows.set(cell, dataProvider.t.toVisualRow(cell.row));\n  });\n}\n/**\n * Translate all CellValues depends on previous position.\n */\n\nexport function operate() {\n  var matrix = this.matrix,\n      dataProvider = this.dataProvider;\n  matrix.cellReferences.length = 0;\n  arrayEach(matrix.data, function (cell) {\n    cell.setState(CellValue.STATE_OUT_OFF_DATE);\n    cell.clearPrecedents();\n    var row = cell.row,\n        column = cell.column;\n    var value = dataProvider.getSourceDataAtCell(row, column);\n\n    if (isFormulaExpression(value)) {\n      var prevRow = visualRows.get(cell);\n      var expModifier = new ExpressionModifier(value);\n      expModifier.translate({\n        row: dataProvider.t.toVisualRow(row) - prevRow\n      });\n      dataProvider.updateSourceData(row, column, expModifier.toString());\n    }\n  });\n  visualRows = null;\n}","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/node_modules/handsontable/es/plugins/formulas/alterOperation/columnSorting.js"],"names":["arrayEach","isFormulaExpression","CellValue","ExpressionModifier","OPERATION_NAME","visualRows","prepare","matrix","dataProvider","WeakMap","data","cell","set","t","toVisualRow","row","operate","cellReferences","length","setState","STATE_OUT_OFF_DATE","clearPrecedents","column","value","getSourceDataAtCell","prevRow","get","expModifier","translate","updateSourceData","toString"],"mappings":"AAMA,SAASA,SAAT,QAA0B,wBAA1B;AACA,SAASC,mBAAT,QAAoC,UAApC;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,kBAAP,MAA+B,uBAA/B;AACA;;;;;;;;AAQA,OAAO,IAAIC,cAAc,GAAG,gBAArB;AACP,IAAIC,UAAJ;AACA;;;;AAIA,OAAO,SAASC,OAAT,GAAmB;AACxB,MAAIC,MAAM,GAAG,KAAKA,MAAlB;AAAA,MACIC,YAAY,GAAG,KAAKA,YADxB;AAEAH,EAAAA,UAAU,GAAG,IAAII,OAAJ,EAAb;AACAT,EAAAA,SAAS,CAACO,MAAM,CAACG,IAAR,EAAc,UAAUC,IAAV,EAAgB;AACrCN,IAAAA,UAAU,CAACO,GAAX,CAAeD,IAAf,EAAqBH,YAAY,CAACK,CAAb,CAAeC,WAAf,CAA2BH,IAAI,CAACI,GAAhC,CAArB;AACD,GAFQ,CAAT;AAGD;AACD;;;;AAIA,OAAO,SAASC,OAAT,GAAmB;AACxB,MAAIT,MAAM,GAAG,KAAKA,MAAlB;AAAA,MACIC,YAAY,GAAG,KAAKA,YADxB;AAEAD,EAAAA,MAAM,CAACU,cAAP,CAAsBC,MAAtB,GAA+B,CAA/B;AACAlB,EAAAA,SAAS,CAACO,MAAM,CAACG,IAAR,EAAc,UAAUC,IAAV,EAAgB;AACrCA,IAAAA,IAAI,CAACQ,QAAL,CAAcjB,SAAS,CAACkB,kBAAxB;AACAT,IAAAA,IAAI,CAACU,eAAL;AACA,QAAIN,GAAG,GAAGJ,IAAI,CAACI,GAAf;AAAA,QACIO,MAAM,GAAGX,IAAI,CAACW,MADlB;AAEA,QAAIC,KAAK,GAAGf,YAAY,CAACgB,mBAAb,CAAiCT,GAAjC,EAAsCO,MAAtC,CAAZ;;AAEA,QAAIrB,mBAAmB,CAACsB,KAAD,CAAvB,EAAgC;AAC9B,UAAIE,OAAO,GAAGpB,UAAU,CAACqB,GAAX,CAAef,IAAf,CAAd;AACA,UAAIgB,WAAW,GAAG,IAAIxB,kBAAJ,CAAuBoB,KAAvB,CAAlB;AACAI,MAAAA,WAAW,CAACC,SAAZ,CAAsB;AACpBb,QAAAA,GAAG,EAAEP,YAAY,CAACK,CAAb,CAAeC,WAAf,CAA2BC,GAA3B,IAAkCU;AADnB,OAAtB;AAGAjB,MAAAA,YAAY,CAACqB,gBAAb,CAA8Bd,GAA9B,EAAmCO,MAAnC,EAA2CK,WAAW,CAACG,QAAZ,EAA3C;AACD;AACF,GAfQ,CAAT;AAgBAzB,EAAAA,UAAU,GAAG,IAAb;AACD","sourcesContent":["import \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.regexp.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/es.weak-map\";\nimport \"core-js/modules/web.dom-collections.iterator\";\nimport { arrayEach } from '../../../helpers/array';\nimport { isFormulaExpression } from '../utils';\nimport CellValue from '../cell/value';\nimport ExpressionModifier from '../expressionModifier';\n/**\n * When \"column_sorting\" is triggered the following operations must be performed:\n *\n * - All formulas which contain cell coordinates must be updated and saved into source data - Column must be changed\n *   (decreased or increased) depends on new target position - previous position.\n * - Mark all formulas which need update with \"STATE_OUT_OFF_DATE\" flag, so they can be recalculated after the operation.\n */\n\nexport var OPERATION_NAME = 'column_sorting';\nvar visualRows;\n/**\n * Collect all previous visual rows from CellValues.\n */\n\nexport function prepare() {\n  var matrix = this.matrix,\n      dataProvider = this.dataProvider;\n  visualRows = new WeakMap();\n  arrayEach(matrix.data, function (cell) {\n    visualRows.set(cell, dataProvider.t.toVisualRow(cell.row));\n  });\n}\n/**\n * Translate all CellValues depends on previous position.\n */\n\nexport function operate() {\n  var matrix = this.matrix,\n      dataProvider = this.dataProvider;\n  matrix.cellReferences.length = 0;\n  arrayEach(matrix.data, function (cell) {\n    cell.setState(CellValue.STATE_OUT_OFF_DATE);\n    cell.clearPrecedents();\n    var row = cell.row,\n        column = cell.column;\n    var value = dataProvider.getSourceDataAtCell(row, column);\n\n    if (isFormulaExpression(value)) {\n      var prevRow = visualRows.get(cell);\n      var expModifier = new ExpressionModifier(value);\n      expModifier.translate({\n        row: dataProvider.t.toVisualRow(row) - prevRow\n      });\n      dataProvider.updateSourceData(row, column, expModifier.toString());\n    }\n  });\n  visualRows = null;\n}"]},"metadata":{},"sourceType":"module"}