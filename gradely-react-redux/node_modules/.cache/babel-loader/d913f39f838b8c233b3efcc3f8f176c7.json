{"ast":null,"code":"import { getRegisteredEditorNames, registerEditor, getEditor } from './editors';\nimport { getRegisteredRendererNames, getRenderer, registerRenderer } from './renderers';\nimport { getRegisteredValidatorNames, getValidator, registerValidator } from './validators';\nimport { getRegisteredCellTypeNames, getCellType, registerCellType } from './cellTypes';\nimport Core from './core';\nimport jQueryWrapper from './helpers/wrappers/jquery';\nimport EventManager, { getListenersCounter } from './eventManager';\nimport Hooks from './pluginHooks';\nimport GhostTable from './utils/ghostTable';\nimport * as parseTableHelpers from './utils/parseTable';\nimport * as arrayHelpers from './helpers/array';\nimport * as browserHelpers from './helpers/browser';\nimport * as dataHelpers from './helpers/data';\nimport * as dateHelpers from './helpers/date';\nimport * as featureHelpers from './helpers/feature';\nimport * as functionHelpers from './helpers/function';\nimport * as mixedHelpers from './helpers/mixed';\nimport * as numberHelpers from './helpers/number';\nimport * as objectHelpers from './helpers/object';\nimport * as settingHelpers from './helpers/setting';\nimport * as stringHelpers from './helpers/string';\nimport * as unicodeHelpers from './helpers/unicode';\nimport * as domHelpers from './helpers/dom/element';\nimport * as domEventHelpers from './helpers/dom/event';\nimport * as plugins from './plugins/index';\nimport { registerPlugin } from './plugins';\nimport DefaultSettings from './defaultSettings';\nimport { rootInstanceSymbol } from './utils/rootInstance';\nimport { getTranslatedPhrase } from './i18n';\nimport * as constants from './i18n/constants';\nimport { registerLanguageDictionary, getLanguagesDictionaries, getLanguageDictionary } from './i18n/dictionariesManager';\n\nfunction Handsontable(rootElement, userSettings) {\n  var instance = new Core(rootElement, userSettings || {}, rootInstanceSymbol);\n  instance.init();\n  return instance;\n}\n\njQueryWrapper(Handsontable);\n\nHandsontable.Core = function (rootElement) {\n  var userSettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Core(rootElement, userSettings, rootInstanceSymbol);\n};\n\nHandsontable.DefaultSettings = DefaultSettings;\nHandsontable.EventManager = EventManager;\nHandsontable._getListenersCounter = getListenersCounter; // For MemoryLeak tests\n\nHandsontable.packageName = 'handsontable';\nHandsontable.buildDate = \"19/02/2020 13:41:19\";\nHandsontable.version = \"7.4.2\"; // Export Hooks singleton\n\nHandsontable.hooks = Hooks.getSingleton(); // TODO: Remove this exports after rewrite tests about this module\n\nHandsontable.__GhostTable = GhostTable; //\n// Export all helpers to the Handsontable object\n\nvar HELPERS = [arrayHelpers, browserHelpers, dataHelpers, dateHelpers, featureHelpers, functionHelpers, mixedHelpers, numberHelpers, objectHelpers, settingHelpers, stringHelpers, unicodeHelpers, parseTableHelpers];\nvar DOM = [domHelpers, domEventHelpers];\nHandsontable.helper = {};\nHandsontable.dom = {}; // Fill general helpers.\n\narrayHelpers.arrayEach(HELPERS, function (helper) {\n  arrayHelpers.arrayEach(Object.getOwnPropertyNames(helper), function (key) {\n    if (key.charAt(0) !== '_') {\n      Handsontable.helper[key] = helper[key];\n    }\n  });\n}); // Fill DOM helpers.\n\narrayHelpers.arrayEach(DOM, function (helper) {\n  arrayHelpers.arrayEach(Object.getOwnPropertyNames(helper), function (key) {\n    if (key.charAt(0) !== '_') {\n      Handsontable.dom[key] = helper[key];\n    }\n  });\n}); // Export cell types.\n\nHandsontable.cellTypes = {};\narrayHelpers.arrayEach(getRegisteredCellTypeNames(), function (cellTypeName) {\n  Handsontable.cellTypes[cellTypeName] = getCellType(cellTypeName);\n});\nHandsontable.cellTypes.registerCellType = registerCellType;\nHandsontable.cellTypes.getCellType = getCellType; // Export all registered editors from the Handsontable.\n\nHandsontable.editors = {};\narrayHelpers.arrayEach(getRegisteredEditorNames(), function (editorName) {\n  Handsontable.editors[\"\".concat(stringHelpers.toUpperCaseFirst(editorName), \"Editor\")] = getEditor(editorName);\n});\nHandsontable.editors.registerEditor = registerEditor;\nHandsontable.editors.getEditor = getEditor; // Export all registered renderers from the Handsontable.\n\nHandsontable.renderers = {};\narrayHelpers.arrayEach(getRegisteredRendererNames(), function (rendererName) {\n  var renderer = getRenderer(rendererName);\n\n  if (rendererName === 'base') {\n    Handsontable.renderers.cellDecorator = renderer;\n  }\n\n  Handsontable.renderers[\"\".concat(stringHelpers.toUpperCaseFirst(rendererName), \"Renderer\")] = renderer;\n});\nHandsontable.renderers.registerRenderer = registerRenderer;\nHandsontable.renderers.getRenderer = getRenderer; // Export all registered validators from the Handsontable.\n\nHandsontable.validators = {};\narrayHelpers.arrayEach(getRegisteredValidatorNames(), function (validatorName) {\n  Handsontable.validators[\"\".concat(stringHelpers.toUpperCaseFirst(validatorName), \"Validator\")] = getValidator(validatorName);\n});\nHandsontable.validators.registerValidator = registerValidator;\nHandsontable.validators.getValidator = getValidator; // Export all registered plugins from the Handsontable.\n\nHandsontable.plugins = {};\narrayHelpers.arrayEach(Object.getOwnPropertyNames(plugins), function (pluginName) {\n  var plugin = plugins[pluginName];\n\n  if (pluginName === 'Base') {\n    Handsontable.plugins[\"\".concat(pluginName, \"Plugin\")] = plugin;\n  } else {\n    Handsontable.plugins[pluginName] = plugin;\n  }\n});\nHandsontable.plugins.registerPlugin = registerPlugin;\nHandsontable.languages = {};\nHandsontable.languages.dictionaryKeys = constants;\nHandsontable.languages.getLanguageDictionary = getLanguageDictionary;\nHandsontable.languages.getLanguagesDictionaries = getLanguagesDictionaries;\nHandsontable.languages.registerLanguageDictionary = registerLanguageDictionary; // Alias to `getTranslatedPhrase` function, for more information check it API.\n\nHandsontable.languages.getTranslatedPhrase = function () {\n  return getTranslatedPhrase.apply(void 0, arguments);\n};\n\nexport default Handsontable;","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react/node_modules/handsontable/es/index.js"],"names":["getRegisteredEditorNames","registerEditor","getEditor","getRegisteredRendererNames","getRenderer","registerRenderer","getRegisteredValidatorNames","getValidator","registerValidator","getRegisteredCellTypeNames","getCellType","registerCellType","Core","jQueryWrapper","EventManager","getListenersCounter","Hooks","GhostTable","parseTableHelpers","arrayHelpers","browserHelpers","dataHelpers","dateHelpers","featureHelpers","functionHelpers","mixedHelpers","numberHelpers","objectHelpers","settingHelpers","stringHelpers","unicodeHelpers","domHelpers","domEventHelpers","plugins","registerPlugin","DefaultSettings","rootInstanceSymbol","getTranslatedPhrase","constants","registerLanguageDictionary","getLanguagesDictionaries","getLanguageDictionary","Handsontable","rootElement","userSettings","instance","init","arguments","length","undefined","_getListenersCounter","packageName","buildDate","version","hooks","getSingleton","__GhostTable","HELPERS","DOM","helper","dom","arrayEach","Object","getOwnPropertyNames","key","charAt","cellTypes","cellTypeName","editors","editorName","concat","toUpperCaseFirst","renderers","rendererName","renderer","cellDecorator","validators","validatorName","pluginName","plugin","languages","dictionaryKeys","apply"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.object.get-own-property-names\";\nimport { getRegisteredEditorNames, registerEditor, getEditor } from './editors';\nimport { getRegisteredRendererNames, getRenderer, registerRenderer } from './renderers';\nimport { getRegisteredValidatorNames, getValidator, registerValidator } from './validators';\nimport { getRegisteredCellTypeNames, getCellType, registerCellType } from './cellTypes';\nimport Core from './core';\nimport jQueryWrapper from './helpers/wrappers/jquery';\nimport EventManager, { getListenersCounter } from './eventManager';\nimport Hooks from './pluginHooks';\nimport GhostTable from './utils/ghostTable';\nimport * as parseTableHelpers from './utils/parseTable';\nimport * as arrayHelpers from './helpers/array';\nimport * as browserHelpers from './helpers/browser';\nimport * as dataHelpers from './helpers/data';\nimport * as dateHelpers from './helpers/date';\nimport * as featureHelpers from './helpers/feature';\nimport * as functionHelpers from './helpers/function';\nimport * as mixedHelpers from './helpers/mixed';\nimport * as numberHelpers from './helpers/number';\nimport * as objectHelpers from './helpers/object';\nimport * as settingHelpers from './helpers/setting';\nimport * as stringHelpers from './helpers/string';\nimport * as unicodeHelpers from './helpers/unicode';\nimport * as domHelpers from './helpers/dom/element';\nimport * as domEventHelpers from './helpers/dom/event';\nimport * as plugins from './plugins/index';\nimport { registerPlugin } from './plugins';\nimport DefaultSettings from './defaultSettings';\nimport { rootInstanceSymbol } from './utils/rootInstance';\nimport { getTranslatedPhrase } from './i18n';\nimport * as constants from './i18n/constants';\nimport { registerLanguageDictionary, getLanguagesDictionaries, getLanguageDictionary } from './i18n/dictionariesManager';\n\nfunction Handsontable(rootElement, userSettings) {\n  var instance = new Core(rootElement, userSettings || {}, rootInstanceSymbol);\n  instance.init();\n  return instance;\n}\n\njQueryWrapper(Handsontable);\n\nHandsontable.Core = function (rootElement) {\n  var userSettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Core(rootElement, userSettings, rootInstanceSymbol);\n};\n\nHandsontable.DefaultSettings = DefaultSettings;\nHandsontable.EventManager = EventManager;\nHandsontable._getListenersCounter = getListenersCounter; // For MemoryLeak tests\n\nHandsontable.packageName = 'handsontable';\nHandsontable.buildDate = \"19/02/2020 13:41:19\";\nHandsontable.version = \"7.4.2\"; // Export Hooks singleton\n\nHandsontable.hooks = Hooks.getSingleton(); // TODO: Remove this exports after rewrite tests about this module\n\nHandsontable.__GhostTable = GhostTable; //\n// Export all helpers to the Handsontable object\n\nvar HELPERS = [arrayHelpers, browserHelpers, dataHelpers, dateHelpers, featureHelpers, functionHelpers, mixedHelpers, numberHelpers, objectHelpers, settingHelpers, stringHelpers, unicodeHelpers, parseTableHelpers];\nvar DOM = [domHelpers, domEventHelpers];\nHandsontable.helper = {};\nHandsontable.dom = {}; // Fill general helpers.\n\narrayHelpers.arrayEach(HELPERS, function (helper) {\n  arrayHelpers.arrayEach(Object.getOwnPropertyNames(helper), function (key) {\n    if (key.charAt(0) !== '_') {\n      Handsontable.helper[key] = helper[key];\n    }\n  });\n}); // Fill DOM helpers.\n\narrayHelpers.arrayEach(DOM, function (helper) {\n  arrayHelpers.arrayEach(Object.getOwnPropertyNames(helper), function (key) {\n    if (key.charAt(0) !== '_') {\n      Handsontable.dom[key] = helper[key];\n    }\n  });\n}); // Export cell types.\n\nHandsontable.cellTypes = {};\narrayHelpers.arrayEach(getRegisteredCellTypeNames(), function (cellTypeName) {\n  Handsontable.cellTypes[cellTypeName] = getCellType(cellTypeName);\n});\nHandsontable.cellTypes.registerCellType = registerCellType;\nHandsontable.cellTypes.getCellType = getCellType; // Export all registered editors from the Handsontable.\n\nHandsontable.editors = {};\narrayHelpers.arrayEach(getRegisteredEditorNames(), function (editorName) {\n  Handsontable.editors[\"\".concat(stringHelpers.toUpperCaseFirst(editorName), \"Editor\")] = getEditor(editorName);\n});\nHandsontable.editors.registerEditor = registerEditor;\nHandsontable.editors.getEditor = getEditor; // Export all registered renderers from the Handsontable.\n\nHandsontable.renderers = {};\narrayHelpers.arrayEach(getRegisteredRendererNames(), function (rendererName) {\n  var renderer = getRenderer(rendererName);\n\n  if (rendererName === 'base') {\n    Handsontable.renderers.cellDecorator = renderer;\n  }\n\n  Handsontable.renderers[\"\".concat(stringHelpers.toUpperCaseFirst(rendererName), \"Renderer\")] = renderer;\n});\nHandsontable.renderers.registerRenderer = registerRenderer;\nHandsontable.renderers.getRenderer = getRenderer; // Export all registered validators from the Handsontable.\n\nHandsontable.validators = {};\narrayHelpers.arrayEach(getRegisteredValidatorNames(), function (validatorName) {\n  Handsontable.validators[\"\".concat(stringHelpers.toUpperCaseFirst(validatorName), \"Validator\")] = getValidator(validatorName);\n});\nHandsontable.validators.registerValidator = registerValidator;\nHandsontable.validators.getValidator = getValidator; // Export all registered plugins from the Handsontable.\n\nHandsontable.plugins = {};\narrayHelpers.arrayEach(Object.getOwnPropertyNames(plugins), function (pluginName) {\n  var plugin = plugins[pluginName];\n\n  if (pluginName === 'Base') {\n    Handsontable.plugins[\"\".concat(pluginName, \"Plugin\")] = plugin;\n  } else {\n    Handsontable.plugins[pluginName] = plugin;\n  }\n});\nHandsontable.plugins.registerPlugin = registerPlugin;\nHandsontable.languages = {};\nHandsontable.languages.dictionaryKeys = constants;\nHandsontable.languages.getLanguageDictionary = getLanguageDictionary;\nHandsontable.languages.getLanguagesDictionaries = getLanguagesDictionaries;\nHandsontable.languages.registerLanguageDictionary = registerLanguageDictionary; // Alias to `getTranslatedPhrase` function, for more information check it API.\n\nHandsontable.languages.getTranslatedPhrase = function () {\n  return getTranslatedPhrase.apply(void 0, arguments);\n};\n\nexport default Handsontable;"]},"metadata":{},"sourceType":"module"}