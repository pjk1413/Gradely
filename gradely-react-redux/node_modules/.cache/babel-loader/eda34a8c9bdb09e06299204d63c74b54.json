{"ast":null,"code":"import { checkSelectionConsistency, markLabelAsSelected } from './../utils';\nimport { arrayEach } from './../../../helpers/array';\nimport * as C from './../../../i18n/constants';\nexport var KEY = 'make_read_only';\nexport default function readOnlyItem() {\n  return {\n    key: KEY,\n    name: function name() {\n      var _this = this;\n\n      var label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_READ_ONLY);\n      var atLeastOneReadOnly = checkSelectionConsistency(this.getSelectedRange(), function (row, col) {\n        return _this.getCellMeta(row, col).readOnly;\n      });\n\n      if (atLeastOneReadOnly) {\n        label = markLabelAsSelected(label);\n      }\n\n      return label;\n    },\n    callback: function callback() {\n      var _this2 = this;\n\n      var ranges = this.getSelectedRange();\n      var atLeastOneReadOnly = checkSelectionConsistency(ranges, function (row, col) {\n        return _this2.getCellMeta(row, col).readOnly;\n      });\n      arrayEach(ranges, function (range) {\n        range.forAll(function (row, col) {\n          _this2.setCellMeta(row, col, 'readOnly', !atLeastOneReadOnly);\n        });\n      });\n      this.render();\n    },\n    disabled: function disabled() {\n      return !(this.getSelectedRange() && !this.selection.isSelectedByCorner());\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react/node_modules/handsontable/es/plugins/contextMenu/predefinedItems/readOnly.js"],"names":["checkSelectionConsistency","markLabelAsSelected","arrayEach","C","KEY","readOnlyItem","key","name","_this","label","getTranslatedPhrase","CONTEXTMENU_ITEMS_READ_ONLY","atLeastOneReadOnly","getSelectedRange","row","col","getCellMeta","readOnly","callback","_this2","ranges","range","forAll","setCellMeta","render","disabled","selection","isSelectedByCorner"],"mappings":"AAAA,SAASA,yBAAT,EAAoCC,mBAApC,QAA+D,YAA/D;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,OAAO,KAAKC,CAAZ,MAAmB,2BAAnB;AACA,OAAO,IAAIC,GAAG,GAAG,gBAAV;AACP,eAAe,SAASC,YAAT,GAAwB;AACrC,SAAO;AACLC,IAAAA,GAAG,EAAEF,GADA;AAELG,IAAAA,IAAI,EAAE,SAASA,IAAT,GAAgB;AACpB,UAAIC,KAAK,GAAG,IAAZ;;AAEA,UAAIC,KAAK,GAAG,KAAKC,mBAAL,CAAyBP,CAAC,CAACQ,2BAA3B,CAAZ;AACA,UAAIC,kBAAkB,GAAGZ,yBAAyB,CAAC,KAAKa,gBAAL,EAAD,EAA0B,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAC9F,eAAOP,KAAK,CAACQ,WAAN,CAAkBF,GAAlB,EAAuBC,GAAvB,EAA4BE,QAAnC;AACD,OAFiD,CAAlD;;AAIA,UAAIL,kBAAJ,EAAwB;AACtBH,QAAAA,KAAK,GAAGR,mBAAmB,CAACQ,KAAD,CAA3B;AACD;;AAED,aAAOA,KAAP;AACD,KAfI;AAgBLS,IAAAA,QAAQ,EAAE,SAASA,QAAT,GAAoB;AAC5B,UAAIC,MAAM,GAAG,IAAb;;AAEA,UAAIC,MAAM,GAAG,KAAKP,gBAAL,EAAb;AACA,UAAID,kBAAkB,GAAGZ,yBAAyB,CAACoB,MAAD,EAAS,UAAUN,GAAV,EAAeC,GAAf,EAAoB;AAC7E,eAAOI,MAAM,CAACH,WAAP,CAAmBF,GAAnB,EAAwBC,GAAxB,EAA6BE,QAApC;AACD,OAFiD,CAAlD;AAGAf,MAAAA,SAAS,CAACkB,MAAD,EAAS,UAAUC,KAAV,EAAiB;AACjCA,QAAAA,KAAK,CAACC,MAAN,CAAa,UAAUR,GAAV,EAAeC,GAAf,EAAoB;AAC/BI,UAAAA,MAAM,CAACI,WAAP,CAAmBT,GAAnB,EAAwBC,GAAxB,EAA6B,UAA7B,EAAyC,CAACH,kBAA1C;AACD,SAFD;AAGD,OAJQ,CAAT;AAKA,WAAKY,MAAL;AACD,KA7BI;AA8BLC,IAAAA,QAAQ,EAAE,SAASA,QAAT,GAAoB;AAC5B,aAAO,EAAE,KAAKZ,gBAAL,MAA2B,CAAC,KAAKa,SAAL,CAAeC,kBAAf,EAA9B,CAAP;AACD;AAhCI,GAAP;AAkCD","sourcesContent":["import { checkSelectionConsistency, markLabelAsSelected } from './../utils';\nimport { arrayEach } from './../../../helpers/array';\nimport * as C from './../../../i18n/constants';\nexport var KEY = 'make_read_only';\nexport default function readOnlyItem() {\n  return {\n    key: KEY,\n    name: function name() {\n      var _this = this;\n\n      var label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_READ_ONLY);\n      var atLeastOneReadOnly = checkSelectionConsistency(this.getSelectedRange(), function (row, col) {\n        return _this.getCellMeta(row, col).readOnly;\n      });\n\n      if (atLeastOneReadOnly) {\n        label = markLabelAsSelected(label);\n      }\n\n      return label;\n    },\n    callback: function callback() {\n      var _this2 = this;\n\n      var ranges = this.getSelectedRange();\n      var atLeastOneReadOnly = checkSelectionConsistency(ranges, function (row, col) {\n        return _this2.getCellMeta(row, col).readOnly;\n      });\n      arrayEach(ranges, function (range) {\n        range.forAll(function (row, col) {\n          _this2.setCellMeta(row, col, 'readOnly', !atLeastOneReadOnly);\n        });\n      });\n      this.render();\n    },\n    disabled: function disabled() {\n      return !(this.getSelectedRange() && !this.selection.isSelectedByCorner());\n    }\n  };\n}"]},"metadata":{},"sourceType":"module"}