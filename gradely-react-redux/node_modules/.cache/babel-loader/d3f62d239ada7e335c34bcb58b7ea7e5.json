{"ast":null,"code":"/**\n * SheetClip - Spreadsheet Clipboard Parser\n * version 0.2\n *\n * This tiny library transforms JavaScript arrays to strings that are pasteable by LibreOffice, OpenOffice,\n * Google Docs and Microsoft Excel.\n *\n * Copyright 2012, Marcin Warpechowski\n * Licensed under the MIT license.\n * http://github.com/warpech/sheetclip/\n */\n\n/*jslint white: true*/\n(function (global) {\n  \"use strict\";\n\n  function countQuotes(str) {\n    return str.split('\"').length - 1;\n  }\n\n  var SheetClip = {\n    /**\n     * Decode spreadsheet string into array\n     *\n     * @param {String} str\n     * @returns {Array}\n     */\n    parse: function (str) {\n      var r,\n          rLen,\n          rows,\n          arr = [],\n          a = 0,\n          c,\n          cLen,\n          multiline,\n          last;\n      rows = str.replace(/\\r\\n|\\r/g, '\\n').split('\\n');\n\n      if (rows.length > 1 && rows[rows.length - 1] === '') {\n        rows.pop();\n      }\n\n      for (r = 0, rLen = rows.length; r < rLen; r += 1) {\n        rows[r] = rows[r].split('\\t');\n\n        for (c = 0, cLen = rows[r].length; c < cLen; c += 1) {\n          if (!arr[a]) {\n            arr[a] = [];\n          }\n\n          if (multiline && c === 0) {\n            last = arr[a].length - 1;\n            arr[a][last] = arr[a][last] + '\\n' + rows[r][0];\n\n            if (multiline && countQuotes(rows[r][0]) & 1) {\n              //& 1 is a bitwise way of performing mod 2\n              multiline = false;\n              arr[a][last] = arr[a][last].substring(0, arr[a][last].length - 1).replace(/\"\"/g, '\"');\n            }\n          } else {\n            if (c === cLen - 1 && rows[r][c].indexOf('\"') === 0 && countQuotes(rows[r][c]) & 1) {\n              arr[a].push(rows[r][c].substring(1).replace(/\"\"/g, '\"'));\n              multiline = true;\n            } else {\n              arr[a].push(rows[r][c].replace(/\"\"/g, '\"'));\n              multiline = false;\n            }\n          }\n        }\n\n        if (!multiline) {\n          a += 1;\n        }\n      }\n\n      return arr;\n    },\n\n    /**\n     * Encode array into valid spreadsheet string\n     *\n     * @param arr\n     * @returns {String}\n     */\n    stringify: function (arr) {\n      var r,\n          rLen,\n          c,\n          cLen,\n          str = '',\n          val;\n\n      for (r = 0, rLen = arr.length; r < rLen; r += 1) {\n        cLen = arr[r].length;\n\n        for (c = 0; c < cLen; c += 1) {\n          if (c > 0) {\n            str += '\\t';\n          }\n\n          val = arr[r][c];\n\n          if (typeof val === 'string') {\n            if (val.indexOf('\\n') > -1) {\n              str += '\"' + val.replace(/\"/g, '\"\"') + '\"';\n            } else {\n              str += val;\n            }\n          } else if (val === null || val === void 0) {\n            // void 0 resolves to undefined\n            str += '';\n          } else {\n            str += val;\n          }\n        }\n\n        if (r !== rLen - 1) {\n          str += '\\n';\n        }\n      }\n\n      return str;\n    }\n  };\n\n  if (typeof exports !== 'undefined') {\n    exports.parse = SheetClip.parse;\n    exports.stringify = SheetClip.stringify;\n  } else {\n    global.SheetClip = SheetClip;\n  }\n})(window);","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/node_modules/handsontable/lib/SheetClip/SheetClip.js"],"names":["global","countQuotes","str","split","length","SheetClip","parse","r","rLen","rows","arr","a","c","cLen","multiline","last","replace","pop","substring","indexOf","push","stringify","val","exports","window"],"mappings":"AAAA;;;;;;;;;;;;AAWA;AACC,WAAUA,MAAV,EAAkB;AACjB;;AAEA,WAASC,WAAT,CAAqBC,GAArB,EAA0B;AACxB,WAAOA,GAAG,CAACC,KAAJ,CAAU,GAAV,EAAeC,MAAf,GAAwB,CAA/B;AACD;;AAED,MAAIC,SAAS,GAAG;AACd;;;;;;AAMAC,IAAAA,KAAK,EAAE,UAAUJ,GAAV,EAAe;AACpB,UAAIK,CAAJ;AAAA,UAAOC,IAAP;AAAA,UAAaC,IAAb;AAAA,UAAmBC,GAAG,GAAG,EAAzB;AAAA,UAA6BC,CAAC,GAAG,CAAjC;AAAA,UAAoCC,CAApC;AAAA,UAAuCC,IAAvC;AAAA,UAA6CC,SAA7C;AAAA,UAAwDC,IAAxD;AAEAN,MAAAA,IAAI,GAAGP,GAAG,CAACc,OAAJ,CAAY,UAAZ,EAAwB,IAAxB,EAA8Bb,KAA9B,CAAoC,IAApC,CAAP;;AAEA,UAAIM,IAAI,CAACL,MAAL,GAAc,CAAd,IAAmBK,IAAI,CAACA,IAAI,CAACL,MAAL,GAAc,CAAf,CAAJ,KAA0B,EAAjD,EAAqD;AACnDK,QAAAA,IAAI,CAACQ,GAAL;AACD;;AACD,WAAKV,CAAC,GAAG,CAAJ,EAAOC,IAAI,GAAGC,IAAI,CAACL,MAAxB,EAAgCG,CAAC,GAAGC,IAApC,EAA0CD,CAAC,IAAI,CAA/C,EAAkD;AAChDE,QAAAA,IAAI,CAACF,CAAD,CAAJ,GAAUE,IAAI,CAACF,CAAD,CAAJ,CAAQJ,KAAR,CAAc,IAAd,CAAV;;AAEA,aAAKS,CAAC,GAAG,CAAJ,EAAOC,IAAI,GAAGJ,IAAI,CAACF,CAAD,CAAJ,CAAQH,MAA3B,EAAmCQ,CAAC,GAAGC,IAAvC,EAA6CD,CAAC,IAAI,CAAlD,EAAqD;AACnD,cAAI,CAACF,GAAG,CAACC,CAAD,CAAR,EAAa;AACXD,YAAAA,GAAG,CAACC,CAAD,CAAH,GAAS,EAAT;AACD;;AACD,cAAIG,SAAS,IAAIF,CAAC,KAAK,CAAvB,EAA0B;AACxBG,YAAAA,IAAI,GAAGL,GAAG,CAACC,CAAD,CAAH,CAAOP,MAAP,GAAgB,CAAvB;AACAM,YAAAA,GAAG,CAACC,CAAD,CAAH,CAAOI,IAAP,IAAeL,GAAG,CAACC,CAAD,CAAH,CAAOI,IAAP,IAAe,IAAf,GAAsBN,IAAI,CAACF,CAAD,CAAJ,CAAQ,CAAR,CAArC;;AAEA,gBAAIO,SAAS,IAAKb,WAAW,CAACQ,IAAI,CAACF,CAAD,CAAJ,CAAQ,CAAR,CAAD,CAAX,GAA0B,CAA5C,EAAgD;AAAE;AAChDO,cAAAA,SAAS,GAAG,KAAZ;AACAJ,cAAAA,GAAG,CAACC,CAAD,CAAH,CAAOI,IAAP,IAAeL,GAAG,CAACC,CAAD,CAAH,CAAOI,IAAP,EAAaG,SAAb,CAAuB,CAAvB,EAA0BR,GAAG,CAACC,CAAD,CAAH,CAAOI,IAAP,EAAaX,MAAb,GAAsB,CAAhD,EAAmDY,OAAnD,CAA2D,KAA3D,EAAkE,GAAlE,CAAf;AACD;AACF,WARD,MASK;AACH,gBAAIJ,CAAC,KAAKC,IAAI,GAAG,CAAb,IAAkBJ,IAAI,CAACF,CAAD,CAAJ,CAAQK,CAAR,EAAWO,OAAX,CAAmB,GAAnB,MAA4B,CAA9C,IAAoDlB,WAAW,CAACQ,IAAI,CAACF,CAAD,CAAJ,CAAQK,CAAR,CAAD,CAAX,GAA0B,CAAlF,EAAsF;AACpFF,cAAAA,GAAG,CAACC,CAAD,CAAH,CAAOS,IAAP,CAAYX,IAAI,CAACF,CAAD,CAAJ,CAAQK,CAAR,EAAWM,SAAX,CAAqB,CAArB,EAAwBF,OAAxB,CAAgC,KAAhC,EAAuC,GAAvC,CAAZ;AACAF,cAAAA,SAAS,GAAG,IAAZ;AACD,aAHD,MAIK;AACHJ,cAAAA,GAAG,CAACC,CAAD,CAAH,CAAOS,IAAP,CAAYX,IAAI,CAACF,CAAD,CAAJ,CAAQK,CAAR,EAAWI,OAAX,CAAmB,KAAnB,EAA0B,GAA1B,CAAZ;AACAF,cAAAA,SAAS,GAAG,KAAZ;AACD;AACF;AACF;;AACD,YAAI,CAACA,SAAL,EAAgB;AACdH,UAAAA,CAAC,IAAI,CAAL;AACD;AACF;;AAED,aAAOD,GAAP;AACD,KAhDa;;AAkDd;;;;;;AAMAW,IAAAA,SAAS,EAAE,UAAUX,GAAV,EAAe;AACxB,UAAIH,CAAJ;AAAA,UAAOC,IAAP;AAAA,UAAaI,CAAb;AAAA,UAAgBC,IAAhB;AAAA,UAAsBX,GAAG,GAAG,EAA5B;AAAA,UAAgCoB,GAAhC;;AAEA,WAAKf,CAAC,GAAG,CAAJ,EAAOC,IAAI,GAAGE,GAAG,CAACN,MAAvB,EAA+BG,CAAC,GAAGC,IAAnC,EAAyCD,CAAC,IAAI,CAA9C,EAAiD;AAC/CM,QAAAA,IAAI,GAAGH,GAAG,CAACH,CAAD,CAAH,CAAOH,MAAd;;AAEA,aAAKQ,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGC,IAAhB,EAAsBD,CAAC,IAAI,CAA3B,EAA8B;AAC5B,cAAIA,CAAC,GAAG,CAAR,EAAW;AACTV,YAAAA,GAAG,IAAI,IAAP;AACD;;AACDoB,UAAAA,GAAG,GAAGZ,GAAG,CAACH,CAAD,CAAH,CAAOK,CAAP,CAAN;;AAEA,cAAI,OAAOU,GAAP,KAAe,QAAnB,EAA6B;AAC3B,gBAAIA,GAAG,CAACH,OAAJ,CAAY,IAAZ,IAAoB,CAAC,CAAzB,EAA4B;AAC1BjB,cAAAA,GAAG,IAAI,MAAMoB,GAAG,CAACN,OAAJ,CAAY,IAAZ,EAAkB,IAAlB,CAAN,GAAgC,GAAvC;AACD,aAFD,MAGK;AACHd,cAAAA,GAAG,IAAIoB,GAAP;AACD;AACF,WAPD,MAQK,IAAIA,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAK,KAAK,CAAjC,EAAoC;AAAE;AACzCpB,YAAAA,GAAG,IAAI,EAAP;AACD,WAFI,MAGA;AACHA,YAAAA,GAAG,IAAIoB,GAAP;AACD;AACF;;AAED,YAAIf,CAAC,KAAKC,IAAI,GAAG,CAAjB,EAAoB;AAClBN,UAAAA,GAAG,IAAI,IAAP;AACD;AACF;;AAED,aAAOA,GAAP;AACD;AA1Fa,GAAhB;;AA6FA,MAAI,OAAOqB,OAAP,KAAmB,WAAvB,EAAoC;AAClCA,IAAAA,OAAO,CAACjB,KAAR,GAAgBD,SAAS,CAACC,KAA1B;AACAiB,IAAAA,OAAO,CAACF,SAAR,GAAoBhB,SAAS,CAACgB,SAA9B;AACD,GAHD,MAGO;AACLrB,IAAAA,MAAM,CAACK,SAAP,GAAmBA,SAAnB;AACD;AACF,CA1GA,EA0GCmB,MA1GD,CAAD","sourcesContent":["/**\n * SheetClip - Spreadsheet Clipboard Parser\n * version 0.2\n *\n * This tiny library transforms JavaScript arrays to strings that are pasteable by LibreOffice, OpenOffice,\n * Google Docs and Microsoft Excel.\n *\n * Copyright 2012, Marcin Warpechowski\n * Licensed under the MIT license.\n * http://github.com/warpech/sheetclip/\n */\n/*jslint white: true*/\n(function (global) {\n  \"use strict\";\n\n  function countQuotes(str) {\n    return str.split('\"').length - 1;\n  }\n\n  var SheetClip = {\n    /**\n     * Decode spreadsheet string into array\n     *\n     * @param {String} str\n     * @returns {Array}\n     */\n    parse: function (str) {\n      var r, rLen, rows, arr = [], a = 0, c, cLen, multiline, last;\n\n      rows = str.replace(/\\r\\n|\\r/g, '\\n').split('\\n');\n\n      if (rows.length > 1 && rows[rows.length - 1] === '') {\n        rows.pop();\n      }\n      for (r = 0, rLen = rows.length; r < rLen; r += 1) {\n        rows[r] = rows[r].split('\\t');\n\n        for (c = 0, cLen = rows[r].length; c < cLen; c += 1) {\n          if (!arr[a]) {\n            arr[a] = [];\n          }\n          if (multiline && c === 0) {\n            last = arr[a].length - 1;\n            arr[a][last] = arr[a][last] + '\\n' + rows[r][0];\n\n            if (multiline && (countQuotes(rows[r][0]) & 1)) { //& 1 is a bitwise way of performing mod 2\n              multiline = false;\n              arr[a][last] = arr[a][last].substring(0, arr[a][last].length - 1).replace(/\"\"/g, '\"');\n            }\n          }\n          else {\n            if (c === cLen - 1 && rows[r][c].indexOf('\"') === 0 && (countQuotes(rows[r][c]) & 1)) {\n              arr[a].push(rows[r][c].substring(1).replace(/\"\"/g, '\"'));\n              multiline = true;\n            }\n            else {\n              arr[a].push(rows[r][c].replace(/\"\"/g, '\"'));\n              multiline = false;\n            }\n          }\n        }\n        if (!multiline) {\n          a += 1;\n        }\n      }\n\n      return arr;\n    },\n\n    /**\n     * Encode array into valid spreadsheet string\n     *\n     * @param arr\n     * @returns {String}\n     */\n    stringify: function (arr) {\n      var r, rLen, c, cLen, str = '', val;\n\n      for (r = 0, rLen = arr.length; r < rLen; r += 1) {\n        cLen = arr[r].length;\n\n        for (c = 0; c < cLen; c += 1) {\n          if (c > 0) {\n            str += '\\t';\n          }\n          val = arr[r][c];\n\n          if (typeof val === 'string') {\n            if (val.indexOf('\\n') > -1) {\n              str += '\"' + val.replace(/\"/g, '\"\"') + '\"';\n            }\n            else {\n              str += val;\n            }\n          }\n          else if (val === null || val === void 0) { // void 0 resolves to undefined\n            str += '';\n          }\n          else {\n            str += val;\n          }\n        }\n\n        if (r !== rLen - 1) {\n          str += '\\n';\n        }\n      }\n\n      return str;\n    }\n  };\n\n  if (typeof exports !== 'undefined') {\n    exports.parse = SheetClip.parse;\n    exports.stringify = SheetClip.stringify;\n  } else {\n    global.SheetClip = SheetClip;\n  }\n}(window));\n"]},"metadata":{},"sourceType":"script"}