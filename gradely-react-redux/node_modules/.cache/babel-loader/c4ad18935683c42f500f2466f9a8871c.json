{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport BasePlugin from './../_base';\nimport { arrayEach, arrayFilter, arrayReduce, arrayMap } from './../../helpers/array';\nimport { cancelAnimationFrame, requestAnimationFrame } from './../../helpers/feature';\nimport GhostTable from './../../utils/ghostTable';\nimport { isObject, hasOwnProperty } from './../../helpers/object';\nimport { valueAccordingPercent, rangeEach } from './../../helpers/number';\nimport { registerPlugin } from './../../plugins';\nimport SamplesGenerator from './../../utils/samplesGenerator';\nimport { isPercentValue } from './../../helpers/string';\nimport { ViewportColumnsCalculator } from './../../3rdparty/walkontable/src';\nvar privatePool = new WeakMap();\n/**\n * @plugin AutoColumnSize\n *\n * @description\n * This plugin allows to set column widths based on their widest cells.\n *\n * By default, the plugin is declared as `undefined`, which makes it enabled (same as if it was declared as `true`).\n * Enabling this plugin may decrease the overall table performance, as it needs to calculate the widths of all cells to\n * resize the columns accordingly.\n * If you experience problems with the performance, try turning this feature off and declaring the column widths manually.\n *\n * Column width calculations are divided into sync and async part. Each of this parts has their own advantages and\n * disadvantages. Synchronous calculations are faster but they block the browser UI, while the slower asynchronous\n * operations don't block the browser UI.\n *\n * To configure the sync/async distribution, you can pass an absolute value (number of columns) or a percentage value to a config object:\n * ```js\n * // as a number (300 columns in sync, rest async)\n * autoColumnSize: {syncLimit: 300},\n *\n * // as a string (percent)\n * autoColumnSize: {syncLimit: '40%'},\n * ```\n *\n * To configure this plugin see {@link Options#autoColumnSize}.\n *\n * @example\n * ```js\n * const hot = new Handsontable(document.getElementById('example'), {\n *   date: getData(),\n *   autoColumnSize: true\n * });\n * // Access to plugin instance:\n * const plugin = hot.getPlugin('autoColumnSize');\n *\n * plugin.getColumnWidth(4);\n *\n * if (plugin.isEnabled()) {\n *   // code...\n * }\n * ```\n */\n\nvar AutoColumnSize = /*#__PURE__*/function (_BasePlugin) {\n  _inherits(AutoColumnSize, _BasePlugin);\n\n  _createClass(AutoColumnSize, null, [{\n    key: \"CALCULATION_STEP\",\n    get: function get() {\n      return 50;\n    }\n  }, {\n    key: \"SYNC_CALCULATION_LIMIT\",\n    get: function get() {\n      return 50;\n    }\n  }]);\n\n  function AutoColumnSize(hotInstance) {\n    var _this;\n\n    _classCallCheck(this, AutoColumnSize);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AutoColumnSize).call(this, hotInstance));\n    privatePool.set(_assertThisInitialized(_this), {\n      /**\n       * Cached column header names. It is used to diff current column headers with previous state and detect which\n       * columns width should be updated.\n       *\n       * @private\n       * @type {Array}\n       */\n      cachedColumnHeaders: []\n    });\n    /**\n     * Cached columns widths.\n     *\n     * @type {Number[]}\n     */\n\n    _this.widths = [];\n    /**\n     * Instance of {@link GhostTable} for rows and columns size calculations.\n     *\n     * @private\n     * @type {GhostTable}\n     */\n\n    _this.ghostTable = new GhostTable(_this.hot);\n    /**\n     * Instance of {@link SamplesGenerator} for generating samples necessary for columns width calculations.\n     *\n     * @private\n     * @type {SamplesGenerator}\n     */\n\n    _this.samplesGenerator = new SamplesGenerator(function (row, column) {\n      var cellMeta = _this.hot.getCellMeta(row, column);\n\n      var cellValue = '';\n\n      if (!cellMeta.spanned) {\n        cellValue = _this.hot.getDataAtCell(row, column);\n      }\n\n      var bundleCountSeed = 0;\n\n      if (cellMeta.label) {\n        var _cellMeta$label = cellMeta.label,\n            labelValue = _cellMeta$label.value,\n            labelProperty = _cellMeta$label.property;\n        var labelText = '';\n\n        if (labelValue) {\n          labelText = typeof labelValue === 'function' ? labelValue(row, column, _this.hot.colToProp(column), cellValue) : labelValue;\n        } else if (labelProperty) {\n          var labelData = _this.hot.getDataAtRowProp(row, labelProperty);\n\n          labelText = labelData !== null ? labelData : '';\n        }\n\n        bundleCountSeed = labelText.length;\n      }\n\n      return {\n        value: cellValue,\n        bundleCountSeed: bundleCountSeed\n      };\n    });\n    /**\n     * `true` only if the first calculation was performed\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    _this.firstCalculation = true;\n    /**\n     * `true` if the size calculation is in progress.\n     *\n     * @type {Boolean}\n     */\n\n    _this.inProgress = false; // moved to constructor to allow auto-sizing the columns when the plugin is disabled\n\n    _this.addHook('beforeColumnResize', function (col, size, isDblClick) {\n      return _this.onBeforeColumnResize(col, size, isDblClick);\n    });\n\n    return _this;\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` than the {@link AutoColumnSize#enablePlugin} method is called.\n   *\n   * @returns {Boolean}\n   */\n\n\n  _createClass(AutoColumnSize, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.hot.getSettings().autoColumnSize !== false && !this.hot.getSettings().colWidths;\n    }\n    /**\n     * Enables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"enablePlugin\",\n    value: function enablePlugin() {\n      var _this2 = this;\n\n      if (this.enabled) {\n        return;\n      }\n\n      var setting = this.hot.getSettings().autoColumnSize;\n\n      if (setting && setting.useHeaders !== null && setting.useHeaders !== void 0) {\n        this.ghostTable.setSetting('useHeaders', setting.useHeaders);\n      }\n\n      this.setSamplingOptions();\n      this.addHook('afterLoadData', function () {\n        return _this2.onAfterLoadData();\n      });\n      this.addHook('beforeChange', function (changes) {\n        return _this2.onBeforeChange(changes);\n      });\n      this.addHook('beforeRender', function (force) {\n        return _this2.onBeforeRender(force);\n      });\n      this.addHook('modifyColWidth', function (width, col) {\n        return _this2.getColumnWidth(col, width);\n      });\n      this.addHook('afterInit', function () {\n        return _this2.onAfterInit();\n      });\n\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"enablePlugin\", this).call(this);\n    }\n    /**\n     * Updates the plugin state. This method is executed when {@link Core#updateSettings} is invoked.\n     */\n\n  }, {\n    key: \"updatePlugin\",\n    value: function updatePlugin() {\n      var changedColumns = this.findColumnsWhereHeaderWasChanged();\n\n      if (changedColumns.length) {\n        this.clearCache(changedColumns);\n      }\n\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"updatePlugin\", this).call(this);\n    }\n    /**\n     * Disables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"disablePlugin\",\n    value: function disablePlugin() {\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"disablePlugin\", this).call(this);\n    }\n    /**\n     * Calculates a columns width.\n     *\n     * @param {Number|Object} colRange Column index or an object with `from` and `to` indexes as a range.\n     * @param {Number|Object} rowRange Row index or an object with `from` and `to` indexes as a range.\n     * @param {Boolean} [force=false] If `true` the calculation will be processed regardless of whether the width exists in the cache.\n     */\n\n  }, {\n    key: \"calculateColumnsWidth\",\n    value: function calculateColumnsWidth() {\n      var _this3 = this;\n\n      var colRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        from: 0,\n        to: this.hot.countCols() - 1\n      };\n      var rowRange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        from: 0,\n        to: this.hot.countRows() - 1\n      };\n      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var columnsRange = typeof colRange === 'number' ? {\n        from: colRange,\n        to: colRange\n      } : colRange;\n      var rowsRange = typeof rowRange === 'number' ? {\n        from: rowRange,\n        to: rowRange\n      } : rowRange;\n      rangeEach(columnsRange.from, columnsRange.to, function (col) {\n        if (force || _this3.widths[col] === void 0 && !_this3.hot._getColWidthFromSettings(col)) {\n          var samples = _this3.samplesGenerator.generateColumnSamples(col, rowsRange);\n\n          arrayEach(samples, function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 2),\n                column = _ref2[0],\n                sample = _ref2[1];\n\n            return _this3.ghostTable.addColumn(column, sample);\n          });\n        }\n      });\n\n      if (this.ghostTable.columns.length) {\n        this.ghostTable.getWidths(function (col, width) {\n          _this3.widths[col] = width;\n        });\n        this.ghostTable.clean();\n      }\n    }\n    /**\n     * Calculates all columns width. The calculated column will be cached in the {@link AutoColumnSize#widths} property.\n     * To retrieve width for specyfied column use {@link AutoColumnSize#getColumnWidth} method.\n     *\n     * @param {Object|Number} rowRange Row index or an object with `from` and `to` properties which define row range.\n     */\n\n  }, {\n    key: \"calculateAllColumnsWidth\",\n    value: function calculateAllColumnsWidth() {\n      var _this4 = this;\n\n      var rowRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        from: 0,\n        to: this.hot.countRows() - 1\n      };\n      var current = 0;\n      var length = this.hot.countCols() - 1;\n      var timer = null;\n      this.inProgress = true;\n\n      var loop = function loop() {\n        // When hot was destroyed after calculating finished cancel frame\n        if (!_this4.hot) {\n          cancelAnimationFrame(timer);\n          _this4.inProgress = false;\n          return;\n        }\n\n        _this4.calculateColumnsWidth({\n          from: current,\n          to: Math.min(current + AutoColumnSize.CALCULATION_STEP, length)\n        }, rowRange);\n\n        current = current + AutoColumnSize.CALCULATION_STEP + 1;\n\n        if (current < length) {\n          timer = requestAnimationFrame(loop);\n        } else {\n          cancelAnimationFrame(timer);\n          _this4.inProgress = false; // @TODO Should call once per render cycle, currently fired separately in different plugins\n\n          _this4.hot.view.wt.wtOverlays.adjustElementsSize();\n        }\n      };\n\n      var syncLimit = this.getSyncCalculationLimit(); // sync\n\n      if (this.firstCalculation && syncLimit >= 0) {\n        this.calculateColumnsWidth({\n          from: 0,\n          to: syncLimit\n        }, rowRange);\n        this.firstCalculation = false;\n        current = syncLimit + 1;\n      } // async\n\n\n      if (current < length) {\n        loop();\n      } else {\n        this.inProgress = false;\n      }\n    }\n    /**\n     * Sets the sampling options.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"setSamplingOptions\",\n    value: function setSamplingOptions() {\n      var setting = this.hot.getSettings().autoColumnSize;\n      var samplingRatio = setting && hasOwnProperty(setting, 'samplingRatio') ? this.hot.getSettings().autoColumnSize.samplingRatio : void 0;\n      var allowSampleDuplicates = setting && hasOwnProperty(setting, 'allowSampleDuplicates') ? this.hot.getSettings().autoColumnSize.allowSampleDuplicates : void 0;\n\n      if (samplingRatio && !isNaN(samplingRatio)) {\n        this.samplesGenerator.setSampleCount(parseInt(samplingRatio, 10));\n      }\n\n      if (allowSampleDuplicates) {\n        this.samplesGenerator.setAllowDuplicates(allowSampleDuplicates);\n      }\n    }\n    /**\n     * Recalculates all columns width (overwrite cache values).\n     */\n\n  }, {\n    key: \"recalculateAllColumnsWidth\",\n    value: function recalculateAllColumnsWidth() {\n      if (this.hot.view && this.hot.view.wt.wtTable.isVisible()) {\n        this.clearCache();\n        this.calculateAllColumnsWidth();\n      }\n    }\n    /**\n     * Gets value which tells how many columns should be calculated synchronously (rest of the columns will be calculated\n     * asynchronously). The limit is calculated based on `syncLimit` set to `autoColumnSize` option (see {@link Options#autoColumnSize}).\n     *\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"getSyncCalculationLimit\",\n    value: function getSyncCalculationLimit() {\n      /* eslint-disable no-bitwise */\n      var limit = AutoColumnSize.SYNC_CALCULATION_LIMIT;\n      var colsLimit = this.hot.countCols() - 1;\n\n      if (isObject(this.hot.getSettings().autoColumnSize)) {\n        limit = this.hot.getSettings().autoColumnSize.syncLimit;\n\n        if (isPercentValue(limit)) {\n          limit = valueAccordingPercent(colsLimit, limit);\n        } else {\n          // Force to Number\n          limit >>= 0;\n        }\n      }\n\n      return Math.min(limit, colsLimit);\n    }\n    /**\n     * Gets the calculated column width.\n     *\n     * @param {Number} column Column index.\n     * @param {Number} [defaultWidth] Default column width. It will be picked up if no calculated width found.\n     * @param {Boolean} [keepMinimum=true] If `true` then returned value won't be smaller then 50 (default column width).\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"getColumnWidth\",\n    value: function getColumnWidth(column) {\n      var defaultWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : void 0;\n      var keepMinimum = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var width = defaultWidth;\n\n      if (width === void 0) {\n        width = this.widths[column];\n\n        if (keepMinimum && typeof width === 'number') {\n          width = Math.max(width, ViewportColumnsCalculator.DEFAULT_WIDTH);\n        }\n      }\n\n      return width;\n    }\n    /**\n     * Gets the first visible column.\n     *\n     * @returns {Number} Returns column index, -1 if table is not rendered or if there are no columns to base the the calculations on.\n     */\n\n  }, {\n    key: \"getFirstVisibleColumn\",\n    value: function getFirstVisibleColumn() {\n      var wot = this.hot.view.wt;\n\n      if (wot.wtViewport.columnsVisibleCalculator) {\n        return wot.wtTable.getFirstVisibleColumn();\n      }\n\n      if (wot.wtViewport.columnsRenderCalculator) {\n        return wot.wtTable.getFirstRenderedColumn();\n      }\n\n      return -1;\n    }\n    /**\n     * Gets the last visible column.\n     *\n     * @returns {Number} Returns column index or -1 if table is not rendered.\n     */\n\n  }, {\n    key: \"getLastVisibleColumn\",\n    value: function getLastVisibleColumn() {\n      var wot = this.hot.view.wt;\n\n      if (wot.wtViewport.columnsVisibleCalculator) {\n        return wot.wtTable.getLastVisibleColumn();\n      }\n\n      if (wot.wtViewport.columnsRenderCalculator) {\n        return wot.wtTable.getLastRenderedColumn();\n      }\n\n      return -1;\n    }\n    /**\n     * Collects all columns which titles has been changed in comparison to the previous state.\n     *\n     * @private\n     * @returns {Array} It returns an array of physical column indexes.\n     */\n\n  }, {\n    key: \"findColumnsWhereHeaderWasChanged\",\n    value: function findColumnsWhereHeaderWasChanged() {\n      var columnHeaders = this.hot.getColHeader();\n\n      var _privatePool$get = privatePool.get(this),\n          cachedColumnHeaders = _privatePool$get.cachedColumnHeaders;\n\n      var changedColumns = arrayReduce(columnHeaders, function (acc, columnTitle, physicalColumn) {\n        var cachedColumnsLength = cachedColumnHeaders.length;\n\n        if (cachedColumnsLength - 1 < physicalColumn || cachedColumnHeaders[physicalColumn] !== columnTitle) {\n          acc.push(physicalColumn);\n        }\n\n        if (cachedColumnsLength - 1 < physicalColumn) {\n          cachedColumnHeaders.push(columnTitle);\n        } else {\n          cachedColumnHeaders[physicalColumn] = columnTitle;\n        }\n\n        return acc;\n      }, []);\n      return changedColumns;\n    }\n    /**\n     * Clears cache of calculated column widths. If you want to clear only selected columns pass an array with their indexes.\n     * Otherwise whole cache will be cleared.\n     *\n     * @param {Number[]} [columns] List of physical column indexes to clear.\n     */\n\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {\n      var _this5 = this;\n\n      var columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (columns.length) {\n        arrayEach(columns, function (physicalIndex) {\n          _this5.widths[physicalIndex] = void 0;\n        });\n      } else {\n        this.widths.length = 0;\n      }\n    }\n    /**\n     * Checks if all widths were calculated. If not then return `true` (need recalculate).\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isNeedRecalculate\",\n    value: function isNeedRecalculate() {\n      return !!arrayFilter(this.widths, function (item) {\n        return item === void 0;\n      }).length;\n    }\n    /**\n     * On before render listener.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onBeforeRender\",\n    value: function onBeforeRender() {\n      var force = this.hot.renderCall;\n      var rowsCount = this.hot.countRows();\n      var firstVisibleColumn = this.getFirstVisibleColumn();\n      var lastVisibleColumn = this.getLastVisibleColumn();\n\n      if (firstVisibleColumn === -1 || lastVisibleColumn === -1) {\n        return;\n      } // Keep last column widths unchanged for situation when all rows was deleted or trimmed (pro #6)\n\n\n      if (!rowsCount) {\n        return;\n      }\n\n      this.calculateColumnsWidth({\n        from: firstVisibleColumn,\n        to: lastVisibleColumn\n      }, void 0, force);\n\n      if (this.isNeedRecalculate() && !this.inProgress) {\n        this.calculateAllColumnsWidth();\n      }\n    }\n    /**\n     * On after load data listener.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onAfterLoadData\",\n    value: function onAfterLoadData() {\n      var _this6 = this;\n\n      if (this.hot.view) {\n        this.recalculateAllColumnsWidth();\n      } else {\n        // first load - initialization\n        setTimeout(function () {\n          if (_this6.hot) {\n            _this6.recalculateAllColumnsWidth();\n          }\n        }, 0);\n      }\n    }\n    /**\n     * On before change listener.\n     *\n     * @private\n     * @param {Array} changes\n     */\n\n  }, {\n    key: \"onBeforeChange\",\n    value: function onBeforeChange(changes) {\n      var _this7 = this;\n\n      var changedColumns = arrayMap(changes, function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            column = _ref4[1];\n\n        return _this7.hot.propToCol(column);\n      });\n      this.clearCache(changedColumns);\n    }\n    /**\n     * On before column resize listener.\n     *\n     * @private\n     * @param {Number} col\n     * @param {Number} size\n     * @param {Boolean} isDblClick\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"onBeforeColumnResize\",\n    value: function onBeforeColumnResize(col, size, isDblClick) {\n      var newSize = size;\n\n      if (isDblClick) {\n        this.calculateColumnsWidth(col, void 0, true);\n        newSize = this.getColumnWidth(col, void 0, false);\n      }\n\n      return newSize;\n    }\n    /**\n     * On after Handsontable init fill plugin with all necessary values.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onAfterInit\",\n    value: function onAfterInit() {\n      privatePool.get(this).cachedColumnHeaders = this.hot.getColHeader();\n    }\n    /**\n     * Destroys the plugin instance.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.ghostTable.clean();\n\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"destroy\", this).call(this);\n    }\n  }]);\n\n  return AutoColumnSize;\n}(BasePlugin);\n\nregisterPlugin('autoColumnSize', AutoColumnSize);\nexport default AutoColumnSize;","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react/node_modules/handsontable/es/plugins/autoColumnSize/autoColumnSize.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","TypeError","Object","toString","call","_arr","_n","_d","_e","undefined","_i","_s","next","done","push","value","length","err","Array","isArray","_classCallCheck","instance","Constructor","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","_get","target","property","receiver","Reflect","get","base","_superPropBase","desc","getOwnPropertyDescriptor","object","hasOwnProperty","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_defineProperties","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","_inherits","subClass","superClass","create","_setPrototypeOf","p","BasePlugin","arrayEach","arrayFilter","arrayReduce","arrayMap","cancelAnimationFrame","requestAnimationFrame","GhostTable","isObject","valueAccordingPercent","rangeEach","registerPlugin","SamplesGenerator","isPercentValue","ViewportColumnsCalculator","privatePool","WeakMap","AutoColumnSize","_BasePlugin","hotInstance","_this","set","cachedColumnHeaders","widths","ghostTable","hot","samplesGenerator","row","column","cellMeta","getCellMeta","cellValue","spanned","getDataAtCell","bundleCountSeed","label","_cellMeta$label","labelValue","labelProperty","labelText","colToProp","labelData","getDataAtRowProp","firstCalculation","inProgress","addHook","col","size","isDblClick","onBeforeColumnResize","isEnabled","getSettings","autoColumnSize","colWidths","enablePlugin","_this2","enabled","setting","useHeaders","setSetting","setSamplingOptions","onAfterLoadData","changes","onBeforeChange","force","onBeforeRender","width","getColumnWidth","onAfterInit","updatePlugin","changedColumns","findColumnsWhereHeaderWasChanged","clearCache","disablePlugin","calculateColumnsWidth","_this3","colRange","arguments","from","to","countCols","rowRange","countRows","columnsRange","rowsRange","_getColWidthFromSettings","samples","generateColumnSamples","_ref","_ref2","sample","addColumn","columns","getWidths","clean","calculateAllColumnsWidth","_this4","current","timer","loop","Math","min","CALCULATION_STEP","view","wt","wtOverlays","adjustElementsSize","syncLimit","getSyncCalculationLimit","samplingRatio","allowSampleDuplicates","isNaN","setSampleCount","parseInt","setAllowDuplicates","recalculateAllColumnsWidth","wtTable","isVisible","limit","SYNC_CALCULATION_LIMIT","colsLimit","defaultWidth","keepMinimum","max","DEFAULT_WIDTH","getFirstVisibleColumn","wot","wtViewport","columnsVisibleCalculator","columnsRenderCalculator","getFirstRenderedColumn","getLastVisibleColumn","getLastRenderedColumn","columnHeaders","getColHeader","_privatePool$get","acc","columnTitle","physicalColumn","cachedColumnsLength","_this5","physicalIndex","isNeedRecalculate","item","renderCall","rowsCount","firstVisibleColumn","lastVisibleColumn","_this6","setTimeout","_this7","_ref3","_ref4","propToCol","newSize","destroy"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.symbol\";\nimport \"core-js/modules/es.symbol.description\";\nimport \"core-js/modules/es.symbol.iterator\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.object.get-own-property-descriptor\";\nimport \"core-js/modules/es.object.get-prototype-of\";\nimport \"core-js/modules/es.object.set-prototype-of\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.reflect.get\";\nimport \"core-js/modules/es.regexp.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/es.weak-map\";\nimport \"core-js/modules/web.dom-collections.iterator\";\nimport \"core-js/modules/web.timers\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport BasePlugin from './../_base';\nimport { arrayEach, arrayFilter, arrayReduce, arrayMap } from './../../helpers/array';\nimport { cancelAnimationFrame, requestAnimationFrame } from './../../helpers/feature';\nimport GhostTable from './../../utils/ghostTable';\nimport { isObject, hasOwnProperty } from './../../helpers/object';\nimport { valueAccordingPercent, rangeEach } from './../../helpers/number';\nimport { registerPlugin } from './../../plugins';\nimport SamplesGenerator from './../../utils/samplesGenerator';\nimport { isPercentValue } from './../../helpers/string';\nimport { ViewportColumnsCalculator } from './../../3rdparty/walkontable/src';\nvar privatePool = new WeakMap();\n/**\n * @plugin AutoColumnSize\n *\n * @description\n * This plugin allows to set column widths based on their widest cells.\n *\n * By default, the plugin is declared as `undefined`, which makes it enabled (same as if it was declared as `true`).\n * Enabling this plugin may decrease the overall table performance, as it needs to calculate the widths of all cells to\n * resize the columns accordingly.\n * If you experience problems with the performance, try turning this feature off and declaring the column widths manually.\n *\n * Column width calculations are divided into sync and async part. Each of this parts has their own advantages and\n * disadvantages. Synchronous calculations are faster but they block the browser UI, while the slower asynchronous\n * operations don't block the browser UI.\n *\n * To configure the sync/async distribution, you can pass an absolute value (number of columns) or a percentage value to a config object:\n * ```js\n * // as a number (300 columns in sync, rest async)\n * autoColumnSize: {syncLimit: 300},\n *\n * // as a string (percent)\n * autoColumnSize: {syncLimit: '40%'},\n * ```\n *\n * To configure this plugin see {@link Options#autoColumnSize}.\n *\n * @example\n * ```js\n * const hot = new Handsontable(document.getElementById('example'), {\n *   date: getData(),\n *   autoColumnSize: true\n * });\n * // Access to plugin instance:\n * const plugin = hot.getPlugin('autoColumnSize');\n *\n * plugin.getColumnWidth(4);\n *\n * if (plugin.isEnabled()) {\n *   // code...\n * }\n * ```\n */\n\nvar AutoColumnSize =\n/*#__PURE__*/\nfunction (_BasePlugin) {\n  _inherits(AutoColumnSize, _BasePlugin);\n\n  _createClass(AutoColumnSize, null, [{\n    key: \"CALCULATION_STEP\",\n    get: function get() {\n      return 50;\n    }\n  }, {\n    key: \"SYNC_CALCULATION_LIMIT\",\n    get: function get() {\n      return 50;\n    }\n  }]);\n\n  function AutoColumnSize(hotInstance) {\n    var _this;\n\n    _classCallCheck(this, AutoColumnSize);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AutoColumnSize).call(this, hotInstance));\n    privatePool.set(_assertThisInitialized(_this), {\n      /**\n       * Cached column header names. It is used to diff current column headers with previous state and detect which\n       * columns width should be updated.\n       *\n       * @private\n       * @type {Array}\n       */\n      cachedColumnHeaders: []\n    });\n    /**\n     * Cached columns widths.\n     *\n     * @type {Number[]}\n     */\n\n    _this.widths = [];\n    /**\n     * Instance of {@link GhostTable} for rows and columns size calculations.\n     *\n     * @private\n     * @type {GhostTable}\n     */\n\n    _this.ghostTable = new GhostTable(_this.hot);\n    /**\n     * Instance of {@link SamplesGenerator} for generating samples necessary for columns width calculations.\n     *\n     * @private\n     * @type {SamplesGenerator}\n     */\n\n    _this.samplesGenerator = new SamplesGenerator(function (row, column) {\n      var cellMeta = _this.hot.getCellMeta(row, column);\n\n      var cellValue = '';\n\n      if (!cellMeta.spanned) {\n        cellValue = _this.hot.getDataAtCell(row, column);\n      }\n\n      var bundleCountSeed = 0;\n\n      if (cellMeta.label) {\n        var _cellMeta$label = cellMeta.label,\n            labelValue = _cellMeta$label.value,\n            labelProperty = _cellMeta$label.property;\n        var labelText = '';\n\n        if (labelValue) {\n          labelText = typeof labelValue === 'function' ? labelValue(row, column, _this.hot.colToProp(column), cellValue) : labelValue;\n        } else if (labelProperty) {\n          var labelData = _this.hot.getDataAtRowProp(row, labelProperty);\n\n          labelText = labelData !== null ? labelData : '';\n        }\n\n        bundleCountSeed = labelText.length;\n      }\n\n      return {\n        value: cellValue,\n        bundleCountSeed: bundleCountSeed\n      };\n    });\n    /**\n     * `true` only if the first calculation was performed\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    _this.firstCalculation = true;\n    /**\n     * `true` if the size calculation is in progress.\n     *\n     * @type {Boolean}\n     */\n\n    _this.inProgress = false; // moved to constructor to allow auto-sizing the columns when the plugin is disabled\n\n    _this.addHook('beforeColumnResize', function (col, size, isDblClick) {\n      return _this.onBeforeColumnResize(col, size, isDblClick);\n    });\n\n    return _this;\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` than the {@link AutoColumnSize#enablePlugin} method is called.\n   *\n   * @returns {Boolean}\n   */\n\n\n  _createClass(AutoColumnSize, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.hot.getSettings().autoColumnSize !== false && !this.hot.getSettings().colWidths;\n    }\n    /**\n     * Enables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"enablePlugin\",\n    value: function enablePlugin() {\n      var _this2 = this;\n\n      if (this.enabled) {\n        return;\n      }\n\n      var setting = this.hot.getSettings().autoColumnSize;\n\n      if (setting && setting.useHeaders !== null && setting.useHeaders !== void 0) {\n        this.ghostTable.setSetting('useHeaders', setting.useHeaders);\n      }\n\n      this.setSamplingOptions();\n      this.addHook('afterLoadData', function () {\n        return _this2.onAfterLoadData();\n      });\n      this.addHook('beforeChange', function (changes) {\n        return _this2.onBeforeChange(changes);\n      });\n      this.addHook('beforeRender', function (force) {\n        return _this2.onBeforeRender(force);\n      });\n      this.addHook('modifyColWidth', function (width, col) {\n        return _this2.getColumnWidth(col, width);\n      });\n      this.addHook('afterInit', function () {\n        return _this2.onAfterInit();\n      });\n\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"enablePlugin\", this).call(this);\n    }\n    /**\n     * Updates the plugin state. This method is executed when {@link Core#updateSettings} is invoked.\n     */\n\n  }, {\n    key: \"updatePlugin\",\n    value: function updatePlugin() {\n      var changedColumns = this.findColumnsWhereHeaderWasChanged();\n\n      if (changedColumns.length) {\n        this.clearCache(changedColumns);\n      }\n\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"updatePlugin\", this).call(this);\n    }\n    /**\n     * Disables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"disablePlugin\",\n    value: function disablePlugin() {\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"disablePlugin\", this).call(this);\n    }\n    /**\n     * Calculates a columns width.\n     *\n     * @param {Number|Object} colRange Column index or an object with `from` and `to` indexes as a range.\n     * @param {Number|Object} rowRange Row index or an object with `from` and `to` indexes as a range.\n     * @param {Boolean} [force=false] If `true` the calculation will be processed regardless of whether the width exists in the cache.\n     */\n\n  }, {\n    key: \"calculateColumnsWidth\",\n    value: function calculateColumnsWidth() {\n      var _this3 = this;\n\n      var colRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        from: 0,\n        to: this.hot.countCols() - 1\n      };\n      var rowRange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        from: 0,\n        to: this.hot.countRows() - 1\n      };\n      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var columnsRange = typeof colRange === 'number' ? {\n        from: colRange,\n        to: colRange\n      } : colRange;\n      var rowsRange = typeof rowRange === 'number' ? {\n        from: rowRange,\n        to: rowRange\n      } : rowRange;\n      rangeEach(columnsRange.from, columnsRange.to, function (col) {\n        if (force || _this3.widths[col] === void 0 && !_this3.hot._getColWidthFromSettings(col)) {\n          var samples = _this3.samplesGenerator.generateColumnSamples(col, rowsRange);\n\n          arrayEach(samples, function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 2),\n                column = _ref2[0],\n                sample = _ref2[1];\n\n            return _this3.ghostTable.addColumn(column, sample);\n          });\n        }\n      });\n\n      if (this.ghostTable.columns.length) {\n        this.ghostTable.getWidths(function (col, width) {\n          _this3.widths[col] = width;\n        });\n        this.ghostTable.clean();\n      }\n    }\n    /**\n     * Calculates all columns width. The calculated column will be cached in the {@link AutoColumnSize#widths} property.\n     * To retrieve width for specyfied column use {@link AutoColumnSize#getColumnWidth} method.\n     *\n     * @param {Object|Number} rowRange Row index or an object with `from` and `to` properties which define row range.\n     */\n\n  }, {\n    key: \"calculateAllColumnsWidth\",\n    value: function calculateAllColumnsWidth() {\n      var _this4 = this;\n\n      var rowRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        from: 0,\n        to: this.hot.countRows() - 1\n      };\n      var current = 0;\n      var length = this.hot.countCols() - 1;\n      var timer = null;\n      this.inProgress = true;\n\n      var loop = function loop() {\n        // When hot was destroyed after calculating finished cancel frame\n        if (!_this4.hot) {\n          cancelAnimationFrame(timer);\n          _this4.inProgress = false;\n          return;\n        }\n\n        _this4.calculateColumnsWidth({\n          from: current,\n          to: Math.min(current + AutoColumnSize.CALCULATION_STEP, length)\n        }, rowRange);\n\n        current = current + AutoColumnSize.CALCULATION_STEP + 1;\n\n        if (current < length) {\n          timer = requestAnimationFrame(loop);\n        } else {\n          cancelAnimationFrame(timer);\n          _this4.inProgress = false; // @TODO Should call once per render cycle, currently fired separately in different plugins\n\n          _this4.hot.view.wt.wtOverlays.adjustElementsSize();\n        }\n      };\n\n      var syncLimit = this.getSyncCalculationLimit(); // sync\n\n      if (this.firstCalculation && syncLimit >= 0) {\n        this.calculateColumnsWidth({\n          from: 0,\n          to: syncLimit\n        }, rowRange);\n        this.firstCalculation = false;\n        current = syncLimit + 1;\n      } // async\n\n\n      if (current < length) {\n        loop();\n      } else {\n        this.inProgress = false;\n      }\n    }\n    /**\n     * Sets the sampling options.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"setSamplingOptions\",\n    value: function setSamplingOptions() {\n      var setting = this.hot.getSettings().autoColumnSize;\n      var samplingRatio = setting && hasOwnProperty(setting, 'samplingRatio') ? this.hot.getSettings().autoColumnSize.samplingRatio : void 0;\n      var allowSampleDuplicates = setting && hasOwnProperty(setting, 'allowSampleDuplicates') ? this.hot.getSettings().autoColumnSize.allowSampleDuplicates : void 0;\n\n      if (samplingRatio && !isNaN(samplingRatio)) {\n        this.samplesGenerator.setSampleCount(parseInt(samplingRatio, 10));\n      }\n\n      if (allowSampleDuplicates) {\n        this.samplesGenerator.setAllowDuplicates(allowSampleDuplicates);\n      }\n    }\n    /**\n     * Recalculates all columns width (overwrite cache values).\n     */\n\n  }, {\n    key: \"recalculateAllColumnsWidth\",\n    value: function recalculateAllColumnsWidth() {\n      if (this.hot.view && this.hot.view.wt.wtTable.isVisible()) {\n        this.clearCache();\n        this.calculateAllColumnsWidth();\n      }\n    }\n    /**\n     * Gets value which tells how many columns should be calculated synchronously (rest of the columns will be calculated\n     * asynchronously). The limit is calculated based on `syncLimit` set to `autoColumnSize` option (see {@link Options#autoColumnSize}).\n     *\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"getSyncCalculationLimit\",\n    value: function getSyncCalculationLimit() {\n      /* eslint-disable no-bitwise */\n      var limit = AutoColumnSize.SYNC_CALCULATION_LIMIT;\n      var colsLimit = this.hot.countCols() - 1;\n\n      if (isObject(this.hot.getSettings().autoColumnSize)) {\n        limit = this.hot.getSettings().autoColumnSize.syncLimit;\n\n        if (isPercentValue(limit)) {\n          limit = valueAccordingPercent(colsLimit, limit);\n        } else {\n          // Force to Number\n          limit >>= 0;\n        }\n      }\n\n      return Math.min(limit, colsLimit);\n    }\n    /**\n     * Gets the calculated column width.\n     *\n     * @param {Number} column Column index.\n     * @param {Number} [defaultWidth] Default column width. It will be picked up if no calculated width found.\n     * @param {Boolean} [keepMinimum=true] If `true` then returned value won't be smaller then 50 (default column width).\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"getColumnWidth\",\n    value: function getColumnWidth(column) {\n      var defaultWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : void 0;\n      var keepMinimum = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var width = defaultWidth;\n\n      if (width === void 0) {\n        width = this.widths[column];\n\n        if (keepMinimum && typeof width === 'number') {\n          width = Math.max(width, ViewportColumnsCalculator.DEFAULT_WIDTH);\n        }\n      }\n\n      return width;\n    }\n    /**\n     * Gets the first visible column.\n     *\n     * @returns {Number} Returns column index, -1 if table is not rendered or if there are no columns to base the the calculations on.\n     */\n\n  }, {\n    key: \"getFirstVisibleColumn\",\n    value: function getFirstVisibleColumn() {\n      var wot = this.hot.view.wt;\n\n      if (wot.wtViewport.columnsVisibleCalculator) {\n        return wot.wtTable.getFirstVisibleColumn();\n      }\n\n      if (wot.wtViewport.columnsRenderCalculator) {\n        return wot.wtTable.getFirstRenderedColumn();\n      }\n\n      return -1;\n    }\n    /**\n     * Gets the last visible column.\n     *\n     * @returns {Number} Returns column index or -1 if table is not rendered.\n     */\n\n  }, {\n    key: \"getLastVisibleColumn\",\n    value: function getLastVisibleColumn() {\n      var wot = this.hot.view.wt;\n\n      if (wot.wtViewport.columnsVisibleCalculator) {\n        return wot.wtTable.getLastVisibleColumn();\n      }\n\n      if (wot.wtViewport.columnsRenderCalculator) {\n        return wot.wtTable.getLastRenderedColumn();\n      }\n\n      return -1;\n    }\n    /**\n     * Collects all columns which titles has been changed in comparison to the previous state.\n     *\n     * @private\n     * @returns {Array} It returns an array of physical column indexes.\n     */\n\n  }, {\n    key: \"findColumnsWhereHeaderWasChanged\",\n    value: function findColumnsWhereHeaderWasChanged() {\n      var columnHeaders = this.hot.getColHeader();\n\n      var _privatePool$get = privatePool.get(this),\n          cachedColumnHeaders = _privatePool$get.cachedColumnHeaders;\n\n      var changedColumns = arrayReduce(columnHeaders, function (acc, columnTitle, physicalColumn) {\n        var cachedColumnsLength = cachedColumnHeaders.length;\n\n        if (cachedColumnsLength - 1 < physicalColumn || cachedColumnHeaders[physicalColumn] !== columnTitle) {\n          acc.push(physicalColumn);\n        }\n\n        if (cachedColumnsLength - 1 < physicalColumn) {\n          cachedColumnHeaders.push(columnTitle);\n        } else {\n          cachedColumnHeaders[physicalColumn] = columnTitle;\n        }\n\n        return acc;\n      }, []);\n      return changedColumns;\n    }\n    /**\n     * Clears cache of calculated column widths. If you want to clear only selected columns pass an array with their indexes.\n     * Otherwise whole cache will be cleared.\n     *\n     * @param {Number[]} [columns] List of physical column indexes to clear.\n     */\n\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {\n      var _this5 = this;\n\n      var columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (columns.length) {\n        arrayEach(columns, function (physicalIndex) {\n          _this5.widths[physicalIndex] = void 0;\n        });\n      } else {\n        this.widths.length = 0;\n      }\n    }\n    /**\n     * Checks if all widths were calculated. If not then return `true` (need recalculate).\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isNeedRecalculate\",\n    value: function isNeedRecalculate() {\n      return !!arrayFilter(this.widths, function (item) {\n        return item === void 0;\n      }).length;\n    }\n    /**\n     * On before render listener.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onBeforeRender\",\n    value: function onBeforeRender() {\n      var force = this.hot.renderCall;\n      var rowsCount = this.hot.countRows();\n      var firstVisibleColumn = this.getFirstVisibleColumn();\n      var lastVisibleColumn = this.getLastVisibleColumn();\n\n      if (firstVisibleColumn === -1 || lastVisibleColumn === -1) {\n        return;\n      } // Keep last column widths unchanged for situation when all rows was deleted or trimmed (pro #6)\n\n\n      if (!rowsCount) {\n        return;\n      }\n\n      this.calculateColumnsWidth({\n        from: firstVisibleColumn,\n        to: lastVisibleColumn\n      }, void 0, force);\n\n      if (this.isNeedRecalculate() && !this.inProgress) {\n        this.calculateAllColumnsWidth();\n      }\n    }\n    /**\n     * On after load data listener.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onAfterLoadData\",\n    value: function onAfterLoadData() {\n      var _this6 = this;\n\n      if (this.hot.view) {\n        this.recalculateAllColumnsWidth();\n      } else {\n        // first load - initialization\n        setTimeout(function () {\n          if (_this6.hot) {\n            _this6.recalculateAllColumnsWidth();\n          }\n        }, 0);\n      }\n    }\n    /**\n     * On before change listener.\n     *\n     * @private\n     * @param {Array} changes\n     */\n\n  }, {\n    key: \"onBeforeChange\",\n    value: function onBeforeChange(changes) {\n      var _this7 = this;\n\n      var changedColumns = arrayMap(changes, function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            column = _ref4[1];\n\n        return _this7.hot.propToCol(column);\n      });\n      this.clearCache(changedColumns);\n    }\n    /**\n     * On before column resize listener.\n     *\n     * @private\n     * @param {Number} col\n     * @param {Number} size\n     * @param {Boolean} isDblClick\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"onBeforeColumnResize\",\n    value: function onBeforeColumnResize(col, size, isDblClick) {\n      var newSize = size;\n\n      if (isDblClick) {\n        this.calculateColumnsWidth(col, void 0, true);\n        newSize = this.getColumnWidth(col, void 0, false);\n      }\n\n      return newSize;\n    }\n    /**\n     * On after Handsontable init fill plugin with all necessary values.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onAfterInit\",\n    value: function onAfterInit() {\n      privatePool.get(this).cachedColumnHeaders = this.hot.getColHeader();\n    }\n    /**\n     * Destroys the plugin instance.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.ghostTable.clean();\n\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"destroy\", this).call(this);\n    }\n  }]);\n\n  return AutoColumnSize;\n}(BasePlugin);\n\nregisterPlugin('autoColumnSize', AutoColumnSize);\nexport default AutoColumnSize;"]},"metadata":{},"sourceType":"module"}