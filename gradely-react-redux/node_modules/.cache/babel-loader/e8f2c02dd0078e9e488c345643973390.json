{"ast":null,"code":"import { addClass, hasClass } from './../helpers/dom/element';\nimport EventManager from './../eventManager';\nimport { CellCoords } from './../3rdparty/walkontable/src';\nimport { getRenderer } from './index';\n/**\n * Autocomplete renderer\n *\n * @private\n * @renderer AutocompleteRenderer\n * @param {Object} instance Handsontable instance\n * @param {Element} TD Table cell where to render\n * @param {Number} row\n * @param {Number} col\n * @param {String|Number} prop Row object property name\n * @param value Value to render (remember to escape unsafe HTML before inserting to DOM!)\n * @param {Object} cellProperties Cell properites (shared by cell renderer and editor)\n */\n\nfunction autocompleteRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  var rootDocument = instance.rootDocument;\n  var rendererType = cellProperties.allowHtml ? 'html' : 'text';\n  var ARROW = rootDocument.createElement('DIV');\n  ARROW.className = 'htAutocompleteArrow';\n  ARROW.appendChild(rootDocument.createTextNode(String.fromCharCode(9660)));\n\n  for (var _len = arguments.length, args = new Array(_len > 7 ? _len - 7 : 0), _key = 7; _key < _len; _key++) {\n    args[_key - 7] = arguments[_key];\n  }\n\n  getRenderer(rendererType).apply(this, [instance, TD, row, col, prop, value, cellProperties].concat(args));\n\n  if (!TD.firstChild) {\n    // http://jsperf.com/empty-node-if-needed\n    // otherwise empty fields appear borderless in demo/renderers.html (IE)\n    TD.appendChild(rootDocument.createTextNode(String.fromCharCode(160))); // workaround for https://github.com/handsontable/handsontable/issues/1946\n    // this is faster than innerHTML. See: https://github.com/handsontable/handsontable/wiki/JavaScript-&-DOM-performance-tips\n  }\n\n  TD.insertBefore(ARROW, TD.firstChild);\n  addClass(TD, 'htAutocomplete');\n\n  if (!instance.acArrowListener) {\n    var eventManager = new EventManager(instance); // not very elegant but easy and fast\n\n    instance.acArrowListener = function (event) {\n      if (hasClass(event.target, 'htAutocompleteArrow')) {\n        instance.view.wt.getSetting('onCellDblClick', null, new CellCoords(row, col), TD);\n      }\n    };\n\n    eventManager.addEventListener(instance.rootElement, 'mousedown', instance.acArrowListener); // We need to unbind the listener after the table has been destroyed\n\n    instance.addHookOnce('afterDestroy', function () {\n      eventManager.destroy();\n    });\n  }\n}\n\nexport default autocompleteRenderer;","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react/node_modules/handsontable/es/renderers/autocompleteRenderer.js"],"names":["addClass","hasClass","EventManager","CellCoords","getRenderer","autocompleteRenderer","instance","TD","row","col","prop","value","cellProperties","rootDocument","rendererType","allowHtml","ARROW","createElement","className","appendChild","createTextNode","String","fromCharCode","_len","arguments","length","args","Array","_key","apply","concat","firstChild","insertBefore","acArrowListener","eventManager","event","target","view","wt","getSetting","addEventListener","rootElement","addHookOnce","destroy"],"mappings":"AACA,SAASA,QAAT,EAAmBC,QAAnB,QAAmC,0BAAnC;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,SAASC,UAAT,QAA2B,+BAA3B;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA;;;;;;;;;;;;;;AAcA,SAASC,oBAAT,CAA8BC,QAA9B,EAAwCC,EAAxC,EAA4CC,GAA5C,EAAiDC,GAAjD,EAAsDC,IAAtD,EAA4DC,KAA5D,EAAmEC,cAAnE,EAAmF;AACjF,MAAIC,YAAY,GAAGP,QAAQ,CAACO,YAA5B;AACA,MAAIC,YAAY,GAAGF,cAAc,CAACG,SAAf,GAA2B,MAA3B,GAAoC,MAAvD;AACA,MAAIC,KAAK,GAAGH,YAAY,CAACI,aAAb,CAA2B,KAA3B,CAAZ;AACAD,EAAAA,KAAK,CAACE,SAAN,GAAkB,qBAAlB;AACAF,EAAAA,KAAK,CAACG,WAAN,CAAkBN,YAAY,CAACO,cAAb,CAA4BC,MAAM,CAACC,YAAP,CAAoB,IAApB,CAA5B,CAAlB;;AAEA,OAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAG,IAAIC,KAAJ,CAAUJ,IAAI,GAAG,CAAP,GAAWA,IAAI,GAAG,CAAlB,GAAsB,CAAhC,CAApC,EAAwEK,IAAI,GAAG,CAApF,EAAuFA,IAAI,GAAGL,IAA9F,EAAoGK,IAAI,EAAxG,EAA4G;AAC1GF,IAAAA,IAAI,CAACE,IAAI,GAAG,CAAR,CAAJ,GAAiBJ,SAAS,CAACI,IAAD,CAA1B;AACD;;AAEDxB,EAAAA,WAAW,CAACU,YAAD,CAAX,CAA0Be,KAA1B,CAAgC,IAAhC,EAAsC,CAACvB,QAAD,EAAWC,EAAX,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,KAA/B,EAAsCC,cAAtC,EAAsDkB,MAAtD,CAA6DJ,IAA7D,CAAtC;;AAEA,MAAI,CAACnB,EAAE,CAACwB,UAAR,EAAoB;AAClB;AACA;AACAxB,IAAAA,EAAE,CAACY,WAAH,CAAeN,YAAY,CAACO,cAAb,CAA4BC,MAAM,CAACC,YAAP,CAAoB,GAApB,CAA5B,CAAf,EAHkB,CAGqD;AACvE;AACD;;AAEDf,EAAAA,EAAE,CAACyB,YAAH,CAAgBhB,KAAhB,EAAuBT,EAAE,CAACwB,UAA1B;AACA/B,EAAAA,QAAQ,CAACO,EAAD,EAAK,gBAAL,CAAR;;AAEA,MAAI,CAACD,QAAQ,CAAC2B,eAAd,EAA+B;AAC7B,QAAIC,YAAY,GAAG,IAAIhC,YAAJ,CAAiBI,QAAjB,CAAnB,CAD6B,CACkB;;AAE/CA,IAAAA,QAAQ,CAAC2B,eAAT,GAA2B,UAAUE,KAAV,EAAiB;AAC1C,UAAIlC,QAAQ,CAACkC,KAAK,CAACC,MAAP,EAAe,qBAAf,CAAZ,EAAmD;AACjD9B,QAAAA,QAAQ,CAAC+B,IAAT,CAAcC,EAAd,CAAiBC,UAAjB,CAA4B,gBAA5B,EAA8C,IAA9C,EAAoD,IAAIpC,UAAJ,CAAeK,GAAf,EAAoBC,GAApB,CAApD,EAA8EF,EAA9E;AACD;AACF,KAJD;;AAMA2B,IAAAA,YAAY,CAACM,gBAAb,CAA8BlC,QAAQ,CAACmC,WAAvC,EAAoD,WAApD,EAAiEnC,QAAQ,CAAC2B,eAA1E,EAT6B,CAS+D;;AAE5F3B,IAAAA,QAAQ,CAACoC,WAAT,CAAqB,cAArB,EAAqC,YAAY;AAC/CR,MAAAA,YAAY,CAACS,OAAb;AACD,KAFD;AAGD;AACF;;AAED,eAAetC,oBAAf","sourcesContent":["import \"core-js/modules/es.array.concat\";\nimport { addClass, hasClass } from './../helpers/dom/element';\nimport EventManager from './../eventManager';\nimport { CellCoords } from './../3rdparty/walkontable/src';\nimport { getRenderer } from './index';\n/**\n * Autocomplete renderer\n *\n * @private\n * @renderer AutocompleteRenderer\n * @param {Object} instance Handsontable instance\n * @param {Element} TD Table cell where to render\n * @param {Number} row\n * @param {Number} col\n * @param {String|Number} prop Row object property name\n * @param value Value to render (remember to escape unsafe HTML before inserting to DOM!)\n * @param {Object} cellProperties Cell properites (shared by cell renderer and editor)\n */\n\nfunction autocompleteRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  var rootDocument = instance.rootDocument;\n  var rendererType = cellProperties.allowHtml ? 'html' : 'text';\n  var ARROW = rootDocument.createElement('DIV');\n  ARROW.className = 'htAutocompleteArrow';\n  ARROW.appendChild(rootDocument.createTextNode(String.fromCharCode(9660)));\n\n  for (var _len = arguments.length, args = new Array(_len > 7 ? _len - 7 : 0), _key = 7; _key < _len; _key++) {\n    args[_key - 7] = arguments[_key];\n  }\n\n  getRenderer(rendererType).apply(this, [instance, TD, row, col, prop, value, cellProperties].concat(args));\n\n  if (!TD.firstChild) {\n    // http://jsperf.com/empty-node-if-needed\n    // otherwise empty fields appear borderless in demo/renderers.html (IE)\n    TD.appendChild(rootDocument.createTextNode(String.fromCharCode(160))); // workaround for https://github.com/handsontable/handsontable/issues/1946\n    // this is faster than innerHTML. See: https://github.com/handsontable/handsontable/wiki/JavaScript-&-DOM-performance-tips\n  }\n\n  TD.insertBefore(ARROW, TD.firstChild);\n  addClass(TD, 'htAutocomplete');\n\n  if (!instance.acArrowListener) {\n    var eventManager = new EventManager(instance); // not very elegant but easy and fast\n\n    instance.acArrowListener = function (event) {\n      if (hasClass(event.target, 'htAutocompleteArrow')) {\n        instance.view.wt.getSetting('onCellDblClick', null, new CellCoords(row, col), TD);\n      }\n    };\n\n    eventManager.addEventListener(instance.rootElement, 'mousedown', instance.acArrowListener); // We need to unbind the listener after the table has been destroyed\n\n    instance.addHookOnce('afterDestroy', function () {\n      eventManager.destroy();\n    });\n  }\n}\n\nexport default autocompleteRenderer;"]},"metadata":{},"sourceType":"module"}