{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport Core from './../core';\nimport { isObject } from './../helpers/object';\n/**\n * @class RecordTranslator\n * @util\n */\n\nexport var RecordTranslator = /*#__PURE__*/function () {\n  function RecordTranslator(hot) {\n    _classCallCheck(this, RecordTranslator);\n\n    this.hot = hot;\n  }\n  /**\n   * Translate physical row index into visual.\n   *\n   * @param {Number} row Physical row index.\n   * @returns {Number} Returns visual row index.\n   */\n\n\n  _createClass(RecordTranslator, [{\n    key: \"toVisualRow\",\n    value: function toVisualRow(row) {\n      return this.hot.runHooks('unmodifyRow', row);\n    }\n    /**\n     * Translate physical column index into visual.\n     *\n     * @param {Number} column Physical column index.\n     * @returns {Number} Returns visual column index.\n     */\n\n  }, {\n    key: \"toVisualColumn\",\n    value: function toVisualColumn(column) {\n      return this.hot.runHooks('unmodifyCol', column);\n    }\n    /**\n     * Translate physical coordinates into visual. Can be passed as separate 2 arguments (row, column) or as an object in first\n     * argument with `row` and `column` keys.\n     *\n     * @param {Number|Object} row Physical coordinates or row index.\n     * @param {Number} [column] Physical column index.\n     * @returns {Object|Array} Returns an object with visual records or an array if coordinates passed as separate arguments.\n     */\n\n  }, {\n    key: \"toVisual\",\n    value: function toVisual(row, column) {\n      var result;\n\n      if (isObject(row)) {\n        result = {\n          row: this.toVisualRow(row.row),\n          column: this.toVisualColumn(row.column)\n        };\n      } else {\n        result = [this.toVisualRow(row), this.toVisualColumn(column)];\n      }\n\n      return result;\n    }\n    /**\n     * Translate visual row index into physical.\n     *\n     * @param {Number} row Visual row index.\n     * @returns {Number} Returns physical row index.\n     */\n\n  }, {\n    key: \"toPhysicalRow\",\n    value: function toPhysicalRow(row) {\n      return this.hot.runHooks('modifyRow', row);\n    }\n    /**\n     * Translate visual column index into physical.\n     *\n     * @param {Number} column Visual column index.\n     * @returns {Number} Returns physical column index.\n     */\n\n  }, {\n    key: \"toPhysicalColumn\",\n    value: function toPhysicalColumn(column) {\n      return this.hot.runHooks('modifyCol', column);\n    }\n    /**\n     * Translate visual coordinates into physical. Can be passed as separate 2 arguments (row, column) or as an object in first\n     * argument with `row` and `column` keys.\n     *\n     * @param {Number|Object} row Visual coordinates or row index.\n     * @param {Number} [column] Visual column index.\n     * @returns {Object|Array} Returns an object with physical records or an array if coordinates passed as separate arguments.\n     */\n\n  }, {\n    key: \"toPhysical\",\n    value: function toPhysical(row, column) {\n      var result;\n\n      if (isObject(row)) {\n        result = {\n          row: this.toPhysicalRow(row.row),\n          column: this.toPhysicalColumn(row.column)\n        };\n      } else {\n        result = [this.toPhysicalRow(row), this.toPhysicalColumn(column)];\n      }\n\n      return result;\n    }\n  }]);\n\n  return RecordTranslator;\n}();\nvar identities = new WeakMap();\nvar translatorSingletons = new WeakMap();\n/**\n * Allows to register custom identity manually.\n *\n * @param {*} identity\n * @param {*} hot\n */\n\nexport function registerIdentity(identity, hot) {\n  identities.set(identity, hot);\n}\n/**\n * Returns a cached instance of RecordTranslator or create the new one for given identity.\n *\n * @param {*} identity\n * @returns {RecordTranslator}\n */\n\nexport function getTranslator(identity) {\n  var instance = identity instanceof Core ? identity : getIdentity(identity);\n  var singleton;\n\n  if (translatorSingletons.has(instance)) {\n    singleton = translatorSingletons.get(instance);\n  } else {\n    singleton = new RecordTranslator(instance);\n    translatorSingletons.set(instance, singleton);\n  }\n\n  return singleton;\n}\n/**\n * Returns mapped identity.\n *\n * @param {*} identity\n * @returns {*}\n */\n\nexport function getIdentity(identity) {\n  if (!identities.has(identity)) {\n    throw Error('Record translator was not registered for this object identity');\n  }\n\n  return identities.get(identity);\n}","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/node_modules/handsontable/es/utils/recordTranslator.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","Core","isObject","RecordTranslator","hot","value","toVisualRow","row","runHooks","toVisualColumn","column","toVisual","result","toPhysicalRow","toPhysicalColumn","toPhysical","identities","WeakMap","translatorSingletons","registerIdentity","identity","set","getTranslator","getIdentity","singleton","has","get","Error"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/es.weak-map\";\nimport \"core-js/modules/web.dom-collections.iterator\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport Core from './../core';\nimport { isObject } from './../helpers/object';\n/**\n * @class RecordTranslator\n * @util\n */\n\nexport var RecordTranslator =\n/*#__PURE__*/\nfunction () {\n  function RecordTranslator(hot) {\n    _classCallCheck(this, RecordTranslator);\n\n    this.hot = hot;\n  }\n  /**\n   * Translate physical row index into visual.\n   *\n   * @param {Number} row Physical row index.\n   * @returns {Number} Returns visual row index.\n   */\n\n\n  _createClass(RecordTranslator, [{\n    key: \"toVisualRow\",\n    value: function toVisualRow(row) {\n      return this.hot.runHooks('unmodifyRow', row);\n    }\n    /**\n     * Translate physical column index into visual.\n     *\n     * @param {Number} column Physical column index.\n     * @returns {Number} Returns visual column index.\n     */\n\n  }, {\n    key: \"toVisualColumn\",\n    value: function toVisualColumn(column) {\n      return this.hot.runHooks('unmodifyCol', column);\n    }\n    /**\n     * Translate physical coordinates into visual. Can be passed as separate 2 arguments (row, column) or as an object in first\n     * argument with `row` and `column` keys.\n     *\n     * @param {Number|Object} row Physical coordinates or row index.\n     * @param {Number} [column] Physical column index.\n     * @returns {Object|Array} Returns an object with visual records or an array if coordinates passed as separate arguments.\n     */\n\n  }, {\n    key: \"toVisual\",\n    value: function toVisual(row, column) {\n      var result;\n\n      if (isObject(row)) {\n        result = {\n          row: this.toVisualRow(row.row),\n          column: this.toVisualColumn(row.column)\n        };\n      } else {\n        result = [this.toVisualRow(row), this.toVisualColumn(column)];\n      }\n\n      return result;\n    }\n    /**\n     * Translate visual row index into physical.\n     *\n     * @param {Number} row Visual row index.\n     * @returns {Number} Returns physical row index.\n     */\n\n  }, {\n    key: \"toPhysicalRow\",\n    value: function toPhysicalRow(row) {\n      return this.hot.runHooks('modifyRow', row);\n    }\n    /**\n     * Translate visual column index into physical.\n     *\n     * @param {Number} column Visual column index.\n     * @returns {Number} Returns physical column index.\n     */\n\n  }, {\n    key: \"toPhysicalColumn\",\n    value: function toPhysicalColumn(column) {\n      return this.hot.runHooks('modifyCol', column);\n    }\n    /**\n     * Translate visual coordinates into physical. Can be passed as separate 2 arguments (row, column) or as an object in first\n     * argument with `row` and `column` keys.\n     *\n     * @param {Number|Object} row Visual coordinates or row index.\n     * @param {Number} [column] Visual column index.\n     * @returns {Object|Array} Returns an object with physical records or an array if coordinates passed as separate arguments.\n     */\n\n  }, {\n    key: \"toPhysical\",\n    value: function toPhysical(row, column) {\n      var result;\n\n      if (isObject(row)) {\n        result = {\n          row: this.toPhysicalRow(row.row),\n          column: this.toPhysicalColumn(row.column)\n        };\n      } else {\n        result = [this.toPhysicalRow(row), this.toPhysicalColumn(column)];\n      }\n\n      return result;\n    }\n  }]);\n\n  return RecordTranslator;\n}();\nvar identities = new WeakMap();\nvar translatorSingletons = new WeakMap();\n/**\n * Allows to register custom identity manually.\n *\n * @param {*} identity\n * @param {*} hot\n */\n\nexport function registerIdentity(identity, hot) {\n  identities.set(identity, hot);\n}\n/**\n * Returns a cached instance of RecordTranslator or create the new one for given identity.\n *\n * @param {*} identity\n * @returns {RecordTranslator}\n */\n\nexport function getTranslator(identity) {\n  var instance = identity instanceof Core ? identity : getIdentity(identity);\n  var singleton;\n\n  if (translatorSingletons.has(instance)) {\n    singleton = translatorSingletons.get(instance);\n  } else {\n    singleton = new RecordTranslator(instance);\n    translatorSingletons.set(instance, singleton);\n  }\n\n  return singleton;\n}\n/**\n * Returns mapped identity.\n *\n * @param {*} identity\n * @returns {*}\n */\n\nexport function getIdentity(identity) {\n  if (!identities.has(identity)) {\n    throw Error('Record translator was not registered for this object identity');\n  }\n\n  return identities.get(identity);\n}"]},"metadata":{},"sourceType":"module"}