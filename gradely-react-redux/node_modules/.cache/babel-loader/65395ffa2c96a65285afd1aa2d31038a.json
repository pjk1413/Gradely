{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport { addClass, outerHeight, outerWidth } from './../helpers/dom/element';\nimport { arrayEach } from './../helpers/array';\n/**\n * @class GhostTable\n * @util\n */\n\nvar GhostTable = /*#__PURE__*/function () {\n  function GhostTable(hotInstance) {\n    _classCallCheck(this, GhostTable);\n    /**\n     * Handsontable instance.\n     *\n     * @type {Core}\n     */\n\n\n    this.hot = hotInstance;\n    /**\n     * Container element where every table will be injected.\n     *\n     * @type {HTMLElement|null}\n     */\n\n    this.container = null;\n    /**\n     * Flag which determine is table was injected to DOM.\n     *\n     * @type {Boolean}\n     */\n\n    this.injected = false;\n    /**\n     * Added rows collection.\n     *\n     * @type {Array}\n     */\n\n    this.rows = [];\n    /**\n     * Added columns collection.\n     *\n     * @type {Array}\n     */\n\n    this.columns = [];\n    /**\n     * Samples prepared for calculations.\n     *\n     * @type {Map}\n     * @default {null}\n     */\n\n    this.samples = null;\n    /**\n     * Ghost table settings.\n     *\n     * @type {Object}\n     * @default {Object}\n     */\n\n    this.settings = {\n      useHeaders: true\n    };\n  }\n  /**\n   * Add row.\n   *\n   * @param {Number} row Row index.\n   * @param {Map} samples Samples Map object.\n   */\n\n\n  _createClass(GhostTable, [{\n    key: \"addRow\",\n    value: function addRow(row, samples) {\n      if (this.columns.length) {\n        throw new Error('Doesn\\'t support multi-dimensional table');\n      }\n\n      if (!this.rows.length) {\n        this.container = this.createContainer(this.hot.rootElement.className);\n      }\n\n      var rowObject = {\n        row: row\n      };\n      this.rows.push(rowObject);\n      this.samples = samples;\n      this.table = this.createTable(this.hot.table.className);\n      this.table.colGroup.appendChild(this.createColGroupsCol());\n      this.table.tr.appendChild(this.createRow(row));\n      this.container.container.appendChild(this.table.fragment);\n      rowObject.table = this.table.table;\n    }\n    /**\n     * Add a row consisting of the column headers.\n     */\n\n  }, {\n    key: \"addColumnHeadersRow\",\n    value: function addColumnHeadersRow(samples) {\n      var colHeader = this.hot.getColHeader(0);\n\n      if (colHeader !== null && colHeader !== void 0) {\n        var rowObject = {\n          row: -1\n        };\n        this.rows.push(rowObject);\n        this.container = this.createContainer(this.hot.rootElement.className);\n        this.samples = samples;\n        this.table = this.createTable(this.hot.table.className);\n        this.table.colGroup.appendChild(this.createColGroupsCol());\n        this.table.tHead.appendChild(this.createColumnHeadersRow());\n        this.container.container.appendChild(this.table.fragment);\n        rowObject.table = this.table.table;\n      }\n    }\n    /**\n     * Add column.\n     *\n     * @param {Number} column Column index.\n     * @param {Map} samples Samples Map object.\n     */\n\n  }, {\n    key: \"addColumn\",\n    value: function addColumn(column, samples) {\n      if (this.rows.length) {\n        throw new Error('Doesn\\'t support multi-dimensional table');\n      }\n\n      if (!this.columns.length) {\n        this.container = this.createContainer(this.hot.rootElement.className);\n      }\n\n      var columnObject = {\n        col: column\n      };\n      this.columns.push(columnObject);\n      this.samples = samples;\n      this.table = this.createTable(this.hot.table.className);\n\n      if (this.getSetting('useHeaders') && this.hot.getColHeader(column) !== null) {\n        this.hot.view.appendColHeader(column, this.table.th);\n      }\n\n      this.table.tBody.appendChild(this.createCol(column));\n      this.container.container.appendChild(this.table.fragment);\n      columnObject.table = this.table.table;\n    }\n    /**\n     * Get calculated heights.\n     *\n     * @param {Function} callback Callback which will be fired for each calculated row.\n     */\n\n  }, {\n    key: \"getHeights\",\n    value: function getHeights(callback) {\n      if (!this.injected) {\n        this.injectTable();\n      }\n\n      arrayEach(this.rows, function (row) {\n        // -1 <- reduce border-top from table\n        callback(row.row, outerHeight(row.table) - 1);\n      });\n    }\n    /**\n     * Get calculated widths.\n     *\n     * @param {Function} callback Callback which will be fired for each calculated column.\n     */\n\n  }, {\n    key: \"getWidths\",\n    value: function getWidths(callback) {\n      if (!this.injected) {\n        this.injectTable();\n      }\n\n      arrayEach(this.columns, function (column) {\n        callback(column.col, outerWidth(column.table));\n      });\n    }\n    /**\n     * Set the Ghost Table settings to the provided object.\n     *\n     * @param {Object} settings New Ghost Table Settings\n     */\n\n  }, {\n    key: \"setSettings\",\n    value: function setSettings(settings) {\n      this.settings = settings;\n    }\n    /**\n     * Set a single setting of the Ghost Table.\n     *\n     * @param {String} name Setting name.\n     * @param {*} value Setting value.\n     */\n\n  }, {\n    key: \"setSetting\",\n    value: function setSetting(name, value) {\n      if (!this.settings) {\n        this.settings = {};\n      }\n\n      this.settings[name] = value;\n    }\n    /**\n     * Get the Ghost Table settings.\n     *\n     * @returns {Object|null}\n     */\n\n  }, {\n    key: \"getSettings\",\n    value: function getSettings() {\n      return this.settings;\n    }\n    /**\n     * Get a single Ghost Table setting.\n     *\n     * @param {String} name\n     * @returns {Boolean|null}\n     */\n\n  }, {\n    key: \"getSetting\",\n    value: function getSetting(name) {\n      if (this.settings) {\n        return this.settings[name];\n      }\n\n      return null;\n    }\n    /**\n     * Create colgroup col elements.\n     *\n     * @returns {DocumentFragment}\n     */\n\n  }, {\n    key: \"createColGroupsCol\",\n    value: function createColGroupsCol() {\n      var _this = this;\n\n      var fragment = this.hot.rootDocument.createDocumentFragment();\n\n      if (this.hot.hasRowHeaders()) {\n        fragment.appendChild(this.createColElement(-1));\n      }\n\n      this.samples.forEach(function (sample) {\n        arrayEach(sample.strings, function (string) {\n          fragment.appendChild(_this.createColElement(string.col));\n        });\n      });\n      return fragment;\n    }\n    /**\n     * Create table row element.\n     *\n     * @param {Number} row Row index.\n     * @returns {DocumentFragment} Returns created table row elements.\n     */\n\n  }, {\n    key: \"createRow\",\n    value: function createRow(row) {\n      var _this2 = this;\n\n      var rootDocument = this.hot.rootDocument;\n      var fragment = rootDocument.createDocumentFragment();\n      var th = rootDocument.createElement('th');\n\n      if (this.hot.hasRowHeaders()) {\n        this.hot.view.appendRowHeader(row, th);\n        fragment.appendChild(th);\n      }\n\n      this.samples.forEach(function (sample) {\n        arrayEach(sample.strings, function (string) {\n          var column = string.col;\n\n          var cellProperties = _this2.hot.getCellMeta(row, column);\n\n          cellProperties.col = column;\n          cellProperties.row = row;\n\n          var renderer = _this2.hot.getCellRenderer(cellProperties);\n\n          var td = rootDocument.createElement('td'); // Indicate that this element is created and supported by GhostTable. It can be useful to\n          // exclude rendering performance costly logic or exclude logic which doesn't work within a hidden table.\n\n          td.setAttribute('ghost-table', 1);\n          renderer(_this2.hot, td, row, column, _this2.hot.colToProp(column), string.value, cellProperties);\n          fragment.appendChild(td);\n        });\n      });\n      return fragment;\n    }\n  }, {\n    key: \"createColumnHeadersRow\",\n    value: function createColumnHeadersRow() {\n      var _this3 = this;\n\n      var rootDocument = this.hot.rootDocument;\n      var fragment = rootDocument.createDocumentFragment();\n\n      if (this.hot.hasRowHeaders()) {\n        var th = rootDocument.createElement('th');\n        this.hot.view.appendColHeader(-1, th);\n        fragment.appendChild(th);\n      }\n\n      this.samples.forEach(function (sample) {\n        arrayEach(sample.strings, function (string) {\n          var column = string.col;\n          var th = rootDocument.createElement('th');\n\n          _this3.hot.view.appendColHeader(column, th);\n\n          fragment.appendChild(th);\n        });\n      });\n      return fragment;\n    }\n    /**\n     * Create table column elements.\n     *\n     * @param {Number} column Column index.\n     * @returns {DocumentFragment} Returns created column table column elements.\n     */\n\n  }, {\n    key: \"createCol\",\n    value: function createCol(column) {\n      var _this4 = this;\n\n      var rootDocument = this.hot.rootDocument;\n      var fragment = rootDocument.createDocumentFragment();\n      this.samples.forEach(function (sample) {\n        arrayEach(sample.strings, function (string) {\n          var row = string.row;\n\n          var cellProperties = _this4.hot.getCellMeta(row, column);\n\n          cellProperties.col = column;\n          cellProperties.row = row;\n\n          var renderer = _this4.hot.getCellRenderer(cellProperties);\n\n          var td = rootDocument.createElement('td');\n          var tr = rootDocument.createElement('tr'); // Indicate that this element is created and supported by GhostTable. It can be useful to\n          // exclude rendering performance costly logic or exclude logic which doesn't work within a hidden table.\n\n          td.setAttribute('ghost-table', 1);\n          renderer(_this4.hot, td, row, column, _this4.hot.colToProp(column), string.value, cellProperties);\n          tr.appendChild(td);\n          fragment.appendChild(tr);\n        });\n      });\n      return fragment;\n    }\n    /**\n     * Remove table from document and reset internal state.\n     */\n\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      this.rows.length = 0;\n      this.rows[-1] = void 0;\n      this.columns.length = 0;\n\n      if (this.samples) {\n        this.samples.clear();\n      }\n\n      this.samples = null;\n      this.removeTable();\n    }\n    /**\n     * Inject generated table into document.\n     *\n     * @param {HTMLElement} [parent=null]\n     */\n\n  }, {\n    key: \"injectTable\",\n    value: function injectTable() {\n      var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (!this.injected) {\n        (parent || this.hot.rootElement).appendChild(this.container.fragment);\n        this.injected = true;\n      }\n    }\n    /**\n     * Remove table from document.\n     */\n\n  }, {\n    key: \"removeTable\",\n    value: function removeTable() {\n      if (this.injected && this.container.container.parentNode) {\n        this.container.container.parentNode.removeChild(this.container.container);\n        this.container = null;\n        this.injected = false;\n      }\n    }\n    /**\n     * Create col element.\n     *\n     * @param {Number} column Column index.\n     * @returns {HTMLElement}\n     */\n\n  }, {\n    key: \"createColElement\",\n    value: function createColElement(column) {\n      var col = this.hot.rootDocument.createElement('col');\n      col.style.width = \"\".concat(this.hot.view.wt.wtTable.getStretchedColumnWidth(column), \"px\");\n      return col;\n    }\n    /**\n     * Create table element.\n     *\n     * @param {String} className\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"createTable\",\n    value: function createTable() {\n      var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var rootDocument = this.hot.rootDocument;\n      var fragment = rootDocument.createDocumentFragment();\n      var table = rootDocument.createElement('table');\n      var tHead = rootDocument.createElement('thead');\n      var tBody = rootDocument.createElement('tbody');\n      var colGroup = rootDocument.createElement('colgroup');\n      var tr = rootDocument.createElement('tr');\n      var th = rootDocument.createElement('th');\n\n      if (this.isVertical()) {\n        table.appendChild(colGroup);\n      }\n\n      if (this.isHorizontal()) {\n        tr.appendChild(th);\n        tHead.appendChild(tr);\n        table.style.tableLayout = 'auto';\n        table.style.width = 'auto';\n      }\n\n      table.appendChild(tHead);\n\n      if (this.isVertical()) {\n        tBody.appendChild(tr);\n      }\n\n      table.appendChild(tBody);\n      addClass(table, className);\n      fragment.appendChild(table);\n      return {\n        fragment: fragment,\n        table: table,\n        tHead: tHead,\n        tBody: tBody,\n        colGroup: colGroup,\n        tr: tr,\n        th: th\n      };\n    }\n    /**\n     * Create container for tables.\n     *\n     * @param {String} className\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"createContainer\",\n    value: function createContainer() {\n      var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var rootDocument = this.hot.rootDocument;\n      var fragment = rootDocument.createDocumentFragment();\n      var container = rootDocument.createElement('div');\n      var containerClassName = \"htGhostTable htAutoSize \".concat(className.trim());\n      addClass(container, containerClassName);\n      fragment.appendChild(container);\n      return {\n        fragment: fragment,\n        container: container\n      };\n    }\n    /**\n     * Checks if table is raised vertically (checking rows).\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isVertical\",\n    value: function isVertical() {\n      return !!(this.rows.length && !this.columns.length);\n    }\n    /**\n     * Checks if table is raised horizontally (checking columns).\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isHorizontal\",\n    value: function isHorizontal() {\n      return !!(this.columns.length && !this.rows.length);\n    }\n  }]);\n\n  return GhostTable;\n}();\n\nexport default GhostTable;","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react/node_modules/handsontable/es/utils/ghostTable.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","addClass","outerHeight","outerWidth","arrayEach","GhostTable","hotInstance","hot","container","injected","rows","columns","samples","settings","useHeaders","value","addRow","row","Error","createContainer","rootElement","className","rowObject","push","table","createTable","colGroup","appendChild","createColGroupsCol","tr","createRow","fragment","addColumnHeadersRow","colHeader","getColHeader","tHead","createColumnHeadersRow","addColumn","column","columnObject","col","getSetting","view","appendColHeader","th","tBody","createCol","getHeights","callback","injectTable","getWidths","setSettings","setSetting","name","getSettings","_this","rootDocument","createDocumentFragment","hasRowHeaders","createColElement","forEach","sample","strings","string","_this2","createElement","appendRowHeader","cellProperties","getCellMeta","renderer","getCellRenderer","td","setAttribute","colToProp","_this3","_this4","clean","clear","removeTable","parent","arguments","undefined","parentNode","removeChild","style","width","concat","wt","wtTable","getStretchedColumnWidth","isVertical","isHorizontal","tableLayout","containerClassName","trim"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.for-each\";\nimport \"core-js/modules/es.string.trim\";\nimport \"core-js/modules/web.dom-collections.for-each\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { addClass, outerHeight, outerWidth } from './../helpers/dom/element';\nimport { arrayEach } from './../helpers/array';\n/**\n * @class GhostTable\n * @util\n */\n\nvar GhostTable =\n/*#__PURE__*/\nfunction () {\n  function GhostTable(hotInstance) {\n    _classCallCheck(this, GhostTable);\n\n    /**\n     * Handsontable instance.\n     *\n     * @type {Core}\n     */\n    this.hot = hotInstance;\n    /**\n     * Container element where every table will be injected.\n     *\n     * @type {HTMLElement|null}\n     */\n\n    this.container = null;\n    /**\n     * Flag which determine is table was injected to DOM.\n     *\n     * @type {Boolean}\n     */\n\n    this.injected = false;\n    /**\n     * Added rows collection.\n     *\n     * @type {Array}\n     */\n\n    this.rows = [];\n    /**\n     * Added columns collection.\n     *\n     * @type {Array}\n     */\n\n    this.columns = [];\n    /**\n     * Samples prepared for calculations.\n     *\n     * @type {Map}\n     * @default {null}\n     */\n\n    this.samples = null;\n    /**\n     * Ghost table settings.\n     *\n     * @type {Object}\n     * @default {Object}\n     */\n\n    this.settings = {\n      useHeaders: true\n    };\n  }\n  /**\n   * Add row.\n   *\n   * @param {Number} row Row index.\n   * @param {Map} samples Samples Map object.\n   */\n\n\n  _createClass(GhostTable, [{\n    key: \"addRow\",\n    value: function addRow(row, samples) {\n      if (this.columns.length) {\n        throw new Error('Doesn\\'t support multi-dimensional table');\n      }\n\n      if (!this.rows.length) {\n        this.container = this.createContainer(this.hot.rootElement.className);\n      }\n\n      var rowObject = {\n        row: row\n      };\n      this.rows.push(rowObject);\n      this.samples = samples;\n      this.table = this.createTable(this.hot.table.className);\n      this.table.colGroup.appendChild(this.createColGroupsCol());\n      this.table.tr.appendChild(this.createRow(row));\n      this.container.container.appendChild(this.table.fragment);\n      rowObject.table = this.table.table;\n    }\n    /**\n     * Add a row consisting of the column headers.\n     */\n\n  }, {\n    key: \"addColumnHeadersRow\",\n    value: function addColumnHeadersRow(samples) {\n      var colHeader = this.hot.getColHeader(0);\n\n      if (colHeader !== null && colHeader !== void 0) {\n        var rowObject = {\n          row: -1\n        };\n        this.rows.push(rowObject);\n        this.container = this.createContainer(this.hot.rootElement.className);\n        this.samples = samples;\n        this.table = this.createTable(this.hot.table.className);\n        this.table.colGroup.appendChild(this.createColGroupsCol());\n        this.table.tHead.appendChild(this.createColumnHeadersRow());\n        this.container.container.appendChild(this.table.fragment);\n        rowObject.table = this.table.table;\n      }\n    }\n    /**\n     * Add column.\n     *\n     * @param {Number} column Column index.\n     * @param {Map} samples Samples Map object.\n     */\n\n  }, {\n    key: \"addColumn\",\n    value: function addColumn(column, samples) {\n      if (this.rows.length) {\n        throw new Error('Doesn\\'t support multi-dimensional table');\n      }\n\n      if (!this.columns.length) {\n        this.container = this.createContainer(this.hot.rootElement.className);\n      }\n\n      var columnObject = {\n        col: column\n      };\n      this.columns.push(columnObject);\n      this.samples = samples;\n      this.table = this.createTable(this.hot.table.className);\n\n      if (this.getSetting('useHeaders') && this.hot.getColHeader(column) !== null) {\n        this.hot.view.appendColHeader(column, this.table.th);\n      }\n\n      this.table.tBody.appendChild(this.createCol(column));\n      this.container.container.appendChild(this.table.fragment);\n      columnObject.table = this.table.table;\n    }\n    /**\n     * Get calculated heights.\n     *\n     * @param {Function} callback Callback which will be fired for each calculated row.\n     */\n\n  }, {\n    key: \"getHeights\",\n    value: function getHeights(callback) {\n      if (!this.injected) {\n        this.injectTable();\n      }\n\n      arrayEach(this.rows, function (row) {\n        // -1 <- reduce border-top from table\n        callback(row.row, outerHeight(row.table) - 1);\n      });\n    }\n    /**\n     * Get calculated widths.\n     *\n     * @param {Function} callback Callback which will be fired for each calculated column.\n     */\n\n  }, {\n    key: \"getWidths\",\n    value: function getWidths(callback) {\n      if (!this.injected) {\n        this.injectTable();\n      }\n\n      arrayEach(this.columns, function (column) {\n        callback(column.col, outerWidth(column.table));\n      });\n    }\n    /**\n     * Set the Ghost Table settings to the provided object.\n     *\n     * @param {Object} settings New Ghost Table Settings\n     */\n\n  }, {\n    key: \"setSettings\",\n    value: function setSettings(settings) {\n      this.settings = settings;\n    }\n    /**\n     * Set a single setting of the Ghost Table.\n     *\n     * @param {String} name Setting name.\n     * @param {*} value Setting value.\n     */\n\n  }, {\n    key: \"setSetting\",\n    value: function setSetting(name, value) {\n      if (!this.settings) {\n        this.settings = {};\n      }\n\n      this.settings[name] = value;\n    }\n    /**\n     * Get the Ghost Table settings.\n     *\n     * @returns {Object|null}\n     */\n\n  }, {\n    key: \"getSettings\",\n    value: function getSettings() {\n      return this.settings;\n    }\n    /**\n     * Get a single Ghost Table setting.\n     *\n     * @param {String} name\n     * @returns {Boolean|null}\n     */\n\n  }, {\n    key: \"getSetting\",\n    value: function getSetting(name) {\n      if (this.settings) {\n        return this.settings[name];\n      }\n\n      return null;\n    }\n    /**\n     * Create colgroup col elements.\n     *\n     * @returns {DocumentFragment}\n     */\n\n  }, {\n    key: \"createColGroupsCol\",\n    value: function createColGroupsCol() {\n      var _this = this;\n\n      var fragment = this.hot.rootDocument.createDocumentFragment();\n\n      if (this.hot.hasRowHeaders()) {\n        fragment.appendChild(this.createColElement(-1));\n      }\n\n      this.samples.forEach(function (sample) {\n        arrayEach(sample.strings, function (string) {\n          fragment.appendChild(_this.createColElement(string.col));\n        });\n      });\n      return fragment;\n    }\n    /**\n     * Create table row element.\n     *\n     * @param {Number} row Row index.\n     * @returns {DocumentFragment} Returns created table row elements.\n     */\n\n  }, {\n    key: \"createRow\",\n    value: function createRow(row) {\n      var _this2 = this;\n\n      var rootDocument = this.hot.rootDocument;\n      var fragment = rootDocument.createDocumentFragment();\n      var th = rootDocument.createElement('th');\n\n      if (this.hot.hasRowHeaders()) {\n        this.hot.view.appendRowHeader(row, th);\n        fragment.appendChild(th);\n      }\n\n      this.samples.forEach(function (sample) {\n        arrayEach(sample.strings, function (string) {\n          var column = string.col;\n\n          var cellProperties = _this2.hot.getCellMeta(row, column);\n\n          cellProperties.col = column;\n          cellProperties.row = row;\n\n          var renderer = _this2.hot.getCellRenderer(cellProperties);\n\n          var td = rootDocument.createElement('td'); // Indicate that this element is created and supported by GhostTable. It can be useful to\n          // exclude rendering performance costly logic or exclude logic which doesn't work within a hidden table.\n\n          td.setAttribute('ghost-table', 1);\n          renderer(_this2.hot, td, row, column, _this2.hot.colToProp(column), string.value, cellProperties);\n          fragment.appendChild(td);\n        });\n      });\n      return fragment;\n    }\n  }, {\n    key: \"createColumnHeadersRow\",\n    value: function createColumnHeadersRow() {\n      var _this3 = this;\n\n      var rootDocument = this.hot.rootDocument;\n      var fragment = rootDocument.createDocumentFragment();\n\n      if (this.hot.hasRowHeaders()) {\n        var th = rootDocument.createElement('th');\n        this.hot.view.appendColHeader(-1, th);\n        fragment.appendChild(th);\n      }\n\n      this.samples.forEach(function (sample) {\n        arrayEach(sample.strings, function (string) {\n          var column = string.col;\n          var th = rootDocument.createElement('th');\n\n          _this3.hot.view.appendColHeader(column, th);\n\n          fragment.appendChild(th);\n        });\n      });\n      return fragment;\n    }\n    /**\n     * Create table column elements.\n     *\n     * @param {Number} column Column index.\n     * @returns {DocumentFragment} Returns created column table column elements.\n     */\n\n  }, {\n    key: \"createCol\",\n    value: function createCol(column) {\n      var _this4 = this;\n\n      var rootDocument = this.hot.rootDocument;\n      var fragment = rootDocument.createDocumentFragment();\n      this.samples.forEach(function (sample) {\n        arrayEach(sample.strings, function (string) {\n          var row = string.row;\n\n          var cellProperties = _this4.hot.getCellMeta(row, column);\n\n          cellProperties.col = column;\n          cellProperties.row = row;\n\n          var renderer = _this4.hot.getCellRenderer(cellProperties);\n\n          var td = rootDocument.createElement('td');\n          var tr = rootDocument.createElement('tr'); // Indicate that this element is created and supported by GhostTable. It can be useful to\n          // exclude rendering performance costly logic or exclude logic which doesn't work within a hidden table.\n\n          td.setAttribute('ghost-table', 1);\n          renderer(_this4.hot, td, row, column, _this4.hot.colToProp(column), string.value, cellProperties);\n          tr.appendChild(td);\n          fragment.appendChild(tr);\n        });\n      });\n      return fragment;\n    }\n    /**\n     * Remove table from document and reset internal state.\n     */\n\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      this.rows.length = 0;\n      this.rows[-1] = void 0;\n      this.columns.length = 0;\n\n      if (this.samples) {\n        this.samples.clear();\n      }\n\n      this.samples = null;\n      this.removeTable();\n    }\n    /**\n     * Inject generated table into document.\n     *\n     * @param {HTMLElement} [parent=null]\n     */\n\n  }, {\n    key: \"injectTable\",\n    value: function injectTable() {\n      var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (!this.injected) {\n        (parent || this.hot.rootElement).appendChild(this.container.fragment);\n        this.injected = true;\n      }\n    }\n    /**\n     * Remove table from document.\n     */\n\n  }, {\n    key: \"removeTable\",\n    value: function removeTable() {\n      if (this.injected && this.container.container.parentNode) {\n        this.container.container.parentNode.removeChild(this.container.container);\n        this.container = null;\n        this.injected = false;\n      }\n    }\n    /**\n     * Create col element.\n     *\n     * @param {Number} column Column index.\n     * @returns {HTMLElement}\n     */\n\n  }, {\n    key: \"createColElement\",\n    value: function createColElement(column) {\n      var col = this.hot.rootDocument.createElement('col');\n      col.style.width = \"\".concat(this.hot.view.wt.wtTable.getStretchedColumnWidth(column), \"px\");\n      return col;\n    }\n    /**\n     * Create table element.\n     *\n     * @param {String} className\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"createTable\",\n    value: function createTable() {\n      var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var rootDocument = this.hot.rootDocument;\n      var fragment = rootDocument.createDocumentFragment();\n      var table = rootDocument.createElement('table');\n      var tHead = rootDocument.createElement('thead');\n      var tBody = rootDocument.createElement('tbody');\n      var colGroup = rootDocument.createElement('colgroup');\n      var tr = rootDocument.createElement('tr');\n      var th = rootDocument.createElement('th');\n\n      if (this.isVertical()) {\n        table.appendChild(colGroup);\n      }\n\n      if (this.isHorizontal()) {\n        tr.appendChild(th);\n        tHead.appendChild(tr);\n        table.style.tableLayout = 'auto';\n        table.style.width = 'auto';\n      }\n\n      table.appendChild(tHead);\n\n      if (this.isVertical()) {\n        tBody.appendChild(tr);\n      }\n\n      table.appendChild(tBody);\n      addClass(table, className);\n      fragment.appendChild(table);\n      return {\n        fragment: fragment,\n        table: table,\n        tHead: tHead,\n        tBody: tBody,\n        colGroup: colGroup,\n        tr: tr,\n        th: th\n      };\n    }\n    /**\n     * Create container for tables.\n     *\n     * @param {String} className\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"createContainer\",\n    value: function createContainer() {\n      var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var rootDocument = this.hot.rootDocument;\n      var fragment = rootDocument.createDocumentFragment();\n      var container = rootDocument.createElement('div');\n      var containerClassName = \"htGhostTable htAutoSize \".concat(className.trim());\n      addClass(container, containerClassName);\n      fragment.appendChild(container);\n      return {\n        fragment: fragment,\n        container: container\n      };\n    }\n    /**\n     * Checks if table is raised vertically (checking rows).\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isVertical\",\n    value: function isVertical() {\n      return !!(this.rows.length && !this.columns.length);\n    }\n    /**\n     * Checks if table is raised horizontally (checking columns).\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isHorizontal\",\n    value: function isHorizontal() {\n      return !!(this.columns.length && !this.rows.length);\n    }\n  }]);\n\n  return GhostTable;\n}();\n\nexport default GhostTable;"]},"metadata":{},"sourceType":"module"}