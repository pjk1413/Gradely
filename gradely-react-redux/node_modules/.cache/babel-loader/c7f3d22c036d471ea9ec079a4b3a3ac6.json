{"ast":null,"code":"function _templateObject() {\n  var data = _taggedTemplateLiteral([\"Language with code \\\"\", \"\\\" was not found. You should register particular language \\n    before using it. Read more about this issue at: https://docs.handsontable.com/i18n/missing-language-code.\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}\n\nimport { isUndefined, isDefined } from './../helpers/mixed';\nimport { objectEach } from './../helpers/object';\nimport { error } from './../helpers/console';\nimport { toSingleLine } from './../helpers/templateLiteralTag';\nimport { DEFAULT_LANGUAGE_CODE, hasLanguageDictionary } from './dictionariesManager';\n/**\n * Perform shallow extend of a target object with only this extension's properties which doesn't exist in the target.\n *\n * @param {Object} target An object that will receive the new properties.\n * @param {Object} extension An object containing additional properties to merge into the target.\n */\n// TODO: Maybe it should be moved to global helpers? It's changed `extend` function.\n\nexport function extendNotExistingKeys(target, extension) {\n  objectEach(extension, function (value, key) {\n    if (isUndefined(target[key])) {\n      target[key] = value;\n    }\n  });\n  return target;\n}\n/**\n * Create range of values basing on cell indexes. For example, it will create below ranges for specified function arguments:\n *\n * createCellHeadersRange(2, 7) => `2-7`\n * createCellHeadersRange(7, 2) => `2-7`\n * createCellHeadersRange(0, 4, 'A', 'D') => `A-D`\n * createCellHeadersRange(4, 0, 'D', 'A') => `A-D`\n *\n * @param {number} firstRowIndex Index of \"first\" cell\n * @param {number} nextRowIndex Index of \"next\" cell\n * @param {*} fromValue Value which will represent \"first\" cell\n * @param {*} toValue Value which will represent \"next\" cell\n * @returns {String} Value representing range i.e. A-Z, 11-15.\n */\n\nexport function createCellHeadersRange(firstRowIndex, nextRowIndex) {\n  var fromValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : firstRowIndex;\n  var toValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : nextRowIndex; // Will swap `fromValue` with `toValue` if it's necessary.\n\n  var from = fromValue,\n      to = toValue;\n\n  if (firstRowIndex > nextRowIndex) {\n    var _ref = [to, from];\n    from = _ref[0];\n    to = _ref[1];\n  }\n\n  return \"\".concat(from, \"-\").concat(to);\n}\n/**\n * Normalize language code. It takes handled languageCode proposition and change it to proper languageCode.\n * For example, when it takes `eN-us` as parameter it return `en-US`\n *\n * @param {String} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n * @returns {String}\n */\n\nexport function normalizeLanguageCode(languageCode) {\n  var languageCodePattern = /^([a-zA-Z]{2})-([a-zA-Z]{2})$/;\n  var partsOfLanguageCode = languageCodePattern.exec(languageCode);\n\n  if (partsOfLanguageCode) {\n    return \"\".concat(partsOfLanguageCode[1].toLowerCase(), \"-\").concat(partsOfLanguageCode[2].toUpperCase());\n  }\n\n  return languageCode;\n}\n/**\n * Set proper start language code. User may set language code which is not proper.\n *\n * @param {Object} settings Settings object.\n * @param {String} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n * @returns {String}\n */\n\nexport function applyLanguageSetting(settings, languageCode) {\n  var normalizedLanguageCode = normalizeLanguageCode(languageCode);\n\n  if (hasLanguageDictionary(normalizedLanguageCode)) {\n    settings.language = normalizedLanguageCode;\n  } else {\n    settings.language = DEFAULT_LANGUAGE_CODE;\n    warnUserAboutLanguageRegistration(languageCode);\n  }\n}\n/**\n *\n * Warn user if there is no registered language.\n *\n * @param {String} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n */\n\nexport function warnUserAboutLanguageRegistration(languageCode) {\n  if (isDefined(languageCode)) {\n    error(toSingleLine(_templateObject(), languageCode));\n  }\n}","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/node_modules/handsontable/es/i18n/utils.js"],"names":["_templateObject","data","_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties","value","isUndefined","isDefined","objectEach","error","toSingleLine","DEFAULT_LANGUAGE_CODE","hasLanguageDictionary","extendNotExistingKeys","target","extension","key","createCellHeadersRange","firstRowIndex","nextRowIndex","fromValue","arguments","length","undefined","toValue","from","to","_ref","concat","normalizeLanguageCode","languageCode","languageCodePattern","partsOfLanguageCode","exec","toLowerCase","toUpperCase","applyLanguageSetting","settings","normalizedLanguageCode","language","warnUserAboutLanguageRegistration"],"mappings":"AAKA,SAASA,eAAT,GAA2B;AACzB,MAAIC,IAAI,GAAGC,sBAAsB,CAAC,CAAC,uBAAD,EAA0B,2KAA1B,CAAD,CAAjC;;AAEAF,EAAAA,eAAe,GAAG,SAASA,eAAT,GAA2B;AAC3C,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASC,sBAAT,CAAgCC,OAAhC,EAAyCC,GAAzC,EAA8C;AAAE,MAAI,CAACA,GAAL,EAAU;AAAEA,IAAAA,GAAG,GAAGD,OAAO,CAACE,KAAR,CAAc,CAAd,CAAN;AAAyB;;AAAC,SAAOC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACE,gBAAP,CAAwBL,OAAxB,EAAiC;AAAEC,IAAAA,GAAG,EAAE;AAAEK,MAAAA,KAAK,EAAEH,MAAM,CAACC,MAAP,CAAcH,GAAd;AAAT;AAAP,GAAjC,CAAd,CAAP;AAAiG;;AAEvL,SAASM,WAAT,EAAsBC,SAAtB,QAAuC,oBAAvC;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,KAAT,QAAsB,sBAAtB;AACA,SAASC,YAAT,QAA6B,iCAA7B;AACA,SAASC,qBAAT,EAAgCC,qBAAhC,QAA6D,uBAA7D;AACA;;;;;;AAMA;;AAEA,OAAO,SAASC,qBAAT,CAA+BC,MAA/B,EAAuCC,SAAvC,EAAkD;AACvDP,EAAAA,UAAU,CAACO,SAAD,EAAY,UAAUV,KAAV,EAAiBW,GAAjB,EAAsB;AAC1C,QAAIV,WAAW,CAACQ,MAAM,CAACE,GAAD,CAAP,CAAf,EAA8B;AAC5BF,MAAAA,MAAM,CAACE,GAAD,CAAN,GAAcX,KAAd;AACD;AACF,GAJS,CAAV;AAKA,SAAOS,MAAP;AACD;AACD;;;;;;;;;;;;;;;AAeA,OAAO,SAASG,sBAAT,CAAgCC,aAAhC,EAA+CC,YAA/C,EAA6D;AAClE,MAAIC,SAAS,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoEH,aAApF;AACA,MAAIM,OAAO,GAAGH,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoEF,YAAlF,CAFkE,CAGlE;;AACA,MAAIM,IAAI,GAAGL,SAAX;AAAA,MACIM,EAAE,GAAGF,OADT;;AAGA,MAAIN,aAAa,GAAGC,YAApB,EAAkC;AAChC,QAAIQ,IAAI,GAAG,CAACD,EAAD,EAAKD,IAAL,CAAX;AACAA,IAAAA,IAAI,GAAGE,IAAI,CAAC,CAAD,CAAX;AACAD,IAAAA,EAAE,GAAGC,IAAI,CAAC,CAAD,CAAT;AACD;;AAED,SAAO,GAAGC,MAAH,CAAUH,IAAV,EAAgB,GAAhB,EAAqBG,MAArB,CAA4BF,EAA5B,CAAP;AACD;AACD;;;;;;;;AAQA,OAAO,SAASG,qBAAT,CAA+BC,YAA/B,EAA6C;AAClD,MAAIC,mBAAmB,GAAG,+BAA1B;AACA,MAAIC,mBAAmB,GAAGD,mBAAmB,CAACE,IAApB,CAAyBH,YAAzB,CAA1B;;AAEA,MAAIE,mBAAJ,EAAyB;AACvB,WAAO,GAAGJ,MAAH,CAAUI,mBAAmB,CAAC,CAAD,CAAnB,CAAuBE,WAAvB,EAAV,EAAgD,GAAhD,EAAqDN,MAArD,CAA4DI,mBAAmB,CAAC,CAAD,CAAnB,CAAuBG,WAAvB,EAA5D,CAAP;AACD;;AAED,SAAOL,YAAP;AACD;AACD;;;;;;;;AAQA,OAAO,SAASM,oBAAT,CAA8BC,QAA9B,EAAwCP,YAAxC,EAAsD;AAC3D,MAAIQ,sBAAsB,GAAGT,qBAAqB,CAACC,YAAD,CAAlD;;AAEA,MAAIlB,qBAAqB,CAAC0B,sBAAD,CAAzB,EAAmD;AACjDD,IAAAA,QAAQ,CAACE,QAAT,GAAoBD,sBAApB;AACD,GAFD,MAEO;AACLD,IAAAA,QAAQ,CAACE,QAAT,GAAoB5B,qBAApB;AACA6B,IAAAA,iCAAiC,CAACV,YAAD,CAAjC;AACD;AACF;AACD;;;;;;;AAOA,OAAO,SAASU,iCAAT,CAA2CV,YAA3C,EAAyD;AAC9D,MAAIvB,SAAS,CAACuB,YAAD,CAAb,EAA6B;AAC3BrB,IAAAA,KAAK,CAACC,YAAY,CAACd,eAAe,EAAhB,EAAoBkC,YAApB,CAAb,CAAL;AACD;AACF","sourcesContent":["import \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.array.slice\";\nimport \"core-js/modules/es.object.freeze\";\nimport \"core-js/modules/es.regexp.exec\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"Language with code \\\"\", \"\\\" was not found. You should register particular language \\n    before using it. Read more about this issue at: https://docs.handsontable.com/i18n/missing-language-code.\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nimport { isUndefined, isDefined } from './../helpers/mixed';\nimport { objectEach } from './../helpers/object';\nimport { error } from './../helpers/console';\nimport { toSingleLine } from './../helpers/templateLiteralTag';\nimport { DEFAULT_LANGUAGE_CODE, hasLanguageDictionary } from './dictionariesManager';\n/**\n * Perform shallow extend of a target object with only this extension's properties which doesn't exist in the target.\n *\n * @param {Object} target An object that will receive the new properties.\n * @param {Object} extension An object containing additional properties to merge into the target.\n */\n// TODO: Maybe it should be moved to global helpers? It's changed `extend` function.\n\nexport function extendNotExistingKeys(target, extension) {\n  objectEach(extension, function (value, key) {\n    if (isUndefined(target[key])) {\n      target[key] = value;\n    }\n  });\n  return target;\n}\n/**\n * Create range of values basing on cell indexes. For example, it will create below ranges for specified function arguments:\n *\n * createCellHeadersRange(2, 7) => `2-7`\n * createCellHeadersRange(7, 2) => `2-7`\n * createCellHeadersRange(0, 4, 'A', 'D') => `A-D`\n * createCellHeadersRange(4, 0, 'D', 'A') => `A-D`\n *\n * @param {number} firstRowIndex Index of \"first\" cell\n * @param {number} nextRowIndex Index of \"next\" cell\n * @param {*} fromValue Value which will represent \"first\" cell\n * @param {*} toValue Value which will represent \"next\" cell\n * @returns {String} Value representing range i.e. A-Z, 11-15.\n */\n\nexport function createCellHeadersRange(firstRowIndex, nextRowIndex) {\n  var fromValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : firstRowIndex;\n  var toValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : nextRowIndex;\n  // Will swap `fromValue` with `toValue` if it's necessary.\n  var from = fromValue,\n      to = toValue;\n\n  if (firstRowIndex > nextRowIndex) {\n    var _ref = [to, from];\n    from = _ref[0];\n    to = _ref[1];\n  }\n\n  return \"\".concat(from, \"-\").concat(to);\n}\n/**\n * Normalize language code. It takes handled languageCode proposition and change it to proper languageCode.\n * For example, when it takes `eN-us` as parameter it return `en-US`\n *\n * @param {String} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n * @returns {String}\n */\n\nexport function normalizeLanguageCode(languageCode) {\n  var languageCodePattern = /^([a-zA-Z]{2})-([a-zA-Z]{2})$/;\n  var partsOfLanguageCode = languageCodePattern.exec(languageCode);\n\n  if (partsOfLanguageCode) {\n    return \"\".concat(partsOfLanguageCode[1].toLowerCase(), \"-\").concat(partsOfLanguageCode[2].toUpperCase());\n  }\n\n  return languageCode;\n}\n/**\n * Set proper start language code. User may set language code which is not proper.\n *\n * @param {Object} settings Settings object.\n * @param {String} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n * @returns {String}\n */\n\nexport function applyLanguageSetting(settings, languageCode) {\n  var normalizedLanguageCode = normalizeLanguageCode(languageCode);\n\n  if (hasLanguageDictionary(normalizedLanguageCode)) {\n    settings.language = normalizedLanguageCode;\n  } else {\n    settings.language = DEFAULT_LANGUAGE_CODE;\n    warnUserAboutLanguageRegistration(languageCode);\n  }\n}\n/**\n *\n * Warn user if there is no registered language.\n *\n * @param {String} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n */\n\nexport function warnUserAboutLanguageRegistration(languageCode) {\n  if (isDefined(languageCode)) {\n    error(toSingleLine(_templateObject(), languageCode));\n  }\n}"]},"metadata":{},"sourceType":"module"}