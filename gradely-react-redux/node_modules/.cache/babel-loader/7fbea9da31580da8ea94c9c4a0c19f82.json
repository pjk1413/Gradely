{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport BasePlugin from './../_base';\nimport Hooks from './../../pluginHooks';\nimport SheetClip from './../../../lib/SheetClip/SheetClip';\nimport { arrayEach } from './../../helpers/array';\nimport { rangeEach } from './../../helpers/number';\nimport { getSelectionText } from './../../helpers/dom/element';\nimport { registerPlugin } from './../../plugins';\nimport copyItem from './contextMenuItem/copy';\nimport cutItem from './contextMenuItem/cut';\nimport PasteEvent from './pasteEvent';\nimport { createElement, destroyElement } from './focusableElement';\nimport { _dataToHTML, htmlToGridSettings } from './../../utils/parseTable';\nHooks.getSingleton().register('afterCopyLimit');\nHooks.getSingleton().register('modifyCopyableRange');\nHooks.getSingleton().register('beforeCut');\nHooks.getSingleton().register('afterCut');\nHooks.getSingleton().register('beforePaste');\nHooks.getSingleton().register('afterPaste');\nHooks.getSingleton().register('beforeCopy');\nHooks.getSingleton().register('afterCopy');\nvar ROWS_LIMIT = 1000;\nvar COLUMNS_LIMIT = 1000;\nvar privatePool = new WeakMap();\nvar META_HEAD = ['<meta name=\"generator\" content=\"Handsontable\"/>', '<style type=\"text/css\">td{white-space:normal}br{mso-data-placement:same-cell}</style>'].join('');\n/**\n * @description\n * This plugin enables the copy/paste functionality in the Handsontable. The functionality works for API, Context Menu,\n * using keyboard shortcuts and menu bar from the browser.\n * Possible values:\n * * `true` (to enable default options),\n * * `false` (to disable completely)\n *\n * or an object with values:\n * * `'columnsLimit'` (see {@link CopyPaste#columnsLimit})\n * * `'rowsLimit'` (see {@link CopyPaste#rowsLimit})\n * * `'pasteMode'` (see {@link CopyPaste#pasteMode})\n * * `'uiContainer'` (see {@link CopyPaste#uiContainer})\n *\n * See [the copy/paste demo](https://handsontable.com/docs/demo-copy-paste.html) for examples.\n *\n * @example\n * ```js\n * // Enables the plugin with default values\n * copyPaste: true,\n * // Enables the plugin with custom values\n * copyPaste: {\n *   columnsLimit: 25,\n *   rowsLimit: 50,\n *   pasteMode: 'shift_down',\n *   uiContainer: document.body,\n * },\n * ```\n * @class CopyPaste\n * @plugin CopyPaste\n */\n\nvar CopyPaste = /*#__PURE__*/function (_BasePlugin) {\n  _inherits(CopyPaste, _BasePlugin);\n\n  function CopyPaste(hotInstance) {\n    var _this;\n\n    _classCallCheck(this, CopyPaste);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CopyPaste).call(this, hotInstance));\n    /**\n     * Maximum number of columns than can be copied to clipboard using <kbd>CTRL</kbd> + <kbd>C</kbd>.\n     *\n     * @type {Number}\n     * @default 1000\n     */\n\n    _this.columnsLimit = COLUMNS_LIMIT;\n    /**\n     * Ranges of the cells coordinates, which should be used to copy/cut/paste actions.\n     *\n     * @private\n     * @type {Array}\n     */\n\n    _this.copyableRanges = [];\n    /**\n     * Provides focusable element to support IME and copy/paste/cut actions.\n     *\n     * @type {FocusableWrapper}\n     */\n\n    _this.focusableElement = void 0;\n    /**\n     * Defines paste (<kbd>CTRL</kbd> + <kbd>V</kbd>) behavior.\n     * * Default value `\"overwrite\"` will paste clipboard value over current selection.\n     * * When set to `\"shift_down\"`, clipboard data will be pasted in place of current selection, while all selected cells are moved down.\n     * * When set to `\"shift_right\"`, clipboard data will be pasted in place of current selection, while all selected cells are moved right.\n     *\n     * @type {String}\n     * @default 'overwrite'\n     */\n\n    _this.pasteMode = 'overwrite';\n    /**\n     * Maximum number of rows than can be copied to clipboard using <kbd>CTRL</kbd> + <kbd>C</kbd>.\n     *\n     * @type {Number}\n     * @default 1000\n     */\n\n    _this.rowsLimit = ROWS_LIMIT;\n    /**\n     * UI container for the secondary focusable element.\n     *\n     * @type {HTMLElement}\n     */\n\n    _this.uiContainer = _this.hot.rootDocument.body;\n    privatePool.set(_assertThisInitialized(_this), {\n      isTriggeredByCopy: false,\n      isTriggeredByCut: false,\n      isBeginEditing: false,\n      isFragmentSelectionEnabled: false\n    });\n    return _this;\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` than the {@link CopyPaste#enablePlugin} method is called.\n   *\n   * @returns {Boolean}\n   */\n\n\n  _createClass(CopyPaste, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return !!this.hot.getSettings().copyPaste;\n    }\n    /**\n     * Enables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"enablePlugin\",\n    value: function enablePlugin() {\n      var _this2 = this;\n\n      if (this.enabled) {\n        return;\n      }\n\n      var _this$hot$getSettings = this.hot.getSettings(),\n          settings = _this$hot$getSettings.copyPaste,\n          fragmentSelection = _this$hot$getSettings.fragmentSelection;\n\n      var priv = privatePool.get(this);\n      priv.isFragmentSelectionEnabled = !!fragmentSelection;\n\n      if (_typeof(settings) === 'object') {\n        this.pasteMode = settings.pasteMode || this.pasteMode;\n        this.rowsLimit = isNaN(settings.rowsLimit) ? this.rowsLimit : settings.rowsLimit;\n        this.columnsLimit = isNaN(settings.columnsLimit) ? this.columnsLimit : settings.columnsLimit;\n        this.uiContainer = settings.uiContainer || this.uiContainer;\n      }\n\n      this.addHook('afterContextMenuDefaultOptions', function (options) {\n        return _this2.onAfterContextMenuDefaultOptions(options);\n      });\n      this.addHook('afterOnCellMouseUp', function () {\n        return _this2.onAfterOnCellMouseUp();\n      });\n      this.addHook('afterSelectionEnd', function () {\n        return _this2.onAfterSelectionEnd();\n      });\n      this.addHook('beforeKeyDown', function () {\n        return _this2.onBeforeKeyDown();\n      });\n      this.focusableElement = createElement(this.uiContainer);\n      this.focusableElement.addLocalHook('copy', function (event) {\n        return _this2.onCopy(event);\n      }).addLocalHook('cut', function (event) {\n        return _this2.onCut(event);\n      }).addLocalHook('paste', function (event) {\n        return _this2.onPaste(event);\n      });\n\n      _get(_getPrototypeOf(CopyPaste.prototype), \"enablePlugin\", this).call(this);\n    }\n    /**\n     * Updates the plugin state. This method is executed when {@link Core#updateSettings} is invoked.\n     */\n\n  }, {\n    key: \"updatePlugin\",\n    value: function updatePlugin() {\n      this.disablePlugin();\n      this.enablePlugin();\n      this.getOrCreateFocusableElement();\n\n      _get(_getPrototypeOf(CopyPaste.prototype), \"updatePlugin\", this).call(this);\n    }\n    /**\n     * Disables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"disablePlugin\",\n    value: function disablePlugin() {\n      if (this.focusableElement) {\n        destroyElement(this.focusableElement);\n      }\n\n      _get(_getPrototypeOf(CopyPaste.prototype), \"disablePlugin\", this).call(this);\n    }\n    /**\n     * Copies the selected cell into the clipboard.\n     */\n\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      var priv = privatePool.get(this);\n      priv.isTriggeredByCopy = true;\n      this.getOrCreateFocusableElement();\n      this.focusableElement.focus();\n      this.hot.rootDocument.execCommand('copy');\n    }\n    /**\n     * Cuts the selected cell into the clipboard.\n     */\n\n  }, {\n    key: \"cut\",\n    value: function cut() {\n      var priv = privatePool.get(this);\n      priv.isTriggeredByCut = true;\n      this.getOrCreateFocusableElement();\n      this.focusableElement.focus();\n      this.hot.rootDocument.execCommand('cut');\n    }\n    /**\n     * Creates copyable text releated to range objects.\n     *\n     * @param {Object[]} ranges Array of objects with properties `startRow`, `endRow`, `startCol` and `endCol`.\n     * @returns {String} Returns string which will be copied into clipboard.\n     */\n\n  }, {\n    key: \"getRangedCopyableData\",\n    value: function getRangedCopyableData(ranges) {\n      var _this3 = this;\n\n      var dataSet = [];\n      var copyableRows = [];\n      var copyableColumns = []; // Count all copyable rows and columns\n\n      arrayEach(ranges, function (range) {\n        rangeEach(range.startRow, range.endRow, function (row) {\n          if (copyableRows.indexOf(row) === -1) {\n            copyableRows.push(row);\n          }\n        });\n        rangeEach(range.startCol, range.endCol, function (column) {\n          if (copyableColumns.indexOf(column) === -1) {\n            copyableColumns.push(column);\n          }\n        });\n      }); // Concat all rows and columns data defined in ranges into one copyable string\n\n      arrayEach(copyableRows, function (row) {\n        var rowSet = [];\n        arrayEach(copyableColumns, function (column) {\n          rowSet.push(_this3.hot.getCopyableData(row, column));\n        });\n        dataSet.push(rowSet);\n      });\n      return SheetClip.stringify(dataSet);\n    }\n    /**\n     * Creates copyable text releated to range objects.\n     *\n     * @param {Object[]} ranges Array of objects with properties `startRow`, `startCol`, `endRow` and `endCol`.\n     * @returns {Array[]} Returns array of arrays which will be copied into clipboard.\n     */\n\n  }, {\n    key: \"getRangedData\",\n    value: function getRangedData(ranges) {\n      var _this4 = this;\n\n      var dataSet = [];\n      var copyableRows = [];\n      var copyableColumns = []; // Count all copyable rows and columns\n\n      arrayEach(ranges, function (range) {\n        rangeEach(range.startRow, range.endRow, function (row) {\n          if (copyableRows.indexOf(row) === -1) {\n            copyableRows.push(row);\n          }\n        });\n        rangeEach(range.startCol, range.endCol, function (column) {\n          if (copyableColumns.indexOf(column) === -1) {\n            copyableColumns.push(column);\n          }\n        });\n      }); // Concat all rows and columns data defined in ranges into one copyable string\n\n      arrayEach(copyableRows, function (row) {\n        var rowSet = [];\n        arrayEach(copyableColumns, function (column) {\n          rowSet.push(_this4.hot.getCopyableData(row, column));\n        });\n        dataSet.push(rowSet);\n      });\n      return dataSet;\n    }\n    /**\n     * Simulates the paste action.\n     *\n     * @param {String} [value] Value to paste.\n     */\n\n  }, {\n    key: \"paste\",\n    value: function paste() {\n      var pastableText = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var pastableHtml = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : pastableText;\n\n      if (!pastableText && !pastableHtml) {\n        return;\n      }\n\n      var pasteData = new PasteEvent();\n\n      if (pastableText) {\n        pasteData.clipboardData.setData('text/plain', pastableText);\n      }\n\n      if (pastableHtml) {\n        pasteData.clipboardData.setData('text/html', pastableHtml);\n      }\n\n      this.getOrCreateFocusableElement();\n      this.onPaste(pasteData);\n    }\n    /**\n     * Prepares copyable text from the cells selection in the invisible textarea.\n     */\n\n  }, {\n    key: \"setCopyableText\",\n    value: function setCopyableText() {\n      var selRange = this.hot.getSelectedRangeLast();\n\n      if (!selRange) {\n        return;\n      }\n\n      var topLeft = selRange.getTopLeftCorner();\n      var bottomRight = selRange.getBottomRightCorner();\n      var startRow = topLeft.row;\n      var startCol = topLeft.col;\n      var endRow = bottomRight.row;\n      var endCol = bottomRight.col;\n      var finalEndRow = Math.min(endRow, startRow + this.rowsLimit - 1);\n      var finalEndCol = Math.min(endCol, startCol + this.columnsLimit - 1);\n      this.copyableRanges.length = 0;\n      this.copyableRanges.push({\n        startRow: startRow,\n        startCol: startCol,\n        endRow: finalEndRow,\n        endCol: finalEndCol\n      });\n      this.copyableRanges = this.hot.runHooks('modifyCopyableRange', this.copyableRanges);\n\n      if (endRow !== finalEndRow || endCol !== finalEndCol) {\n        this.hot.runHooks('afterCopyLimit', endRow - startRow + 1, endCol - startCol + 1, this.rowsLimit, this.columnsLimit);\n      }\n    }\n    /**\n     * Force focus on editable element.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"getOrCreateFocusableElement\",\n    value: function getOrCreateFocusableElement() {\n      var editor = this.hot.getActiveEditor();\n      var editableElement = editor ? editor.TEXTAREA : void 0;\n\n      if (editableElement) {\n        this.focusableElement.setFocusableElement(editableElement);\n      } else {\n        this.focusableElement.useSecondaryElement();\n      }\n    }\n    /**\n     * Verifies if editor exists and is open.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"isEditorOpened\",\n    value: function isEditorOpened() {\n      var editor = this.hot.getActiveEditor();\n      return editor && editor.isOpened();\n    }\n    /**\n     * Prepares new values to populate them into datasource.\n     *\n     * @private\n     * @param {Array} inputArray\n     * @param {Array} selection\n     * @returns {Array} Range coordinates after populate data\n     */\n\n  }, {\n    key: \"populateValues\",\n    value: function populateValues(inputArray) {\n      var selection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.hot.getSelectedLast();\n\n      if (!inputArray.length) {\n        return;\n      }\n\n      var newValuesMaxRow = inputArray.length - 1;\n      var newValuesMaxColumn = inputArray[0].length - 1;\n      var startRow = Math.min(selection[0], selection[2]);\n      var endRow = Math.max(selection[0], selection[2], newValuesMaxRow + startRow);\n      var startColumn = Math.min(selection[1], selection[3]);\n      var endColumn = Math.max(selection[1], selection[3], newValuesMaxColumn + startColumn);\n      var newValues = [];\n\n      for (var row = startRow, valuesRow = 0; row <= endRow; row += 1) {\n        var newRow = [];\n\n        for (var column = startColumn, valuesColumn = 0; column <= endColumn; column += 1) {\n          newRow.push(inputArray[valuesRow][valuesColumn]);\n          valuesColumn = valuesColumn === newValuesMaxColumn ? 0 : valuesColumn += 1;\n        }\n\n        newValues.push(newRow);\n        valuesRow = valuesRow === newValuesMaxRow ? 0 : valuesRow += 1;\n      }\n\n      this.hot.populateFromArray(startRow, startColumn, newValues, void 0, void 0, 'CopyPaste.paste', this.pasteMode);\n      return [startRow, startColumn, endRow, endColumn];\n    }\n    /**\n     * `copy` event callback on textarea element.\n     *\n     * @param {Event} event ClipboardEvent.\n     * @private\n     */\n\n  }, {\n    key: \"onCopy\",\n    value: function onCopy(event) {\n      var priv = privatePool.get(this);\n\n      if (!this.hot.isListening() && !priv.isTriggeredByCopy || this.isEditorOpened()) {\n        return;\n      }\n\n      this.setCopyableText();\n      priv.isTriggeredByCopy = false;\n      var rangedData = this.getRangedData(this.copyableRanges);\n      var allowCopying = !!this.hot.runHooks('beforeCopy', rangedData, this.copyableRanges);\n\n      if (allowCopying) {\n        var textPlain = SheetClip.stringify(rangedData);\n\n        if (event && event.clipboardData) {\n          var textHTML = _dataToHTML(rangedData, this.hot.rootDocument);\n\n          event.clipboardData.setData('text/plain', textPlain);\n          event.clipboardData.setData('text/html', [META_HEAD, textHTML].join(''));\n        } else if (typeof ClipboardEvent === 'undefined') {\n          this.hot.rootWindow.clipboardData.setData('Text', textPlain);\n        }\n\n        this.hot.runHooks('afterCopy', rangedData, this.copyableRanges);\n      }\n\n      event.preventDefault();\n    }\n    /**\n     * `cut` event callback on textarea element.\n     *\n     * @param {Event} event ClipboardEvent.\n     * @private\n     */\n\n  }, {\n    key: \"onCut\",\n    value: function onCut(event) {\n      var priv = privatePool.get(this);\n\n      if (!this.hot.isListening() && !priv.isTriggeredByCut || this.isEditorOpened()) {\n        return;\n      }\n\n      this.setCopyableText();\n      priv.isTriggeredByCut = false;\n      var rangedData = this.getRangedData(this.copyableRanges);\n      var allowCuttingOut = !!this.hot.runHooks('beforeCut', rangedData, this.copyableRanges);\n\n      if (allowCuttingOut) {\n        var textPlain = SheetClip.stringify(rangedData);\n\n        if (event && event.clipboardData) {\n          var textHTML = _dataToHTML(rangedData, this.hot.rootDocument);\n\n          event.clipboardData.setData('text/plain', textPlain);\n          event.clipboardData.setData('text/html', [META_HEAD, textHTML].join(''));\n        } else if (typeof ClipboardEvent === 'undefined') {\n          this.hot.rootWindow.clipboardData.setData('Text', textPlain);\n        }\n\n        this.hot.emptySelectedCells('CopyPaste.cut');\n        this.hot.runHooks('afterCut', rangedData, this.copyableRanges);\n      }\n\n      event.preventDefault();\n    }\n    /**\n     * `paste` event callback on textarea element.\n     *\n     * @param {Event} event ClipboardEvent or pseudo ClipboardEvent, if paste was called manually.\n     * @private\n     */\n\n  }, {\n    key: \"onPaste\",\n    value: function onPaste(event) {\n      if (!this.hot.isListening() || this.isEditorOpened()) {\n        return;\n      }\n\n      if (event && event.preventDefault) {\n        event.preventDefault();\n      }\n\n      var pastedData;\n\n      if (event && typeof event.clipboardData !== 'undefined') {\n        var textHTML = event.clipboardData.getData('text/html');\n\n        if (textHTML && /(<table)|(<TABLE)/g.test(textHTML)) {\n          var parsedConfig = htmlToGridSettings(textHTML, this.hot.rootDocument);\n          pastedData = parsedConfig.data;\n        } else {\n          pastedData = event.clipboardData.getData('text/plain');\n        }\n      } else if (typeof ClipboardEvent === 'undefined' && typeof this.hot.rootWindow.clipboardData !== 'undefined') {\n        pastedData = this.hot.rootWindow.clipboardData.getData('Text');\n      }\n\n      if (typeof pastedData === 'string') {\n        pastedData = SheetClip.parse(pastedData);\n      }\n\n      if (pastedData && pastedData.length === 0) {\n        return;\n      }\n\n      if (this.hot.runHooks('beforePaste', pastedData, this.copyableRanges) === false) {\n        return;\n      }\n\n      var _this$populateValues = this.populateValues(pastedData),\n          _this$populateValues2 = _slicedToArray(_this$populateValues, 4),\n          startRow = _this$populateValues2[0],\n          startColumn = _this$populateValues2[1],\n          endRow = _this$populateValues2[2],\n          endColumn = _this$populateValues2[3];\n\n      this.hot.selectCell(startRow, startColumn, Math.min(this.hot.countRows() - 1, endRow), Math.min(this.hot.countCols() - 1, endColumn));\n      this.hot.runHooks('afterPaste', pastedData, this.copyableRanges);\n    }\n    /**\n     * Add copy, cut and paste options to the Context Menu.\n     *\n     * @private\n     * @param {Object} options Contains default added options of the Context Menu.\n     */\n\n  }, {\n    key: \"onAfterContextMenuDefaultOptions\",\n    value: function onAfterContextMenuDefaultOptions(options) {\n      options.items.push({\n        name: '---------'\n      }, copyItem(this), cutItem(this));\n    }\n    /**\n     * Force focus on focusableElement.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onAfterOnCellMouseUp\",\n    value: function onAfterOnCellMouseUp() {\n      if (!this.hot.isListening() || this.isEditorOpened()) {\n        return;\n      }\n\n      this.getOrCreateFocusableElement();\n      this.focusableElement.focus();\n    }\n    /**\n     * Force focus on focusableElement after end of the selection.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onAfterSelectionEnd\",\n    value: function onAfterSelectionEnd() {\n      var _privatePool$get = privatePool.get(this),\n          isFragmentSelectionEnabled = _privatePool$get.isFragmentSelectionEnabled;\n\n      if (this.isEditorOpened()) {\n        return;\n      }\n\n      this.getOrCreateFocusableElement();\n\n      if (isFragmentSelectionEnabled && this.focusableElement.getFocusableElement() !== this.hot.rootDocument.activeElement && getSelectionText()) {\n        return;\n      }\n\n      this.setCopyableText();\n      this.focusableElement.focus();\n    }\n    /**\n     * `beforeKeyDown` listener to force focus of focusableElement.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onBeforeKeyDown\",\n    value: function onBeforeKeyDown() {\n      if (!this.hot.isListening() || this.isEditorOpened()) {\n        return;\n      }\n\n      var activeElement = this.hot.rootDocument.activeElement;\n      var activeEditor = this.hot.getActiveEditor();\n\n      if (!activeEditor || activeElement !== this.focusableElement.getFocusableElement() && activeElement !== activeEditor.select) {\n        return;\n      }\n\n      this.getOrCreateFocusableElement();\n      this.focusableElement.focus();\n    }\n    /**\n     * Destroys the plugin instance.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.focusableElement) {\n        destroyElement(this.focusableElement);\n        this.focusableElement = null;\n      }\n\n      _get(_getPrototypeOf(CopyPaste.prototype), \"destroy\", this).call(this);\n    }\n  }]);\n\n  return CopyPaste;\n}(BasePlugin);\n\nregisterPlugin('CopyPaste', CopyPaste);\nexport default CopyPaste;","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react/node_modules/handsontable/es/plugins/copyPaste/copyPaste.js"],"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","TypeError","Symbol","iterator","Object","prototype","toString","call","_arr","_n","_d","_e","undefined","_i","_s","next","done","push","value","length","err","Array","isArray","_typeof","obj","constructor","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","_get","property","receiver","Reflect","get","base","_superPropBase","desc","getOwnPropertyDescriptor","object","hasOwnProperty","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_inherits","subClass","superClass","create","_setPrototypeOf","p","BasePlugin","Hooks","SheetClip","arrayEach","rangeEach","getSelectionText","registerPlugin","copyItem","cutItem","PasteEvent","createElement","destroyElement","_dataToHTML","htmlToGridSettings","getSingleton","register","ROWS_LIMIT","COLUMNS_LIMIT","privatePool","WeakMap","META_HEAD","join","CopyPaste","_BasePlugin","hotInstance","_this","columnsLimit","copyableRanges","focusableElement","pasteMode","rowsLimit","uiContainer","hot","rootDocument","body","set","isTriggeredByCopy","isTriggeredByCut","isBeginEditing","isFragmentSelectionEnabled","isEnabled","getSettings","copyPaste","enablePlugin","_this2","enabled","_this$hot$getSettings","settings","fragmentSelection","priv","isNaN","addHook","options","onAfterContextMenuDefaultOptions","onAfterOnCellMouseUp","onAfterSelectionEnd","onBeforeKeyDown","addLocalHook","event","onCopy","onCut","onPaste","updatePlugin","disablePlugin","getOrCreateFocusableElement","copy","focus","execCommand","cut","getRangedCopyableData","ranges","_this3","dataSet","copyableRows","copyableColumns","range","startRow","endRow","row","indexOf","startCol","endCol","column","rowSet","getCopyableData","stringify","getRangedData","_this4","paste","pastableText","arguments","pastableHtml","pasteData","clipboardData","setData","setCopyableText","selRange","getSelectedRangeLast","topLeft","getTopLeftCorner","bottomRight","getBottomRightCorner","col","finalEndRow","Math","min","finalEndCol","runHooks","editor","getActiveEditor","editableElement","TEXTAREA","setFocusableElement","useSecondaryElement","isEditorOpened","isOpened","populateValues","inputArray","selection","getSelectedLast","newValuesMaxRow","newValuesMaxColumn","max","startColumn","endColumn","newValues","valuesRow","newRow","valuesColumn","populateFromArray","isListening","rangedData","allowCopying","textPlain","textHTML","ClipboardEvent","rootWindow","preventDefault","allowCuttingOut","emptySelectedCells","pastedData","getData","test","parsedConfig","data","parse","_this$populateValues","_this$populateValues2","selectCell","countRows","countCols","items","name","_privatePool$get","getFocusableElement","activeElement","activeEditor","select","destroy"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.symbol\";\nimport \"core-js/modules/es.symbol.description\";\nimport \"core-js/modules/es.symbol.iterator\";\nimport \"core-js/modules/es.array.index-of\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.array.join\";\nimport \"core-js/modules/es.object.get-own-property-descriptor\";\nimport \"core-js/modules/es.object.get-prototype-of\";\nimport \"core-js/modules/es.object.set-prototype-of\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.reflect.get\";\nimport \"core-js/modules/es.regexp.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/es.weak-map\";\nimport \"core-js/modules/web.dom-collections.iterator\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport BasePlugin from './../_base';\nimport Hooks from './../../pluginHooks';\nimport SheetClip from './../../../lib/SheetClip/SheetClip';\nimport { arrayEach } from './../../helpers/array';\nimport { rangeEach } from './../../helpers/number';\nimport { getSelectionText } from './../../helpers/dom/element';\nimport { registerPlugin } from './../../plugins';\nimport copyItem from './contextMenuItem/copy';\nimport cutItem from './contextMenuItem/cut';\nimport PasteEvent from './pasteEvent';\nimport { createElement, destroyElement } from './focusableElement';\nimport { _dataToHTML, htmlToGridSettings } from './../../utils/parseTable';\nHooks.getSingleton().register('afterCopyLimit');\nHooks.getSingleton().register('modifyCopyableRange');\nHooks.getSingleton().register('beforeCut');\nHooks.getSingleton().register('afterCut');\nHooks.getSingleton().register('beforePaste');\nHooks.getSingleton().register('afterPaste');\nHooks.getSingleton().register('beforeCopy');\nHooks.getSingleton().register('afterCopy');\nvar ROWS_LIMIT = 1000;\nvar COLUMNS_LIMIT = 1000;\nvar privatePool = new WeakMap();\nvar META_HEAD = ['<meta name=\"generator\" content=\"Handsontable\"/>', '<style type=\"text/css\">td{white-space:normal}br{mso-data-placement:same-cell}</style>'].join('');\n/**\n * @description\n * This plugin enables the copy/paste functionality in the Handsontable. The functionality works for API, Context Menu,\n * using keyboard shortcuts and menu bar from the browser.\n * Possible values:\n * * `true` (to enable default options),\n * * `false` (to disable completely)\n *\n * or an object with values:\n * * `'columnsLimit'` (see {@link CopyPaste#columnsLimit})\n * * `'rowsLimit'` (see {@link CopyPaste#rowsLimit})\n * * `'pasteMode'` (see {@link CopyPaste#pasteMode})\n * * `'uiContainer'` (see {@link CopyPaste#uiContainer})\n *\n * See [the copy/paste demo](https://handsontable.com/docs/demo-copy-paste.html) for examples.\n *\n * @example\n * ```js\n * // Enables the plugin with default values\n * copyPaste: true,\n * // Enables the plugin with custom values\n * copyPaste: {\n *   columnsLimit: 25,\n *   rowsLimit: 50,\n *   pasteMode: 'shift_down',\n *   uiContainer: document.body,\n * },\n * ```\n * @class CopyPaste\n * @plugin CopyPaste\n */\n\nvar CopyPaste =\n/*#__PURE__*/\nfunction (_BasePlugin) {\n  _inherits(CopyPaste, _BasePlugin);\n\n  function CopyPaste(hotInstance) {\n    var _this;\n\n    _classCallCheck(this, CopyPaste);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CopyPaste).call(this, hotInstance));\n    /**\n     * Maximum number of columns than can be copied to clipboard using <kbd>CTRL</kbd> + <kbd>C</kbd>.\n     *\n     * @type {Number}\n     * @default 1000\n     */\n\n    _this.columnsLimit = COLUMNS_LIMIT;\n    /**\n     * Ranges of the cells coordinates, which should be used to copy/cut/paste actions.\n     *\n     * @private\n     * @type {Array}\n     */\n\n    _this.copyableRanges = [];\n    /**\n     * Provides focusable element to support IME and copy/paste/cut actions.\n     *\n     * @type {FocusableWrapper}\n     */\n\n    _this.focusableElement = void 0;\n    /**\n     * Defines paste (<kbd>CTRL</kbd> + <kbd>V</kbd>) behavior.\n     * * Default value `\"overwrite\"` will paste clipboard value over current selection.\n     * * When set to `\"shift_down\"`, clipboard data will be pasted in place of current selection, while all selected cells are moved down.\n     * * When set to `\"shift_right\"`, clipboard data will be pasted in place of current selection, while all selected cells are moved right.\n     *\n     * @type {String}\n     * @default 'overwrite'\n     */\n\n    _this.pasteMode = 'overwrite';\n    /**\n     * Maximum number of rows than can be copied to clipboard using <kbd>CTRL</kbd> + <kbd>C</kbd>.\n     *\n     * @type {Number}\n     * @default 1000\n     */\n\n    _this.rowsLimit = ROWS_LIMIT;\n    /**\n     * UI container for the secondary focusable element.\n     *\n     * @type {HTMLElement}\n     */\n\n    _this.uiContainer = _this.hot.rootDocument.body;\n    privatePool.set(_assertThisInitialized(_this), {\n      isTriggeredByCopy: false,\n      isTriggeredByCut: false,\n      isBeginEditing: false,\n      isFragmentSelectionEnabled: false\n    });\n    return _this;\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` than the {@link CopyPaste#enablePlugin} method is called.\n   *\n   * @returns {Boolean}\n   */\n\n\n  _createClass(CopyPaste, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return !!this.hot.getSettings().copyPaste;\n    }\n    /**\n     * Enables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"enablePlugin\",\n    value: function enablePlugin() {\n      var _this2 = this;\n\n      if (this.enabled) {\n        return;\n      }\n\n      var _this$hot$getSettings = this.hot.getSettings(),\n          settings = _this$hot$getSettings.copyPaste,\n          fragmentSelection = _this$hot$getSettings.fragmentSelection;\n\n      var priv = privatePool.get(this);\n      priv.isFragmentSelectionEnabled = !!fragmentSelection;\n\n      if (_typeof(settings) === 'object') {\n        this.pasteMode = settings.pasteMode || this.pasteMode;\n        this.rowsLimit = isNaN(settings.rowsLimit) ? this.rowsLimit : settings.rowsLimit;\n        this.columnsLimit = isNaN(settings.columnsLimit) ? this.columnsLimit : settings.columnsLimit;\n        this.uiContainer = settings.uiContainer || this.uiContainer;\n      }\n\n      this.addHook('afterContextMenuDefaultOptions', function (options) {\n        return _this2.onAfterContextMenuDefaultOptions(options);\n      });\n      this.addHook('afterOnCellMouseUp', function () {\n        return _this2.onAfterOnCellMouseUp();\n      });\n      this.addHook('afterSelectionEnd', function () {\n        return _this2.onAfterSelectionEnd();\n      });\n      this.addHook('beforeKeyDown', function () {\n        return _this2.onBeforeKeyDown();\n      });\n      this.focusableElement = createElement(this.uiContainer);\n      this.focusableElement.addLocalHook('copy', function (event) {\n        return _this2.onCopy(event);\n      }).addLocalHook('cut', function (event) {\n        return _this2.onCut(event);\n      }).addLocalHook('paste', function (event) {\n        return _this2.onPaste(event);\n      });\n\n      _get(_getPrototypeOf(CopyPaste.prototype), \"enablePlugin\", this).call(this);\n    }\n    /**\n     * Updates the plugin state. This method is executed when {@link Core#updateSettings} is invoked.\n     */\n\n  }, {\n    key: \"updatePlugin\",\n    value: function updatePlugin() {\n      this.disablePlugin();\n      this.enablePlugin();\n      this.getOrCreateFocusableElement();\n\n      _get(_getPrototypeOf(CopyPaste.prototype), \"updatePlugin\", this).call(this);\n    }\n    /**\n     * Disables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"disablePlugin\",\n    value: function disablePlugin() {\n      if (this.focusableElement) {\n        destroyElement(this.focusableElement);\n      }\n\n      _get(_getPrototypeOf(CopyPaste.prototype), \"disablePlugin\", this).call(this);\n    }\n    /**\n     * Copies the selected cell into the clipboard.\n     */\n\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      var priv = privatePool.get(this);\n      priv.isTriggeredByCopy = true;\n      this.getOrCreateFocusableElement();\n      this.focusableElement.focus();\n      this.hot.rootDocument.execCommand('copy');\n    }\n    /**\n     * Cuts the selected cell into the clipboard.\n     */\n\n  }, {\n    key: \"cut\",\n    value: function cut() {\n      var priv = privatePool.get(this);\n      priv.isTriggeredByCut = true;\n      this.getOrCreateFocusableElement();\n      this.focusableElement.focus();\n      this.hot.rootDocument.execCommand('cut');\n    }\n    /**\n     * Creates copyable text releated to range objects.\n     *\n     * @param {Object[]} ranges Array of objects with properties `startRow`, `endRow`, `startCol` and `endCol`.\n     * @returns {String} Returns string which will be copied into clipboard.\n     */\n\n  }, {\n    key: \"getRangedCopyableData\",\n    value: function getRangedCopyableData(ranges) {\n      var _this3 = this;\n\n      var dataSet = [];\n      var copyableRows = [];\n      var copyableColumns = []; // Count all copyable rows and columns\n\n      arrayEach(ranges, function (range) {\n        rangeEach(range.startRow, range.endRow, function (row) {\n          if (copyableRows.indexOf(row) === -1) {\n            copyableRows.push(row);\n          }\n        });\n        rangeEach(range.startCol, range.endCol, function (column) {\n          if (copyableColumns.indexOf(column) === -1) {\n            copyableColumns.push(column);\n          }\n        });\n      }); // Concat all rows and columns data defined in ranges into one copyable string\n\n      arrayEach(copyableRows, function (row) {\n        var rowSet = [];\n        arrayEach(copyableColumns, function (column) {\n          rowSet.push(_this3.hot.getCopyableData(row, column));\n        });\n        dataSet.push(rowSet);\n      });\n      return SheetClip.stringify(dataSet);\n    }\n    /**\n     * Creates copyable text releated to range objects.\n     *\n     * @param {Object[]} ranges Array of objects with properties `startRow`, `startCol`, `endRow` and `endCol`.\n     * @returns {Array[]} Returns array of arrays which will be copied into clipboard.\n     */\n\n  }, {\n    key: \"getRangedData\",\n    value: function getRangedData(ranges) {\n      var _this4 = this;\n\n      var dataSet = [];\n      var copyableRows = [];\n      var copyableColumns = []; // Count all copyable rows and columns\n\n      arrayEach(ranges, function (range) {\n        rangeEach(range.startRow, range.endRow, function (row) {\n          if (copyableRows.indexOf(row) === -1) {\n            copyableRows.push(row);\n          }\n        });\n        rangeEach(range.startCol, range.endCol, function (column) {\n          if (copyableColumns.indexOf(column) === -1) {\n            copyableColumns.push(column);\n          }\n        });\n      }); // Concat all rows and columns data defined in ranges into one copyable string\n\n      arrayEach(copyableRows, function (row) {\n        var rowSet = [];\n        arrayEach(copyableColumns, function (column) {\n          rowSet.push(_this4.hot.getCopyableData(row, column));\n        });\n        dataSet.push(rowSet);\n      });\n      return dataSet;\n    }\n    /**\n     * Simulates the paste action.\n     *\n     * @param {String} [value] Value to paste.\n     */\n\n  }, {\n    key: \"paste\",\n    value: function paste() {\n      var pastableText = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var pastableHtml = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : pastableText;\n\n      if (!pastableText && !pastableHtml) {\n        return;\n      }\n\n      var pasteData = new PasteEvent();\n\n      if (pastableText) {\n        pasteData.clipboardData.setData('text/plain', pastableText);\n      }\n\n      if (pastableHtml) {\n        pasteData.clipboardData.setData('text/html', pastableHtml);\n      }\n\n      this.getOrCreateFocusableElement();\n      this.onPaste(pasteData);\n    }\n    /**\n     * Prepares copyable text from the cells selection in the invisible textarea.\n     */\n\n  }, {\n    key: \"setCopyableText\",\n    value: function setCopyableText() {\n      var selRange = this.hot.getSelectedRangeLast();\n\n      if (!selRange) {\n        return;\n      }\n\n      var topLeft = selRange.getTopLeftCorner();\n      var bottomRight = selRange.getBottomRightCorner();\n      var startRow = topLeft.row;\n      var startCol = topLeft.col;\n      var endRow = bottomRight.row;\n      var endCol = bottomRight.col;\n      var finalEndRow = Math.min(endRow, startRow + this.rowsLimit - 1);\n      var finalEndCol = Math.min(endCol, startCol + this.columnsLimit - 1);\n      this.copyableRanges.length = 0;\n      this.copyableRanges.push({\n        startRow: startRow,\n        startCol: startCol,\n        endRow: finalEndRow,\n        endCol: finalEndCol\n      });\n      this.copyableRanges = this.hot.runHooks('modifyCopyableRange', this.copyableRanges);\n\n      if (endRow !== finalEndRow || endCol !== finalEndCol) {\n        this.hot.runHooks('afterCopyLimit', endRow - startRow + 1, endCol - startCol + 1, this.rowsLimit, this.columnsLimit);\n      }\n    }\n    /**\n     * Force focus on editable element.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"getOrCreateFocusableElement\",\n    value: function getOrCreateFocusableElement() {\n      var editor = this.hot.getActiveEditor();\n      var editableElement = editor ? editor.TEXTAREA : void 0;\n\n      if (editableElement) {\n        this.focusableElement.setFocusableElement(editableElement);\n      } else {\n        this.focusableElement.useSecondaryElement();\n      }\n    }\n    /**\n     * Verifies if editor exists and is open.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"isEditorOpened\",\n    value: function isEditorOpened() {\n      var editor = this.hot.getActiveEditor();\n      return editor && editor.isOpened();\n    }\n    /**\n     * Prepares new values to populate them into datasource.\n     *\n     * @private\n     * @param {Array} inputArray\n     * @param {Array} selection\n     * @returns {Array} Range coordinates after populate data\n     */\n\n  }, {\n    key: \"populateValues\",\n    value: function populateValues(inputArray) {\n      var selection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.hot.getSelectedLast();\n\n      if (!inputArray.length) {\n        return;\n      }\n\n      var newValuesMaxRow = inputArray.length - 1;\n      var newValuesMaxColumn = inputArray[0].length - 1;\n      var startRow = Math.min(selection[0], selection[2]);\n      var endRow = Math.max(selection[0], selection[2], newValuesMaxRow + startRow);\n      var startColumn = Math.min(selection[1], selection[3]);\n      var endColumn = Math.max(selection[1], selection[3], newValuesMaxColumn + startColumn);\n      var newValues = [];\n\n      for (var row = startRow, valuesRow = 0; row <= endRow; row += 1) {\n        var newRow = [];\n\n        for (var column = startColumn, valuesColumn = 0; column <= endColumn; column += 1) {\n          newRow.push(inputArray[valuesRow][valuesColumn]);\n          valuesColumn = valuesColumn === newValuesMaxColumn ? 0 : valuesColumn += 1;\n        }\n\n        newValues.push(newRow);\n        valuesRow = valuesRow === newValuesMaxRow ? 0 : valuesRow += 1;\n      }\n\n      this.hot.populateFromArray(startRow, startColumn, newValues, void 0, void 0, 'CopyPaste.paste', this.pasteMode);\n      return [startRow, startColumn, endRow, endColumn];\n    }\n    /**\n     * `copy` event callback on textarea element.\n     *\n     * @param {Event} event ClipboardEvent.\n     * @private\n     */\n\n  }, {\n    key: \"onCopy\",\n    value: function onCopy(event) {\n      var priv = privatePool.get(this);\n\n      if (!this.hot.isListening() && !priv.isTriggeredByCopy || this.isEditorOpened()) {\n        return;\n      }\n\n      this.setCopyableText();\n      priv.isTriggeredByCopy = false;\n      var rangedData = this.getRangedData(this.copyableRanges);\n      var allowCopying = !!this.hot.runHooks('beforeCopy', rangedData, this.copyableRanges);\n\n      if (allowCopying) {\n        var textPlain = SheetClip.stringify(rangedData);\n\n        if (event && event.clipboardData) {\n          var textHTML = _dataToHTML(rangedData, this.hot.rootDocument);\n\n          event.clipboardData.setData('text/plain', textPlain);\n          event.clipboardData.setData('text/html', [META_HEAD, textHTML].join(''));\n        } else if (typeof ClipboardEvent === 'undefined') {\n          this.hot.rootWindow.clipboardData.setData('Text', textPlain);\n        }\n\n        this.hot.runHooks('afterCopy', rangedData, this.copyableRanges);\n      }\n\n      event.preventDefault();\n    }\n    /**\n     * `cut` event callback on textarea element.\n     *\n     * @param {Event} event ClipboardEvent.\n     * @private\n     */\n\n  }, {\n    key: \"onCut\",\n    value: function onCut(event) {\n      var priv = privatePool.get(this);\n\n      if (!this.hot.isListening() && !priv.isTriggeredByCut || this.isEditorOpened()) {\n        return;\n      }\n\n      this.setCopyableText();\n      priv.isTriggeredByCut = false;\n      var rangedData = this.getRangedData(this.copyableRanges);\n      var allowCuttingOut = !!this.hot.runHooks('beforeCut', rangedData, this.copyableRanges);\n\n      if (allowCuttingOut) {\n        var textPlain = SheetClip.stringify(rangedData);\n\n        if (event && event.clipboardData) {\n          var textHTML = _dataToHTML(rangedData, this.hot.rootDocument);\n\n          event.clipboardData.setData('text/plain', textPlain);\n          event.clipboardData.setData('text/html', [META_HEAD, textHTML].join(''));\n        } else if (typeof ClipboardEvent === 'undefined') {\n          this.hot.rootWindow.clipboardData.setData('Text', textPlain);\n        }\n\n        this.hot.emptySelectedCells('CopyPaste.cut');\n        this.hot.runHooks('afterCut', rangedData, this.copyableRanges);\n      }\n\n      event.preventDefault();\n    }\n    /**\n     * `paste` event callback on textarea element.\n     *\n     * @param {Event} event ClipboardEvent or pseudo ClipboardEvent, if paste was called manually.\n     * @private\n     */\n\n  }, {\n    key: \"onPaste\",\n    value: function onPaste(event) {\n      if (!this.hot.isListening() || this.isEditorOpened()) {\n        return;\n      }\n\n      if (event && event.preventDefault) {\n        event.preventDefault();\n      }\n\n      var pastedData;\n\n      if (event && typeof event.clipboardData !== 'undefined') {\n        var textHTML = event.clipboardData.getData('text/html');\n\n        if (textHTML && /(<table)|(<TABLE)/g.test(textHTML)) {\n          var parsedConfig = htmlToGridSettings(textHTML, this.hot.rootDocument);\n          pastedData = parsedConfig.data;\n        } else {\n          pastedData = event.clipboardData.getData('text/plain');\n        }\n      } else if (typeof ClipboardEvent === 'undefined' && typeof this.hot.rootWindow.clipboardData !== 'undefined') {\n        pastedData = this.hot.rootWindow.clipboardData.getData('Text');\n      }\n\n      if (typeof pastedData === 'string') {\n        pastedData = SheetClip.parse(pastedData);\n      }\n\n      if (pastedData && pastedData.length === 0) {\n        return;\n      }\n\n      if (this.hot.runHooks('beforePaste', pastedData, this.copyableRanges) === false) {\n        return;\n      }\n\n      var _this$populateValues = this.populateValues(pastedData),\n          _this$populateValues2 = _slicedToArray(_this$populateValues, 4),\n          startRow = _this$populateValues2[0],\n          startColumn = _this$populateValues2[1],\n          endRow = _this$populateValues2[2],\n          endColumn = _this$populateValues2[3];\n\n      this.hot.selectCell(startRow, startColumn, Math.min(this.hot.countRows() - 1, endRow), Math.min(this.hot.countCols() - 1, endColumn));\n      this.hot.runHooks('afterPaste', pastedData, this.copyableRanges);\n    }\n    /**\n     * Add copy, cut and paste options to the Context Menu.\n     *\n     * @private\n     * @param {Object} options Contains default added options of the Context Menu.\n     */\n\n  }, {\n    key: \"onAfterContextMenuDefaultOptions\",\n    value: function onAfterContextMenuDefaultOptions(options) {\n      options.items.push({\n        name: '---------'\n      }, copyItem(this), cutItem(this));\n    }\n    /**\n     * Force focus on focusableElement.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onAfterOnCellMouseUp\",\n    value: function onAfterOnCellMouseUp() {\n      if (!this.hot.isListening() || this.isEditorOpened()) {\n        return;\n      }\n\n      this.getOrCreateFocusableElement();\n      this.focusableElement.focus();\n    }\n    /**\n     * Force focus on focusableElement after end of the selection.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onAfterSelectionEnd\",\n    value: function onAfterSelectionEnd() {\n      var _privatePool$get = privatePool.get(this),\n          isFragmentSelectionEnabled = _privatePool$get.isFragmentSelectionEnabled;\n\n      if (this.isEditorOpened()) {\n        return;\n      }\n\n      this.getOrCreateFocusableElement();\n\n      if (isFragmentSelectionEnabled && this.focusableElement.getFocusableElement() !== this.hot.rootDocument.activeElement && getSelectionText()) {\n        return;\n      }\n\n      this.setCopyableText();\n      this.focusableElement.focus();\n    }\n    /**\n     * `beforeKeyDown` listener to force focus of focusableElement.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onBeforeKeyDown\",\n    value: function onBeforeKeyDown() {\n      if (!this.hot.isListening() || this.isEditorOpened()) {\n        return;\n      }\n\n      var activeElement = this.hot.rootDocument.activeElement;\n      var activeEditor = this.hot.getActiveEditor();\n\n      if (!activeEditor || activeElement !== this.focusableElement.getFocusableElement() && activeElement !== activeEditor.select) {\n        return;\n      }\n\n      this.getOrCreateFocusableElement();\n      this.focusableElement.focus();\n    }\n    /**\n     * Destroys the plugin instance.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.focusableElement) {\n        destroyElement(this.focusableElement);\n        this.focusableElement = null;\n      }\n\n      _get(_getPrototypeOf(CopyPaste.prototype), \"destroy\", this).call(this);\n    }\n  }]);\n\n  return CopyPaste;\n}(BasePlugin);\n\nregisterPlugin('CopyPaste', CopyPaste);\nexport default CopyPaste;"]},"metadata":{},"sourceType":"module"}