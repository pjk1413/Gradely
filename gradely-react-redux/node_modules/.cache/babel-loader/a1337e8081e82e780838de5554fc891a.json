{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nimport { CellRange } from './../3rdparty/walkontable/src';\nimport { arrayEach, arrayReduce } from './../helpers/array';\nimport { isUndefined } from './../helpers/mixed';\nexport var SELECTION_TYPE_UNRECOGNIZED = 0;\nexport var SELECTION_TYPE_EMPTY = 1;\nexport var SELECTION_TYPE_ARRAY = 2;\nexport var SELECTION_TYPE_OBJECT = 3;\nexport var SELECTION_TYPES = [SELECTION_TYPE_OBJECT, SELECTION_TYPE_ARRAY];\nvar ARRAY_TYPE_PATTERN = [['number'], ['number', 'string'], ['number', 'undefined'], ['number', 'string', 'undefined']];\nvar rootCall = Symbol('root');\nvar childCall = Symbol('child');\n/**\n * Detect selection schema structure.\n *\n * @param {*} selectionRanges The selected range or and array of selected ranges. This type of data is produced by\n *                            `hot.getSelected()`, `hot.getSelectedLast()`, `hot.getSelectedRange()`\n *                            and `hot.getSelectedRangeLast()` methods.\n * @returns {Number} Returns a number that specifies the type of detected selection schema. If selection schema type\n *                   is unrecognized than it returns `0`.\n */\n\nexport function detectSelectionType(selectionRanges) {\n  var _callSymbol = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : rootCall;\n\n  if (_callSymbol !== rootCall && _callSymbol !== childCall) {\n    throw new Error('The second argument is used internally only and cannot be overwritten.');\n  }\n\n  var isArray = Array.isArray(selectionRanges);\n  var isRootCall = _callSymbol === rootCall;\n  var result = SELECTION_TYPE_UNRECOGNIZED;\n\n  if (isArray) {\n    var firstItem = selectionRanges[0];\n\n    if (selectionRanges.length === 0) {\n      result = SELECTION_TYPE_EMPTY;\n    } else if (isRootCall && firstItem instanceof CellRange) {\n      result = SELECTION_TYPE_OBJECT;\n    } else if (isRootCall && Array.isArray(firstItem)) {\n      result = detectSelectionType(firstItem, childCall);\n    } else if (selectionRanges.length >= 2 && selectionRanges.length <= 4) {\n      var isArrayType = !selectionRanges.some(function (value, index) {\n        return !ARRAY_TYPE_PATTERN[index].includes(_typeof(value));\n      });\n\n      if (isArrayType) {\n        result = SELECTION_TYPE_ARRAY;\n      }\n    }\n  }\n\n  return result;\n}\n/**\n * Factory function designed for normalization data schema from different data structures of the selection ranges.\n *\n * @param {String} type Selection type which will be processed.\n * @param {Object} [options]\n * @param {Boolean} [options.keepDirection=false] If `true`, the coordinates which contain the direction of the\n *                                                selected cells won't be changed. Otherwise, the selection will be\n *                                                normalized to values starting from top-left to bottom-right.\n * @param {Function} [options.propToCol] Pass the converting function (usually `datamap.propToCol`) if the column\n *                                       defined as props should be normalized to the numeric values.\n * @returns {Number[]} Returns normalized data about selected range as an array (`[rowStart, columnStart, rowEnd, columnEnd]`).\n */\n\nexport function normalizeSelectionFactory(type) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$keepDirection = _ref.keepDirection,\n      keepDirection = _ref$keepDirection === void 0 ? false : _ref$keepDirection,\n      propToCol = _ref.propToCol;\n\n  if (!SELECTION_TYPES.includes(type)) {\n    throw new Error('Unsupported selection ranges schema type was provided.');\n  }\n\n  return function (selection) {\n    var isObjectType = type === SELECTION_TYPE_OBJECT;\n    var rowStart = isObjectType ? selection.from.row : selection[0];\n    var columnStart = isObjectType ? selection.from.col : selection[1];\n    var rowEnd = isObjectType ? selection.to.row : selection[2];\n    var columnEnd = isObjectType ? selection.to.col : selection[3];\n\n    if (typeof propToCol === 'function') {\n      if (typeof columnStart === 'string') {\n        columnStart = propToCol(columnStart);\n      }\n\n      if (typeof columnEnd === 'string') {\n        columnEnd = propToCol(columnEnd);\n      }\n    }\n\n    if (isUndefined(rowEnd)) {\n      rowEnd = rowStart;\n    }\n\n    if (isUndefined(columnEnd)) {\n      columnEnd = columnStart;\n    }\n\n    if (!keepDirection) {\n      var origRowStart = rowStart;\n      var origColumnStart = columnStart;\n      var origRowEnd = rowEnd;\n      var origColumnEnd = columnEnd;\n      rowStart = Math.min(origRowStart, origRowEnd);\n      columnStart = Math.min(origColumnStart, origColumnEnd);\n      rowEnd = Math.max(origRowStart, origRowEnd);\n      columnEnd = Math.max(origColumnStart, origColumnEnd);\n    }\n\n    return [rowStart, columnStart, rowEnd, columnEnd];\n  };\n}\n/**\n * Function transform selection ranges (produced by `hot.getSelected()` and `hot.getSelectedRange()`) to normalized\n * data structure. It merges repeated ranges into consecutive coordinates. The returned structure\n * contains an array of arrays. The single item contains at index 0 visual column index from the selection was\n * started and at index 1 distance as a count of selected columns.\n *\n * @param {Array[]|CellRange[]} selectionRanges Selection ranges produced by Handsontable.\n * @return {Array[]} Returns an array of arrays with ranges defines in that schema:\n *                   `[[visualColumnStart, distance], [visualColumnStart, distance], ...]`.\n *                   The column distances are always created starting from the left (zero index) to the\n *                   right (the latest column index).\n */\n\nexport function transformSelectionToColumnDistance(selectionRanges) {\n  var selectionType = detectSelectionType(selectionRanges);\n\n  if (selectionType === SELECTION_TYPE_UNRECOGNIZED || selectionType === SELECTION_TYPE_EMPTY) {\n    return [];\n  }\n\n  var selectionSchemaNormalizer = normalizeSelectionFactory(selectionType);\n  var unorderedIndexes = new Set(); // Iterate through all ranges and collect all column indexes which are not saved yet.\n\n  arrayEach(selectionRanges, function (selection) {\n    var _selectionSchemaNorma = selectionSchemaNormalizer(selection),\n        _selectionSchemaNorma2 = _slicedToArray(_selectionSchemaNorma, 4),\n        columnStart = _selectionSchemaNorma2[1],\n        columnEnd = _selectionSchemaNorma2[3];\n\n    var amount = columnEnd - columnStart + 1;\n    arrayEach(Array.from(new Array(amount), function (_, i) {\n      return columnStart + i;\n    }), function (index) {\n      if (!unorderedIndexes.has(index)) {\n        unorderedIndexes.add(index);\n      }\n    });\n  }); // Sort indexes in ascending order to easily detecting non-consecutive columns.\n\n  var orderedIndexes = Array.from(unorderedIndexes).sort(function (a, b) {\n    return a - b;\n  });\n  var normalizedColumnRanges = arrayReduce(orderedIndexes, function (acc, visualColumnIndex, index, array) {\n    if (index !== 0 && visualColumnIndex === array[index - 1] + 1) {\n      acc[acc.length - 1][1] += 1;\n    } else {\n      acc.push([visualColumnIndex, 1]);\n    }\n\n    return acc;\n  }, []);\n  return normalizedColumnRanges;\n}\n/**\n * Function transform selection ranges (produced by `hot.getSelected()` and `hot.getSelectedRange()`) to normalized\n * data structure. It merges repeated ranges into consecutive coordinates. The returned structure\n * contains an array of arrays. The single item contains at index 0 visual column index from the selection was\n * started and at index 1 distance as a count of selected columns.\n *\n * @param {Array[]|CellRange[]} selectionRanges Selection ranges produced by Handsontable.\n * @return {Array[]} Returns an array of arrays with ranges defines in that schema:\n *                   `[[visualColumnStart, distance], [visualColumnStart, distance], ...]`.\n *                   The column distances are always created starting from the left (zero index) to the\n *                   right (the latest column index).\n */\n\nexport function transformSelectionToRowDistance(selectionRanges) {\n  var selectionType = detectSelectionType(selectionRanges);\n\n  if (selectionType === SELECTION_TYPE_UNRECOGNIZED || selectionType === SELECTION_TYPE_EMPTY) {\n    return [];\n  }\n\n  var selectionSchemaNormalizer = normalizeSelectionFactory(selectionType);\n  var unorderedIndexes = new Set(); // Iterate through all ranges and collect all column indexes which are not saved yet.\n\n  arrayEach(selectionRanges, function (selection) {\n    var _selectionSchemaNorma3 = selectionSchemaNormalizer(selection),\n        _selectionSchemaNorma4 = _slicedToArray(_selectionSchemaNorma3, 3),\n        rowStart = _selectionSchemaNorma4[0],\n        rowEnd = _selectionSchemaNorma4[2];\n\n    var amount = rowEnd - rowStart + 1;\n    arrayEach(Array.from(new Array(amount), function (_, i) {\n      return rowStart + i;\n    }), function (index) {\n      if (!unorderedIndexes.has(index)) {\n        unorderedIndexes.add(index);\n      }\n    });\n  }); // Sort indexes in ascending order to easily detecting non-consecutive columns.\n\n  var orderedIndexes = Array.from(unorderedIndexes).sort(function (a, b) {\n    return a - b;\n  });\n  var normalizedRowRanges = arrayReduce(orderedIndexes, function (acc, rowIndex, index, array) {\n    if (index !== 0 && rowIndex === array[index - 1] + 1) {\n      acc[acc.length - 1][1] += 1;\n    } else {\n      acc.push([rowIndex, 1]);\n    }\n\n    return acc;\n  }, []);\n  return normalizedRowRanges;\n}\n/**\n * Check if passed value can be treated as valid cell coordinate. The second argument is\n * used to check if the value doesn't exceed the defined max table rows/columns count.\n *\n * @param {*} coord\n * @param {Number} maxTableItemsCount The value that declares the maximum coordinate that is still validatable.\n * @return {Boolean}\n */\n\nexport function isValidCoord(coord) {\n  var maxTableItemsCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n  return typeof coord === 'number' && coord >= 0 && coord < maxTableItemsCount;\n}","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/node_modules/handsontable/es/selection/utils.js"],"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","TypeError","Symbol","iterator","Object","prototype","toString","call","_arr","_n","_d","_e","undefined","_i","_s","next","done","push","value","length","err","Array","isArray","_typeof","obj","constructor","CellRange","arrayEach","arrayReduce","isUndefined","SELECTION_TYPE_UNRECOGNIZED","SELECTION_TYPE_EMPTY","SELECTION_TYPE_ARRAY","SELECTION_TYPE_OBJECT","SELECTION_TYPES","ARRAY_TYPE_PATTERN","rootCall","childCall","detectSelectionType","selectionRanges","_callSymbol","arguments","Error","isRootCall","result","firstItem","isArrayType","some","index","includes","normalizeSelectionFactory","type","_ref","_ref$keepDirection","keepDirection","propToCol","selection","isObjectType","rowStart","from","row","columnStart","col","rowEnd","to","columnEnd","origRowStart","origColumnStart","origRowEnd","origColumnEnd","Math","min","max","transformSelectionToColumnDistance","selectionType","selectionSchemaNormalizer","unorderedIndexes","Set","_selectionSchemaNorma","_selectionSchemaNorma2","amount","_","has","add","orderedIndexes","sort","a","b","normalizedColumnRanges","acc","visualColumnIndex","array","transformSelectionToRowDistance","_selectionSchemaNorma3","_selectionSchemaNorma4","normalizedRowRanges","rowIndex","isValidCoord","coord","maxTableItemsCount","Infinity"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.symbol\";\nimport \"core-js/modules/es.symbol.description\";\nimport \"core-js/modules/es.symbol.iterator\";\nimport \"core-js/modules/es.array.from\";\nimport \"core-js/modules/es.array.includes\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.array.some\";\nimport \"core-js/modules/es.array.sort\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.regexp.to-string\";\nimport \"core-js/modules/es.set\";\nimport \"core-js/modules/es.string.includes\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/web.dom-collections.iterator\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { CellRange } from './../3rdparty/walkontable/src';\nimport { arrayEach, arrayReduce } from './../helpers/array';\nimport { isUndefined } from './../helpers/mixed';\nexport var SELECTION_TYPE_UNRECOGNIZED = 0;\nexport var SELECTION_TYPE_EMPTY = 1;\nexport var SELECTION_TYPE_ARRAY = 2;\nexport var SELECTION_TYPE_OBJECT = 3;\nexport var SELECTION_TYPES = [SELECTION_TYPE_OBJECT, SELECTION_TYPE_ARRAY];\nvar ARRAY_TYPE_PATTERN = [['number'], ['number', 'string'], ['number', 'undefined'], ['number', 'string', 'undefined']];\nvar rootCall = Symbol('root');\nvar childCall = Symbol('child');\n/**\n * Detect selection schema structure.\n *\n * @param {*} selectionRanges The selected range or and array of selected ranges. This type of data is produced by\n *                            `hot.getSelected()`, `hot.getSelectedLast()`, `hot.getSelectedRange()`\n *                            and `hot.getSelectedRangeLast()` methods.\n * @returns {Number} Returns a number that specifies the type of detected selection schema. If selection schema type\n *                   is unrecognized than it returns `0`.\n */\n\nexport function detectSelectionType(selectionRanges) {\n  var _callSymbol = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : rootCall;\n\n  if (_callSymbol !== rootCall && _callSymbol !== childCall) {\n    throw new Error('The second argument is used internally only and cannot be overwritten.');\n  }\n\n  var isArray = Array.isArray(selectionRanges);\n  var isRootCall = _callSymbol === rootCall;\n  var result = SELECTION_TYPE_UNRECOGNIZED;\n\n  if (isArray) {\n    var firstItem = selectionRanges[0];\n\n    if (selectionRanges.length === 0) {\n      result = SELECTION_TYPE_EMPTY;\n    } else if (isRootCall && firstItem instanceof CellRange) {\n      result = SELECTION_TYPE_OBJECT;\n    } else if (isRootCall && Array.isArray(firstItem)) {\n      result = detectSelectionType(firstItem, childCall);\n    } else if (selectionRanges.length >= 2 && selectionRanges.length <= 4) {\n      var isArrayType = !selectionRanges.some(function (value, index) {\n        return !ARRAY_TYPE_PATTERN[index].includes(_typeof(value));\n      });\n\n      if (isArrayType) {\n        result = SELECTION_TYPE_ARRAY;\n      }\n    }\n  }\n\n  return result;\n}\n/**\n * Factory function designed for normalization data schema from different data structures of the selection ranges.\n *\n * @param {String} type Selection type which will be processed.\n * @param {Object} [options]\n * @param {Boolean} [options.keepDirection=false] If `true`, the coordinates which contain the direction of the\n *                                                selected cells won't be changed. Otherwise, the selection will be\n *                                                normalized to values starting from top-left to bottom-right.\n * @param {Function} [options.propToCol] Pass the converting function (usually `datamap.propToCol`) if the column\n *                                       defined as props should be normalized to the numeric values.\n * @returns {Number[]} Returns normalized data about selected range as an array (`[rowStart, columnStart, rowEnd, columnEnd]`).\n */\n\nexport function normalizeSelectionFactory(type) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$keepDirection = _ref.keepDirection,\n      keepDirection = _ref$keepDirection === void 0 ? false : _ref$keepDirection,\n      propToCol = _ref.propToCol;\n\n  if (!SELECTION_TYPES.includes(type)) {\n    throw new Error('Unsupported selection ranges schema type was provided.');\n  }\n\n  return function (selection) {\n    var isObjectType = type === SELECTION_TYPE_OBJECT;\n    var rowStart = isObjectType ? selection.from.row : selection[0];\n    var columnStart = isObjectType ? selection.from.col : selection[1];\n    var rowEnd = isObjectType ? selection.to.row : selection[2];\n    var columnEnd = isObjectType ? selection.to.col : selection[3];\n\n    if (typeof propToCol === 'function') {\n      if (typeof columnStart === 'string') {\n        columnStart = propToCol(columnStart);\n      }\n\n      if (typeof columnEnd === 'string') {\n        columnEnd = propToCol(columnEnd);\n      }\n    }\n\n    if (isUndefined(rowEnd)) {\n      rowEnd = rowStart;\n    }\n\n    if (isUndefined(columnEnd)) {\n      columnEnd = columnStart;\n    }\n\n    if (!keepDirection) {\n      var origRowStart = rowStart;\n      var origColumnStart = columnStart;\n      var origRowEnd = rowEnd;\n      var origColumnEnd = columnEnd;\n      rowStart = Math.min(origRowStart, origRowEnd);\n      columnStart = Math.min(origColumnStart, origColumnEnd);\n      rowEnd = Math.max(origRowStart, origRowEnd);\n      columnEnd = Math.max(origColumnStart, origColumnEnd);\n    }\n\n    return [rowStart, columnStart, rowEnd, columnEnd];\n  };\n}\n/**\n * Function transform selection ranges (produced by `hot.getSelected()` and `hot.getSelectedRange()`) to normalized\n * data structure. It merges repeated ranges into consecutive coordinates. The returned structure\n * contains an array of arrays. The single item contains at index 0 visual column index from the selection was\n * started and at index 1 distance as a count of selected columns.\n *\n * @param {Array[]|CellRange[]} selectionRanges Selection ranges produced by Handsontable.\n * @return {Array[]} Returns an array of arrays with ranges defines in that schema:\n *                   `[[visualColumnStart, distance], [visualColumnStart, distance], ...]`.\n *                   The column distances are always created starting from the left (zero index) to the\n *                   right (the latest column index).\n */\n\nexport function transformSelectionToColumnDistance(selectionRanges) {\n  var selectionType = detectSelectionType(selectionRanges);\n\n  if (selectionType === SELECTION_TYPE_UNRECOGNIZED || selectionType === SELECTION_TYPE_EMPTY) {\n    return [];\n  }\n\n  var selectionSchemaNormalizer = normalizeSelectionFactory(selectionType);\n  var unorderedIndexes = new Set(); // Iterate through all ranges and collect all column indexes which are not saved yet.\n\n  arrayEach(selectionRanges, function (selection) {\n    var _selectionSchemaNorma = selectionSchemaNormalizer(selection),\n        _selectionSchemaNorma2 = _slicedToArray(_selectionSchemaNorma, 4),\n        columnStart = _selectionSchemaNorma2[1],\n        columnEnd = _selectionSchemaNorma2[3];\n\n    var amount = columnEnd - columnStart + 1;\n    arrayEach(Array.from(new Array(amount), function (_, i) {\n      return columnStart + i;\n    }), function (index) {\n      if (!unorderedIndexes.has(index)) {\n        unorderedIndexes.add(index);\n      }\n    });\n  }); // Sort indexes in ascending order to easily detecting non-consecutive columns.\n\n  var orderedIndexes = Array.from(unorderedIndexes).sort(function (a, b) {\n    return a - b;\n  });\n  var normalizedColumnRanges = arrayReduce(orderedIndexes, function (acc, visualColumnIndex, index, array) {\n    if (index !== 0 && visualColumnIndex === array[index - 1] + 1) {\n      acc[acc.length - 1][1] += 1;\n    } else {\n      acc.push([visualColumnIndex, 1]);\n    }\n\n    return acc;\n  }, []);\n  return normalizedColumnRanges;\n}\n/**\n * Function transform selection ranges (produced by `hot.getSelected()` and `hot.getSelectedRange()`) to normalized\n * data structure. It merges repeated ranges into consecutive coordinates. The returned structure\n * contains an array of arrays. The single item contains at index 0 visual column index from the selection was\n * started and at index 1 distance as a count of selected columns.\n *\n * @param {Array[]|CellRange[]} selectionRanges Selection ranges produced by Handsontable.\n * @return {Array[]} Returns an array of arrays with ranges defines in that schema:\n *                   `[[visualColumnStart, distance], [visualColumnStart, distance], ...]`.\n *                   The column distances are always created starting from the left (zero index) to the\n *                   right (the latest column index).\n */\n\nexport function transformSelectionToRowDistance(selectionRanges) {\n  var selectionType = detectSelectionType(selectionRanges);\n\n  if (selectionType === SELECTION_TYPE_UNRECOGNIZED || selectionType === SELECTION_TYPE_EMPTY) {\n    return [];\n  }\n\n  var selectionSchemaNormalizer = normalizeSelectionFactory(selectionType);\n  var unorderedIndexes = new Set(); // Iterate through all ranges and collect all column indexes which are not saved yet.\n\n  arrayEach(selectionRanges, function (selection) {\n    var _selectionSchemaNorma3 = selectionSchemaNormalizer(selection),\n        _selectionSchemaNorma4 = _slicedToArray(_selectionSchemaNorma3, 3),\n        rowStart = _selectionSchemaNorma4[0],\n        rowEnd = _selectionSchemaNorma4[2];\n\n    var amount = rowEnd - rowStart + 1;\n    arrayEach(Array.from(new Array(amount), function (_, i) {\n      return rowStart + i;\n    }), function (index) {\n      if (!unorderedIndexes.has(index)) {\n        unorderedIndexes.add(index);\n      }\n    });\n  }); // Sort indexes in ascending order to easily detecting non-consecutive columns.\n\n  var orderedIndexes = Array.from(unorderedIndexes).sort(function (a, b) {\n    return a - b;\n  });\n  var normalizedRowRanges = arrayReduce(orderedIndexes, function (acc, rowIndex, index, array) {\n    if (index !== 0 && rowIndex === array[index - 1] + 1) {\n      acc[acc.length - 1][1] += 1;\n    } else {\n      acc.push([rowIndex, 1]);\n    }\n\n    return acc;\n  }, []);\n  return normalizedRowRanges;\n}\n/**\n * Check if passed value can be treated as valid cell coordinate. The second argument is\n * used to check if the value doesn't exceed the defined max table rows/columns count.\n *\n * @param {*} coord\n * @param {Number} maxTableItemsCount The value that declares the maximum coordinate that is still validatable.\n * @return {Boolean}\n */\n\nexport function isValidCoord(coord) {\n  var maxTableItemsCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n  return typeof coord === 'number' && coord >= 0 && coord < maxTableItemsCount;\n}"]},"metadata":{},"sourceType":"module"}