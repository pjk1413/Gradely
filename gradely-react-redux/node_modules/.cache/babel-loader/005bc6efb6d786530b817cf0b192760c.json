{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pjk14\\\\Desktop\\\\Gradely\\\\gradely-react-redux\\\\src\\\\components\\\\utility-boxes\\\\gradeEntry\\\\Table.js\";\nimport React, { Component } from 'react';\nimport { HotTable } from '@handsontable/react';\nimport { connect } from 'react-redux';\nimport { gridHandleChange, updateTempAssignment } from './../../../action/tempActions';\nimport Handsontable from \"handsontable\";\nimport 'handsontable/dist/handsontable.full.css';\n\nclass Table extends Component {\n  constructor() {\n    super();\n    this.state = {\n      changedRow: '',\n      changedProp: '',\n      newValue: ''\n    };\n  }\n\n  handleChange(changes, hotTable) {\n    changes && changes.forEach(([row, prop, oldValue, newValue]) => {\n      if (oldValue !== newValue && hotTable) {\n        hotTable.setDataAtRowProp(row, prop, newValue); // console.log(\"ROW: \" + row)\n        // console.log(\"PROP: \" + prop)\n        // console.log(\"NEW VALUE: \" + newValue)\n        // console.log(hotTable.getRowHeader(row))\n\n        const id = hotTable.getRowHeader(row).split(\":\")[0]; //Set student assignment score, update course, and start a timer to save the data\n\n        const student = this.props.editCourse.students && this.props.editCourse.students.find(student => {\n          return student.id === parseInt(id);\n        });\n        const assignmentScore = student.assignmentScores.find(assignment => {\n          return assignment.assignmentTempId === prop;\n        });\n        assignmentScore.points = newValue;\n        assignmentScore.turnedIn = true;\n        console.log(assignmentScore); //this.props.updateTempAssignment(assignmentScore)\n      }\n    });\n  }\n\n  componentDidUpdate() {\n    const students = this.props.editCourse.students;\n    let colHeaders = [];\n    let columnSchema = [];\n    let rowHeaders = [];\n    let rowSchema = [];\n    let data = [];\n\n    if (this.props.editCourse && this.props.editCourse.students) {\n      rowHeaders = this.props.editCourse.students.map(student => {\n        //Creates an object that will be used to organize the data\n        let studentArray = [];\n        student.assignmentScores.forEach(score => {\n          studentArray.push([score.assignmentTempId, score.points]);\n        });\n        console.log(studentArray);\n        const temp = new Map(studentArray);\n        const studentObj = Object.fromEntries(temp);\n        data && data.push(studentObj); //Returns the heading\n\n        return student.id + \": \" + student.user.firstName + \" \" + student.user.lastName;\n      });\n    }\n\n    if (this.props.editCourse && this.props.editCourse.assignments) {\n      //Sort by assignment ID\n      // ** Creates the column headers as well as colSchema //\n      // ***************************** //\n      colHeaders = this.props.editCourse.assignments.map(assignment => {\n        const colObj = {\n          data: assignment.id\n        };\n        columnSchema.push(colObj);\n        return assignment.name + \" (\" + assignment.totalPoints + \")\";\n      }); // ** Creates the row headers //\n    }\n\n    const settings = {\n      licenseKey: 'non-commercial-and-evaluation',\n      data: data,\n      colHeaders: colHeaders,\n      rowHeaders: rowHeaders,\n      rowHeaderWidth: 150,\n      columns: columnSchema,\n      //rows: rowSchema,\n      //afterChange: (changes) => this.handleChange(changes, hotTable),\n      //row: rowStudentLabel,\n      // width: \"600\", \n      height: \"300\",\n      headerTooltips: {\n        rows: true,\n        columns: true,\n        onlyTrimmed: false\n      }\n    };\n    const hotTable = new Handsontable(document.getElementById(\"hot-app\"), settings);\n    hotTable.afterChange(changes => this.handleChange(changes));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"hot-app\",\n      className: \"my-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  editCourse: state.temp.editCourse,\n  data: state.temp.data\n});\n\nexport default connect(mapStateToProps, {\n  gridHandleChange,\n  updateTempAssignment\n})(Table);","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/src/components/utility-boxes/gradeEntry/Table.js"],"names":["React","Component","HotTable","connect","gridHandleChange","updateTempAssignment","Handsontable","Table","constructor","state","changedRow","changedProp","newValue","handleChange","changes","hotTable","forEach","row","prop","oldValue","setDataAtRowProp","id","getRowHeader","split","student","props","editCourse","students","find","parseInt","assignmentScore","assignmentScores","assignment","assignmentTempId","points","turnedIn","console","log","componentDidUpdate","colHeaders","columnSchema","rowHeaders","rowSchema","data","map","studentArray","score","push","temp","Map","studentObj","Object","fromEntries","user","firstName","lastName","assignments","colObj","name","totalPoints","settings","licenseKey","rowHeaderWidth","columns","height","headerTooltips","rows","onlyTrimmed","document","getElementById","afterChange","render","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { HotTable } from '@handsontable/react'\r\nimport { connect } from 'react-redux';\r\nimport { gridHandleChange, updateTempAssignment } from './../../../action/tempActions'\r\nimport Handsontable from \"handsontable\";\r\nimport 'handsontable/dist/handsontable.full.css';\r\n\r\nclass Table extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            changedRow: '',\r\n            changedProp: '',\r\n            newValue: ''\r\n        }\r\n    }\r\n\r\n    handleChange(changes, hotTable) {\r\n        changes && changes.forEach(([row, prop, oldValue, newValue]) => {\r\n            if (oldValue !== newValue && hotTable) {\r\n\r\n                hotTable.setDataAtRowProp(row, prop, newValue)\r\n                // console.log(\"ROW: \" + row)\r\n                // console.log(\"PROP: \" + prop)\r\n                // console.log(\"NEW VALUE: \" + newValue)\r\n                // console.log(hotTable.getRowHeader(row))\r\n                \r\n                const id = hotTable.getRowHeader(row).split(\":\")[0]\r\n                //Set student assignment score, update course, and start a timer to save the data\r\n                const student = this.props.editCourse.students && this.props.editCourse.students.find(student => {\r\n                    return student.id === parseInt(id)\r\n                })\r\n\r\n                const assignmentScore = student.assignmentScores.find(assignment => {\r\n                    return assignment.assignmentTempId === prop\r\n                })\r\n                assignmentScore.points = newValue\r\n                assignmentScore.turnedIn = true\r\n                console.log(assignmentScore)\r\n                \r\n                //this.props.updateTempAssignment(assignmentScore)\r\n            }\r\n        });\r\n    }\r\n    \r\n\r\n    componentDidUpdate() {\r\n        const students = this.props.editCourse.students\r\n\r\n        let colHeaders = []\r\n        let columnSchema = []\r\n        let rowHeaders = []\r\n        let rowSchema = []\r\n        let data = []\r\n\r\n        if (this.props.editCourse && this.props.editCourse.students) {\r\n            rowHeaders = this.props.editCourse.students.map(student => {\r\n\r\n                //Creates an object that will be used to organize the data\r\n                let studentArray = []\r\n                student.assignmentScores.forEach(score => {\r\n                    studentArray.push([score.assignmentTempId, score.points])\r\n                });\r\n                console.log(studentArray)\r\n                const temp = new Map(studentArray)\r\n                const studentObj = Object.fromEntries(temp)\r\n\r\n                data && data.push(studentObj)\r\n\r\n                //Returns the heading\r\n                return student.id +\": \" + student.user.firstName + \" \" + student.user.lastName\r\n            })\r\n\r\n\r\n\r\n        }\r\n\r\n        if (this.props.editCourse && this.props.editCourse.assignments) {\r\n\r\n            //Sort by assignment ID\r\n            // ** Creates the column headers as well as colSchema //\r\n            // ***************************** //\r\n            colHeaders = this.props.editCourse.assignments.map(assignment => {\r\n                const colObj = { data: assignment.id }\r\n                columnSchema.push(colObj)\r\n                return assignment.name + \" (\" + assignment.totalPoints + \")\"\r\n            })\r\n\r\n            // ** Creates the row headers //\r\n\r\n        }\r\n\r\n        const settings = {\r\n            licenseKey: 'non-commercial-and-evaluation',\r\n            data: data,\r\n            colHeaders: colHeaders,\r\n            rowHeaders: rowHeaders,\r\n            rowHeaderWidth: 150,\r\n            columns: columnSchema,\r\n            //rows: rowSchema,\r\n            //afterChange: (changes) => this.handleChange(changes, hotTable),\r\n            //row: rowStudentLabel,\r\n            // width: \"600\", \r\n            height: \"300\",\r\n            headerTooltips: {\r\n                rows: true,\r\n                columns: true,\r\n                onlyTrimmed: false\r\n            }\r\n        }\r\n\r\n        const hotTable = new Handsontable(document.getElementById(\"hot-app\"), settings)\r\n        hotTable.afterChange((changes) => this.handleChange(changes))\r\n        \r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n\r\n\r\n\r\n\r\n\r\n        return (\r\n            <div id=\"hot-app\" className=\"my-3\">\r\n                {/* <HotTable\r\n                    id=\"hot-table\"\r\n                    className=\"my-3\"\r\n                    settings={this.state.settings}\r\n                    afterChange={(changes, source) => { this.setChanges(changes, source) }}\r\n                    setDataAtRowProp={this.state.changes}\r\n                    licenseKey={'non-commercial-and-evaluation'}\r\n                    data={this.state.data}\r\n                    colHeaders={this.state.colHeaders}\r\n                    rowHeaders={this.state.rowHeaders}\r\n                    rowHeaderWidth={150}\r\n                    columns={this.state.columnSchema}\r\n                    // afterChange: (changes, source) => this.handleChange(changes, data, settings),\r\n                    //row: rowStudentLabel,\r\n                    // width: \"600\", \r\n                    height={\"300\"}\r\n                    headerTooltips={{ rows: true, columns: true, onlyTrimmed: false }}\r\n                /> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    editCourse: state.temp.editCourse,\r\n    data: state.temp.data,\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, { gridHandleChange, updateTempAssignment })(Table)"]},"metadata":{},"sourceType":"module"}