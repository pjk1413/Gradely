{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pjk14\\\\Desktop\\\\Gradely\\\\gradely-react-redux\\\\src\\\\components\\\\utility-boxes\\\\gradeEntry\\\\Table.js\";\nimport React, { Component } from 'react';\nimport { HotTable } from '@handsontable/react';\nimport { connect } from 'react-redux';\nimport { gridHandleChange } from './../../../action/tempActions';\nimport Handsontable from \"handsontable\";\nimport 'handsontable/dist/handsontable.full.css';\n\nclass Table extends Component {\n  constructor() {\n    super();\n    this.data = [];\n  }\n\n  changeCells() {\n    console.log(\"CHANGE CELLS\");\n  }\n\n  handleChange(changes, data) {\n    changes && changes.forEach(([row, prop, oldValue, newValue]) => {\n      console.log([row, prop, oldValue, newValue]); //hotTable.setDataAtRowProp(row, prop, newValue)\n    });\n    this.props.gridHandleChange(data);\n  }\n\n  componentDidUpdate() {}\n\n  colHeaders(index) {\n    return index + ': ID';\n  }\n\n  render() {\n    let colHeaders = [];\n    let columnSchema = [];\n    let rowHeaders = [];\n    let data = this.props.data ? this.props.data : [];\n\n    if (this.props.editCourse && this.props.editCourse.students) {\n      rowHeaders = this.props.editCourse.students.map(student => {\n        //Creates an object that will be used to organize the data\n        let studentArray = [];\n        student.assignmentScores.forEach(score => {\n          studentArray.push([score.assignmentTempId, score.points]);\n        });\n        console.log(studentArray);\n        const temp = new Map(studentArray);\n        const studentObj = Object.fromEntries(temp);\n        data && data.push(studentObj); //Returns the heading\n\n        return student.user.firstName + \" \" + student.user.lastName;\n      });\n    }\n\n    if (this.props.editCourse && this.props.editCourse.assignments) {\n      //Sort by assignment ID\n      // ** Creates the column headers as well as colSchema //\n      // ***************************** //\n      colHeaders = this.props.editCourse.assignments.map(assignment => {\n        const colObj = {\n          data: assignment.id\n        };\n        columnSchema.push(colObj);\n        return assignment.name + \" (\" + assignment.totalPoints + \")\";\n      }); // ** Creates the row headers //\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"hot-app\",\n      className: \"table table-hover table-sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  editCourse: state.temp.editCourse,\n  data: state.temp.data\n});\n\nconst container = document.getElementById(\"hot-app\");\nconst hot = new Handsontable(container, settings);\nexport default connect(mapStateToProps, {\n  gridHandleChange\n})(Table);","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/src/components/utility-boxes/gradeEntry/Table.js"],"names":["React","Component","HotTable","connect","gridHandleChange","Handsontable","Table","constructor","data","changeCells","console","log","handleChange","changes","forEach","row","prop","oldValue","newValue","props","componentDidUpdate","colHeaders","index","render","columnSchema","rowHeaders","editCourse","students","map","student","studentArray","assignmentScores","score","push","assignmentTempId","points","temp","Map","studentObj","Object","fromEntries","user","firstName","lastName","assignments","assignment","colObj","id","name","totalPoints","mapStateToProps","state","container","document","getElementById","hot","settings"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { HotTable } from '@handsontable/react'\r\nimport { connect } from 'react-redux';\r\nimport { gridHandleChange } from './../../../action/tempActions'\r\nimport Handsontable from \"handsontable\";\r\nimport 'handsontable/dist/handsontable.full.css';\r\n\r\nclass Table extends Component {\r\n    constructor() {\r\n        super()\r\n        this.data = [\r\n        ]\r\n    }\r\n\r\n    changeCells() {\r\n        console.log(\"CHANGE CELLS\")\r\n    }\r\n\r\n    handleChange(changes, data) {\r\n\r\n        changes && changes.forEach(([row, prop, oldValue, newValue]) => {\r\n            console.log([row, prop, oldValue, newValue])\r\n            //hotTable.setDataAtRowProp(row, prop, newValue)\r\n        }); \r\n\r\n        this.props.gridHandleChange(data)\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n    }\r\n\r\n    colHeaders(index) {\r\n        return index + ': ID'\r\n    }\r\n\r\n    render() {\r\n        \r\n        let colHeaders = []\r\n        let columnSchema = []\r\n        let rowHeaders = []\r\n        let data = this.props.data ? this.props.data : []\r\n\r\n        if (this.props.editCourse && this.props.editCourse.students) {\r\n            rowHeaders = this.props.editCourse.students.map(student => {\r\n                \r\n                //Creates an object that will be used to organize the data\r\n                let studentArray = []\r\n                student.assignmentScores.forEach(score => {\r\n                    studentArray.push([score.assignmentTempId, score.points])\r\n                });\r\n                console.log(studentArray)\r\n                const temp = new Map(studentArray)\r\n                const studentObj = Object.fromEntries(temp)\r\n\r\n                data && data.push(studentObj)\r\n\r\n                //Returns the heading\r\n                return student.user.firstName + \" \" + student.user.lastName\r\n            })\r\n\r\n\r\n\r\n        }\r\n\r\n        if (this.props.editCourse && this.props.editCourse.assignments) {\r\n\r\n            //Sort by assignment ID\r\n            // ** Creates the column headers as well as colSchema //\r\n            // ***************************** //\r\n            colHeaders = this.props.editCourse.assignments.map(assignment => {\r\n                const colObj = {data: assignment.id}\r\n                columnSchema.push(colObj)\r\n                return assignment.name + \" (\" + assignment.totalPoints + \")\"\r\n            })\r\n\r\n            // ** Creates the row headers //\r\n\r\n        }\r\n\r\n        \r\n\r\n        \r\n\r\n\r\n        return (\r\n            <div id=\"hot-app\" className=\"table table-hover table-sm\">\r\n                {/* <HotTable id=\"hot-table\" className=\"my-3\" settings={settings} /> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    editCourse: state.temp.editCourse,\r\n    data: state.temp.data,\r\n})\r\n\r\nconst container = document.getElementById(\"hot-app\")\r\nconst hot = new Handsontable(container, settings)\r\n\r\nexport default connect(mapStateToProps, { gridHandleChange })(Table)"]},"metadata":{},"sourceType":"module"}