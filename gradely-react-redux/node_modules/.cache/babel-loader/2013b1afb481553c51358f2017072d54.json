{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.rowLabelToIndex = rowLabelToIndex;\nexports.rowIndexToLabel = rowIndexToLabel;\nexports.columnLabelToIndex = columnLabelToIndex;\nexports.columnIndexToLabel = columnIndexToLabel;\nexports.extractLabel = extractLabel;\nexports.toLabel = toLabel;\n/**\n * Convert row label to index.\n *\n * @param {String} label Row label (eq. '1', '5')\n * @returns {Number} Returns -1 if label is not recognized otherwise proper row index.\n */\n\nfunction rowLabelToIndex(label) {\n  var result = parseInt(label, 10);\n\n  if (isNaN(result)) {\n    result = -1;\n  } else {\n    result = Math.max(result - 1, -1);\n  }\n\n  return result;\n}\n/**\n * Convert row index to label.\n *\n * @param {Number} row Row index.\n * @returns {String} Returns row label (eq. '1', '7').\n */\n\n\nfunction rowIndexToLabel(row) {\n  var result = '';\n\n  if (row >= 0) {\n    result = '' + (row + 1);\n  }\n\n  return result;\n}\n\nvar COLUMN_LABEL_BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nvar COLUMN_LABEL_BASE_LENGTH = COLUMN_LABEL_BASE.length;\n/**\n * Convert column label to index.\n *\n * @param {String} label Column label (eq. 'ABB', 'CNQ')\n * @returns {Number} Returns -1 if label is not recognized otherwise proper column index.\n */\n\nfunction columnLabelToIndex(label) {\n  var result = 0;\n\n  if (typeof label === 'string') {\n    label = label.toUpperCase();\n\n    for (var i = 0, j = label.length - 1; i < label.length; i += 1, j -= 1) {\n      result += Math.pow(COLUMN_LABEL_BASE_LENGTH, j) * (COLUMN_LABEL_BASE.indexOf(label[i]) + 1);\n    }\n  }\n\n  --result;\n  return result;\n}\n/**\n * Convert column index to label.\n *\n * @param {Number} column Column index.\n * @returns {String} Returns column label (eq. 'ABB', 'CNQ').\n */\n\n\nfunction columnIndexToLabel(column) {\n  var result = '';\n\n  while (column >= 0) {\n    result = String.fromCharCode(column % COLUMN_LABEL_BASE_LENGTH + 97) + result;\n    column = Math.floor(column / COLUMN_LABEL_BASE_LENGTH) - 1;\n  }\n\n  return result.toUpperCase();\n}\n\nvar LABEL_EXTRACT_REGEXP = /^([$])?([A-Za-z]+)([$])?([0-9]+)$/;\n/**\n * Extract cell coordinates.\n *\n * @param {String} label Cell coordinates (eq. 'A1', '$B6', '$N$98').\n * @returns {Array} Returns an array of objects.\n */\n\nfunction extractLabel(label) {\n  if (typeof label !== 'string' || !LABEL_EXTRACT_REGEXP.test(label)) {\n    return [];\n  }\n\n  var _label$toUpperCase$ma = label.toUpperCase().match(LABEL_EXTRACT_REGEXP),\n      columnAbs = _label$toUpperCase$ma[1],\n      column = _label$toUpperCase$ma[2],\n      rowAbs = _label$toUpperCase$ma[3],\n      row = _label$toUpperCase$ma[4];\n\n  return [{\n    index: rowLabelToIndex(row),\n    label: row,\n    isAbsolute: rowAbs === '$'\n  }, {\n    index: columnLabelToIndex(column),\n    label: column,\n    isAbsolute: columnAbs === '$'\n  }];\n}\n/**\n * Convert row and column indexes into cell label.\n *\n * @param {Object} row Object with `index` and `isAbsolute` properties.\n * @param {Object} column Object with `index` and `isAbsolute` properties.\n * @returns {String} Returns cell label.\n */\n\n\nfunction toLabel(row, column) {\n  var rowLabel = (row.isAbsolute ? '$' : '') + rowIndexToLabel(row.index);\n  var columnLabel = (column.isAbsolute ? '$' : '') + columnIndexToLabel(column.index);\n  return columnLabel + rowLabel;\n}","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/node_modules/hot-formula-parser/lib/helper/cell.js"],"names":["exports","__esModule","rowLabelToIndex","rowIndexToLabel","columnLabelToIndex","columnIndexToLabel","extractLabel","toLabel","label","result","parseInt","isNaN","Math","max","row","COLUMN_LABEL_BASE","COLUMN_LABEL_BASE_LENGTH","length","toUpperCase","i","j","pow","indexOf","column","String","fromCharCode","floor","LABEL_EXTRACT_REGEXP","test","_label$toUpperCase$ma","match","columnAbs","rowAbs","index","isAbsolute","rowLabel","columnLabel"],"mappings":"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","sourcesContent":["'use strict';\n\nexports.__esModule = true;\nexports.rowLabelToIndex = rowLabelToIndex;\nexports.rowIndexToLabel = rowIndexToLabel;\nexports.columnLabelToIndex = columnLabelToIndex;\nexports.columnIndexToLabel = columnIndexToLabel;\nexports.extractLabel = extractLabel;\nexports.toLabel = toLabel;\n/**\n * Convert row label to index.\n *\n * @param {String} label Row label (eq. '1', '5')\n * @returns {Number} Returns -1 if label is not recognized otherwise proper row index.\n */\nfunction rowLabelToIndex(label) {\n  var result = parseInt(label, 10);\n\n  if (isNaN(result)) {\n    result = -1;\n  } else {\n    result = Math.max(result - 1, -1);\n  }\n\n  return result;\n}\n\n/**\n * Convert row index to label.\n *\n * @param {Number} row Row index.\n * @returns {String} Returns row label (eq. '1', '7').\n */\nfunction rowIndexToLabel(row) {\n  var result = '';\n\n  if (row >= 0) {\n    result = '' + (row + 1);\n  }\n\n  return result;\n}\n\nvar COLUMN_LABEL_BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nvar COLUMN_LABEL_BASE_LENGTH = COLUMN_LABEL_BASE.length;\n\n/**\n * Convert column label to index.\n *\n * @param {String} label Column label (eq. 'ABB', 'CNQ')\n * @returns {Number} Returns -1 if label is not recognized otherwise proper column index.\n */\nfunction columnLabelToIndex(label) {\n  var result = 0;\n\n  if (typeof label === 'string') {\n    label = label.toUpperCase();\n\n    for (var i = 0, j = label.length - 1; i < label.length; i += 1, j -= 1) {\n      result += Math.pow(COLUMN_LABEL_BASE_LENGTH, j) * (COLUMN_LABEL_BASE.indexOf(label[i]) + 1);\n    }\n  }\n  --result;\n\n  return result;\n}\n\n/**\n * Convert column index to label.\n *\n * @param {Number} column Column index.\n * @returns {String} Returns column label (eq. 'ABB', 'CNQ').\n */\nfunction columnIndexToLabel(column) {\n  var result = '';\n\n  while (column >= 0) {\n    result = String.fromCharCode(column % COLUMN_LABEL_BASE_LENGTH + 97) + result;\n    column = Math.floor(column / COLUMN_LABEL_BASE_LENGTH) - 1;\n  }\n\n  return result.toUpperCase();\n}\n\nvar LABEL_EXTRACT_REGEXP = /^([$])?([A-Za-z]+)([$])?([0-9]+)$/;\n\n/**\n * Extract cell coordinates.\n *\n * @param {String} label Cell coordinates (eq. 'A1', '$B6', '$N$98').\n * @returns {Array} Returns an array of objects.\n */\nfunction extractLabel(label) {\n  if (typeof label !== 'string' || !LABEL_EXTRACT_REGEXP.test(label)) {\n    return [];\n  }\n\n  var _label$toUpperCase$ma = label.toUpperCase().match(LABEL_EXTRACT_REGEXP),\n      columnAbs = _label$toUpperCase$ma[1],\n      column = _label$toUpperCase$ma[2],\n      rowAbs = _label$toUpperCase$ma[3],\n      row = _label$toUpperCase$ma[4];\n\n  return [{\n    index: rowLabelToIndex(row),\n    label: row,\n    isAbsolute: rowAbs === '$'\n  }, {\n    index: columnLabelToIndex(column),\n    label: column,\n    isAbsolute: columnAbs === '$'\n  }];\n}\n\n/**\n * Convert row and column indexes into cell label.\n *\n * @param {Object} row Object with `index` and `isAbsolute` properties.\n * @param {Object} column Object with `index` and `isAbsolute` properties.\n * @returns {String} Returns cell label.\n */\nfunction toLabel(row, column) {\n  var rowLabel = (row.isAbsolute ? '$' : '') + rowIndexToLabel(row.index);\n  var columnLabel = (column.isAbsolute ? '$' : '') + columnIndexToLabel(column.index);\n\n  return columnLabel + rowLabel;\n}"]},"metadata":{},"sourceType":"script"}