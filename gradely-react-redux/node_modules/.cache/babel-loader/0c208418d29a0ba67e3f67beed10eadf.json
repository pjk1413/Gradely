{"ast":null,"code":"import \"core-js/modules/es.string.replace\";\nimport numbro from 'numbro';\nimport { getRenderer } from './index';\nimport { isNumeric } from './../helpers/number';\n/**\n * Numeric cell renderer\n *\n * @private\n * @renderer NumericRenderer\n * @param {Object} instance Handsontable instance\n * @param {Element} TD Table cell where to render\n * @param {Number} row\n * @param {Number} col\n * @param {String|Number} prop Row object property name\n * @param value Value to render (remember to escape unsafe HTML before inserting to DOM!)\n * @param {Object} cellProperties Cell properties (shared by cell renderer and editor)\n */\n\nfunction numericRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  var newValue = value;\n\n  if (isNumeric(newValue)) {\n    var numericFormat = cellProperties.numericFormat;\n    var cellCulture = numericFormat && numericFormat.culture || '-';\n    var cellFormatPattern = numericFormat && numericFormat.pattern;\n    var className = cellProperties.className || '';\n    var classArr = className.length ? className.split(' ') : [];\n\n    if (typeof cellCulture !== 'undefined' && !numbro.languages()[cellCulture]) {\n      var shortTag = cellCulture.replace('-', '');\n      var langData = numbro.allLanguages ? numbro.allLanguages[cellCulture] : numbro[shortTag];\n\n      if (langData) {\n        numbro.registerLanguage(langData);\n      }\n    }\n\n    numbro.setLanguage(cellCulture);\n    newValue = numbro(newValue).format(cellFormatPattern || '0');\n\n    if (classArr.indexOf('htLeft') < 0 && classArr.indexOf('htCenter') < 0 && classArr.indexOf('htRight') < 0 && classArr.indexOf('htJustify') < 0) {\n      classArr.push('htRight');\n    }\n\n    if (classArr.indexOf('htNumeric') < 0) {\n      classArr.push('htNumeric');\n    }\n\n    cellProperties.className = classArr.join(' ');\n  }\n\n  getRenderer('text')(instance, TD, row, col, prop, newValue, cellProperties);\n}\n\nexport default numericRenderer;","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/node_modules/handsontable/es/renderers/numericRenderer.js"],"names":["numbro","getRenderer","isNumeric","numericRenderer","instance","TD","row","col","prop","value","cellProperties","newValue","numericFormat","cellCulture","culture","cellFormatPattern","pattern","className","classArr","length","split","languages","shortTag","replace","langData","allLanguages","registerLanguage","setLanguage","format","indexOf","push","join"],"mappings":"AAGA,OAAO,mCAAP;AAEA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA;;;;;;;;;;;;;;AAcA,SAASC,eAAT,CAAyBC,QAAzB,EAAmCC,EAAnC,EAAuCC,GAAvC,EAA4CC,GAA5C,EAAiDC,IAAjD,EAAuDC,KAAvD,EAA8DC,cAA9D,EAA8E;AAC5E,MAAIC,QAAQ,GAAGF,KAAf;;AAEA,MAAIP,SAAS,CAACS,QAAD,CAAb,EAAyB;AACvB,QAAIC,aAAa,GAAGF,cAAc,CAACE,aAAnC;AACA,QAAIC,WAAW,GAAGD,aAAa,IAAIA,aAAa,CAACE,OAA/B,IAA0C,GAA5D;AACA,QAAIC,iBAAiB,GAAGH,aAAa,IAAIA,aAAa,CAACI,OAAvD;AACA,QAAIC,SAAS,GAAGP,cAAc,CAACO,SAAf,IAA4B,EAA5C;AACA,QAAIC,QAAQ,GAAGD,SAAS,CAACE,MAAV,GAAmBF,SAAS,CAACG,KAAV,CAAgB,GAAhB,CAAnB,GAA0C,EAAzD;;AAEA,QAAI,OAAOP,WAAP,KAAuB,WAAvB,IAAsC,CAACb,MAAM,CAACqB,SAAP,GAAmBR,WAAnB,CAA3C,EAA4E;AAC1E,UAAIS,QAAQ,GAAGT,WAAW,CAACU,OAAZ,CAAoB,GAApB,EAAyB,EAAzB,CAAf;AACA,UAAIC,QAAQ,GAAGxB,MAAM,CAACyB,YAAP,GAAsBzB,MAAM,CAACyB,YAAP,CAAoBZ,WAApB,CAAtB,GAAyDb,MAAM,CAACsB,QAAD,CAA9E;;AAEA,UAAIE,QAAJ,EAAc;AACZxB,QAAAA,MAAM,CAAC0B,gBAAP,CAAwBF,QAAxB;AACD;AACF;;AAEDxB,IAAAA,MAAM,CAAC2B,WAAP,CAAmBd,WAAnB;AACAF,IAAAA,QAAQ,GAAGX,MAAM,CAACW,QAAD,CAAN,CAAiBiB,MAAjB,CAAwBb,iBAAiB,IAAI,GAA7C,CAAX;;AAEA,QAAIG,QAAQ,CAACW,OAAT,CAAiB,QAAjB,IAA6B,CAA7B,IAAkCX,QAAQ,CAACW,OAAT,CAAiB,UAAjB,IAA+B,CAAjE,IAAsEX,QAAQ,CAACW,OAAT,CAAiB,SAAjB,IAA8B,CAApG,IAAyGX,QAAQ,CAACW,OAAT,CAAiB,WAAjB,IAAgC,CAA7I,EAAgJ;AAC9IX,MAAAA,QAAQ,CAACY,IAAT,CAAc,SAAd;AACD;;AAED,QAAIZ,QAAQ,CAACW,OAAT,CAAiB,WAAjB,IAAgC,CAApC,EAAuC;AACrCX,MAAAA,QAAQ,CAACY,IAAT,CAAc,WAAd;AACD;;AAEDpB,IAAAA,cAAc,CAACO,SAAf,GAA2BC,QAAQ,CAACa,IAAT,CAAc,GAAd,CAA3B;AACD;;AAED9B,EAAAA,WAAW,CAAC,MAAD,CAAX,CAAoBG,QAApB,EAA8BC,EAA9B,EAAkCC,GAAlC,EAAuCC,GAAvC,EAA4CC,IAA5C,EAAkDG,QAAlD,EAA4DD,cAA5D;AACD;;AAED,eAAeP,eAAf","sourcesContent":["import \"core-js/modules/es.array.index-of\";\nimport \"core-js/modules/es.array.join\";\nimport \"core-js/modules/es.regexp.exec\";\nimport \"core-js/modules/es.string.replace\";\nimport \"core-js/modules/es.string.split\";\nimport numbro from 'numbro';\nimport { getRenderer } from './index';\nimport { isNumeric } from './../helpers/number';\n/**\n * Numeric cell renderer\n *\n * @private\n * @renderer NumericRenderer\n * @param {Object} instance Handsontable instance\n * @param {Element} TD Table cell where to render\n * @param {Number} row\n * @param {Number} col\n * @param {String|Number} prop Row object property name\n * @param value Value to render (remember to escape unsafe HTML before inserting to DOM!)\n * @param {Object} cellProperties Cell properties (shared by cell renderer and editor)\n */\n\nfunction numericRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  var newValue = value;\n\n  if (isNumeric(newValue)) {\n    var numericFormat = cellProperties.numericFormat;\n    var cellCulture = numericFormat && numericFormat.culture || '-';\n    var cellFormatPattern = numericFormat && numericFormat.pattern;\n    var className = cellProperties.className || '';\n    var classArr = className.length ? className.split(' ') : [];\n\n    if (typeof cellCulture !== 'undefined' && !numbro.languages()[cellCulture]) {\n      var shortTag = cellCulture.replace('-', '');\n      var langData = numbro.allLanguages ? numbro.allLanguages[cellCulture] : numbro[shortTag];\n\n      if (langData) {\n        numbro.registerLanguage(langData);\n      }\n    }\n\n    numbro.setLanguage(cellCulture);\n    newValue = numbro(newValue).format(cellFormatPattern || '0');\n\n    if (classArr.indexOf('htLeft') < 0 && classArr.indexOf('htCenter') < 0 && classArr.indexOf('htRight') < 0 && classArr.indexOf('htJustify') < 0) {\n      classArr.push('htRight');\n    }\n\n    if (classArr.indexOf('htNumeric') < 0) {\n      classArr.push('htNumeric');\n    }\n\n    cellProperties.className = classArr.join(' ');\n  }\n\n  getRenderer('text')(instance, TD, row, col, prop, newValue, cellProperties);\n}\n\nexport default numericRenderer;"]},"metadata":{},"sourceType":"module"}