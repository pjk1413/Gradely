{"ast":null,"code":"import moment from 'moment'; // Formats which are correctly parsed to time (supported by momentjs)\n\nvar STRICT_FORMATS = ['YYYY-MM-DDTHH:mm:ss.SSSZ', 'X', // Unix timestamp\n'x' // Unix ms timestamp\n];\n/**\n * Time cell validator\n *\n * @private\n * @validator TimeValidator\n * @param {*} value - Value of edited cell\n * @param {Function} callback - Callback called with validation result\n */\n\nexport default function timeValidator(value, callback) {\n  var timeFormat = this.timeFormat || 'h:mm:ss a';\n  var valid = true;\n  var valueToValidate = value;\n\n  if (valueToValidate === null) {\n    valueToValidate = '';\n  }\n\n  valueToValidate = /^\\d{3,}$/.test(valueToValidate) ? parseInt(valueToValidate, 10) : valueToValidate;\n  var twoDigitValue = /^\\d{1,2}$/.test(valueToValidate);\n\n  if (twoDigitValue) {\n    valueToValidate += ':00';\n  }\n\n  var date = moment(valueToValidate, STRICT_FORMATS, true).isValid() ? moment(valueToValidate) : moment(valueToValidate, timeFormat);\n  var isValidTime = date.isValid(); // is it in the specified format\n\n  var isValidFormat = moment(valueToValidate, timeFormat, true).isValid() && !twoDigitValue;\n\n  if (this.allowEmpty && valueToValidate === '') {\n    isValidTime = true;\n    isValidFormat = true;\n  }\n\n  if (!isValidTime) {\n    valid = false;\n  }\n\n  if (!isValidTime && isValidFormat) {\n    valid = true;\n  }\n\n  if (isValidTime && !isValidFormat) {\n    if (this.correctFormat === true) {\n      // if format correction is enabled\n      var correctedValue = date.format(timeFormat);\n      var row = this.instance.runHooks('unmodifyRow', this.row);\n      var column = this.instance.runHooks('unmodifyCol', this.col);\n      this.instance.setDataAtCell(row, column, correctedValue, 'timeValidator');\n      valid = true;\n    } else {\n      valid = false;\n    }\n  }\n\n  callback(valid);\n}","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/node_modules/handsontable/es/validators/timeValidator.js"],"names":["moment","STRICT_FORMATS","timeValidator","value","callback","timeFormat","valid","valueToValidate","test","parseInt","twoDigitValue","date","isValid","isValidTime","isValidFormat","allowEmpty","correctFormat","correctedValue","format","row","instance","runHooks","column","col","setDataAtCell"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB,C,CAA6B;;AAE7B,IAAIC,cAAc,GAAG,CAAC,0BAAD,EAA6B,GAA7B,EAAkC;AACvD,GADqB,CACjB;AADiB,CAArB;AAGA;;;;;;;;;AASA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,QAA9B,EAAwC;AACrD,MAAIC,UAAU,GAAG,KAAKA,UAAL,IAAmB,WAApC;AACA,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,eAAe,GAAGJ,KAAtB;;AAEA,MAAII,eAAe,KAAK,IAAxB,EAA8B;AAC5BA,IAAAA,eAAe,GAAG,EAAlB;AACD;;AAEDA,EAAAA,eAAe,GAAG,WAAWC,IAAX,CAAgBD,eAAhB,IAAmCE,QAAQ,CAACF,eAAD,EAAkB,EAAlB,CAA3C,GAAmEA,eAArF;AACA,MAAIG,aAAa,GAAG,YAAYF,IAAZ,CAAiBD,eAAjB,CAApB;;AAEA,MAAIG,aAAJ,EAAmB;AACjBH,IAAAA,eAAe,IAAI,KAAnB;AACD;;AAED,MAAII,IAAI,GAAGX,MAAM,CAACO,eAAD,EAAkBN,cAAlB,EAAkC,IAAlC,CAAN,CAA8CW,OAA9C,KAA0DZ,MAAM,CAACO,eAAD,CAAhE,GAAoFP,MAAM,CAACO,eAAD,EAAkBF,UAAlB,CAArG;AACA,MAAIQ,WAAW,GAAGF,IAAI,CAACC,OAAL,EAAlB,CAjBqD,CAiBnB;;AAElC,MAAIE,aAAa,GAAGd,MAAM,CAACO,eAAD,EAAkBF,UAAlB,EAA8B,IAA9B,CAAN,CAA0CO,OAA1C,MAAuD,CAACF,aAA5E;;AAEA,MAAI,KAAKK,UAAL,IAAmBR,eAAe,KAAK,EAA3C,EAA+C;AAC7CM,IAAAA,WAAW,GAAG,IAAd;AACAC,IAAAA,aAAa,GAAG,IAAhB;AACD;;AAED,MAAI,CAACD,WAAL,EAAkB;AAChBP,IAAAA,KAAK,GAAG,KAAR;AACD;;AAED,MAAI,CAACO,WAAD,IAAgBC,aAApB,EAAmC;AACjCR,IAAAA,KAAK,GAAG,IAAR;AACD;;AAED,MAAIO,WAAW,IAAI,CAACC,aAApB,EAAmC;AACjC,QAAI,KAAKE,aAAL,KAAuB,IAA3B,EAAiC;AAC/B;AACA,UAAIC,cAAc,GAAGN,IAAI,CAACO,MAAL,CAAYb,UAAZ,CAArB;AACA,UAAIc,GAAG,GAAG,KAAKC,QAAL,CAAcC,QAAd,CAAuB,aAAvB,EAAsC,KAAKF,GAA3C,CAAV;AACA,UAAIG,MAAM,GAAG,KAAKF,QAAL,CAAcC,QAAd,CAAuB,aAAvB,EAAsC,KAAKE,GAA3C,CAAb;AACA,WAAKH,QAAL,CAAcI,aAAd,CAA4BL,GAA5B,EAAiCG,MAAjC,EAAyCL,cAAzC,EAAyD,eAAzD;AACAX,MAAAA,KAAK,GAAG,IAAR;AACD,KAPD,MAOO;AACLA,MAAAA,KAAK,GAAG,KAAR;AACD;AACF;;AAEDF,EAAAA,QAAQ,CAACE,KAAD,CAAR;AACD","sourcesContent":["import moment from 'moment'; // Formats which are correctly parsed to time (supported by momentjs)\n\nvar STRICT_FORMATS = ['YYYY-MM-DDTHH:mm:ss.SSSZ', 'X', // Unix timestamp\n'x' // Unix ms timestamp\n];\n/**\n * Time cell validator\n *\n * @private\n * @validator TimeValidator\n * @param {*} value - Value of edited cell\n * @param {Function} callback - Callback called with validation result\n */\n\nexport default function timeValidator(value, callback) {\n  var timeFormat = this.timeFormat || 'h:mm:ss a';\n  var valid = true;\n  var valueToValidate = value;\n\n  if (valueToValidate === null) {\n    valueToValidate = '';\n  }\n\n  valueToValidate = /^\\d{3,}$/.test(valueToValidate) ? parseInt(valueToValidate, 10) : valueToValidate;\n  var twoDigitValue = /^\\d{1,2}$/.test(valueToValidate);\n\n  if (twoDigitValue) {\n    valueToValidate += ':00';\n  }\n\n  var date = moment(valueToValidate, STRICT_FORMATS, true).isValid() ? moment(valueToValidate) : moment(valueToValidate, timeFormat);\n  var isValidTime = date.isValid(); // is it in the specified format\n\n  var isValidFormat = moment(valueToValidate, timeFormat, true).isValid() && !twoDigitValue;\n\n  if (this.allowEmpty && valueToValidate === '') {\n    isValidTime = true;\n    isValidFormat = true;\n  }\n\n  if (!isValidTime) {\n    valid = false;\n  }\n\n  if (!isValidTime && isValidFormat) {\n    valid = true;\n  }\n\n  if (isValidTime && !isValidFormat) {\n    if (this.correctFormat === true) {\n      // if format correction is enabled\n      var correctedValue = date.format(timeFormat);\n      var row = this.instance.runHooks('unmodifyRow', this.row);\n      var column = this.instance.runHooks('unmodifyCol', this.col);\n      this.instance.setDataAtCell(row, column, correctedValue, 'timeValidator');\n      valid = true;\n    } else {\n      valid = false;\n    }\n  }\n\n  callback(valid);\n}"]},"metadata":{},"sourceType":"module"}