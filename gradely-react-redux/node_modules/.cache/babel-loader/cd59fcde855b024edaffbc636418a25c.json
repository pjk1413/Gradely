{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport { addClass } from './../../helpers/dom/element';\n/**\n * Comment editor for the Comments plugin.\n *\n * @class CommentEditor\n * @plugin Comments\n */\n\nvar CommentEditor = /*#__PURE__*/function () {\n  _createClass(CommentEditor, null, [{\n    key: \"CLASS_EDITOR_CONTAINER\",\n    get: function get() {\n      return 'htCommentsContainer';\n    }\n  }, {\n    key: \"CLASS_EDITOR\",\n    get: function get() {\n      return 'htComments';\n    }\n  }, {\n    key: \"CLASS_INPUT\",\n    get: function get() {\n      return 'htCommentTextArea';\n    }\n  }, {\n    key: \"CLASS_CELL\",\n    get: function get() {\n      return 'htCommentCell';\n    }\n  }]);\n\n  function CommentEditor(rootDocument) {\n    _classCallCheck(this, CommentEditor);\n\n    this.container = null;\n    this.rootDocument = rootDocument;\n    this.editor = this.createEditor();\n    this.editorStyle = this.editor.style;\n    this.hidden = true;\n    this.hide();\n  }\n  /**\n   * Set position of the comments editor according to the  provided x and y coordinates.\n   *\n   * @param {Number} x X position (in pixels).\n   * @param {Number} y Y position (in pixels).\n   */\n\n\n  _createClass(CommentEditor, [{\n    key: \"setPosition\",\n    value: function setPosition(x, y) {\n      this.editorStyle.left = \"\".concat(x, \"px\");\n      this.editorStyle.top = \"\".concat(y, \"px\");\n    }\n    /**\n     * Set the editor size according to the provided arguments.\n     *\n     * @param {Number} width Width in pixels.\n     * @param {Number} height Height in pixels.\n     */\n\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      if (width && height) {\n        var input = this.getInputElement();\n        input.style.width = \"\".concat(width, \"px\");\n        input.style.height = \"\".concat(height, \"px\");\n      }\n    }\n    /**\n     * Reset the editor size to its initial state.\n     */\n\n  }, {\n    key: \"resetSize\",\n    value: function resetSize() {\n      var input = this.getInputElement();\n      input.style.width = '';\n      input.style.height = '';\n    }\n    /**\n     * Set the read-only state for the comments editor.\n     *\n     * @param {Boolean} state The new read only state.\n     */\n\n  }, {\n    key: \"setReadOnlyState\",\n    value: function setReadOnlyState(state) {\n      var input = this.getInputElement();\n      input.readOnly = state;\n    }\n    /**\n     * Show the comments editor.\n     */\n\n  }, {\n    key: \"show\",\n    value: function show() {\n      this.editorStyle.display = 'block';\n      this.hidden = false;\n    }\n    /**\n     * Hide the comments editor.\n     */\n\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this.editorStyle.display = 'none';\n      this.hidden = true;\n    }\n    /**\n     * Checks if the editor is visible.\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isVisible\",\n    value: function isVisible() {\n      return this.editorStyle.display === 'block';\n    }\n    /**\n     * Set the comment value.\n     *\n     * @param {String} [value] The value to use.\n     */\n\n  }, {\n    key: \"setValue\",\n    value: function setValue() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var comment = value || '';\n      this.getInputElement().value = comment;\n    }\n    /**\n     * Get the comment value.\n     *\n     * @returns {String}\n     */\n\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      return this.getInputElement().value;\n    }\n    /**\n     * Checks if the comment input element is focused.\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isFocused\",\n    value: function isFocused() {\n      return this.rootDocument.activeElement === this.getInputElement();\n    }\n    /**\n     * Focus the comments input element.\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.getInputElement().focus();\n    }\n    /**\n     * Create the `textarea` to be used as a comments editor.\n     *\n     * @returns {HTMLElement}\n     */\n\n  }, {\n    key: \"createEditor\",\n    value: function createEditor() {\n      var editor = this.rootDocument.createElement('div');\n      var textArea = this.rootDocument.createElement('textarea');\n      this.container = this.rootDocument.querySelector(\".\".concat(CommentEditor.CLASS_EDITOR_CONTAINER));\n\n      if (!this.container) {\n        this.container = this.rootDocument.createElement('div');\n        addClass(this.container, CommentEditor.CLASS_EDITOR_CONTAINER);\n        this.rootDocument.body.appendChild(this.container);\n      }\n\n      addClass(editor, CommentEditor.CLASS_EDITOR);\n      addClass(textArea, CommentEditor.CLASS_INPUT);\n      editor.appendChild(textArea);\n      this.container.appendChild(editor);\n      return editor;\n    }\n    /**\n     * Get the input element.\n     *\n     * @returns {HTMLElement}\n     */\n\n  }, {\n    key: \"getInputElement\",\n    value: function getInputElement() {\n      return this.editor.querySelector(\".\".concat(CommentEditor.CLASS_INPUT));\n    }\n    /**\n     * Destroy the comments editor.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var containerParentElement = this.container ? this.container.parentNode : null;\n      this.editor.parentNode.removeChild(this.editor);\n      this.editor = null;\n      this.editorStyle = null;\n\n      if (containerParentElement) {\n        containerParentElement.removeChild(this.container);\n      }\n    }\n  }]);\n\n  return CommentEditor;\n}();\n\nexport default CommentEditor;","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/node_modules/handsontable/es/plugins/comments/commentEditor.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","addClass","CommentEditor","get","rootDocument","container","editor","createEditor","editorStyle","style","hidden","hide","value","setPosition","x","y","left","concat","top","setSize","width","height","input","getInputElement","resetSize","setReadOnlyState","state","readOnly","show","display","isVisible","setValue","arguments","undefined","comment","getValue","isFocused","activeElement","focus","createElement","textArea","querySelector","CLASS_EDITOR_CONTAINER","body","appendChild","CLASS_EDITOR","CLASS_INPUT","destroy","containerParentElement","parentNode","removeChild"],"mappings":"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","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { addClass } from './../../helpers/dom/element';\n/**\n * Comment editor for the Comments plugin.\n *\n * @class CommentEditor\n * @plugin Comments\n */\n\nvar CommentEditor =\n/*#__PURE__*/\nfunction () {\n  _createClass(CommentEditor, null, [{\n    key: \"CLASS_EDITOR_CONTAINER\",\n    get: function get() {\n      return 'htCommentsContainer';\n    }\n  }, {\n    key: \"CLASS_EDITOR\",\n    get: function get() {\n      return 'htComments';\n    }\n  }, {\n    key: \"CLASS_INPUT\",\n    get: function get() {\n      return 'htCommentTextArea';\n    }\n  }, {\n    key: \"CLASS_CELL\",\n    get: function get() {\n      return 'htCommentCell';\n    }\n  }]);\n\n  function CommentEditor(rootDocument) {\n    _classCallCheck(this, CommentEditor);\n\n    this.container = null;\n    this.rootDocument = rootDocument;\n    this.editor = this.createEditor();\n    this.editorStyle = this.editor.style;\n    this.hidden = true;\n    this.hide();\n  }\n  /**\n   * Set position of the comments editor according to the  provided x and y coordinates.\n   *\n   * @param {Number} x X position (in pixels).\n   * @param {Number} y Y position (in pixels).\n   */\n\n\n  _createClass(CommentEditor, [{\n    key: \"setPosition\",\n    value: function setPosition(x, y) {\n      this.editorStyle.left = \"\".concat(x, \"px\");\n      this.editorStyle.top = \"\".concat(y, \"px\");\n    }\n    /**\n     * Set the editor size according to the provided arguments.\n     *\n     * @param {Number} width Width in pixels.\n     * @param {Number} height Height in pixels.\n     */\n\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      if (width && height) {\n        var input = this.getInputElement();\n        input.style.width = \"\".concat(width, \"px\");\n        input.style.height = \"\".concat(height, \"px\");\n      }\n    }\n    /**\n     * Reset the editor size to its initial state.\n     */\n\n  }, {\n    key: \"resetSize\",\n    value: function resetSize() {\n      var input = this.getInputElement();\n      input.style.width = '';\n      input.style.height = '';\n    }\n    /**\n     * Set the read-only state for the comments editor.\n     *\n     * @param {Boolean} state The new read only state.\n     */\n\n  }, {\n    key: \"setReadOnlyState\",\n    value: function setReadOnlyState(state) {\n      var input = this.getInputElement();\n      input.readOnly = state;\n    }\n    /**\n     * Show the comments editor.\n     */\n\n  }, {\n    key: \"show\",\n    value: function show() {\n      this.editorStyle.display = 'block';\n      this.hidden = false;\n    }\n    /**\n     * Hide the comments editor.\n     */\n\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this.editorStyle.display = 'none';\n      this.hidden = true;\n    }\n    /**\n     * Checks if the editor is visible.\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isVisible\",\n    value: function isVisible() {\n      return this.editorStyle.display === 'block';\n    }\n    /**\n     * Set the comment value.\n     *\n     * @param {String} [value] The value to use.\n     */\n\n  }, {\n    key: \"setValue\",\n    value: function setValue() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var comment = value || '';\n      this.getInputElement().value = comment;\n    }\n    /**\n     * Get the comment value.\n     *\n     * @returns {String}\n     */\n\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      return this.getInputElement().value;\n    }\n    /**\n     * Checks if the comment input element is focused.\n     *\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isFocused\",\n    value: function isFocused() {\n      return this.rootDocument.activeElement === this.getInputElement();\n    }\n    /**\n     * Focus the comments input element.\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.getInputElement().focus();\n    }\n    /**\n     * Create the `textarea` to be used as a comments editor.\n     *\n     * @returns {HTMLElement}\n     */\n\n  }, {\n    key: \"createEditor\",\n    value: function createEditor() {\n      var editor = this.rootDocument.createElement('div');\n      var textArea = this.rootDocument.createElement('textarea');\n      this.container = this.rootDocument.querySelector(\".\".concat(CommentEditor.CLASS_EDITOR_CONTAINER));\n\n      if (!this.container) {\n        this.container = this.rootDocument.createElement('div');\n        addClass(this.container, CommentEditor.CLASS_EDITOR_CONTAINER);\n        this.rootDocument.body.appendChild(this.container);\n      }\n\n      addClass(editor, CommentEditor.CLASS_EDITOR);\n      addClass(textArea, CommentEditor.CLASS_INPUT);\n      editor.appendChild(textArea);\n      this.container.appendChild(editor);\n      return editor;\n    }\n    /**\n     * Get the input element.\n     *\n     * @returns {HTMLElement}\n     */\n\n  }, {\n    key: \"getInputElement\",\n    value: function getInputElement() {\n      return this.editor.querySelector(\".\".concat(CommentEditor.CLASS_INPUT));\n    }\n    /**\n     * Destroy the comments editor.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var containerParentElement = this.container ? this.container.parentNode : null;\n      this.editor.parentNode.removeChild(this.editor);\n      this.editor = null;\n      this.editorStyle = null;\n\n      if (containerParentElement) {\n        containerParentElement.removeChild(this.container);\n      }\n    }\n  }]);\n\n  return CommentEditor;\n}();\n\nexport default CommentEditor;"]},"metadata":{},"sourceType":"module"}