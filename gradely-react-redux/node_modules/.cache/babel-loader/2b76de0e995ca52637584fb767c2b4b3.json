{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pjk14\\\\Desktop\\\\Gradely\\\\gradely-react-redux\\\\src\\\\components\\\\utility-boxes\\\\gradeEntry\\\\TablePractice.js\";\nimport React from 'react';\nimport Handsontable from 'handsontable';\nimport { connect } from 'rea';\nlet colHeaders = [];\nlet columnSchema = [];\nlet rowHeaders = [];\nlet data = this.props.data ? this.props.data : [];\n\nif (this.props.editCourse && this.props.editCourse.students) {\n  rowHeaders = this.props.editCourse.students.map(student => {\n    //Creates an object that will be used to organize the data\n    let studentArray = [];\n    student.assignmentScores.forEach(score => {\n      studentArray.push([score.assignmentTempId, score.points]);\n    });\n    console.log(studentArray);\n    const temp = new Map(studentArray);\n    const studentObj = Object.fromEntries(temp);\n    data && data.push(studentObj); //Returns the heading\n\n    return student.user.firstName + \" \" + student.user.lastName;\n  });\n}\n\nif (this.props.editCourse && this.props.editCourse.assignments) {\n  //Sort by assignment ID\n  // ** Creates the column headers as well as colSchema //\n  // ***************************** //\n  colHeaders = this.props.editCourse.assignments.map(assignment => {\n    const colObj = {\n      data: assignment.id\n    };\n    columnSchema.push(colObj);\n    return assignment.name + \" (\" + assignment.totalPoints + \")\";\n  }); // ** Creates the row headers //\n}\n\nconst settings = {\n  licenseKey: 'non-commercial-and-evaluation',\n  data: data,\n  colHeaders: colHeaders,\n  rowHeaders: rowHeaders,\n  rowHeaderWidth: 150,\n  columns: columnSchema,\n  afterChange: (changes, source) => this.handleChange(changes, data),\n  setDataAtRowProp: () => this.changeCells(),\n  //row: rowStudentLabel,\n  // width: \"600\", \n  height: \"300\",\n  headerTooltips: {\n    rows: true,\n    columns: true,\n    onlyTrimmed: false\n  }\n};\nconst container = document.getElementById(\"hot-app\");\nconst hot = new Handsontable(container, settings);\n\nconst TablePractice = () => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"hot-table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default TablePractice;","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/src/components/utility-boxes/gradeEntry/TablePractice.js"],"names":["React","Handsontable","connect","colHeaders","columnSchema","rowHeaders","data","props","editCourse","students","map","student","studentArray","assignmentScores","forEach","score","push","assignmentTempId","points","console","log","temp","Map","studentObj","Object","fromEntries","user","firstName","lastName","assignments","assignment","colObj","id","name","totalPoints","settings","licenseKey","rowHeaderWidth","columns","afterChange","changes","source","handleChange","setDataAtRowProp","changeCells","height","headerTooltips","rows","onlyTrimmed","container","document","getElementById","hot","TablePractice"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Handsontable from 'handsontable';\r\nimport { connect } from 'rea'\r\n\r\nlet colHeaders = []\r\n        let columnSchema = []\r\n        let rowHeaders = []\r\n        let data = this.props.data ? this.props.data : []\r\n\r\n        if (this.props.editCourse && this.props.editCourse.students) {\r\n            rowHeaders = this.props.editCourse.students.map(student => {\r\n                \r\n                //Creates an object that will be used to organize the data\r\n                let studentArray = []\r\n                student.assignmentScores.forEach(score => {\r\n                    studentArray.push([score.assignmentTempId, score.points])\r\n                });\r\n                console.log(studentArray)\r\n                const temp = new Map(studentArray)\r\n                const studentObj = Object.fromEntries(temp)\r\n\r\n                data && data.push(studentObj)\r\n\r\n                //Returns the heading\r\n                return student.user.firstName + \" \" + student.user.lastName\r\n            })\r\n\r\n\r\n\r\n        }\r\n\r\n        if (this.props.editCourse && this.props.editCourse.assignments) {\r\n\r\n            //Sort by assignment ID\r\n            // ** Creates the column headers as well as colSchema //\r\n            // ***************************** //\r\n            colHeaders = this.props.editCourse.assignments.map(assignment => {\r\n                const colObj = {data: assignment.id}\r\n                columnSchema.push(colObj)\r\n                return assignment.name + \" (\" + assignment.totalPoints + \")\"\r\n            })\r\n\r\n            // ** Creates the row headers //\r\n\r\n        }\r\n\r\n        const settings = {\r\n            licenseKey: 'non-commercial-and-evaluation',\r\n            data: data,\r\n            colHeaders: colHeaders,\r\n            rowHeaders: rowHeaders,\r\n            rowHeaderWidth: 150,\r\n            columns: columnSchema,\r\n            afterChange: (changes, source) => this.handleChange(changes, data),\r\n            setDataAtRowProp: () => this.changeCells(),\r\n            //row: rowStudentLabel,\r\n            // width: \"600\", \r\n            height: \"300\",\r\n            headerTooltips: {\r\n                rows: true,\r\n                columns: true,\r\n                onlyTrimmed: false\r\n            }\r\n        }\r\n\r\n        const container = document.getElementById(\"hot-app\")\r\n        const hot = new Handsontable(container, settings)\r\n\r\nconst TablePractice = () => {\r\n  return (\r\n    <div id=\"hot-table\">\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TablePractice;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}