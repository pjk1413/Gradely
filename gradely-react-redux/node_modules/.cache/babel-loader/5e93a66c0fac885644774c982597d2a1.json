{"ast":null,"code":"import staticRegister from './../../utils/staticRegister';\nimport pluralizeFn from './pluralize';\n\nvar _staticRegister = staticRegister('phraseFormatters'),\n    registerGloballyPhraseFormatter = _staticRegister.register,\n    getGlobalPhraseFormatters = _staticRegister.getValues;\n/**\n * Register phrase formatter.\n *\n * @param {String} name Name of formatter.\n * @param {Function} formatterFn Function which will be applied on phrase propositions. It will transform them if it's possible.\n */\n\n\nexport function register(name, formatterFn) {\n  registerGloballyPhraseFormatter(name, formatterFn);\n}\n/**\n * Get all registered previously formatters.\n *\n * @returns {Array}\n */\n\nexport function getAll() {\n  return getGlobalPhraseFormatters();\n}\nexport { register as registerPhraseFormatter, getAll as getPhraseFormatters };\nregister('pluralize', pluralizeFn);","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react/node_modules/handsontable/es/i18n/phraseFormatters/index.js"],"names":["staticRegister","pluralizeFn","_staticRegister","registerGloballyPhraseFormatter","register","getGlobalPhraseFormatters","getValues","name","formatterFn","getAll","registerPhraseFormatter","getPhraseFormatters"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,8BAA3B;AACA,OAAOC,WAAP,MAAwB,aAAxB;;AAEA,IAAIC,eAAe,GAAGF,cAAc,CAAC,kBAAD,CAApC;AAAA,IACIG,+BAA+B,GAAGD,eAAe,CAACE,QADtD;AAAA,IAEIC,yBAAyB,GAAGH,eAAe,CAACI,SAFhD;AAGA;;;;;;;;AAQA,OAAO,SAASF,QAAT,CAAkBG,IAAlB,EAAwBC,WAAxB,EAAqC;AAC1CL,EAAAA,+BAA+B,CAACI,IAAD,EAAOC,WAAP,CAA/B;AACD;AACD;;;;;;AAMA,OAAO,SAASC,MAAT,GAAkB;AACvB,SAAOJ,yBAAyB,EAAhC;AACD;AACD,SAASD,QAAQ,IAAIM,uBAArB,EAA8CD,MAAM,IAAIE,mBAAxD;AACAP,QAAQ,CAAC,WAAD,EAAcH,WAAd,CAAR","sourcesContent":["import staticRegister from './../../utils/staticRegister';\nimport pluralizeFn from './pluralize';\n\nvar _staticRegister = staticRegister('phraseFormatters'),\n    registerGloballyPhraseFormatter = _staticRegister.register,\n    getGlobalPhraseFormatters = _staticRegister.getValues;\n/**\n * Register phrase formatter.\n *\n * @param {String} name Name of formatter.\n * @param {Function} formatterFn Function which will be applied on phrase propositions. It will transform them if it's possible.\n */\n\n\nexport function register(name, formatterFn) {\n  registerGloballyPhraseFormatter(name, formatterFn);\n}\n/**\n * Get all registered previously formatters.\n *\n * @returns {Array}\n */\n\nexport function getAll() {\n  return getGlobalPhraseFormatters();\n}\nexport { register as registerPhraseFormatter, getAll as getPhraseFormatters };\nregister('pluralize', pluralizeFn);"]},"metadata":{},"sourceType":"module"}