{"ast":null,"code":"import { axios } from 'axios';\nimport { HOLD_EDIT_USER, UPDATE_STUDENT, UPDATE_USER, HOLD_EDIT_COURSE, HOLD_ADD_STUDENT, HOLD_REMOVE_STUDENT, HOLD_REMOVE_ASSIGNMENT, HOLD_UPDATE_ASSIGNMENT_SCORE, UPDATE_STUDENT_SCORE, ADD_USER_TO_LIST, REMOVE_USER_FROM_LIST } from '../action/types';\nimport { HOLD_EDIT_USER_TYPE, HOLD_EDIT_ASSIGNMENT, HOLD_UPDATE_ASSIGNMENT, UPDATE_GRID } from './../action/types'; //Reducer is a switch statement with actions and defines those actions\n\nconst initialState = {\n  studentList: [],\n  data: [],\n  mailList: []\n}; //Is it better to return the list from the API call and set state to that, or update state on my own\n\nconst tempReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HOLD_UPDATE_ASSIGNMENT_SCORE:\n      //payload is a new studentScore, needs to be added into the student and the assignment\n      return { ...state\n      };\n\n    case UPDATE_GRID:\n      return { ...state,\n        data: action.payload\n      };\n\n    case UPDATE_USER:\n      let newTemp = { ...state.editUser\n      };\n      newTemp.user = action.payload;\n      return { ...state,\n        editUser: newTemp\n      };\n\n    case UPDATE_STUDENT:\n      return { ...state,\n        editUser: action.payload\n      };\n\n    case HOLD_EDIT_USER:\n      return { ...state,\n        editUser: action.payload\n      };\n\n    case HOLD_EDIT_USER_TYPE:\n      return { ...state,\n        editUserType: action.payload\n      };\n\n    case HOLD_EDIT_ASSIGNMENT:\n      const tempAssignment = Object.assign({}, action.payload);\n      return { ...state,\n        editAssignment: tempAssignment\n      };\n\n    case HOLD_EDIT_COURSE:\n      const tempCourse = Object.assign({}, action.payload);\n      return { ...state,\n        editCourse: tempCourse\n      };\n\n    case HOLD_REMOVE_ASSIGNMENT:\n      let courseRemoveAssignment = { ...state.editCourse\n      };\n      const courseAssignment = courseRemoveAssignment.assignments && courseRemoveAssignment.assignments.filter(function checkId(assignment) {\n        return assignment.id !== action.payload;\n      });\n      courseRemoveAssignment.assignments = courseAssignment;\n      return { ...state,\n        editCourse: courseRemoveAssignment\n      };\n\n    case HOLD_UPDATE_ASSIGNMENT:\n      let courseUpdateAssignment = { ...state.editCourse\n      };\n      const courseTempAssignment = courseUpdateAssignment.assignments && courseUpdateAssignment.assignments.map(function checkId(assignment) {\n        if (assignment.id === action.payload.id) {\n          return action.payload;\n        } else {\n          return assignment;\n        }\n      });\n      courseUpdateAssignment.assignments = courseTempAssignment;\n      return { ...state,\n        editCourse: courseUpdateAssignment\n      };\n\n    case HOLD_REMOVE_STUDENT:\n      let courseRemoveStudent = { ...state.editCourse\n      };\n      const course = courseRemoveStudent.students && courseRemoveStudent.students.filter(function checkId(student) {\n        //console.log(student.id)\n        //console.log(action.payload)\n        return student.id !== action.payload;\n      });\n      courseRemoveStudent.students = course;\n      return { ...state,\n        editCourse: courseRemoveStudent\n      };\n\n    case HOLD_ADD_STUDENT:\n      let courseAddStudent = { ...state.editCourse\n      };\n      courseAddStudent.students.push(action.payload);\n      return { ...state,\n        editCourse: courseAddStudent\n      };\n\n    case UPDATE_STUDENT_SCORE:\n      return { ...state\n      };\n\n    case REMOVE_USER_FROM_LIST:\n      let tempRemoveMailList = { ...state.mailList\n      };\n      tempRemoveMailList = tempRemoveMailList.filter(function checkId(user) {\n        return user.id !== action.payload;\n      });\n      return { ...state,\n        mailList: tempRemoveMailList\n      };\n\n    case ADD_USER_TO_LIST:\n      let tempAddMailList = state.mailList;\n      tempAddMailList.push(action.payload);\n      return { ...state,\n        mailList: tempAddMailList\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default tempReducer;","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/src/reducer/tempReducer.js"],"names":["axios","HOLD_EDIT_USER","UPDATE_STUDENT","UPDATE_USER","HOLD_EDIT_COURSE","HOLD_ADD_STUDENT","HOLD_REMOVE_STUDENT","HOLD_REMOVE_ASSIGNMENT","HOLD_UPDATE_ASSIGNMENT_SCORE","UPDATE_STUDENT_SCORE","ADD_USER_TO_LIST","REMOVE_USER_FROM_LIST","HOLD_EDIT_USER_TYPE","HOLD_EDIT_ASSIGNMENT","HOLD_UPDATE_ASSIGNMENT","UPDATE_GRID","initialState","studentList","data","mailList","tempReducer","state","action","type","payload","newTemp","editUser","user","editUserType","tempAssignment","Object","assign","editAssignment","tempCourse","editCourse","courseRemoveAssignment","courseAssignment","assignments","filter","checkId","assignment","id","courseUpdateAssignment","courseTempAssignment","map","courseRemoveStudent","course","students","student","courseAddStudent","push","tempRemoveMailList","tempAddMailList"],"mappings":"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","sourcesContent":["import { axios } from 'axios';\r\nimport { HOLD_EDIT_USER, UPDATE_STUDENT, UPDATE_USER, HOLD_EDIT_COURSE, HOLD_ADD_STUDENT, HOLD_REMOVE_STUDENT, \r\n    HOLD_REMOVE_ASSIGNMENT, HOLD_UPDATE_ASSIGNMENT_SCORE, UPDATE_STUDENT_SCORE, ADD_USER_TO_LIST, REMOVE_USER_FROM_LIST } from '../action/types';\r\nimport { HOLD_EDIT_USER_TYPE, HOLD_EDIT_ASSIGNMENT, HOLD_UPDATE_ASSIGNMENT,UPDATE_GRID } from './../action/types';\r\n//Reducer is a switch statement with actions and defines those actions\r\n\r\nconst initialState = {\r\n    studentList: [],\r\n    data: [],\r\n    mailList: []\r\n}\r\n\r\n//Is it better to return the list from the API call and set state to that, or update state on my own\r\nconst tempReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case HOLD_UPDATE_ASSIGNMENT_SCORE:\r\n            //payload is a new studentScore, needs to be added into the student and the assignment\r\n\r\n            return {\r\n                ...state\r\n            }\r\n        case UPDATE_GRID:\r\n            return {\r\n                ...state,\r\n                data: action.payload\r\n            }\r\n        case UPDATE_USER: \r\n            \r\n            let newTemp = {\r\n                ...state.editUser\r\n            }\r\n            newTemp.user = action.payload\r\n            return {\r\n                ...state,\r\n                editUser: newTemp\r\n            }\r\n        case UPDATE_STUDENT:\r\n            return {\r\n                ...state,\r\n                editUser: action.payload\r\n            }\r\n        case HOLD_EDIT_USER:\r\n            return {\r\n                ...state,\r\n                editUser: action.payload\r\n            };\r\n        case HOLD_EDIT_USER_TYPE:\r\n            return {\r\n                ...state,\r\n                editUserType: action.payload\r\n            }\r\n        case HOLD_EDIT_ASSIGNMENT:\r\n            const tempAssignment = Object.assign({}, action.payload)\r\n            return {\r\n                ...state,\r\n                editAssignment: tempAssignment\r\n            }\r\n        case HOLD_EDIT_COURSE:\r\n            const tempCourse = Object.assign({}, action.payload)\r\n            return {\r\n                ...state,\r\n                editCourse: tempCourse\r\n              }\r\n        case HOLD_REMOVE_ASSIGNMENT:\r\n            let courseRemoveAssignment = {\r\n                ...state.editCourse\r\n            }\r\n\r\n            const courseAssignment = courseRemoveAssignment.assignments && courseRemoveAssignment.assignments.filter(\r\n                function checkId(assignment) {\r\n                    return assignment.id !== action.payload\r\n                }\r\n            )\r\n            courseRemoveAssignment.assignments = courseAssignment\r\n\r\n            return {\r\n                ...state,\r\n                editCourse: courseRemoveAssignment\r\n            }\r\n\r\n        case HOLD_UPDATE_ASSIGNMENT:\r\n            let courseUpdateAssignment = {\r\n                ...state.editCourse\r\n            }\r\n\r\n            const courseTempAssignment = courseUpdateAssignment.assignments && courseUpdateAssignment.assignments.map(\r\n                function checkId(assignment) {\r\n                    if(assignment.id === action.payload.id) {\r\n                        return action.payload\r\n                    } else {\r\n                        return assignment\r\n                    }\r\n                }\r\n            )\r\n            courseUpdateAssignment.assignments = courseTempAssignment\r\n\r\n            return {\r\n                ...state,\r\n                editCourse: courseUpdateAssignment\r\n            }\r\n\r\n        case HOLD_REMOVE_STUDENT:\r\n            let courseRemoveStudent = {\r\n                ...state.editCourse\r\n            }\r\n            \r\n            const course = courseRemoveStudent.students && courseRemoveStudent.students.filter(\r\n                function checkId(student) {\r\n                    //console.log(student.id)\r\n                    //console.log(action.payload)\r\n                    return student.id !== action.payload\r\n                }\r\n            )\r\n            courseRemoveStudent.students = course\r\n\r\n            return {\r\n                ...state,\r\n                editCourse: courseRemoveStudent\r\n            }\r\n        case HOLD_ADD_STUDENT:\r\n            let courseAddStudent = {\r\n                ...state.editCourse\r\n            }\r\n            courseAddStudent.students.push(action.payload)\r\n            return {\r\n                ...state,\r\n                editCourse: courseAddStudent\r\n            }\r\n        case UPDATE_STUDENT_SCORE:\r\n            return {\r\n                ...state\r\n            }\r\n        case REMOVE_USER_FROM_LIST:\r\n            let tempRemoveMailList = {\r\n                ...state.mailList\r\n            }\r\n\r\n            tempRemoveMailList = tempRemoveMailList.filter(\r\n                function checkId(user) {\r\n                    return user.id !== action.payload\r\n                }\r\n            )\r\n\r\n            return {\r\n                ...state,\r\n                mailList: tempRemoveMailList\r\n            }\r\n        case ADD_USER_TO_LIST:\r\n            let tempAddMailList = state.mailList\r\n            tempAddMailList.push(action.payload)\r\n            return {\r\n                ...state,\r\n                mailList: tempAddMailList\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n} \r\n\r\nexport default tempReducer;\r\n"]},"metadata":{},"sourceType":"module"}