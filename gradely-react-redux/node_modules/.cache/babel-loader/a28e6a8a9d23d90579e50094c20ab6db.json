{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pjk14\\\\Desktop\\\\Gradely\\\\gradely-react-redux\\\\src\\\\components\\\\utility-boxes\\\\gradeEntry\\\\Table.js\";\nimport React, { Component } from 'react';\nimport 'handsontable/dist/handsontable.full.css';\nimport { HotTable, HotColumn } from '@handsontable/react';\nimport { connect } from 'react-redux';\nimport { gridHandleChange, updateTempAssignment } from './../../../action/tempActions';\nimport { saveStudentScore } from './../../../action/courseActions';\nimport Handsontable from \"handsontable\";\nimport 'handsontable/dist/handsontable.full.css';\n\nclass Table extends Component {\n  constructor() {\n    super();\n    this.hot = React.createRef();\n    this.data = [];\n  }\n\n  swapHotData() {\n    // The Handsontable instance is stored under the `hotInstance` property of the wrapper component.\n    this.hot.current.hotInstance.loadData([['new', 'data']]);\n  }\n\n  handleChange(changes) {\n    changes && changes.forEach(([row, prop, oldValue, newValue]) => {\n      console.log(newValue);\n\n      if (oldValue !== newValue) {\n        // ** Sets the data into the table\n        this.hot.current.hotInstance.setDataAtRowProp(row, prop, newValue);\n        const id = this.hot.current.hotInstance.getRowHeader(row).split(\":\")[0]; //Set student assignment score, update course, and start a timer to save the data\n\n        const student = this.props.editCourse.students && this.props.editCourse.students.find(student => {\n          return student.id === parseInt(id);\n        });\n        const assignmentScore = student.assignmentScores.find(assignment => {\n          return assignment.assignmentTempId === prop;\n        });\n        assignmentScore.points = newValue && newValue;\n        assignmentScore.turnedIn = true;\n        assignmentScore.courseTempId = this.props.editCourse.id;\n        console.log(this.props.editCourse);\n        this.data = this.hot.current.hotInstance.getData;\n        console.log(assignmentScore);\n        this.props.saveStudentScore(assignmentScore); //this.props.updateTempAssignment(assignmentScore)\n      }\n    });\n  }\n\n  render() {\n    let colHeaders = [];\n    let columnSchema = [];\n    let rowHeaders = null;\n    let data = [];\n\n    if (this.props.editCourse && this.props.editCourse.students) {\n      rowHeaders = this.props.editCourse.students.map(student => {\n        //Creates an object that will be used to organize the data\n        let studentArray = [];\n        student.assignmentScores && student.assignmentScores.forEach(score => {\n          studentArray.push([score.assignmentTempId, score.points]);\n        });\n        const temp = new Map(studentArray);\n        const studentObj = Object.fromEntries(temp);\n        data && data.push(studentObj); //Returns the heading\n\n        return student.id + \": \" + student.user.firstName + \" \" + student.user.lastName;\n      });\n    }\n\n    if (this.props.editCourse && this.props.editCourse.assignments) {\n      //Sort by assignment ID\n      // ** Creates the column headers as well as colSchema //\n      // ***************************** //\n      colHeaders = this.props.editCourse.assignments.map(assignment => {\n        const colObj = {\n          data: assignment.id\n        };\n        columnSchema.push(colObj);\n        return assignment.name + \" (\" + assignment.totalPoints + \")\";\n      });\n    }\n\n    this.data = data;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"hot-app\",\n      className: \"my-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(HotTable, {\n      ref: this.hot,\n      id: \"hot-table\",\n      className: \"my-3\",\n      afterChange: changes => {\n        this.handleChange(changes);\n      } //setDataAtRowProp={this.state.changes}\n      ,\n      licenseKey: 'non-commercial-and-evaluation',\n      data: this.data,\n      colHeaders: colHeaders,\n      rowHeaders: rowHeaders,\n      rowHeaderWidth: 150,\n      columns: columnSchema,\n      height: \"300\",\n      headerTooltips: {\n        rows: true,\n        columns: true,\n        onlyTrimmed: false\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  editCourse: state.temp.editCourse,\n  data: state.temp.data\n});\n\nexport default connect(mapStateToProps, {\n  gridHandleChange,\n  updateTempAssignment,\n  saveStudentScore\n})(Table);","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/src/components/utility-boxes/gradeEntry/Table.js"],"names":["React","Component","HotTable","HotColumn","connect","gridHandleChange","updateTempAssignment","saveStudentScore","Handsontable","Table","constructor","hot","createRef","data","swapHotData","current","hotInstance","loadData","handleChange","changes","forEach","row","prop","oldValue","newValue","console","log","setDataAtRowProp","id","getRowHeader","split","student","props","editCourse","students","find","parseInt","assignmentScore","assignmentScores","assignment","assignmentTempId","points","turnedIn","courseTempId","getData","render","colHeaders","columnSchema","rowHeaders","map","studentArray","score","push","temp","Map","studentObj","Object","fromEntries","user","firstName","lastName","assignments","colObj","name","totalPoints","rows","columns","onlyTrimmed","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport 'handsontable/dist/handsontable.full.css';\r\nimport { HotTable, HotColumn } from '@handsontable/react'\r\nimport { connect } from 'react-redux';\r\nimport { gridHandleChange, updateTempAssignment } from './../../../action/tempActions'\r\nimport { saveStudentScore } from './../../../action/courseActions'\r\nimport Handsontable from \"handsontable\";\r\nimport 'handsontable/dist/handsontable.full.css';\r\n\r\n\r\nclass Table extends Component {\r\n    constructor() {\r\n        super()\r\n        this.hot = React.createRef();\r\n        this.data = [\r\n\r\n        ]\r\n    }\r\n\r\n    swapHotData() {\r\n        // The Handsontable instance is stored under the `hotInstance` property of the wrapper component.\r\n        this.hot.current.hotInstance.loadData([['new', 'data']]);\r\n    }\r\n\r\n    handleChange(changes) {\r\n\r\n        changes && changes.forEach(([row, prop, oldValue, newValue]) => {\r\n                console.log(newValue)\r\n            if (oldValue !== newValue) {\r\n                // ** Sets the data into the table\r\n                this.hot.current.hotInstance.setDataAtRowProp(row, prop, newValue)   \r\n\r\n                const id = this.hot.current.hotInstance.getRowHeader(row).split(\":\")[0]\r\n                //Set student assignment score, update course, and start a timer to save the data\r\n                const student = this.props.editCourse.students && this.props.editCourse.students.find(student => {\r\n                    return student.id === parseInt(id)\r\n                })\r\n\r\n                const assignmentScore = student.assignmentScores.find(assignment => {\r\n                    return assignment.assignmentTempId === prop\r\n                })\r\n                assignmentScore.points = newValue && newValue\r\n                assignmentScore.turnedIn = true\r\n                assignmentScore.courseTempId = this.props.editCourse.id\r\n\r\n\r\n                console.log(this.props.editCourse)\r\n                this.data = this.hot.current.hotInstance.getData\r\n                console.log(assignmentScore)\r\n                this.props.saveStudentScore(assignmentScore);\r\n                //this.props.updateTempAssignment(assignmentScore)\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n        let colHeaders = []\r\n        let columnSchema = []\r\n        let rowHeaders = null\r\n        let data = []\r\n\r\n        if (this.props.editCourse && this.props.editCourse.students) {\r\n            rowHeaders = this.props.editCourse.students.map(student => {\r\n\r\n                //Creates an object that will be used to organize the data\r\n                let studentArray = []\r\n                student.assignmentScores && student.assignmentScores.forEach(score => {\r\n                    studentArray.push([score.assignmentTempId, score.points])\r\n                });\r\n\r\n                const temp = new Map(studentArray)\r\n                const studentObj = Object.fromEntries(temp)\r\n\r\n                data && data.push(studentObj)\r\n\r\n                //Returns the heading\r\n                return student.id + \": \" + student.user.firstName + \" \" + student.user.lastName\r\n            })\r\n        }\r\n\r\n        if (this.props.editCourse && this.props.editCourse.assignments) {\r\n\r\n            //Sort by assignment ID\r\n            // ** Creates the column headers as well as colSchema //\r\n            // ***************************** //\r\n            colHeaders = this.props.editCourse.assignments.map(assignment => {\r\n                const colObj = { data: assignment.id }\r\n                columnSchema.push(colObj)\r\n                return assignment.name + \" (\" + assignment.totalPoints + \")\"\r\n            })\r\n        }\r\n\r\n        this.data = data\r\n\r\n        return (\r\n            <div id=\"hot-app\" className=\"my-3\">\r\n                <HotTable\r\n                    ref={this.hot}\r\n                    id=\"hot-table\"\r\n                    className=\"my-3\"\r\n                    afterChange={(changes) => { this.handleChange(changes) }}\r\n                    //setDataAtRowProp={this.state.changes}\r\n                    licenseKey={'non-commercial-and-evaluation'}\r\n                    data={this.data}\r\n                    colHeaders={colHeaders}\r\n                    rowHeaders={rowHeaders}\r\n                    rowHeaderWidth={150}\r\n                    columns={columnSchema}\r\n                    height={\"300\"}\r\n                    headerTooltips={{ rows: true, columns: true, onlyTrimmed: false }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    editCourse: state.temp.editCourse,\r\n    data: state.temp.data,\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, { gridHandleChange, updateTempAssignment, saveStudentScore })(Table)"]},"metadata":{},"sourceType":"module"}