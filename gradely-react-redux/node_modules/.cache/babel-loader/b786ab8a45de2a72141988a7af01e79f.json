{"ast":null,"code":"import { getCellType } from './../cellTypes';\nimport { hasOwnProperty } from './object';\nvar COLUMN_LABEL_BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nvar COLUMN_LABEL_BASE_LENGTH = COLUMN_LABEL_BASE.length;\n/**\n * Generates spreadsheet-like column names: A, B, C, ..., Z, AA, AB, etc.\n *\n * @param {Number} index Column index.\n * @returns {String}\n */\n\nexport function spreadsheetColumnLabel(index) {\n  var dividend = index + 1;\n  var columnLabel = '';\n  var modulo;\n\n  while (dividend > 0) {\n    modulo = (dividend - 1) % COLUMN_LABEL_BASE_LENGTH;\n    columnLabel = String.fromCharCode(65 + modulo) + columnLabel;\n    dividend = parseInt((dividend - modulo) / COLUMN_LABEL_BASE_LENGTH, 10);\n  }\n\n  return columnLabel;\n}\n/**\n * Generates spreadsheet-like column index from theirs labels: A, B, C ...., Z, AA, AB, etc.\n *\n * @param {String} label Column label.\n * @returns {Number}\n */\n\nexport function spreadsheetColumnIndex(label) {\n  var result = 0;\n\n  if (label) {\n    for (var i = 0, j = label.length - 1; i < label.length; i += 1, j -= 1) {\n      result += Math.pow(COLUMN_LABEL_BASE_LENGTH, j) * (COLUMN_LABEL_BASE.indexOf(label[i]) + 1);\n    }\n  }\n\n  result -= 1;\n  return result;\n}\n/**\n * Creates 2D array of Excel-like values \"A1\", \"A2\", ...\n *\n * @param {Number} rows Number of rows to generate.\n * @param {Number} columns Number of columns to generate.\n * @returns {Array}\n */\n\nexport function createSpreadsheetData() {\n  var rows = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n  var columns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  var _rows = [];\n  var i;\n  var j;\n\n  for (i = 0; i < rows; i++) {\n    var row = [];\n\n    for (j = 0; j < columns; j++) {\n      row.push(spreadsheetColumnLabel(j) + (i + 1));\n    }\n\n    _rows.push(row);\n  }\n\n  return _rows;\n}\n/**\n * Creates 2D array of Excel-like values \"A1\", \"A2\", as an array of objects.\n *\n * @param {Number} rows Number of rows to generate.\n * @param {Number} colCount Number of columns to generate.\n * @returns {Array}\n */\n\nexport function createSpreadsheetObjectData() {\n  var rows = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n  var colCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  var _rows = [];\n  var i;\n  var j;\n\n  for (i = 0; i < rows; i++) {\n    var row = {};\n\n    for (j = 0; j < colCount; j++) {\n      row[\"prop\".concat(j)] = spreadsheetColumnLabel(j) + (i + 1);\n    }\n\n    _rows.push(row);\n  }\n\n  return _rows;\n}\n/**\n * Generates an empty data object.\n *\n * @param {Number} rows Number of rows to generate.\n * @param {Number} columns Number of columns to generate\n * @returns {Array}\n */\n\nexport function createEmptySpreadsheetData(rows, columns) {\n  var data = [];\n  var row;\n\n  for (var i = 0; i < rows; i++) {\n    row = [];\n\n    for (var j = 0; j < columns; j++) {\n      row.push('');\n    }\n\n    data.push(row);\n  }\n\n  return data;\n}\nexport function translateRowsToColumns(input) {\n  var output = [];\n  var i;\n  var ilen;\n  var j;\n  var jlen;\n  var olen = 0;\n\n  for (i = 0, ilen = input.length; i < ilen; i++) {\n    for (j = 0, jlen = input[i].length; j < jlen; j++) {\n      if (j === olen) {\n        output.push([]);\n        olen += 1;\n      }\n\n      output[j].push(input[i][j]);\n    }\n  }\n\n  return output;\n}\n/**\n * Factory that produces a function for searching methods (or any properties) which could be defined directly in\n * table configuration or implicitly, within cell type definition.\n *\n * For example: renderer can be defined explicitly using \"renderer\" property in column configuration or it can be\n * defined implicitly using \"type\" property.\n *\n * Methods/properties defined explicitly always takes precedence over those defined through \"type\".\n *\n * If the method/property is not found in an object, searching is continued recursively through prototype chain, until\n * it reaches the Object.prototype.\n *\n *\n * @param methodName {String} name of the method/property to search (i.e. 'renderer', 'validator', 'copyable')\n * @param allowUndefined {Boolean} [optional] if false, the search is continued if methodName has not been found in cell \"type\"\n * @returns {Function}\n */\n\nexport function cellMethodLookupFactory(methodName, allowUndefined) {\n  var isUndefinedAllowed = typeof allowUndefined === 'undefined' ? true : allowUndefined;\n  return function cellMethodLookup(row, col) {\n    return function getMethodFromProperties(properties) {\n      if (!properties) {\n        return; // method not found\n      } else if (hasOwnProperty(properties, methodName) && properties[methodName] !== void 0) {\n        // check if it is own and is not empty\n        return properties[methodName]; // method defined directly\n      } else if (hasOwnProperty(properties, 'type') && properties.type) {\n        // check if it is own and is not empty\n        if (typeof properties.type !== 'string') {\n          throw new Error('Cell type must be a string ');\n        }\n\n        var type = getCellType(properties.type);\n\n        if (hasOwnProperty(type, methodName)) {\n          return type[methodName]; // method defined in type.\n        } else if (isUndefinedAllowed) {\n          return; // method does not defined in type (eg. validator), returns undefined\n        }\n      }\n\n      return getMethodFromProperties(Object.getPrototypeOf(properties));\n    }(typeof row === 'number' ? this.getCellMeta(row, col) : row);\n  };\n}","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/node_modules/handsontable/es/helpers/data.js"],"names":["getCellType","hasOwnProperty","COLUMN_LABEL_BASE","COLUMN_LABEL_BASE_LENGTH","length","spreadsheetColumnLabel","index","dividend","columnLabel","modulo","String","fromCharCode","parseInt","spreadsheetColumnIndex","label","result","i","j","Math","pow","indexOf","createSpreadsheetData","rows","arguments","undefined","columns","_rows","row","push","createSpreadsheetObjectData","colCount","concat","createEmptySpreadsheetData","data","translateRowsToColumns","input","output","ilen","jlen","olen","cellMethodLookupFactory","methodName","allowUndefined","isUndefinedAllowed","cellMethodLookup","col","getMethodFromProperties","properties","type","Error","Object","getPrototypeOf","getCellMeta"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.object.get-prototype-of\";\nimport { getCellType } from './../cellTypes';\nimport { hasOwnProperty } from './object';\nvar COLUMN_LABEL_BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nvar COLUMN_LABEL_BASE_LENGTH = COLUMN_LABEL_BASE.length;\n/**\n * Generates spreadsheet-like column names: A, B, C, ..., Z, AA, AB, etc.\n *\n * @param {Number} index Column index.\n * @returns {String}\n */\n\nexport function spreadsheetColumnLabel(index) {\n  var dividend = index + 1;\n  var columnLabel = '';\n  var modulo;\n\n  while (dividend > 0) {\n    modulo = (dividend - 1) % COLUMN_LABEL_BASE_LENGTH;\n    columnLabel = String.fromCharCode(65 + modulo) + columnLabel;\n    dividend = parseInt((dividend - modulo) / COLUMN_LABEL_BASE_LENGTH, 10);\n  }\n\n  return columnLabel;\n}\n/**\n * Generates spreadsheet-like column index from theirs labels: A, B, C ...., Z, AA, AB, etc.\n *\n * @param {String} label Column label.\n * @returns {Number}\n */\n\nexport function spreadsheetColumnIndex(label) {\n  var result = 0;\n\n  if (label) {\n    for (var i = 0, j = label.length - 1; i < label.length; i += 1, j -= 1) {\n      result += Math.pow(COLUMN_LABEL_BASE_LENGTH, j) * (COLUMN_LABEL_BASE.indexOf(label[i]) + 1);\n    }\n  }\n\n  result -= 1;\n  return result;\n}\n/**\n * Creates 2D array of Excel-like values \"A1\", \"A2\", ...\n *\n * @param {Number} rows Number of rows to generate.\n * @param {Number} columns Number of columns to generate.\n * @returns {Array}\n */\n\nexport function createSpreadsheetData() {\n  var rows = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n  var columns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  var _rows = [];\n  var i;\n  var j;\n\n  for (i = 0; i < rows; i++) {\n    var row = [];\n\n    for (j = 0; j < columns; j++) {\n      row.push(spreadsheetColumnLabel(j) + (i + 1));\n    }\n\n    _rows.push(row);\n  }\n\n  return _rows;\n}\n/**\n * Creates 2D array of Excel-like values \"A1\", \"A2\", as an array of objects.\n *\n * @param {Number} rows Number of rows to generate.\n * @param {Number} colCount Number of columns to generate.\n * @returns {Array}\n */\n\nexport function createSpreadsheetObjectData() {\n  var rows = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n  var colCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  var _rows = [];\n  var i;\n  var j;\n\n  for (i = 0; i < rows; i++) {\n    var row = {};\n\n    for (j = 0; j < colCount; j++) {\n      row[\"prop\".concat(j)] = spreadsheetColumnLabel(j) + (i + 1);\n    }\n\n    _rows.push(row);\n  }\n\n  return _rows;\n}\n/**\n * Generates an empty data object.\n *\n * @param {Number} rows Number of rows to generate.\n * @param {Number} columns Number of columns to generate\n * @returns {Array}\n */\n\nexport function createEmptySpreadsheetData(rows, columns) {\n  var data = [];\n  var row;\n\n  for (var i = 0; i < rows; i++) {\n    row = [];\n\n    for (var j = 0; j < columns; j++) {\n      row.push('');\n    }\n\n    data.push(row);\n  }\n\n  return data;\n}\nexport function translateRowsToColumns(input) {\n  var output = [];\n  var i;\n  var ilen;\n  var j;\n  var jlen;\n  var olen = 0;\n\n  for (i = 0, ilen = input.length; i < ilen; i++) {\n    for (j = 0, jlen = input[i].length; j < jlen; j++) {\n      if (j === olen) {\n        output.push([]);\n        olen += 1;\n      }\n\n      output[j].push(input[i][j]);\n    }\n  }\n\n  return output;\n}\n/**\n * Factory that produces a function for searching methods (or any properties) which could be defined directly in\n * table configuration or implicitly, within cell type definition.\n *\n * For example: renderer can be defined explicitly using \"renderer\" property in column configuration or it can be\n * defined implicitly using \"type\" property.\n *\n * Methods/properties defined explicitly always takes precedence over those defined through \"type\".\n *\n * If the method/property is not found in an object, searching is continued recursively through prototype chain, until\n * it reaches the Object.prototype.\n *\n *\n * @param methodName {String} name of the method/property to search (i.e. 'renderer', 'validator', 'copyable')\n * @param allowUndefined {Boolean} [optional] if false, the search is continued if methodName has not been found in cell \"type\"\n * @returns {Function}\n */\n\nexport function cellMethodLookupFactory(methodName, allowUndefined) {\n  var isUndefinedAllowed = typeof allowUndefined === 'undefined' ? true : allowUndefined;\n  return function cellMethodLookup(row, col) {\n    return function getMethodFromProperties(properties) {\n      if (!properties) {\n        return; // method not found\n      } else if (hasOwnProperty(properties, methodName) && properties[methodName] !== void 0) {\n        // check if it is own and is not empty\n        return properties[methodName]; // method defined directly\n      } else if (hasOwnProperty(properties, 'type') && properties.type) {\n        // check if it is own and is not empty\n        if (typeof properties.type !== 'string') {\n          throw new Error('Cell type must be a string ');\n        }\n\n        var type = getCellType(properties.type);\n\n        if (hasOwnProperty(type, methodName)) {\n          return type[methodName]; // method defined in type.\n        } else if (isUndefinedAllowed) {\n          return; // method does not defined in type (eg. validator), returns undefined\n        }\n      }\n\n      return getMethodFromProperties(Object.getPrototypeOf(properties));\n    }(typeof row === 'number' ? this.getCellMeta(row, col) : row);\n  };\n}"]},"metadata":{},"sourceType":"module"}