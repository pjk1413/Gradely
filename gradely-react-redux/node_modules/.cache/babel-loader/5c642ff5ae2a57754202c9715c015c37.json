{"ast":null,"code":"/**\n * Day count for December.\n *\n * @type {Number}\n */\nexport var DEC_LENGTH = 31;\n/**\n * Day count for a week.\n *\n * @type {Number}\n */\n\nexport var WEEK_LENGTH = 7;\n/**\n * Generate a mixed month object.\n *\n * @private\n * @param {String} monthName The month name.\n * @param {Number} index Index for the mixed month.\n * @returns {Object} The month object.\n */\n\nexport function getMixedMonthObject(monthName, index) {\n  return {\n    name: monthName,\n    days: WEEK_LENGTH,\n    daysBeforeFullWeeks: 0,\n    daysAfterFullWeeks: 0,\n    fullWeeks: 1,\n    index: index\n  };\n}\n/**\n * Generate the name for a mixed month.\n *\n * @private\n * @param {Number} afterMonthIndex Index of the month after the mixed one.\n * @param {Array} monthList List of the months.\n * @returns {String} Name for the mixed month.\n */\n\nexport function getMixedMonthName(afterMonthIndex, monthList) {\n  var mixedMonthName = null;\n  var afterMonthShorthand = getShorthand(monthList[afterMonthIndex].name);\n  var beforeMonthShorthand = afterMonthIndex > 0 ? getShorthand(monthList[afterMonthIndex - 1].name) : null;\n  var firstMonthShorthand = getShorthand(monthList[0].name);\n  var lastMonthShorthand = getShorthand(monthList[monthList.length - 1].name);\n\n  if (afterMonthIndex > 0) {\n    mixedMonthName = \"\".concat(beforeMonthShorthand, \"/\").concat(afterMonthShorthand);\n  } else if (afterMonthIndex === monthList.length - 1) {\n    mixedMonthName = \"\".concat(afterMonthShorthand, \"/\").concat(firstMonthShorthand);\n  } else {\n    mixedMonthName = \"\".concat(lastMonthShorthand, \"/\").concat(afterMonthShorthand);\n  }\n\n  return mixedMonthName;\n}\n/**\n * Get the three first letters from the provided month name.\n *\n * @private\n * @param {String} monthName The month name.\n * @returns {String} The three-lettered shorthand for the month name.\n */\n\nexport function getShorthand(monthName) {\n  var MONTH_SHORT_LEN = 3;\n  return monthName.substring(0, MONTH_SHORT_LEN);\n}\n/**\n * Get the start date of the provided range bar.\n *\n * @param {Object} rangeBar The range bar object.\n * @returns {Date} The start date.\n */\n\nexport function getStartDate(rangeBar) {\n  return parseDate(Array.isArray(rangeBar) ? rangeBar[1] : rangeBar.startDate);\n}\n/**\n * Get the end date of the provided range bar.\n *\n * @param {Object} rangeBar The range bar object.\n * @returns {Date} The end date.\n */\n\nexport function getEndDate(rangeBar) {\n  return parseDate(Array.isArray(rangeBar) ? rangeBar[2] : rangeBar.endDate);\n}\n/**\n * Get the additional data object of the provided range bar.\n *\n * @param {Object} rangeBar The range bar object.\n * @returns {Object} The additional data object.\n */\n\nexport function getAdditionalData(rangeBar) {\n  return Array.isArray(rangeBar) ? rangeBar[3] : rangeBar.additionalData;\n}\n/**\n * Set the start date of the provided range bar.\n *\n * @param {Object} rangeBar The range bar object.\n * @param {Date} value The new start date value.\n */\n\nexport function setStartDate(rangeBar, value) {\n  if (Array.isArray(rangeBar)) {\n    rangeBar[1] = value;\n  } else {\n    rangeBar.startDate = value;\n  }\n}\n/**\n * Set the end date of the provided range bar.\n *\n * @param {Object} rangeBar The range bar object.\n * @param {Date} value The new end date value.\n */\n\nexport function setEndDate(rangeBar, value) {\n  if (Array.isArray(rangeBar)) {\n    rangeBar[2] = value;\n  } else {\n    rangeBar.endDate = value;\n  }\n}\n/**\n * Parse the provided date and check if it's valid.\n *\n * @param {String|Date} date Date string or object.\n * @returns {Date|null} Parsed Date object or null, if not a valid date string.\n */\n\nexport function parseDate(date) {\n  var newDate = date;\n\n  if (newDate === null) {\n    return null;\n  }\n\n  if (!(newDate instanceof Date)) {\n    newDate = new Date(newDate);\n\n    if (newDate.toString() === 'Invalid Date') {\n      return null;\n    }\n  }\n\n  return newDate;\n}\n/**\n * Get the year of the provided date.\n *\n * @param {Date|String} date Date to get the year from.\n * @returns {Number|null} The year from the provided date.\n */\n\nexport function getDateYear(date) {\n  var newDate = parseDate(date);\n  return newDate ? newDate.getFullYear() : null;\n}","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react/node_modules/handsontable/es/plugins/ganttChart/utils.js"],"names":["DEC_LENGTH","WEEK_LENGTH","getMixedMonthObject","monthName","index","name","days","daysBeforeFullWeeks","daysAfterFullWeeks","fullWeeks","getMixedMonthName","afterMonthIndex","monthList","mixedMonthName","afterMonthShorthand","getShorthand","beforeMonthShorthand","firstMonthShorthand","lastMonthShorthand","length","concat","MONTH_SHORT_LEN","substring","getStartDate","rangeBar","parseDate","Array","isArray","startDate","getEndDate","endDate","getAdditionalData","additionalData","setStartDate","value","setEndDate","date","newDate","Date","toString","getDateYear","getFullYear"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.function.name\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.regexp.to-string\";\n\n/**\n * Day count for December.\n *\n * @type {Number}\n */\nexport var DEC_LENGTH = 31;\n/**\n * Day count for a week.\n *\n * @type {Number}\n */\n\nexport var WEEK_LENGTH = 7;\n/**\n * Generate a mixed month object.\n *\n * @private\n * @param {String} monthName The month name.\n * @param {Number} index Index for the mixed month.\n * @returns {Object} The month object.\n */\n\nexport function getMixedMonthObject(monthName, index) {\n  return {\n    name: monthName,\n    days: WEEK_LENGTH,\n    daysBeforeFullWeeks: 0,\n    daysAfterFullWeeks: 0,\n    fullWeeks: 1,\n    index: index\n  };\n}\n/**\n * Generate the name for a mixed month.\n *\n * @private\n * @param {Number} afterMonthIndex Index of the month after the mixed one.\n * @param {Array} monthList List of the months.\n * @returns {String} Name for the mixed month.\n */\n\nexport function getMixedMonthName(afterMonthIndex, monthList) {\n  var mixedMonthName = null;\n  var afterMonthShorthand = getShorthand(monthList[afterMonthIndex].name);\n  var beforeMonthShorthand = afterMonthIndex > 0 ? getShorthand(monthList[afterMonthIndex - 1].name) : null;\n  var firstMonthShorthand = getShorthand(monthList[0].name);\n  var lastMonthShorthand = getShorthand(monthList[monthList.length - 1].name);\n\n  if (afterMonthIndex > 0) {\n    mixedMonthName = \"\".concat(beforeMonthShorthand, \"/\").concat(afterMonthShorthand);\n  } else if (afterMonthIndex === monthList.length - 1) {\n    mixedMonthName = \"\".concat(afterMonthShorthand, \"/\").concat(firstMonthShorthand);\n  } else {\n    mixedMonthName = \"\".concat(lastMonthShorthand, \"/\").concat(afterMonthShorthand);\n  }\n\n  return mixedMonthName;\n}\n/**\n * Get the three first letters from the provided month name.\n *\n * @private\n * @param {String} monthName The month name.\n * @returns {String} The three-lettered shorthand for the month name.\n */\n\nexport function getShorthand(monthName) {\n  var MONTH_SHORT_LEN = 3;\n  return monthName.substring(0, MONTH_SHORT_LEN);\n}\n/**\n * Get the start date of the provided range bar.\n *\n * @param {Object} rangeBar The range bar object.\n * @returns {Date} The start date.\n */\n\nexport function getStartDate(rangeBar) {\n  return parseDate(Array.isArray(rangeBar) ? rangeBar[1] : rangeBar.startDate);\n}\n/**\n * Get the end date of the provided range bar.\n *\n * @param {Object} rangeBar The range bar object.\n * @returns {Date} The end date.\n */\n\nexport function getEndDate(rangeBar) {\n  return parseDate(Array.isArray(rangeBar) ? rangeBar[2] : rangeBar.endDate);\n}\n/**\n * Get the additional data object of the provided range bar.\n *\n * @param {Object} rangeBar The range bar object.\n * @returns {Object} The additional data object.\n */\n\nexport function getAdditionalData(rangeBar) {\n  return Array.isArray(rangeBar) ? rangeBar[3] : rangeBar.additionalData;\n}\n/**\n * Set the start date of the provided range bar.\n *\n * @param {Object} rangeBar The range bar object.\n * @param {Date} value The new start date value.\n */\n\nexport function setStartDate(rangeBar, value) {\n  if (Array.isArray(rangeBar)) {\n    rangeBar[1] = value;\n  } else {\n    rangeBar.startDate = value;\n  }\n}\n/**\n * Set the end date of the provided range bar.\n *\n * @param {Object} rangeBar The range bar object.\n * @param {Date} value The new end date value.\n */\n\nexport function setEndDate(rangeBar, value) {\n  if (Array.isArray(rangeBar)) {\n    rangeBar[2] = value;\n  } else {\n    rangeBar.endDate = value;\n  }\n}\n/**\n * Parse the provided date and check if it's valid.\n *\n * @param {String|Date} date Date string or object.\n * @returns {Date|null} Parsed Date object or null, if not a valid date string.\n */\n\nexport function parseDate(date) {\n  var newDate = date;\n\n  if (newDate === null) {\n    return null;\n  }\n\n  if (!(newDate instanceof Date)) {\n    newDate = new Date(newDate);\n\n    if (newDate.toString() === 'Invalid Date') {\n      return null;\n    }\n  }\n\n  return newDate;\n}\n/**\n * Get the year of the provided date.\n *\n * @param {Date|String} date Date to get the year from.\n * @returns {Number|null} The year from the provided date.\n */\n\nexport function getDateYear(date) {\n  var newDate = parseDate(date);\n  return newDate ? newDate.getFullYear() : null;\n}"]},"metadata":{},"sourceType":"module"}