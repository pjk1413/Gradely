{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pjk14\\\\Desktop\\\\Gradely\\\\gradely-react-redux\\\\src\\\\components\\\\utility-boxes\\\\gradeEntry\\\\TablePractice.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Handsontable from 'handsontable';\nlet data = [];\nconst hotTable = null;\nlet columnSchema = [];\nconst rowHeaders = this.props.editCourse.students.map(student => {\n  //Creates an object that will be used to organize the data\n  let studentArray = [];\n  student.assignmentScores.forEach(score => {\n    studentArray.push([score.assignmentTempId, score.points]);\n  });\n  const temp = new Map(studentArray);\n  const studentObj = Object.fromEntries(temp);\n  data && data.push(studentObj); //Returns the heading\n\n  return student.id + \": \" + student.user.firstName + \" \" + student.user.lastName;\n}); // ***************************** //\n\nconst colHeaders = this.props.editCourse.assignments.map(assignment => {\n  const colObj = {\n    data: assignment.id\n  };\n  columnSchema.push(colObj);\n  return assignment.name + \" (\" + assignment.totalPoints + \")\";\n});\n\nfunction TablePractice(props) {\n  hotTable = new Handsontable(document.getElementById(\"hot-app\"), {\n    licenseKey: 'non-commercial-and-evaluation',\n    data: data,\n    colHeaders: colHeaders,\n    rowHeaders: rowHeaders,\n    rowHeaderWidth: 150,\n    columns: columnSchema,\n    //rows: rowSchema,\n    //row: rowStudentLabel,\n    // width: \"600\", \n    height: \"600\",\n    headerTooltips: {\n      rows: true,\n      columns: true,\n      onlyTrimmed: false\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"hot-app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  });\n}\n\nconst mapStateToProps = state => ({});\n\nexport default connect(mapStateToProps, {})(TablePractice);","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/src/components/utility-boxes/gradeEntry/TablePractice.js"],"names":["React","connect","Handsontable","data","hotTable","columnSchema","rowHeaders","props","editCourse","students","map","student","studentArray","assignmentScores","forEach","score","push","assignmentTempId","points","temp","Map","studentObj","Object","fromEntries","id","user","firstName","lastName","colHeaders","assignments","assignment","colObj","name","totalPoints","TablePractice","document","getElementById","licenseKey","rowHeaderWidth","columns","height","headerTooltips","rows","onlyTrimmed","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AAEA,IAAIC,IAAI,GAAG,EAAX;AACA,MAAMC,QAAQ,GAAG,IAAjB;AAEA,IAAIC,YAAY,GAAG,EAAnB;AACA,MAAMC,UAAU,GAAG,KAAKC,KAAL,CAAWC,UAAX,CAAsBC,QAAtB,CAA+BC,GAA/B,CAAmCC,OAAO,IAAI;AAE3D;AACA,MAAIC,YAAY,GAAG,EAAnB;AACAD,EAAAA,OAAO,CAACE,gBAAR,CAAyBC,OAAzB,CAAiCC,KAAK,IAAI;AACtCH,IAAAA,YAAY,CAACI,IAAb,CAAkB,CAACD,KAAK,CAACE,gBAAP,EAAyBF,KAAK,CAACG,MAA/B,CAAlB;AACH,GAFD;AAIA,QAAMC,IAAI,GAAG,IAAIC,GAAJ,CAAQR,YAAR,CAAb;AACA,QAAMS,UAAU,GAAGC,MAAM,CAACC,WAAP,CAAmBJ,IAAnB,CAAnB;AAEAhB,EAAAA,IAAI,IAAIA,IAAI,CAACa,IAAL,CAAUK,UAAV,CAAR,CAX2D,CAa3D;;AACA,SAAOV,OAAO,CAACa,EAAR,GAAa,IAAb,GAAoBb,OAAO,CAACc,IAAR,CAAaC,SAAjC,GAA6C,GAA7C,GAAmDf,OAAO,CAACc,IAAR,CAAaE,QAAvE;AACH,CAfgB,CAAnB,C,CAiBE;;AACA,MAAMC,UAAU,GAAG,KAAKrB,KAAL,CAAWC,UAAX,CAAsBqB,WAAtB,CAAkCnB,GAAlC,CAAsCoB,UAAU,IAAI;AACnE,QAAMC,MAAM,GAAG;AAAE5B,IAAAA,IAAI,EAAE2B,UAAU,CAACN;AAAnB,GAAf;AACAnB,EAAAA,YAAY,CAACW,IAAb,CAAkBe,MAAlB;AACA,SAAOD,UAAU,CAACE,IAAX,GAAkB,IAAlB,GAAyBF,UAAU,CAACG,WAApC,GAAkD,GAAzD;AACH,CAJkB,CAAnB;;AAeF,SAASC,aAAT,CAAuB3B,KAAvB,EAA8B;AAC5BH,EAAAA,QAAQ,GAAG,IAAIF,YAAJ,CACTiC,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CADS,EAET;AACIC,IAAAA,UAAU,EAAE,+BADhB;AAEIlC,IAAAA,IAAI,EAAEA,IAFV;AAGIyB,IAAAA,UAAU,EAAEA,UAHhB;AAIItB,IAAAA,UAAU,EAAEA,UAJhB;AAKIgC,IAAAA,cAAc,EAAE,GALpB;AAMIC,IAAAA,OAAO,EAAElC,YANb;AAOI;AACA;AACA;AACAmC,IAAAA,MAAM,EAAE,KAVZ;AAWIC,IAAAA,cAAc,EAAE;AACZC,MAAAA,IAAI,EAAE,IADM;AAEZH,MAAAA,OAAO,EAAE,IAFG;AAGZI,MAAAA,WAAW,EAAE;AAHD;AAXpB,GAFS,CAAX;AAoBA,sBACE;AAAK,IAAA,EAAE,EAAC,SAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAGD;;AAED,MAAMC,eAAe,GAAGC,KAAK,KAAK,EAAL,CAA7B;;AAIA,eAAe5C,OAAO,CAAC2C,eAAD,EAAkB,EAAlB,CAAP,CAA6BV,aAA7B,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Handsontable from 'handsontable';\r\n\r\nlet data = []\r\nconst hotTable = null;\r\n\r\nlet columnSchema = []\r\nconst rowHeaders = this.props.editCourse.students.map(student => {\r\n\r\n      //Creates an object that will be used to organize the data\r\n      let studentArray = []\r\n      student.assignmentScores.forEach(score => {\r\n          studentArray.push([score.assignmentTempId, score.points])\r\n      });\r\n\r\n      const temp = new Map(studentArray)\r\n      const studentObj = Object.fromEntries(temp)\r\n\r\n      data && data.push(studentObj)\r\n\r\n      //Returns the heading\r\n      return student.id + \": \" + student.user.firstName + \" \" + student.user.lastName\r\n  })\r\n\r\n  // ***************************** //\r\n  const colHeaders = this.props.editCourse.assignments.map(assignment => {\r\n      const colObj = { data: assignment.id }\r\n      columnSchema.push(colObj)\r\n      return assignment.name + \" (\" + assignment.totalPoints + \")\"\r\n  })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction TablePractice(props) {\r\n  hotTable = new Handsontable(\r\n    document.getElementById(\"hot-app\"),\r\n    {\r\n        licenseKey: 'non-commercial-and-evaluation',\r\n        data: data,\r\n        colHeaders: colHeaders,\r\n        rowHeaders: rowHeaders,\r\n        rowHeaderWidth: 150,\r\n        columns: columnSchema,\r\n        //rows: rowSchema,\r\n        //row: rowStudentLabel,\r\n        // width: \"600\", \r\n        height: \"600\",\r\n        headerTooltips: {\r\n            rows: true,\r\n            columns: true,\r\n            onlyTrimmed: false\r\n        }\r\n    })\r\n\r\n  return (\r\n    <div id=\"hot-app\" />\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, {})(TablePractice);"]},"metadata":{},"sourceType":"module"}