{"ast":null,"code":"import \"core-js/modules/es.string.replace\";\nimport { empty, fastInnerText } from './../helpers/dom/element';\nimport { stringify } from './../helpers/mixed';\nimport { getRenderer } from './index';\n/**\n * Default text renderer\n *\n * @private\n * @renderer TextRenderer\n * @param {Object} instance Handsontable instance\n * @param {Element} TD Table cell where to render\n * @param {Number} row\n * @param {Number} col\n * @param {String|Number} prop Row object property name\n * @param value Value to render (remember to escape unsafe HTML before inserting to DOM!)\n * @param {Object} cellProperties Cell properties (shared by cell renderer and editor)\n */\n\nfunction textRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  for (var _len = arguments.length, args = new Array(_len > 7 ? _len - 7 : 0), _key = 7; _key < _len; _key++) {\n    args[_key - 7] = arguments[_key];\n  }\n\n  getRenderer('base').apply(this, [instance, TD, row, col, prop, value, cellProperties].concat(args));\n  var escaped = value;\n\n  if (!escaped && cellProperties.placeholder) {\n    escaped = cellProperties.placeholder;\n  }\n\n  escaped = stringify(escaped);\n\n  if (!instance.getSettings().trimWhitespace) {\n    escaped = escaped.replace(/ /g, String.fromCharCode(160));\n  }\n\n  if (cellProperties.rendererTemplate) {\n    empty(TD);\n    var TEMPLATE = instance.rootDocument.createElement('TEMPLATE');\n    TEMPLATE.setAttribute('bind', '{{}}');\n    TEMPLATE.innerHTML = cellProperties.rendererTemplate;\n    HTMLTemplateElement.decorate(TEMPLATE);\n    TEMPLATE.model = instance.getSourceDataAtRow(row);\n    TD.appendChild(TEMPLATE);\n  } else {\n    // this is faster than innerHTML. See: https://github.com/handsontable/handsontable/wiki/JavaScript-&-DOM-performance-tips\n    fastInnerText(TD, escaped);\n  }\n}\n\nexport default textRenderer;","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/node_modules/handsontable/es/renderers/textRenderer.js"],"names":["empty","fastInnerText","stringify","getRenderer","textRenderer","instance","TD","row","col","prop","value","cellProperties","_len","arguments","length","args","Array","_key","apply","concat","escaped","placeholder","getSettings","trimWhitespace","replace","String","fromCharCode","rendererTemplate","TEMPLATE","rootDocument","createElement","setAttribute","innerHTML","HTMLTemplateElement","decorate","model","getSourceDataAtRow","appendChild"],"mappings":"AAEA,OAAO,mCAAP;AACA,SAASA,KAAT,EAAgBC,aAAhB,QAAqC,0BAArC;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA;;;;;;;;;;;;;;AAcA,SAASC,YAAT,CAAsBC,QAAtB,EAAgCC,EAAhC,EAAoCC,GAApC,EAAyCC,GAAzC,EAA8CC,IAA9C,EAAoDC,KAApD,EAA2DC,cAA3D,EAA2E;AACzE,OAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAG,IAAIC,KAAJ,CAAUJ,IAAI,GAAG,CAAP,GAAWA,IAAI,GAAG,CAAlB,GAAsB,CAAhC,CAApC,EAAwEK,IAAI,GAAG,CAApF,EAAuFA,IAAI,GAAGL,IAA9F,EAAoGK,IAAI,EAAxG,EAA4G;AAC1GF,IAAAA,IAAI,CAACE,IAAI,GAAG,CAAR,CAAJ,GAAiBJ,SAAS,CAACI,IAAD,CAA1B;AACD;;AAEDd,EAAAA,WAAW,CAAC,MAAD,CAAX,CAAoBe,KAApB,CAA0B,IAA1B,EAAgC,CAACb,QAAD,EAAWC,EAAX,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,KAA/B,EAAsCC,cAAtC,EAAsDQ,MAAtD,CAA6DJ,IAA7D,CAAhC;AACA,MAAIK,OAAO,GAAGV,KAAd;;AAEA,MAAI,CAACU,OAAD,IAAYT,cAAc,CAACU,WAA/B,EAA4C;AAC1CD,IAAAA,OAAO,GAAGT,cAAc,CAACU,WAAzB;AACD;;AAEDD,EAAAA,OAAO,GAAGlB,SAAS,CAACkB,OAAD,CAAnB;;AAEA,MAAI,CAACf,QAAQ,CAACiB,WAAT,GAAuBC,cAA5B,EAA4C;AAC1CH,IAAAA,OAAO,GAAGA,OAAO,CAACI,OAAR,CAAgB,IAAhB,EAAsBC,MAAM,CAACC,YAAP,CAAoB,GAApB,CAAtB,CAAV;AACD;;AAED,MAAIf,cAAc,CAACgB,gBAAnB,EAAqC;AACnC3B,IAAAA,KAAK,CAACM,EAAD,CAAL;AACA,QAAIsB,QAAQ,GAAGvB,QAAQ,CAACwB,YAAT,CAAsBC,aAAtB,CAAoC,UAApC,CAAf;AACAF,IAAAA,QAAQ,CAACG,YAAT,CAAsB,MAAtB,EAA8B,MAA9B;AACAH,IAAAA,QAAQ,CAACI,SAAT,GAAqBrB,cAAc,CAACgB,gBAApC;AACAM,IAAAA,mBAAmB,CAACC,QAApB,CAA6BN,QAA7B;AACAA,IAAAA,QAAQ,CAACO,KAAT,GAAiB9B,QAAQ,CAAC+B,kBAAT,CAA4B7B,GAA5B,CAAjB;AACAD,IAAAA,EAAE,CAAC+B,WAAH,CAAeT,QAAf;AACD,GARD,MAQO;AACL;AACA3B,IAAAA,aAAa,CAACK,EAAD,EAAKc,OAAL,CAAb;AACD;AACF;;AAED,eAAehB,YAAf","sourcesContent":["import \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.regexp.exec\";\nimport \"core-js/modules/es.string.replace\";\nimport { empty, fastInnerText } from './../helpers/dom/element';\nimport { stringify } from './../helpers/mixed';\nimport { getRenderer } from './index';\n/**\n * Default text renderer\n *\n * @private\n * @renderer TextRenderer\n * @param {Object} instance Handsontable instance\n * @param {Element} TD Table cell where to render\n * @param {Number} row\n * @param {Number} col\n * @param {String|Number} prop Row object property name\n * @param value Value to render (remember to escape unsafe HTML before inserting to DOM!)\n * @param {Object} cellProperties Cell properties (shared by cell renderer and editor)\n */\n\nfunction textRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  for (var _len = arguments.length, args = new Array(_len > 7 ? _len - 7 : 0), _key = 7; _key < _len; _key++) {\n    args[_key - 7] = arguments[_key];\n  }\n\n  getRenderer('base').apply(this, [instance, TD, row, col, prop, value, cellProperties].concat(args));\n  var escaped = value;\n\n  if (!escaped && cellProperties.placeholder) {\n    escaped = cellProperties.placeholder;\n  }\n\n  escaped = stringify(escaped);\n\n  if (!instance.getSettings().trimWhitespace) {\n    escaped = escaped.replace(/ /g, String.fromCharCode(160));\n  }\n\n  if (cellProperties.rendererTemplate) {\n    empty(TD);\n    var TEMPLATE = instance.rootDocument.createElement('TEMPLATE');\n    TEMPLATE.setAttribute('bind', '{{}}');\n    TEMPLATE.innerHTML = cellProperties.rendererTemplate;\n    HTMLTemplateElement.decorate(TEMPLATE);\n    TEMPLATE.model = instance.getSourceDataAtRow(row);\n    TD.appendChild(TEMPLATE);\n  } else {\n    // this is faster than innerHTML. See: https://github.com/handsontable/handsontable/wiki/JavaScript-&-DOM-performance-tips\n    fastInnerText(TD, escaped);\n  }\n}\n\nexport default textRenderer;"]},"metadata":{},"sourceType":"module"}