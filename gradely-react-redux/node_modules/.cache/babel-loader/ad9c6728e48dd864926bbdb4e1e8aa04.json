{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport { arrayEach, arrayMap, arrayFilter } from '../../helpers/array';\nimport { mixin, objectEach } from '../../helpers/object';\nimport { curry } from '../../helpers/function';\nimport localHooks from '../../mixins/localHooks';\nimport ConditionCollection from './conditionCollection';\nimport DataFilter from './dataFilter';\nimport { createArrayAssertion } from './utils';\n/**\n * Class which is designed for observing changes in condition collection. When condition is changed by user at specified\n * column it's necessary to update all conditions defined after this edited one.\n *\n * Object fires `update` hook for every column conditions change.\n *\n * @class ConditionUpdateObserver\n * @plugin Filters\n */\n\nvar ConditionUpdateObserver = /*#__PURE__*/function () {\n  function ConditionUpdateObserver(conditionCollection) {\n    var _this = this;\n\n    var columnDataFactory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {\n      return [];\n    };\n\n    _classCallCheck(this, ConditionUpdateObserver);\n    /**\n     * Reference to the instance of {@link ConditionCollection}.\n     *\n     * @type {ConditionCollection}\n     */\n\n\n    this.conditionCollection = conditionCollection;\n    /**\n     * Function which provide source data factory for specified column.\n     *\n     * @type {Function}\n     */\n\n    this.columnDataFactory = columnDataFactory;\n    /**\n     * Collected changes when grouping is enabled.\n     *\n     * @type {Array}\n     * @default []\n     */\n\n    this.changes = [];\n    /**\n     * Flag which determines if grouping events is enabled.\n     *\n     * @type {Boolean}\n     */\n\n    this.grouping = false;\n    /**\n     * The latest known position of edited conditions at specified column index.\n     *\n     * @type {Number}\n     * @default -1\n     */\n\n    this.latestEditedColumnPosition = -1;\n    /**\n     * The latest known order of conditions stack.\n     *\n     * @type {Array}\n     */\n\n    this.latestOrderStack = [];\n    this.conditionCollection.addLocalHook('beforeRemove', function (column) {\n      return _this._onConditionBeforeModify(column);\n    });\n    this.conditionCollection.addLocalHook('afterAdd', function (column) {\n      return _this.updateStatesAtColumn(column);\n    });\n    this.conditionCollection.addLocalHook('afterClear', function (column) {\n      return _this.updateStatesAtColumn(column);\n    });\n    this.conditionCollection.addLocalHook('beforeClean', function () {\n      return _this._onConditionBeforeClean();\n    });\n    this.conditionCollection.addLocalHook('afterClean', function () {\n      return _this._onConditionAfterClean();\n    });\n  }\n  /**\n   * Enable grouping changes. Grouping is helpful in situations when a lot of conditions is added in one moment. Instead of\n   * trigger `update` hook for every condition by adding/removing you can group this changes and call `flush` method to trigger\n   * it once.\n   */\n\n\n  _createClass(ConditionUpdateObserver, [{\n    key: \"groupChanges\",\n    value: function groupChanges() {\n      this.grouping = true;\n    }\n    /**\n     * Flush all collected changes. This trigger `update` hook for every previously collected change from condition collection.\n     */\n\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      var _this2 = this;\n\n      this.grouping = false;\n      arrayEach(this.changes, function (column) {\n        _this2.updateStatesAtColumn(column);\n      });\n      this.changes.length = 0;\n    }\n    /**\n     * On before modify condition (add or remove from collection),\n     *\n     * @param {Number} column Column index.\n     * @private\n     */\n\n  }, {\n    key: \"_onConditionBeforeModify\",\n    value: function _onConditionBeforeModify(column) {\n      this.latestEditedColumnPosition = this.conditionCollection.orderStack.indexOf(column);\n    }\n    /**\n     * Update all related states which should be changed after invoking changes applied to current column.\n     *\n     * @param column\n     * @param {Object} conditionArgsChange Object describing condition changes which can be handled by filters on `update` hook.\n     * It contains keys `conditionKey` and `conditionValue` which refers to change specified key of condition to specified value\n     * based on referred keys.\n     */\n\n  }, {\n    key: \"updateStatesAtColumn\",\n    value: function updateStatesAtColumn(column, conditionArgsChange) {\n      var _this3 = this;\n\n      if (this.grouping) {\n        if (this.changes.indexOf(column) === -1) {\n          this.changes.push(column);\n        }\n\n        return;\n      }\n\n      var allConditions = this.conditionCollection.exportAllConditions();\n      var editedColumnPosition = this.conditionCollection.orderStack.indexOf(column);\n\n      if (editedColumnPosition === -1) {\n        editedColumnPosition = this.latestEditedColumnPosition;\n      } // Collection of all conditions defined before currently edited `column` (without edited one)\n\n\n      var conditionsBefore = allConditions.slice(0, editedColumnPosition); // Collection of all conditions defined after currently edited `column` (without edited one)\n\n      var conditionsAfter = allConditions.slice(editedColumnPosition); // Make sure that conditionAfter doesn't contain edited column conditions\n\n      if (conditionsAfter.length && conditionsAfter[0].column === column) {\n        conditionsAfter.shift();\n      }\n\n      var visibleDataFactory = curry(function (curriedConditionsBefore, curriedColumn) {\n        var conditionsStack = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n        var splitConditionCollection = new ConditionCollection();\n        var curriedConditionsBeforeArray = [].concat(curriedConditionsBefore, conditionsStack); // Create new condition collection to determine what rows should be visible in \"filter by value\" box in the next conditions in the chain\n\n        splitConditionCollection.importAllConditions(curriedConditionsBeforeArray);\n\n        var allRows = _this3.columnDataFactory(curriedColumn);\n\n        var visibleRows;\n\n        if (splitConditionCollection.isEmpty()) {\n          visibleRows = allRows;\n        } else {\n          visibleRows = new DataFilter(splitConditionCollection, function (columnData) {\n            return _this3.columnDataFactory(columnData);\n          }).filter();\n        }\n\n        visibleRows = arrayMap(visibleRows, function (rowData) {\n          return rowData.meta.visualRow;\n        });\n        var visibleRowsAssertion = createArrayAssertion(visibleRows);\n        return arrayFilter(allRows, function (rowData) {\n          return visibleRowsAssertion(rowData.meta.visualRow);\n        });\n      })(conditionsBefore);\n      var editedConditions = [].concat(this.conditionCollection.getConditions(column));\n      this.runLocalHooks('update', {\n        editedConditionStack: {\n          column: column,\n          conditions: editedConditions\n        },\n        dependentConditionStacks: conditionsAfter,\n        filteredRowsFactory: visibleDataFactory,\n        conditionArgsChange: conditionArgsChange\n      });\n    }\n    /**\n     * On before conditions clean listener.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_onConditionBeforeClean\",\n    value: function _onConditionBeforeClean() {\n      this.latestOrderStack = [].concat(this.conditionCollection.orderStack);\n    }\n    /**\n     * On after conditions clean listener.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_onConditionAfterClean\",\n    value: function _onConditionAfterClean() {\n      var _this4 = this;\n\n      arrayEach(this.latestOrderStack, function (column) {\n        _this4.updateStatesAtColumn(column);\n      });\n    }\n    /**\n     * Destroy instance.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this5 = this;\n\n      this.clearLocalHooks();\n      objectEach(this, function (value, property) {\n        _this5[property] = null;\n      });\n    }\n  }]);\n\n  return ConditionUpdateObserver;\n}();\n\nmixin(ConditionUpdateObserver, localHooks);\nexport default ConditionUpdateObserver;","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react/node_modules/handsontable/es/plugins/filters/conditionUpdateObserver.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","arrayEach","arrayMap","arrayFilter","mixin","objectEach","curry","localHooks","ConditionCollection","DataFilter","createArrayAssertion","ConditionUpdateObserver","conditionCollection","_this","columnDataFactory","arguments","undefined","changes","grouping","latestEditedColumnPosition","latestOrderStack","addLocalHook","column","_onConditionBeforeModify","updateStatesAtColumn","_onConditionBeforeClean","_onConditionAfterClean","value","groupChanges","flush","_this2","orderStack","indexOf","conditionArgsChange","_this3","push","allConditions","exportAllConditions","editedColumnPosition","conditionsBefore","slice","conditionsAfter","shift","visibleDataFactory","curriedConditionsBefore","curriedColumn","conditionsStack","splitConditionCollection","curriedConditionsBeforeArray","concat","importAllConditions","allRows","visibleRows","isEmpty","columnData","filter","rowData","meta","visualRow","visibleRowsAssertion","editedConditions","getConditions","runLocalHooks","editedConditionStack","conditions","dependentConditionStacks","filteredRowsFactory","_this4","destroy","_this5","clearLocalHooks","property"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.array.filter\";\nimport \"core-js/modules/es.array.index-of\";\nimport \"core-js/modules/es.array.slice\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { arrayEach, arrayMap, arrayFilter } from '../../helpers/array';\nimport { mixin, objectEach } from '../../helpers/object';\nimport { curry } from '../../helpers/function';\nimport localHooks from '../../mixins/localHooks';\nimport ConditionCollection from './conditionCollection';\nimport DataFilter from './dataFilter';\nimport { createArrayAssertion } from './utils';\n/**\n * Class which is designed for observing changes in condition collection. When condition is changed by user at specified\n * column it's necessary to update all conditions defined after this edited one.\n *\n * Object fires `update` hook for every column conditions change.\n *\n * @class ConditionUpdateObserver\n * @plugin Filters\n */\n\nvar ConditionUpdateObserver =\n/*#__PURE__*/\nfunction () {\n  function ConditionUpdateObserver(conditionCollection) {\n    var _this = this;\n\n    var columnDataFactory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {\n      return [];\n    };\n\n    _classCallCheck(this, ConditionUpdateObserver);\n\n    /**\n     * Reference to the instance of {@link ConditionCollection}.\n     *\n     * @type {ConditionCollection}\n     */\n    this.conditionCollection = conditionCollection;\n    /**\n     * Function which provide source data factory for specified column.\n     *\n     * @type {Function}\n     */\n\n    this.columnDataFactory = columnDataFactory;\n    /**\n     * Collected changes when grouping is enabled.\n     *\n     * @type {Array}\n     * @default []\n     */\n\n    this.changes = [];\n    /**\n     * Flag which determines if grouping events is enabled.\n     *\n     * @type {Boolean}\n     */\n\n    this.grouping = false;\n    /**\n     * The latest known position of edited conditions at specified column index.\n     *\n     * @type {Number}\n     * @default -1\n     */\n\n    this.latestEditedColumnPosition = -1;\n    /**\n     * The latest known order of conditions stack.\n     *\n     * @type {Array}\n     */\n\n    this.latestOrderStack = [];\n    this.conditionCollection.addLocalHook('beforeRemove', function (column) {\n      return _this._onConditionBeforeModify(column);\n    });\n    this.conditionCollection.addLocalHook('afterAdd', function (column) {\n      return _this.updateStatesAtColumn(column);\n    });\n    this.conditionCollection.addLocalHook('afterClear', function (column) {\n      return _this.updateStatesAtColumn(column);\n    });\n    this.conditionCollection.addLocalHook('beforeClean', function () {\n      return _this._onConditionBeforeClean();\n    });\n    this.conditionCollection.addLocalHook('afterClean', function () {\n      return _this._onConditionAfterClean();\n    });\n  }\n  /**\n   * Enable grouping changes. Grouping is helpful in situations when a lot of conditions is added in one moment. Instead of\n   * trigger `update` hook for every condition by adding/removing you can group this changes and call `flush` method to trigger\n   * it once.\n   */\n\n\n  _createClass(ConditionUpdateObserver, [{\n    key: \"groupChanges\",\n    value: function groupChanges() {\n      this.grouping = true;\n    }\n    /**\n     * Flush all collected changes. This trigger `update` hook for every previously collected change from condition collection.\n     */\n\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      var _this2 = this;\n\n      this.grouping = false;\n      arrayEach(this.changes, function (column) {\n        _this2.updateStatesAtColumn(column);\n      });\n      this.changes.length = 0;\n    }\n    /**\n     * On before modify condition (add or remove from collection),\n     *\n     * @param {Number} column Column index.\n     * @private\n     */\n\n  }, {\n    key: \"_onConditionBeforeModify\",\n    value: function _onConditionBeforeModify(column) {\n      this.latestEditedColumnPosition = this.conditionCollection.orderStack.indexOf(column);\n    }\n    /**\n     * Update all related states which should be changed after invoking changes applied to current column.\n     *\n     * @param column\n     * @param {Object} conditionArgsChange Object describing condition changes which can be handled by filters on `update` hook.\n     * It contains keys `conditionKey` and `conditionValue` which refers to change specified key of condition to specified value\n     * based on referred keys.\n     */\n\n  }, {\n    key: \"updateStatesAtColumn\",\n    value: function updateStatesAtColumn(column, conditionArgsChange) {\n      var _this3 = this;\n\n      if (this.grouping) {\n        if (this.changes.indexOf(column) === -1) {\n          this.changes.push(column);\n        }\n\n        return;\n      }\n\n      var allConditions = this.conditionCollection.exportAllConditions();\n      var editedColumnPosition = this.conditionCollection.orderStack.indexOf(column);\n\n      if (editedColumnPosition === -1) {\n        editedColumnPosition = this.latestEditedColumnPosition;\n      } // Collection of all conditions defined before currently edited `column` (without edited one)\n\n\n      var conditionsBefore = allConditions.slice(0, editedColumnPosition); // Collection of all conditions defined after currently edited `column` (without edited one)\n\n      var conditionsAfter = allConditions.slice(editedColumnPosition); // Make sure that conditionAfter doesn't contain edited column conditions\n\n      if (conditionsAfter.length && conditionsAfter[0].column === column) {\n        conditionsAfter.shift();\n      }\n\n      var visibleDataFactory = curry(function (curriedConditionsBefore, curriedColumn) {\n        var conditionsStack = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n        var splitConditionCollection = new ConditionCollection();\n        var curriedConditionsBeforeArray = [].concat(curriedConditionsBefore, conditionsStack); // Create new condition collection to determine what rows should be visible in \"filter by value\" box in the next conditions in the chain\n\n        splitConditionCollection.importAllConditions(curriedConditionsBeforeArray);\n\n        var allRows = _this3.columnDataFactory(curriedColumn);\n\n        var visibleRows;\n\n        if (splitConditionCollection.isEmpty()) {\n          visibleRows = allRows;\n        } else {\n          visibleRows = new DataFilter(splitConditionCollection, function (columnData) {\n            return _this3.columnDataFactory(columnData);\n          }).filter();\n        }\n\n        visibleRows = arrayMap(visibleRows, function (rowData) {\n          return rowData.meta.visualRow;\n        });\n        var visibleRowsAssertion = createArrayAssertion(visibleRows);\n        return arrayFilter(allRows, function (rowData) {\n          return visibleRowsAssertion(rowData.meta.visualRow);\n        });\n      })(conditionsBefore);\n      var editedConditions = [].concat(this.conditionCollection.getConditions(column));\n      this.runLocalHooks('update', {\n        editedConditionStack: {\n          column: column,\n          conditions: editedConditions\n        },\n        dependentConditionStacks: conditionsAfter,\n        filteredRowsFactory: visibleDataFactory,\n        conditionArgsChange: conditionArgsChange\n      });\n    }\n    /**\n     * On before conditions clean listener.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_onConditionBeforeClean\",\n    value: function _onConditionBeforeClean() {\n      this.latestOrderStack = [].concat(this.conditionCollection.orderStack);\n    }\n    /**\n     * On after conditions clean listener.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_onConditionAfterClean\",\n    value: function _onConditionAfterClean() {\n      var _this4 = this;\n\n      arrayEach(this.latestOrderStack, function (column) {\n        _this4.updateStatesAtColumn(column);\n      });\n    }\n    /**\n     * Destroy instance.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this5 = this;\n\n      this.clearLocalHooks();\n      objectEach(this, function (value, property) {\n        _this5[property] = null;\n      });\n    }\n  }]);\n\n  return ConditionUpdateObserver;\n}();\n\nmixin(ConditionUpdateObserver, localHooks);\nexport default ConditionUpdateObserver;"]},"metadata":{},"sourceType":"module"}