{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport { arrayEach } from '../../helpers/array';\nimport { objectEach } from '../../helpers/object';\nimport { warn } from '../../helpers/console';\nimport { getMixedMonthObject, getMixedMonthName, parseDate, DEC_LENGTH, WEEK_LENGTH } from './utils';\n/**\n * This class handles the date-related calculations for the GanttChart plugin.\n *\n * @plugin GanttChart\n */\n\nvar DateCalculator = /*#__PURE__*/function () {\n  function DateCalculator(_ref) {\n    var year = _ref.year,\n        _ref$allowSplitWeeks = _ref.allowSplitWeeks,\n        allowSplitWeeks = _ref$allowSplitWeeks === void 0 ? true : _ref$allowSplitWeeks,\n        _ref$hideDaysBeforeFu = _ref.hideDaysBeforeFullWeeks,\n        hideDaysBeforeFullWeeks = _ref$hideDaysBeforeFu === void 0 ? false : _ref$hideDaysBeforeFu,\n        _ref$hideDaysAfterFul = _ref.hideDaysAfterFullWeeks,\n        hideDaysAfterFullWeeks = _ref$hideDaysAfterFul === void 0 ? false : _ref$hideDaysAfterFul;\n\n    _classCallCheck(this, DateCalculator);\n    /**\n     * Year to base calculations on.\n     *\n     * @type {Number}\n     */\n\n\n    this.year = year;\n    /**\n     * First day of the week.\n     *\n     * @type {String}\n     */\n\n    this.firstWeekDay = 'monday';\n    /**\n     * The current `allowSplitWeeks` option state.\n     */\n\n    this.allowSplitWeeks = allowSplitWeeks;\n    /**\n     * The current `hideDaysBeforeFullWeeks` option state.\n     */\n\n    this.hideDaysBeforeFullWeeks = hideDaysBeforeFullWeeks;\n    /**\n     * The current `hideDaysAfterFullWeeks` option state.\n     */\n\n    this.hideDaysAfterFullWeeks = hideDaysAfterFullWeeks;\n    /**\n     * Number of week sections (full weeks + incomplete week blocks in months).\n     *\n     * @type {Number}\n     */\n\n    this.weekSectionCount = 0;\n    /**\n     * Cache of lists of months and their week/day related information.\n     * It's categorized by year, so month information for a certain year is stored under `this.monthListCache[year]`.\n     *\n     * @type {Object}\n     */\n\n    this.monthListCache = {};\n    /**\n     * Object containing references to the year days and their corresponding columns.\n     *\n     * @type {Object}\n     */\n\n    this.daysInColumns = {};\n    this.calculateWeekStructure();\n  }\n  /**\n   * Set the year as a base for calculations.\n   *\n   * @param {Number} year\n   */\n\n\n  _createClass(DateCalculator, [{\n    key: \"setYear\",\n    value: function setYear(year) {\n      this.year = year;\n      this.monthListCache[year] = this.calculateMonthData(year);\n      this.calculateWeekStructure(year);\n    }\n    /**\n     * Set the first week day.\n     *\n     * @param {String} day Day of the week. Available options: 'monday' or 'sunday'.\n     */\n\n  }, {\n    key: \"setFirstWeekDay\",\n    value: function setFirstWeekDay(day) {\n      var lowercaseDay = day.toLowerCase();\n\n      if (lowercaseDay !== 'monday' && lowercaseDay !== 'sunday') {\n        warn('First day of the week must be set to either Monday or Sunday');\n      }\n\n      this.firstWeekDay = lowercaseDay;\n      this.calculateWeekStructure();\n    }\n    /**\n     * Count week sections (full weeks + incomplete weeks in the months).\n     *\n     * @returns {Number} Week section count.\n     */\n\n  }, {\n    key: \"countWeekSections\",\n    value: function countWeekSections() {\n      return this.weekSectionCount;\n    }\n    /**\n     * Get the first week day.\n     *\n     * @returns {String}\n     */\n\n  }, {\n    key: \"getFirstWeekDay\",\n    value: function getFirstWeekDay() {\n      return this.firstWeekDay;\n    }\n    /**\n     * Get the currently applied year.\n     *\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"getYear\",\n    value: function getYear() {\n      return this.year;\n    }\n    /**\n     * Get month list along with the month information.\n     *\n     * @param {Number} [year] Year for the calculation.\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getMonthList\",\n    value: function getMonthList() {\n      var year = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.year;\n\n      if (!this.monthListCache[year]) {\n        this.monthListCache[year] = this.calculateMonthData(year);\n      }\n\n      return this.monthListCache[year];\n    }\n    /**\n     * Get month lists for all years declared in the range bars.\n     *\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"getFullMonthList\",\n    value: function getFullMonthList() {\n      return this.monthListCache;\n    }\n    /**\n     * Convert a date to a column number.\n     *\n     * @param {String|Date} date\n     * @returns {Number|Boolean}\n     */\n\n  }, {\n    key: \"dateToColumn\",\n    value: function dateToColumn(date) {\n      var convertedDate = parseDate(date);\n\n      if (!convertedDate) {\n        return false;\n      }\n\n      var month = convertedDate.getMonth();\n      var day = convertedDate.getDate() - 1;\n      var year = convertedDate.getFullYear();\n      return this.getWeekColumn(day, month, year);\n    }\n    /**\n     * Get the column index for the provided day and month indexes.\n     *\n     * @private\n     * @param {Number} dayIndex The index of the day.\n     * @param {Number} monthIndex The index of the month.\n     * @param {Number} [year] Year for the calculation.\n     * @returns {Number} Returns the column index.\n     */\n\n  }, {\n    key: \"getWeekColumn\",\n    value: function getWeekColumn(dayIndex, monthIndex) {\n      var year = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.getYear();\n      var resultColumn = null;\n      var monthCacheArray = this.getMonthCacheArray(monthIndex, year);\n      arrayEach(monthCacheArray, function (monthCache) {\n        objectEach(monthCache, function (column, index) {\n          if (column.indexOf(dayIndex + 1) > -1) {\n            resultColumn = parseInt(index, 10);\n            return false;\n          }\n        });\n\n        if (resultColumn) {\n          return false;\n        }\n      });\n      return resultColumn;\n    }\n    /**\n     * Get the cached day array for the provided month.\n     *\n     * @private\n     * @param {Number} monthIndex Index of the Month.\n     * @param {Number} [year] Year for the calculation.\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getMonthCacheArray\",\n    value: function getMonthCacheArray(monthIndex) {\n      var _this = this;\n\n      var year = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getYear();\n      var monthList = this.getMonthList(year);\n      var resultArray = [];\n\n      if (this.allowSplitWeeks) {\n        resultArray.push(this.daysInColumns[year][monthIndex]);\n      } else {\n        var fullMonthCount = -1;\n        objectEach(this.daysInColumns[year], function (month, i) {\n          var monthObject = monthList[i];\n\n          if (Object.keys(month).length > 1) {\n            fullMonthCount += 1;\n          }\n\n          if (fullMonthCount === monthIndex) {\n            if (monthObject.daysBeforeFullWeeks > 0) {\n              resultArray.push(_this.daysInColumns[year][parseInt(i, 10) - 1]);\n            }\n\n            resultArray.push(month);\n\n            if (monthObject.daysAfterFullWeeks > 0) {\n              resultArray.push(_this.daysInColumns[year][parseInt(i, 10) + 1]);\n            }\n\n            return false;\n          }\n        });\n      }\n\n      return resultArray;\n    }\n    /**\n     * Convert a column index to a certain date.\n     *\n     * @param {Number} column Column index.\n     * @param {Number} [year] Year to be used.\n     * @returns {Object} Object in a form of {start: startDate, end: endDate}\n     */\n\n  }, {\n    key: \"columnToDate\",\n    value: function columnToDate(column) {\n      var year = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getYear();\n      var month = null;\n      objectEach(this.daysInColumns[year], function (monthCache, index) {\n        if (monthCache[column]) {\n          month = index;\n          return false;\n        }\n      });\n      var monthSection = this.daysInColumns[year][month][column];\n\n      if (monthSection.length === 1) {\n        var resultingDate = new Date(year, month, monthSection[0]);\n        return {\n          start: resultingDate,\n          end: resultingDate\n        };\n      }\n\n      return {\n        start: new Date(year, month, monthSection[0]),\n        end: new Date(year, month, monthSection[monthSection.length - 1])\n      };\n    }\n    /**\n     * Check if the provided date is a starting or an ending day of a week.\n     *\n     * @private\n     * @param {Date|String} date\n     * @returns {Array|Boolean} Returns null, if an invalid date was provided or an array of results ( [1,0] => is on the beginning of the week, [0,1] => is on the end of the week).\n     */\n\n  }, {\n    key: \"isOnTheEdgeOfWeek\",\n    value: function isOnTheEdgeOfWeek(date) {\n      var _this2 = this;\n\n      var convertedDate = parseDate(date);\n\n      if (!convertedDate) {\n        return null;\n      }\n\n      var month = convertedDate.getMonth();\n      var day = convertedDate.getDate() - 1;\n      var year = convertedDate.getFullYear();\n      var monthCacheArray = this.getMonthCacheArray(month, year);\n      var isOnTheEdgeOfWeek = false;\n      arrayEach(monthCacheArray, function (monthCache) {\n        objectEach(monthCache, function (column) {\n          if (!_this2.allowSplitWeeks && column.length !== 7) {\n            if (day === 0 || day === new Date(convertedDate.getYear(), convertedDate.getMonth() + 1, 0).getDate() - 1) {\n              return true;\n            }\n          }\n\n          var indexOfDay = column.indexOf(day + 1);\n\n          if (indexOfDay === 0) {\n            isOnTheEdgeOfWeek = [1, 0];\n            return false;\n          } else if (indexOfDay === column.length - 1) {\n            isOnTheEdgeOfWeek = [0, 1];\n            return false;\n          }\n        }); // break the iteration\n\n        if (isOnTheEdgeOfWeek) {\n          return false;\n        }\n      });\n      return isOnTheEdgeOfWeek;\n    }\n    /**\n     * Generate headers for the year structure.\n     *\n     * @private\n     * @param {String} type Granulation type ('months'/'weeks'/'days')\n     * @param {Function|null} weekHeaderGenerator Function generating the looks of the week headers.\n     * @param {Number} [year=this.year] The year for the calculation.\n     * @returns {Array} The header array\n     */\n\n  }, {\n    key: \"generateHeaderSet\",\n    value: function generateHeaderSet(type, weekHeaderGenerator) {\n      var _this3 = this;\n\n      var year = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.year;\n      var monthList = this.getMonthList(year);\n      var headers = [];\n      objectEach(monthList, function (month, index) {\n        var areDaysBeforeFullWeeks = month.daysBeforeFullWeeks > 0 ? 1 : 0;\n        var areDaysAfterFullWeeks = month.daysAfterFullWeeks > 0 ? 1 : 0;\n        var areDaysBeforeFullWeeksVisible = _this3.hideDaysBeforeFullWeeks ? 0 : areDaysBeforeFullWeeks;\n        var areDaysAfterFullWeeksVisible = _this3.hideDaysAfterFullWeeks ? 0 : areDaysAfterFullWeeks;\n        var headerCount = month.fullWeeks + (_this3.allowSplitWeeks ? areDaysBeforeFullWeeksVisible + areDaysAfterFullWeeksVisible : 0);\n        var monthNumber = parseInt(index, 10);\n        var headerLabel = '';\n\n        if (type === 'months') {\n          headers.push({\n            label: month.name,\n            colspan: headerCount\n          });\n        } else if (type === 'weeks') {\n          for (var i = 0; i < headerCount; i++) {\n            var start = null;\n            var end = null; // Mixed month's only column\n\n            if (!_this3.allowSplitWeeks && month.fullWeeks === 1) {\n              var _this3$getWeekColumnR = _this3.getWeekColumnRange({\n                monthObject: month,\n                monthNumber: monthNumber,\n                headerIndex: i,\n                headerCount: headerCount,\n                areDaysBeforeFullWeeksVisible: areDaysBeforeFullWeeksVisible,\n                areDaysAfterFullWeeksVisible: areDaysAfterFullWeeksVisible,\n                mixedMonth: true,\n                year: year\n              });\n\n              var _this3$getWeekColumnR2 = _slicedToArray(_this3$getWeekColumnR, 2);\n\n              start = _this3$getWeekColumnR2[0];\n              end = _this3$getWeekColumnR2[1];\n            } else {\n              var _this3$getWeekColumnR3 = _this3.getWeekColumnRange({\n                monthObject: month,\n                monthNumber: monthNumber,\n                headerIndex: i,\n                areDaysBeforeFullWeeksVisible: areDaysBeforeFullWeeksVisible,\n                areDaysAfterFullWeeksVisible: areDaysAfterFullWeeksVisible,\n                headerCount: headerCount,\n                year: year\n              });\n\n              var _this3$getWeekColumnR4 = _slicedToArray(_this3$getWeekColumnR3, 2);\n\n              start = _this3$getWeekColumnR4[0];\n              end = _this3$getWeekColumnR4[1];\n            }\n\n            if (start === end) {\n              headerLabel = \"\".concat(start);\n            } else {\n              headerLabel = \"\".concat(start, \" -  \").concat(end);\n            }\n\n            headers.push(weekHeaderGenerator ? weekHeaderGenerator.call(_this3, start, end) : headerLabel);\n\n            _this3.addDaysToCache(monthNumber, headers.length - 1, start, end, year);\n          }\n        }\n      });\n      return headers;\n    }\n    /**\n     * Get the week column range.\n     *\n     * @private\n     * @param {Object} options The options object.\n     * @param {Object} options.monthObject The month object.\n     * @param {Number} options.monthNumber Index of the month.\n     * @param {Number} options.headerIndex Index of the header.\n     * @param {Boolean} options.areDaysBeforeFullWeeksVisible `true` if the days before full weeks are to be visible.\n     * @param {Boolean} options.areDaysAfterFullWeeksVisible `true` if the days after full weeks are to be visible.\n     * @param {Number} options.headerCount Number of headers to be generated for the provided month.\n     * @param {Boolean} [options.mixedMonth=false] `true` if the header is the single header of a mixed month.\n     * @param {Number} [year] Year for the calculation.\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getWeekColumnRange\",\n    value: function getWeekColumnRange(_ref2) {\n      var monthObject = _ref2.monthObject,\n          monthNumber = _ref2.monthNumber,\n          headerIndex = _ref2.headerIndex,\n          headerCount = _ref2.headerCount,\n          areDaysBeforeFullWeeksVisible = _ref2.areDaysBeforeFullWeeksVisible,\n          areDaysAfterFullWeeksVisible = _ref2.areDaysAfterFullWeeksVisible,\n          _ref2$mixedMonth = _ref2.mixedMonth,\n          mixedMonth = _ref2$mixedMonth === void 0 ? false : _ref2$mixedMonth,\n          _ref2$year = _ref2.year,\n          year = _ref2$year === void 0 ? this.year : _ref2$year;\n      var monthList = this.getMonthList(year);\n      var allowSplitWeeks = this.allowSplitWeeks;\n      var start = null;\n      var end = null;\n\n      if (mixedMonth) {\n        if (monthNumber === 0) {\n          end = monthList[monthNumber + 1].daysBeforeFullWeeks;\n          start = DEC_LENGTH - (WEEK_LENGTH - end) + 1;\n        } else if (monthNumber === monthList.length - 1) {\n          end = WEEK_LENGTH - monthList[monthNumber - 1].daysAfterFullWeeks;\n          start = monthList[monthNumber - 1].days - monthList[monthNumber - 1].daysAfterFullWeeks + 1;\n        } else {\n          end = monthList[monthNumber + 1].daysBeforeFullWeeks;\n          start = monthList[monthNumber - 1].days - (WEEK_LENGTH - end) + 1;\n        }\n      } else if (allowSplitWeeks && areDaysBeforeFullWeeksVisible && headerIndex === 0) {\n        start = headerIndex + 1;\n        end = monthObject.daysBeforeFullWeeks;\n      } else if (allowSplitWeeks && areDaysAfterFullWeeksVisible && headerIndex === headerCount - 1) {\n        start = monthObject.days - monthObject.daysAfterFullWeeks + 1;\n        end = monthObject.days;\n      } else {\n        start = null;\n\n        if (allowSplitWeeks) {\n          start = monthObject.daysBeforeFullWeeks + (headerIndex - areDaysBeforeFullWeeksVisible) * WEEK_LENGTH + 1;\n        } else {\n          start = monthObject.daysBeforeFullWeeks + headerIndex * WEEK_LENGTH + 1;\n        }\n\n        end = start + WEEK_LENGTH - 1;\n      }\n\n      return [start, end];\n    }\n    /**\n     * Add days to the column/day cache.\n     *\n     * @private\n     * @param {Number} monthNumber Index of the month.\n     * @param {Number} columnNumber Index of the column.\n     * @param {Number} start First day in the column.\n     * @param {Number} end Last day in the column.\n     * @param {Number} [year] Year to process.\n     */\n\n  }, {\n    key: \"addDaysToCache\",\n    value: function addDaysToCache(monthNumber, columnNumber, start, end) {\n      var year = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.getYear();\n\n      if (!this.daysInColumns[year]) {\n        this.daysInColumns[year] = {};\n      }\n\n      if (!this.daysInColumns[year][monthNumber]) {\n        this.daysInColumns[year][monthNumber] = {};\n      }\n\n      if (!this.daysInColumns[year][monthNumber][columnNumber]) {\n        this.daysInColumns[year][monthNumber][columnNumber] = [];\n      }\n\n      if (start <= end) {\n        for (var dayIndex = start; dayIndex <= end; dayIndex++) {\n          this.daysInColumns[year][monthNumber][columnNumber].push(dayIndex);\n        }\n      } else {\n        var previousMonthDaysCount = monthNumber - 1 >= 0 ? this.countMonthDays(monthNumber) : 31;\n\n        for (var _dayIndex = start; _dayIndex <= previousMonthDaysCount; _dayIndex++) {\n          this.daysInColumns[year][monthNumber][columnNumber].push(_dayIndex);\n        }\n\n        for (var _dayIndex2 = 1; _dayIndex2 <= end; _dayIndex2++) {\n          this.daysInColumns[year][monthNumber][columnNumber].push(_dayIndex2);\n        }\n      }\n    }\n    /**\n     * Check if the provided dates can be used in a range bar.\n     *\n     * @param {Date|String} startDate Range start date.\n     * @param {Date|String} endDate Range end date.\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isValidRangeBarData\",\n    value: function isValidRangeBarData(startDate, endDate) {\n      var startDateParsed = parseDate(startDate);\n      var endDateParsed = parseDate(endDate);\n      return startDateParsed && endDateParsed && startDateParsed.getTime() <= endDateParsed.getTime();\n    }\n    /**\n     * Calculate the month/day related information.\n     *\n     * @param {Number} [year] Year to be used.\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"calculateMonthData\",\n    value: function calculateMonthData() {\n      var year = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.year;\n      return [{\n        name: 'January',\n        days: 31\n      }, {\n        name: 'February',\n        days: new Date(year, 2, 0).getDate()\n      }, {\n        name: 'March',\n        days: 31\n      }, {\n        name: 'April',\n        days: 30\n      }, {\n        name: 'May',\n        days: 31\n      }, {\n        name: 'June',\n        days: 30\n      }, {\n        name: 'July',\n        days: 31\n      }, {\n        name: 'August',\n        days: 31\n      }, {\n        name: 'September',\n        days: 30\n      }, {\n        name: 'October',\n        days: 31\n      }, {\n        name: 'November',\n        days: 30\n      }, {\n        name: 'December',\n        days: 31\n      }].slice(0);\n    }\n    /**\n     * Count the number of months.\n     *\n     * @param {Number} [year] Year to be used.\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"countMonths\",\n    value: function countMonths() {\n      var year = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getYear();\n      return this.monthListCache[year].length;\n    }\n    /**\n     * Count days in a month.\n     *\n     * @param {Number} month Month index, where January = 1, February = 2, etc.\n     * @param {Number} [year] Year to be used.\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"countMonthDays\",\n    value: function countMonthDays(month) {\n      var year = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getYear();\n      return this.monthListCache[year][month - 1].days;\n    }\n    /**\n     * Count full weeks in a month.\n     *\n     * @param {Number} month Month index, where January = 1, February = 2, etc.\n     * @param {Number} [year] Year to be used.\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"countMonthFullWeeks\",\n    value: function countMonthFullWeeks(month) {\n      var year = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getYear();\n      return this.monthListCache[year][month - 1].fullWeeks;\n    }\n    /**\n     * Calculate week structure within defined months.\n     *\n     * @private\n     * @param {Number} [year] Year for the calculation.\n     */\n\n  }, {\n    key: \"calculateWeekStructure\",\n    value: function calculateWeekStructure() {\n      var _this4 = this;\n\n      var year = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getYear();\n      this.monthListCache[year] = this.calculateMonthData(year);\n      var firstWeekDay = this.getFirstWeekDay();\n      var monthList = this.getMonthList(year);\n      var mixedMonthToAdd = [];\n      var daysBeforeFullWeeksRatio = this.hideDaysBeforeFullWeeks ? 0 : 1;\n      var daysAfterFullWeeksRatio = this.hideDaysAfterFullWeeks ? 0 : 1;\n      var weekOffset = 0;\n      var weekSectionCount = 0;\n\n      if (firstWeekDay === 'monday') {\n        weekOffset = 1;\n      }\n\n      arrayEach(monthList, function (currentMonth, monthIndex) {\n        var firstMonthDay = new Date(year, monthIndex, 1).getDay();\n        var mixedMonthsAdded = 0;\n        currentMonth.daysBeforeFullWeeks = (7 - firstMonthDay + weekOffset) % 7;\n\n        if (!_this4.allowSplitWeeks && currentMonth.daysBeforeFullWeeks) {\n          mixedMonthToAdd.push(getMixedMonthObject(getMixedMonthName(monthIndex, monthList), monthIndex));\n          mixedMonthsAdded += 1;\n        }\n\n        currentMonth.fullWeeks = Math.floor((currentMonth.days - currentMonth.daysBeforeFullWeeks) / 7);\n        currentMonth.daysAfterFullWeeks = currentMonth.days - currentMonth.daysBeforeFullWeeks - 7 * currentMonth.fullWeeks;\n\n        if (!_this4.allowSplitWeeks) {\n          if (monthIndex === monthList.length - 1 && currentMonth.daysAfterFullWeeks) {\n            mixedMonthToAdd.push(getMixedMonthObject(getMixedMonthName(monthIndex, monthList), null));\n            mixedMonthsAdded += 1;\n          }\n\n          weekSectionCount += currentMonth.fullWeeks + mixedMonthsAdded;\n        } else {\n          var numberOfPartialWeeksBefore = daysBeforeFullWeeksRatio * (currentMonth.daysBeforeFullWeeks ? 1 : 0);\n          var numberOfPartialWeeksAfter = daysAfterFullWeeksRatio * (currentMonth.daysAfterFullWeeks ? 1 : 0);\n          weekSectionCount += currentMonth.fullWeeks + numberOfPartialWeeksBefore + numberOfPartialWeeksAfter;\n        }\n      });\n      arrayEach(mixedMonthToAdd, function (monthObject, monthIndex) {\n        var index = monthObject.index;\n        delete monthObject.index;\n\n        _this4.addMixedMonth(index === null ? index : monthIndex + index, monthObject, year);\n      });\n\n      if (year === this.getYear()) {\n        this.weekSectionCount = weekSectionCount;\n      }\n    }\n    /**\n     * Add a mixed (e.g. 'Jan/Feb') month to the month list.\n     *\n     * @private\n     * @param {Number} index Index for the month.\n     * @param {Object} monthObject The month object.\n     * @param {Number} [year] Year for the calculation.\n     */\n\n  }, {\n    key: \"addMixedMonth\",\n    value: function addMixedMonth(index, monthObject, year) {\n      if (index === null) {\n        this.monthListCache[year].push(monthObject);\n      } else {\n        this.monthListCache[year].splice(index, 0, monthObject);\n      }\n    }\n  }]);\n\n  return DateCalculator;\n}();\n\nexport default DateCalculator;","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/node_modules/handsontable/es/plugins/ganttChart/dateCalculator.js"],"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","TypeError","Symbol","iterator","Object","prototype","toString","call","_arr","_n","_d","_e","undefined","_i","_s","next","done","push","value","length","err","Array","isArray","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","arrayEach","objectEach","warn","getMixedMonthObject","getMixedMonthName","parseDate","DEC_LENGTH","WEEK_LENGTH","DateCalculator","_ref","year","_ref$allowSplitWeeks","allowSplitWeeks","_ref$hideDaysBeforeFu","hideDaysBeforeFullWeeks","_ref$hideDaysAfterFul","hideDaysAfterFullWeeks","firstWeekDay","weekSectionCount","monthListCache","daysInColumns","calculateWeekStructure","setYear","calculateMonthData","setFirstWeekDay","day","lowercaseDay","toLowerCase","countWeekSections","getFirstWeekDay","getYear","getMonthList","arguments","getFullMonthList","dateToColumn","date","convertedDate","month","getMonth","getDate","getFullYear","getWeekColumn","dayIndex","monthIndex","resultColumn","monthCacheArray","getMonthCacheArray","monthCache","column","index","indexOf","parseInt","_this","monthList","resultArray","fullMonthCount","monthObject","keys","daysBeforeFullWeeks","daysAfterFullWeeks","columnToDate","monthSection","resultingDate","Date","start","end","isOnTheEdgeOfWeek","_this2","indexOfDay","generateHeaderSet","type","weekHeaderGenerator","_this3","headers","areDaysBeforeFullWeeks","areDaysAfterFullWeeks","areDaysBeforeFullWeeksVisible","areDaysAfterFullWeeksVisible","headerCount","fullWeeks","monthNumber","headerLabel","label","name","colspan","_this3$getWeekColumnR","getWeekColumnRange","headerIndex","mixedMonth","_this3$getWeekColumnR2","_this3$getWeekColumnR3","_this3$getWeekColumnR4","concat","addDaysToCache","_ref2","_ref2$mixedMonth","_ref2$year","days","columnNumber","previousMonthDaysCount","countMonthDays","_dayIndex","_dayIndex2","isValidRangeBarData","startDate","endDate","startDateParsed","endDateParsed","getTime","slice","countMonths","countMonthFullWeeks","_this4","mixedMonthToAdd","daysBeforeFullWeeksRatio","daysAfterFullWeeksRatio","weekOffset","currentMonth","firstMonthDay","getDay","mixedMonthsAdded","Math","floor","numberOfPartialWeeksBefore","numberOfPartialWeeksAfter","addMixedMonth","splice"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.symbol\";\nimport \"core-js/modules/es.symbol.description\";\nimport \"core-js/modules/es.symbol.iterator\";\nimport \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.array.index-of\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.array.slice\";\nimport \"core-js/modules/es.array.splice\";\nimport \"core-js/modules/es.function.name\";\nimport \"core-js/modules/es.object.keys\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.regexp.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/web.dom-collections.iterator\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { arrayEach } from '../../helpers/array';\nimport { objectEach } from '../../helpers/object';\nimport { warn } from '../../helpers/console';\nimport { getMixedMonthObject, getMixedMonthName, parseDate, DEC_LENGTH, WEEK_LENGTH } from './utils';\n/**\n * This class handles the date-related calculations for the GanttChart plugin.\n *\n * @plugin GanttChart\n */\n\nvar DateCalculator =\n/*#__PURE__*/\nfunction () {\n  function DateCalculator(_ref) {\n    var year = _ref.year,\n        _ref$allowSplitWeeks = _ref.allowSplitWeeks,\n        allowSplitWeeks = _ref$allowSplitWeeks === void 0 ? true : _ref$allowSplitWeeks,\n        _ref$hideDaysBeforeFu = _ref.hideDaysBeforeFullWeeks,\n        hideDaysBeforeFullWeeks = _ref$hideDaysBeforeFu === void 0 ? false : _ref$hideDaysBeforeFu,\n        _ref$hideDaysAfterFul = _ref.hideDaysAfterFullWeeks,\n        hideDaysAfterFullWeeks = _ref$hideDaysAfterFul === void 0 ? false : _ref$hideDaysAfterFul;\n\n    _classCallCheck(this, DateCalculator);\n\n    /**\n     * Year to base calculations on.\n     *\n     * @type {Number}\n     */\n    this.year = year;\n    /**\n     * First day of the week.\n     *\n     * @type {String}\n     */\n\n    this.firstWeekDay = 'monday';\n    /**\n     * The current `allowSplitWeeks` option state.\n     */\n\n    this.allowSplitWeeks = allowSplitWeeks;\n    /**\n     * The current `hideDaysBeforeFullWeeks` option state.\n     */\n\n    this.hideDaysBeforeFullWeeks = hideDaysBeforeFullWeeks;\n    /**\n     * The current `hideDaysAfterFullWeeks` option state.\n     */\n\n    this.hideDaysAfterFullWeeks = hideDaysAfterFullWeeks;\n    /**\n     * Number of week sections (full weeks + incomplete week blocks in months).\n     *\n     * @type {Number}\n     */\n\n    this.weekSectionCount = 0;\n    /**\n     * Cache of lists of months and their week/day related information.\n     * It's categorized by year, so month information for a certain year is stored under `this.monthListCache[year]`.\n     *\n     * @type {Object}\n     */\n\n    this.monthListCache = {};\n    /**\n     * Object containing references to the year days and their corresponding columns.\n     *\n     * @type {Object}\n     */\n\n    this.daysInColumns = {};\n    this.calculateWeekStructure();\n  }\n  /**\n   * Set the year as a base for calculations.\n   *\n   * @param {Number} year\n   */\n\n\n  _createClass(DateCalculator, [{\n    key: \"setYear\",\n    value: function setYear(year) {\n      this.year = year;\n      this.monthListCache[year] = this.calculateMonthData(year);\n      this.calculateWeekStructure(year);\n    }\n    /**\n     * Set the first week day.\n     *\n     * @param {String} day Day of the week. Available options: 'monday' or 'sunday'.\n     */\n\n  }, {\n    key: \"setFirstWeekDay\",\n    value: function setFirstWeekDay(day) {\n      var lowercaseDay = day.toLowerCase();\n\n      if (lowercaseDay !== 'monday' && lowercaseDay !== 'sunday') {\n        warn('First day of the week must be set to either Monday or Sunday');\n      }\n\n      this.firstWeekDay = lowercaseDay;\n      this.calculateWeekStructure();\n    }\n    /**\n     * Count week sections (full weeks + incomplete weeks in the months).\n     *\n     * @returns {Number} Week section count.\n     */\n\n  }, {\n    key: \"countWeekSections\",\n    value: function countWeekSections() {\n      return this.weekSectionCount;\n    }\n    /**\n     * Get the first week day.\n     *\n     * @returns {String}\n     */\n\n  }, {\n    key: \"getFirstWeekDay\",\n    value: function getFirstWeekDay() {\n      return this.firstWeekDay;\n    }\n    /**\n     * Get the currently applied year.\n     *\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"getYear\",\n    value: function getYear() {\n      return this.year;\n    }\n    /**\n     * Get month list along with the month information.\n     *\n     * @param {Number} [year] Year for the calculation.\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getMonthList\",\n    value: function getMonthList() {\n      var year = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.year;\n\n      if (!this.monthListCache[year]) {\n        this.monthListCache[year] = this.calculateMonthData(year);\n      }\n\n      return this.monthListCache[year];\n    }\n    /**\n     * Get month lists for all years declared in the range bars.\n     *\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"getFullMonthList\",\n    value: function getFullMonthList() {\n      return this.monthListCache;\n    }\n    /**\n     * Convert a date to a column number.\n     *\n     * @param {String|Date} date\n     * @returns {Number|Boolean}\n     */\n\n  }, {\n    key: \"dateToColumn\",\n    value: function dateToColumn(date) {\n      var convertedDate = parseDate(date);\n\n      if (!convertedDate) {\n        return false;\n      }\n\n      var month = convertedDate.getMonth();\n      var day = convertedDate.getDate() - 1;\n      var year = convertedDate.getFullYear();\n      return this.getWeekColumn(day, month, year);\n    }\n    /**\n     * Get the column index for the provided day and month indexes.\n     *\n     * @private\n     * @param {Number} dayIndex The index of the day.\n     * @param {Number} monthIndex The index of the month.\n     * @param {Number} [year] Year for the calculation.\n     * @returns {Number} Returns the column index.\n     */\n\n  }, {\n    key: \"getWeekColumn\",\n    value: function getWeekColumn(dayIndex, monthIndex) {\n      var year = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.getYear();\n      var resultColumn = null;\n      var monthCacheArray = this.getMonthCacheArray(monthIndex, year);\n      arrayEach(monthCacheArray, function (monthCache) {\n        objectEach(monthCache, function (column, index) {\n          if (column.indexOf(dayIndex + 1) > -1) {\n            resultColumn = parseInt(index, 10);\n            return false;\n          }\n        });\n\n        if (resultColumn) {\n          return false;\n        }\n      });\n      return resultColumn;\n    }\n    /**\n     * Get the cached day array for the provided month.\n     *\n     * @private\n     * @param {Number} monthIndex Index of the Month.\n     * @param {Number} [year] Year for the calculation.\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getMonthCacheArray\",\n    value: function getMonthCacheArray(monthIndex) {\n      var _this = this;\n\n      var year = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getYear();\n      var monthList = this.getMonthList(year);\n      var resultArray = [];\n\n      if (this.allowSplitWeeks) {\n        resultArray.push(this.daysInColumns[year][monthIndex]);\n      } else {\n        var fullMonthCount = -1;\n        objectEach(this.daysInColumns[year], function (month, i) {\n          var monthObject = monthList[i];\n\n          if (Object.keys(month).length > 1) {\n            fullMonthCount += 1;\n          }\n\n          if (fullMonthCount === monthIndex) {\n            if (monthObject.daysBeforeFullWeeks > 0) {\n              resultArray.push(_this.daysInColumns[year][parseInt(i, 10) - 1]);\n            }\n\n            resultArray.push(month);\n\n            if (monthObject.daysAfterFullWeeks > 0) {\n              resultArray.push(_this.daysInColumns[year][parseInt(i, 10) + 1]);\n            }\n\n            return false;\n          }\n        });\n      }\n\n      return resultArray;\n    }\n    /**\n     * Convert a column index to a certain date.\n     *\n     * @param {Number} column Column index.\n     * @param {Number} [year] Year to be used.\n     * @returns {Object} Object in a form of {start: startDate, end: endDate}\n     */\n\n  }, {\n    key: \"columnToDate\",\n    value: function columnToDate(column) {\n      var year = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getYear();\n      var month = null;\n      objectEach(this.daysInColumns[year], function (monthCache, index) {\n        if (monthCache[column]) {\n          month = index;\n          return false;\n        }\n      });\n      var monthSection = this.daysInColumns[year][month][column];\n\n      if (monthSection.length === 1) {\n        var resultingDate = new Date(year, month, monthSection[0]);\n        return {\n          start: resultingDate,\n          end: resultingDate\n        };\n      }\n\n      return {\n        start: new Date(year, month, monthSection[0]),\n        end: new Date(year, month, monthSection[monthSection.length - 1])\n      };\n    }\n    /**\n     * Check if the provided date is a starting or an ending day of a week.\n     *\n     * @private\n     * @param {Date|String} date\n     * @returns {Array|Boolean} Returns null, if an invalid date was provided or an array of results ( [1,0] => is on the beginning of the week, [0,1] => is on the end of the week).\n     */\n\n  }, {\n    key: \"isOnTheEdgeOfWeek\",\n    value: function isOnTheEdgeOfWeek(date) {\n      var _this2 = this;\n\n      var convertedDate = parseDate(date);\n\n      if (!convertedDate) {\n        return null;\n      }\n\n      var month = convertedDate.getMonth();\n      var day = convertedDate.getDate() - 1;\n      var year = convertedDate.getFullYear();\n      var monthCacheArray = this.getMonthCacheArray(month, year);\n      var isOnTheEdgeOfWeek = false;\n      arrayEach(monthCacheArray, function (monthCache) {\n        objectEach(monthCache, function (column) {\n          if (!_this2.allowSplitWeeks && column.length !== 7) {\n            if (day === 0 || day === new Date(convertedDate.getYear(), convertedDate.getMonth() + 1, 0).getDate() - 1) {\n              return true;\n            }\n          }\n\n          var indexOfDay = column.indexOf(day + 1);\n\n          if (indexOfDay === 0) {\n            isOnTheEdgeOfWeek = [1, 0];\n            return false;\n          } else if (indexOfDay === column.length - 1) {\n            isOnTheEdgeOfWeek = [0, 1];\n            return false;\n          }\n        }); // break the iteration\n\n        if (isOnTheEdgeOfWeek) {\n          return false;\n        }\n      });\n      return isOnTheEdgeOfWeek;\n    }\n    /**\n     * Generate headers for the year structure.\n     *\n     * @private\n     * @param {String} type Granulation type ('months'/'weeks'/'days')\n     * @param {Function|null} weekHeaderGenerator Function generating the looks of the week headers.\n     * @param {Number} [year=this.year] The year for the calculation.\n     * @returns {Array} The header array\n     */\n\n  }, {\n    key: \"generateHeaderSet\",\n    value: function generateHeaderSet(type, weekHeaderGenerator) {\n      var _this3 = this;\n\n      var year = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.year;\n      var monthList = this.getMonthList(year);\n      var headers = [];\n      objectEach(monthList, function (month, index) {\n        var areDaysBeforeFullWeeks = month.daysBeforeFullWeeks > 0 ? 1 : 0;\n        var areDaysAfterFullWeeks = month.daysAfterFullWeeks > 0 ? 1 : 0;\n        var areDaysBeforeFullWeeksVisible = _this3.hideDaysBeforeFullWeeks ? 0 : areDaysBeforeFullWeeks;\n        var areDaysAfterFullWeeksVisible = _this3.hideDaysAfterFullWeeks ? 0 : areDaysAfterFullWeeks;\n        var headerCount = month.fullWeeks + (_this3.allowSplitWeeks ? areDaysBeforeFullWeeksVisible + areDaysAfterFullWeeksVisible : 0);\n        var monthNumber = parseInt(index, 10);\n        var headerLabel = '';\n\n        if (type === 'months') {\n          headers.push({\n            label: month.name,\n            colspan: headerCount\n          });\n        } else if (type === 'weeks') {\n          for (var i = 0; i < headerCount; i++) {\n            var start = null;\n            var end = null; // Mixed month's only column\n\n            if (!_this3.allowSplitWeeks && month.fullWeeks === 1) {\n              var _this3$getWeekColumnR = _this3.getWeekColumnRange({\n                monthObject: month,\n                monthNumber: monthNumber,\n                headerIndex: i,\n                headerCount: headerCount,\n                areDaysBeforeFullWeeksVisible: areDaysBeforeFullWeeksVisible,\n                areDaysAfterFullWeeksVisible: areDaysAfterFullWeeksVisible,\n                mixedMonth: true,\n                year: year\n              });\n\n              var _this3$getWeekColumnR2 = _slicedToArray(_this3$getWeekColumnR, 2);\n\n              start = _this3$getWeekColumnR2[0];\n              end = _this3$getWeekColumnR2[1];\n            } else {\n              var _this3$getWeekColumnR3 = _this3.getWeekColumnRange({\n                monthObject: month,\n                monthNumber: monthNumber,\n                headerIndex: i,\n                areDaysBeforeFullWeeksVisible: areDaysBeforeFullWeeksVisible,\n                areDaysAfterFullWeeksVisible: areDaysAfterFullWeeksVisible,\n                headerCount: headerCount,\n                year: year\n              });\n\n              var _this3$getWeekColumnR4 = _slicedToArray(_this3$getWeekColumnR3, 2);\n\n              start = _this3$getWeekColumnR4[0];\n              end = _this3$getWeekColumnR4[1];\n            }\n\n            if (start === end) {\n              headerLabel = \"\".concat(start);\n            } else {\n              headerLabel = \"\".concat(start, \" -  \").concat(end);\n            }\n\n            headers.push(weekHeaderGenerator ? weekHeaderGenerator.call(_this3, start, end) : headerLabel);\n\n            _this3.addDaysToCache(monthNumber, headers.length - 1, start, end, year);\n          }\n        }\n      });\n      return headers;\n    }\n    /**\n     * Get the week column range.\n     *\n     * @private\n     * @param {Object} options The options object.\n     * @param {Object} options.monthObject The month object.\n     * @param {Number} options.monthNumber Index of the month.\n     * @param {Number} options.headerIndex Index of the header.\n     * @param {Boolean} options.areDaysBeforeFullWeeksVisible `true` if the days before full weeks are to be visible.\n     * @param {Boolean} options.areDaysAfterFullWeeksVisible `true` if the days after full weeks are to be visible.\n     * @param {Number} options.headerCount Number of headers to be generated for the provided month.\n     * @param {Boolean} [options.mixedMonth=false] `true` if the header is the single header of a mixed month.\n     * @param {Number} [year] Year for the calculation.\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getWeekColumnRange\",\n    value: function getWeekColumnRange(_ref2) {\n      var monthObject = _ref2.monthObject,\n          monthNumber = _ref2.monthNumber,\n          headerIndex = _ref2.headerIndex,\n          headerCount = _ref2.headerCount,\n          areDaysBeforeFullWeeksVisible = _ref2.areDaysBeforeFullWeeksVisible,\n          areDaysAfterFullWeeksVisible = _ref2.areDaysAfterFullWeeksVisible,\n          _ref2$mixedMonth = _ref2.mixedMonth,\n          mixedMonth = _ref2$mixedMonth === void 0 ? false : _ref2$mixedMonth,\n          _ref2$year = _ref2.year,\n          year = _ref2$year === void 0 ? this.year : _ref2$year;\n      var monthList = this.getMonthList(year);\n      var allowSplitWeeks = this.allowSplitWeeks;\n      var start = null;\n      var end = null;\n\n      if (mixedMonth) {\n        if (monthNumber === 0) {\n          end = monthList[monthNumber + 1].daysBeforeFullWeeks;\n          start = DEC_LENGTH - (WEEK_LENGTH - end) + 1;\n        } else if (monthNumber === monthList.length - 1) {\n          end = WEEK_LENGTH - monthList[monthNumber - 1].daysAfterFullWeeks;\n          start = monthList[monthNumber - 1].days - monthList[monthNumber - 1].daysAfterFullWeeks + 1;\n        } else {\n          end = monthList[monthNumber + 1].daysBeforeFullWeeks;\n          start = monthList[monthNumber - 1].days - (WEEK_LENGTH - end) + 1;\n        }\n      } else if (allowSplitWeeks && areDaysBeforeFullWeeksVisible && headerIndex === 0) {\n        start = headerIndex + 1;\n        end = monthObject.daysBeforeFullWeeks;\n      } else if (allowSplitWeeks && areDaysAfterFullWeeksVisible && headerIndex === headerCount - 1) {\n        start = monthObject.days - monthObject.daysAfterFullWeeks + 1;\n        end = monthObject.days;\n      } else {\n        start = null;\n\n        if (allowSplitWeeks) {\n          start = monthObject.daysBeforeFullWeeks + (headerIndex - areDaysBeforeFullWeeksVisible) * WEEK_LENGTH + 1;\n        } else {\n          start = monthObject.daysBeforeFullWeeks + headerIndex * WEEK_LENGTH + 1;\n        }\n\n        end = start + WEEK_LENGTH - 1;\n      }\n\n      return [start, end];\n    }\n    /**\n     * Add days to the column/day cache.\n     *\n     * @private\n     * @param {Number} monthNumber Index of the month.\n     * @param {Number} columnNumber Index of the column.\n     * @param {Number} start First day in the column.\n     * @param {Number} end Last day in the column.\n     * @param {Number} [year] Year to process.\n     */\n\n  }, {\n    key: \"addDaysToCache\",\n    value: function addDaysToCache(monthNumber, columnNumber, start, end) {\n      var year = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.getYear();\n\n      if (!this.daysInColumns[year]) {\n        this.daysInColumns[year] = {};\n      }\n\n      if (!this.daysInColumns[year][monthNumber]) {\n        this.daysInColumns[year][monthNumber] = {};\n      }\n\n      if (!this.daysInColumns[year][monthNumber][columnNumber]) {\n        this.daysInColumns[year][monthNumber][columnNumber] = [];\n      }\n\n      if (start <= end) {\n        for (var dayIndex = start; dayIndex <= end; dayIndex++) {\n          this.daysInColumns[year][monthNumber][columnNumber].push(dayIndex);\n        }\n      } else {\n        var previousMonthDaysCount = monthNumber - 1 >= 0 ? this.countMonthDays(monthNumber) : 31;\n\n        for (var _dayIndex = start; _dayIndex <= previousMonthDaysCount; _dayIndex++) {\n          this.daysInColumns[year][monthNumber][columnNumber].push(_dayIndex);\n        }\n\n        for (var _dayIndex2 = 1; _dayIndex2 <= end; _dayIndex2++) {\n          this.daysInColumns[year][monthNumber][columnNumber].push(_dayIndex2);\n        }\n      }\n    }\n    /**\n     * Check if the provided dates can be used in a range bar.\n     *\n     * @param {Date|String} startDate Range start date.\n     * @param {Date|String} endDate Range end date.\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isValidRangeBarData\",\n    value: function isValidRangeBarData(startDate, endDate) {\n      var startDateParsed = parseDate(startDate);\n      var endDateParsed = parseDate(endDate);\n      return startDateParsed && endDateParsed && startDateParsed.getTime() <= endDateParsed.getTime();\n    }\n    /**\n     * Calculate the month/day related information.\n     *\n     * @param {Number} [year] Year to be used.\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"calculateMonthData\",\n    value: function calculateMonthData() {\n      var year = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.year;\n      return [{\n        name: 'January',\n        days: 31\n      }, {\n        name: 'February',\n        days: new Date(year, 2, 0).getDate()\n      }, {\n        name: 'March',\n        days: 31\n      }, {\n        name: 'April',\n        days: 30\n      }, {\n        name: 'May',\n        days: 31\n      }, {\n        name: 'June',\n        days: 30\n      }, {\n        name: 'July',\n        days: 31\n      }, {\n        name: 'August',\n        days: 31\n      }, {\n        name: 'September',\n        days: 30\n      }, {\n        name: 'October',\n        days: 31\n      }, {\n        name: 'November',\n        days: 30\n      }, {\n        name: 'December',\n        days: 31\n      }].slice(0);\n    }\n    /**\n     * Count the number of months.\n     *\n     * @param {Number} [year] Year to be used.\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"countMonths\",\n    value: function countMonths() {\n      var year = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getYear();\n      return this.monthListCache[year].length;\n    }\n    /**\n     * Count days in a month.\n     *\n     * @param {Number} month Month index, where January = 1, February = 2, etc.\n     * @param {Number} [year] Year to be used.\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"countMonthDays\",\n    value: function countMonthDays(month) {\n      var year = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getYear();\n      return this.monthListCache[year][month - 1].days;\n    }\n    /**\n     * Count full weeks in a month.\n     *\n     * @param {Number} month Month index, where January = 1, February = 2, etc.\n     * @param {Number} [year] Year to be used.\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"countMonthFullWeeks\",\n    value: function countMonthFullWeeks(month) {\n      var year = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getYear();\n      return this.monthListCache[year][month - 1].fullWeeks;\n    }\n    /**\n     * Calculate week structure within defined months.\n     *\n     * @private\n     * @param {Number} [year] Year for the calculation.\n     */\n\n  }, {\n    key: \"calculateWeekStructure\",\n    value: function calculateWeekStructure() {\n      var _this4 = this;\n\n      var year = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getYear();\n      this.monthListCache[year] = this.calculateMonthData(year);\n      var firstWeekDay = this.getFirstWeekDay();\n      var monthList = this.getMonthList(year);\n      var mixedMonthToAdd = [];\n      var daysBeforeFullWeeksRatio = this.hideDaysBeforeFullWeeks ? 0 : 1;\n      var daysAfterFullWeeksRatio = this.hideDaysAfterFullWeeks ? 0 : 1;\n      var weekOffset = 0;\n      var weekSectionCount = 0;\n\n      if (firstWeekDay === 'monday') {\n        weekOffset = 1;\n      }\n\n      arrayEach(monthList, function (currentMonth, monthIndex) {\n        var firstMonthDay = new Date(year, monthIndex, 1).getDay();\n        var mixedMonthsAdded = 0;\n        currentMonth.daysBeforeFullWeeks = (7 - firstMonthDay + weekOffset) % 7;\n\n        if (!_this4.allowSplitWeeks && currentMonth.daysBeforeFullWeeks) {\n          mixedMonthToAdd.push(getMixedMonthObject(getMixedMonthName(monthIndex, monthList), monthIndex));\n          mixedMonthsAdded += 1;\n        }\n\n        currentMonth.fullWeeks = Math.floor((currentMonth.days - currentMonth.daysBeforeFullWeeks) / 7);\n        currentMonth.daysAfterFullWeeks = currentMonth.days - currentMonth.daysBeforeFullWeeks - 7 * currentMonth.fullWeeks;\n\n        if (!_this4.allowSplitWeeks) {\n          if (monthIndex === monthList.length - 1 && currentMonth.daysAfterFullWeeks) {\n            mixedMonthToAdd.push(getMixedMonthObject(getMixedMonthName(monthIndex, monthList), null));\n            mixedMonthsAdded += 1;\n          }\n\n          weekSectionCount += currentMonth.fullWeeks + mixedMonthsAdded;\n        } else {\n          var numberOfPartialWeeksBefore = daysBeforeFullWeeksRatio * (currentMonth.daysBeforeFullWeeks ? 1 : 0);\n          var numberOfPartialWeeksAfter = daysAfterFullWeeksRatio * (currentMonth.daysAfterFullWeeks ? 1 : 0);\n          weekSectionCount += currentMonth.fullWeeks + numberOfPartialWeeksBefore + numberOfPartialWeeksAfter;\n        }\n      });\n      arrayEach(mixedMonthToAdd, function (monthObject, monthIndex) {\n        var index = monthObject.index;\n        delete monthObject.index;\n\n        _this4.addMixedMonth(index === null ? index : monthIndex + index, monthObject, year);\n      });\n\n      if (year === this.getYear()) {\n        this.weekSectionCount = weekSectionCount;\n      }\n    }\n    /**\n     * Add a mixed (e.g. 'Jan/Feb') month to the month list.\n     *\n     * @private\n     * @param {Number} index Index for the month.\n     * @param {Object} monthObject The month object.\n     * @param {Number} [year] Year for the calculation.\n     */\n\n  }, {\n    key: \"addMixedMonth\",\n    value: function addMixedMonth(index, monthObject, year) {\n      if (index === null) {\n        this.monthListCache[year].push(monthObject);\n      } else {\n        this.monthListCache[year].splice(index, 0, monthObject);\n      }\n    }\n  }]);\n\n  return DateCalculator;\n}();\n\nexport default DateCalculator;"]},"metadata":{},"sourceType":"module"}