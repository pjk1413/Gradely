{"ast":null,"code":"import moment from 'moment';\nimport { getNormalizedDate } from '../helpers/date';\nimport { getEditorInstance } from '../editors';\n/**\n * Date cell validator\n *\n * @private\n * @validator DateValidator\n * @param {*} value - Value of edited cell\n * @param {Function} callback - Callback called with validation result\n */\n\nexport default function dateValidator(value, callback) {\n  var dateEditor = getEditorInstance('date', this.instance);\n  var valueToValidate = value;\n  var valid = true;\n\n  if (valueToValidate === null || valueToValidate === void 0) {\n    valueToValidate = '';\n  }\n\n  var isValidFormat = moment(valueToValidate, this.dateFormat || dateEditor.defaultDateFormat, true).isValid();\n  var isValidDate = moment(new Date(valueToValidate)).isValid() || isValidFormat;\n\n  if (this.allowEmpty && valueToValidate === '') {\n    isValidDate = true;\n    isValidFormat = true;\n  }\n\n  if (!isValidDate) {\n    valid = false;\n  }\n\n  if (!isValidDate && isValidFormat) {\n    valid = true;\n  }\n\n  if (isValidDate && !isValidFormat) {\n    if (this.correctFormat === true) {\n      // if format correction is enabled\n      var correctedValue = correctFormat(valueToValidate, this.dateFormat);\n      var row = this.instance.runHooks('unmodifyRow', this.row);\n      var column = this.instance.runHooks('unmodifyCol', this.col);\n      this.instance.setDataAtCell(row, column, correctedValue, 'dateValidator');\n      valid = true;\n    } else {\n      valid = false;\n    }\n  }\n\n  callback(valid);\n}\n/**\n * Format the given string using moment.js' format feature\n *\n * @param {String} value\n * @param {String} dateFormat\n * @returns {String}\n */\n\nexport function correctFormat(value, dateFormat) {\n  var dateFromDate = moment(getNormalizedDate(value));\n  var dateFromMoment = moment(value, dateFormat);\n  var isAlphanumeric = value.search(/[A-z]/g) > -1;\n  var date;\n\n  if (dateFromDate.isValid() && dateFromDate.format('x') === dateFromMoment.format('x') || !dateFromMoment.isValid() || isAlphanumeric) {\n    date = dateFromDate;\n  } else {\n    date = dateFromMoment;\n  }\n\n  return date.format(dateFormat);\n}","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react/node_modules/handsontable/es/validators/dateValidator.js"],"names":["moment","getNormalizedDate","getEditorInstance","dateValidator","value","callback","dateEditor","instance","valueToValidate","valid","isValidFormat","dateFormat","defaultDateFormat","isValid","isValidDate","Date","allowEmpty","correctFormat","correctedValue","row","runHooks","column","col","setDataAtCell","dateFromDate","dateFromMoment","isAlphanumeric","search","date","format"],"mappings":"AAEA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,iBAAT,QAAkC,iBAAlC;AACA,SAASC,iBAAT,QAAkC,YAAlC;AACA;;;;;;;;;AASA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,QAA9B,EAAwC;AACrD,MAAIC,UAAU,GAAGJ,iBAAiB,CAAC,MAAD,EAAS,KAAKK,QAAd,CAAlC;AACA,MAAIC,eAAe,GAAGJ,KAAtB;AACA,MAAIK,KAAK,GAAG,IAAZ;;AAEA,MAAID,eAAe,KAAK,IAApB,IAA4BA,eAAe,KAAK,KAAK,CAAzD,EAA4D;AAC1DA,IAAAA,eAAe,GAAG,EAAlB;AACD;;AAED,MAAIE,aAAa,GAAGV,MAAM,CAACQ,eAAD,EAAkB,KAAKG,UAAL,IAAmBL,UAAU,CAACM,iBAAhD,EAAmE,IAAnE,CAAN,CAA+EC,OAA/E,EAApB;AACA,MAAIC,WAAW,GAAGd,MAAM,CAAC,IAAIe,IAAJ,CAASP,eAAT,CAAD,CAAN,CAAkCK,OAAlC,MAA+CH,aAAjE;;AAEA,MAAI,KAAKM,UAAL,IAAmBR,eAAe,KAAK,EAA3C,EAA+C;AAC7CM,IAAAA,WAAW,GAAG,IAAd;AACAJ,IAAAA,aAAa,GAAG,IAAhB;AACD;;AAED,MAAI,CAACI,WAAL,EAAkB;AAChBL,IAAAA,KAAK,GAAG,KAAR;AACD;;AAED,MAAI,CAACK,WAAD,IAAgBJ,aAApB,EAAmC;AACjCD,IAAAA,KAAK,GAAG,IAAR;AACD;;AAED,MAAIK,WAAW,IAAI,CAACJ,aAApB,EAAmC;AACjC,QAAI,KAAKO,aAAL,KAAuB,IAA3B,EAAiC;AAC/B;AACA,UAAIC,cAAc,GAAGD,aAAa,CAACT,eAAD,EAAkB,KAAKG,UAAvB,CAAlC;AACA,UAAIQ,GAAG,GAAG,KAAKZ,QAAL,CAAca,QAAd,CAAuB,aAAvB,EAAsC,KAAKD,GAA3C,CAAV;AACA,UAAIE,MAAM,GAAG,KAAKd,QAAL,CAAca,QAAd,CAAuB,aAAvB,EAAsC,KAAKE,GAA3C,CAAb;AACA,WAAKf,QAAL,CAAcgB,aAAd,CAA4BJ,GAA5B,EAAiCE,MAAjC,EAAyCH,cAAzC,EAAyD,eAAzD;AACAT,MAAAA,KAAK,GAAG,IAAR;AACD,KAPD,MAOO;AACLA,MAAAA,KAAK,GAAG,KAAR;AACD;AACF;;AAEDJ,EAAAA,QAAQ,CAACI,KAAD,CAAR;AACD;AACD;;;;;;;;AAQA,OAAO,SAASQ,aAAT,CAAuBb,KAAvB,EAA8BO,UAA9B,EAA0C;AAC/C,MAAIa,YAAY,GAAGxB,MAAM,CAACC,iBAAiB,CAACG,KAAD,CAAlB,CAAzB;AACA,MAAIqB,cAAc,GAAGzB,MAAM,CAACI,KAAD,EAAQO,UAAR,CAA3B;AACA,MAAIe,cAAc,GAAGtB,KAAK,CAACuB,MAAN,CAAa,QAAb,IAAyB,CAAC,CAA/C;AACA,MAAIC,IAAJ;;AAEA,MAAIJ,YAAY,CAACX,OAAb,MAA0BW,YAAY,CAACK,MAAb,CAAoB,GAApB,MAA6BJ,cAAc,CAACI,MAAf,CAAsB,GAAtB,CAAvD,IAAqF,CAACJ,cAAc,CAACZ,OAAf,EAAtF,IAAkHa,cAAtH,EAAsI;AACpIE,IAAAA,IAAI,GAAGJ,YAAP;AACD,GAFD,MAEO;AACLI,IAAAA,IAAI,GAAGH,cAAP;AACD;;AAED,SAAOG,IAAI,CAACC,MAAL,CAAYlB,UAAZ,CAAP;AACD","sourcesContent":["import \"core-js/modules/es.regexp.exec\";\nimport \"core-js/modules/es.string.search\";\nimport moment from 'moment';\nimport { getNormalizedDate } from '../helpers/date';\nimport { getEditorInstance } from '../editors';\n/**\n * Date cell validator\n *\n * @private\n * @validator DateValidator\n * @param {*} value - Value of edited cell\n * @param {Function} callback - Callback called with validation result\n */\n\nexport default function dateValidator(value, callback) {\n  var dateEditor = getEditorInstance('date', this.instance);\n  var valueToValidate = value;\n  var valid = true;\n\n  if (valueToValidate === null || valueToValidate === void 0) {\n    valueToValidate = '';\n  }\n\n  var isValidFormat = moment(valueToValidate, this.dateFormat || dateEditor.defaultDateFormat, true).isValid();\n  var isValidDate = moment(new Date(valueToValidate)).isValid() || isValidFormat;\n\n  if (this.allowEmpty && valueToValidate === '') {\n    isValidDate = true;\n    isValidFormat = true;\n  }\n\n  if (!isValidDate) {\n    valid = false;\n  }\n\n  if (!isValidDate && isValidFormat) {\n    valid = true;\n  }\n\n  if (isValidDate && !isValidFormat) {\n    if (this.correctFormat === true) {\n      // if format correction is enabled\n      var correctedValue = correctFormat(valueToValidate, this.dateFormat);\n      var row = this.instance.runHooks('unmodifyRow', this.row);\n      var column = this.instance.runHooks('unmodifyCol', this.col);\n      this.instance.setDataAtCell(row, column, correctedValue, 'dateValidator');\n      valid = true;\n    } else {\n      valid = false;\n    }\n  }\n\n  callback(valid);\n}\n/**\n * Format the given string using moment.js' format feature\n *\n * @param {String} value\n * @param {String} dateFormat\n * @returns {String}\n */\n\nexport function correctFormat(value, dateFormat) {\n  var dateFromDate = moment(getNormalizedDate(value));\n  var dateFromMoment = moment(value, dateFormat);\n  var isAlphanumeric = value.search(/[A-z]/g) > -1;\n  var date;\n\n  if (dateFromDate.isValid() && dateFromDate.format('x') === dateFromMoment.format('x') || !dateFromMoment.isValid() || isAlphanumeric) {\n    date = dateFromDate;\n  } else {\n    date = dateFromMoment;\n  }\n\n  return date.format(dateFormat);\n}"]},"metadata":{},"sourceType":"module"}