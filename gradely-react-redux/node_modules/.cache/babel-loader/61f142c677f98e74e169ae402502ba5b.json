{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport * as PointSet from \"./point-set\";\nimport * as PointMap from \"./point-map\";\nimport * as Matrix from \"./matrix\";\nimport * as Types from \"./types\";\nimport { isActive, setCell, updateData } from \"./util\";\nexport var setData = function setData(state, data) {\n  var nextActive = state.active && Matrix.has(state.active.row, state.active.column, data) ? state.active : null;\n  var nextSelected = PointSet.filter(function (point) {\n    return Matrix.has(point.row, point.column, data);\n  }, state.selected);\n  var nextBindings = PointMap.map(function (bindings) {\n    return PointSet.filter(function (point) {\n      return Matrix.has(point.row, point.column, data);\n    }, bindings);\n  }, PointMap.filter(function (_, point) {\n    return Matrix.has(point.row, point.column, data);\n  }, state.bindings));\n  return {\n    data: data,\n    active: nextActive,\n    selected: nextSelected,\n    bindings: nextBindings\n  };\n};\nexport var select = function select(state, cellPointer) {\n  if (state.active && !isActive(state.active, cellPointer)) {\n    return {\n      selected: PointSet.from(Matrix.inclusiveRange({\n        row: cellPointer.row,\n        column: cellPointer.column\n      }, {\n        row: state.active.row,\n        column: state.active.column\n      })),\n      mode: \"view\"\n    };\n  }\n\n  return null;\n};\nexport var activate = function activate(state, cellPointer) {\n  return {\n    selected: PointSet.from([cellPointer]),\n    active: cellPointer,\n    mode: isActive(state.active, cellPointer) ? \"edit\" : \"view\"\n  };\n};\nexport function setCellData(state, active, data, bindings) {\n  if (isActiveReadOnly(state)) {\n    return null;\n  }\n\n  return {\n    mode: \"edit\",\n    data: setCell(state, active, data),\n    lastChanged: active,\n    bindings: PointMap.set(active, PointSet.from(bindings), state.bindings)\n  };\n}\nexport function setCellDimensions(state, point, dimensions) {\n  var prevRowDimensions = state.rowDimensions[point.row];\n  var prevColumnDimensions = state.columnDimensions[point.column];\n\n  if (prevRowDimensions && prevColumnDimensions && prevRowDimensions.top === dimensions.top && prevRowDimensions.height === dimensions.height && prevColumnDimensions.left === dimensions.left && prevColumnDimensions.width === dimensions.width) {\n    return null;\n  }\n\n  return {\n    rowDimensions: _objectSpread({}, state.rowDimensions, _defineProperty({}, point.row, {\n      top: dimensions.top,\n      height: dimensions.height\n    })),\n    columnDimensions: _objectSpread({}, state.columnDimensions, _defineProperty({}, point.column, {\n      left: dimensions.left,\n      width: dimensions.width\n    }))\n  };\n}\nexport function copy(state) {\n  return {\n    copied: PointSet.reduce(function (acc, point) {\n      return PointMap.set(point, Matrix.get(point.row, point.column, state.data), acc);\n    }, state.selected, PointMap.from([])),\n    cut: false,\n    hasPasted: false\n  };\n}\nexport var cut = function cut(state) {\n  return _objectSpread({}, copy(state), {\n    cut: true\n  });\n};\nexport function paste(_x, _x2) {\n  return _paste.apply(this, arguments);\n}\n\nfunction _paste() {\n  _paste = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(state, text) {\n    var copiedMatrix, copied, minPoint, requiredRows, paddedData, _PointMap$reduce, data, selected, commit;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (text) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", null);\n\n          case 2:\n            copiedMatrix = Matrix.split(text, function (value) {\n              return {\n                value: value\n              };\n            });\n            copied = PointMap.fromMatrix(copiedMatrix);\n            minPoint = PointSet.min(copied);\n            requiredRows = state.active.row + Matrix.getSize(copiedMatrix).rows;\n            paddedData = Matrix.padMatrix(state.data, requiredRows);\n            _PointMap$reduce = PointMap.reduce(function (acc, value, _ref) {\n              var row = _ref.row,\n                  column = _ref.column;\n\n              if (!state.active) {\n                return acc;\n              }\n\n              var commit = acc.commit || [];\n              var nextRow = row - minPoint.row + state.active.row;\n              var nextColumn = column - minPoint.column + state.active.column;\n              var nextData = state.cut ? Matrix.unset(row, column, acc.data) : acc.data;\n\n              if (state.cut) {\n                commit = [].concat(_toConsumableArray(commit), [{\n                  prevCell: value,\n                  nextCell: undefined\n                }]);\n              }\n\n              if (!Matrix.has(nextRow, nextColumn, paddedData)) {\n                return {\n                  data: nextData,\n                  selected: acc.selected,\n                  commit: commit\n                };\n              }\n\n              var currentValue = Matrix.get(nextRow, nextColumn, nextData) || {};\n              commit = [].concat(_toConsumableArray(commit), [{\n                prevCell: currentValue,\n                nextCell: value\n              }]);\n              return {\n                data: Matrix.set(nextRow, nextColumn, _objectSpread({}, currentValue, value), nextData),\n                selected: PointSet.add(acc.selected, {\n                  row: nextRow,\n                  column: nextColumn\n                }),\n                commit: commit\n              };\n            }, copied, {\n              data: paddedData,\n              selected: PointSet.from([]),\n              commit: []\n            }), data = _PointMap$reduce.data, selected = _PointMap$reduce.selected, commit = _PointMap$reduce.commit;\n            return _context.abrupt(\"return\", {\n              data: data,\n              selected: selected,\n              cut: false,\n              hasPasted: true,\n              mode: \"view\",\n              lastCommit: commit\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _paste.apply(this, arguments);\n}\n\nexport var edit = function edit(state) {\n  if (isActiveReadOnly(state)) {\n    return null;\n  }\n\n  return {\n    mode: \"edit\"\n  };\n};\nexport var view = function view() {\n  return {\n    mode: \"view\"\n  };\n};\nexport var clear = function clear(state) {\n  if (!state.active) {\n    return null;\n  }\n\n  var _state$active = state.active,\n      row = _state$active.row,\n      column = _state$active.column;\n  var cell = Matrix.get(row, column, state.data);\n  return _objectSpread({\n    data: PointSet.reduce(function (acc, point) {\n      return updateData(acc, _objectSpread({}, point, {\n        data: _objectSpread({}, cell, {\n          value: \"\"\n        })\n      }));\n    }, state.selected, state.data)\n  }, commit(state, PointSet.toArray(state.selected).map(function (point) {\n    var cell = Matrix.get(point.row, point.column, state.data);\n    return {\n      prevCell: cell,\n      nextCell: _objectSpread({}, cell, {\n        value: \"\"\n      })\n    };\n  })));\n};\nexport var go = function go(rowDelta, columnDelta) {\n  return function (state, event) {\n    if (!state.active) {\n      return null;\n    }\n\n    var nextActive = {\n      row: state.active.row + rowDelta,\n      column: state.active.column + columnDelta\n    };\n\n    if (!Matrix.has(nextActive.row, nextActive.column, state.data)) {\n      return {\n        mode: \"view\"\n      };\n    }\n\n    return {\n      active: nextActive,\n      selected: PointSet.from([nextActive]),\n      mode: \"view\"\n    };\n  };\n};\nexport var modifyEdge = function modifyEdge(field, delta) {\n  return function (state, event) {\n    if (!state.active) {\n      return null;\n    }\n\n    var edgeOffsets = PointSet.has(state.selected, _objectSpread({}, state.active, _defineProperty({}, field, state.active[field] + delta * -1)));\n    var nextSelected = edgeOffsets ? PointSet.shrinkEdge(state.selected, field, delta * -1) : PointSet.extendEdge(state.selected, field, delta);\n    return {\n      selected: PointSet.filter(function (point) {\n        return Matrix.has(point.row, point.column, state.data);\n      }, nextSelected)\n    };\n  };\n};\nexport var blur = function blur() {\n  return {\n    active: null\n  };\n}; // Key Bindings\n\n/** @todo handle inactive state? */\n\nvar keyDownHandlers = {\n  ArrowUp: go(-1, 0),\n  ArrowDown: go(+1, 0),\n  ArrowLeft: go(0, -1),\n  ArrowRight: go(0, +1),\n  Tab: go(0, +1),\n  Enter: edit,\n  Backspace: clear,\n  Escape: blur\n};\nvar editKeyDownHandlers = {\n  Escape: view,\n  Tab: keyDownHandlers.Tab,\n  Enter: keyDownHandlers.ArrowDown\n};\nvar shiftKeyDownHandlers = {\n  ArrowUp: modifyEdge(\"row\", -1),\n  ArrowDown: modifyEdge(\"row\", 1),\n  ArrowLeft: modifyEdge(\"column\", -1),\n  ArrowRight: modifyEdge(\"column\", 1)\n};\nvar shiftMetaKeyDownHandlers = {};\nvar metaKeyDownHandlers = {};\n\nfunction getActive(state) {\n  return state.active && Matrix.get(state.active.row, state.active.column, state.data);\n}\n\nvar isActiveReadOnly = function isActiveReadOnly(state) {\n  var activeCell = getActive(state);\n  return Boolean(activeCell && activeCell.readOnly);\n};\n\nexport function keyPress(state, event) {\n  if (isActiveReadOnly(state) || event.metaKey) {\n    return null;\n  }\n\n  if (state.mode === \"view\" && state.active) {\n    return {\n      mode: \"edit\"\n    };\n  }\n\n  return null;\n}\nexport function getKeyDownHandler(state, event) {\n  var key = event.key;\n  var handlers; // Order matters\n\n  if (state.mode === \"edit\") {\n    handlers = editKeyDownHandlers;\n  } else if (event.shiftKey && event.metaKey) {\n    handlers = shiftMetaKeyDownHandlers;\n  } else if (event.shiftKey) {\n    handlers = shiftKeyDownHandlers;\n  } else if (event.metaKey) {\n    handlers = metaKeyDownHandlers;\n  } else {\n    handlers = keyDownHandlers;\n  }\n\n  return handlers[key];\n}\nexport function keyDown(state, event) {\n  var handler = getKeyDownHandler(state, event);\n\n  if (handler) {\n    return handler(state, event);\n  }\n\n  return null;\n}\nexport function dragStart(state) {\n  return {\n    dragging: true\n  };\n}\nexport function dragEnd(state) {\n  return {\n    dragging: false\n  };\n}\nexport function commit(state, changes) {\n  return {\n    lastCommit: changes\n  };\n}","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react-redux/node_modules/react-spreadsheet/dist/actions.js"],"names":["_regeneratorRuntime","_toConsumableArray","_asyncToGenerator","_defineProperty","_objectSpread","PointSet","PointMap","Matrix","Types","isActive","setCell","updateData","setData","state","data","nextActive","active","has","row","column","nextSelected","filter","point","selected","nextBindings","map","bindings","_","select","cellPointer","from","inclusiveRange","mode","activate","setCellData","isActiveReadOnly","lastChanged","set","setCellDimensions","dimensions","prevRowDimensions","rowDimensions","prevColumnDimensions","columnDimensions","top","height","left","width","copy","copied","reduce","acc","get","cut","hasPasted","paste","_x","_x2","_paste","apply","arguments","mark","_callee","text","copiedMatrix","minPoint","requiredRows","paddedData","_PointMap$reduce","commit","wrap","_callee$","_context","prev","next","abrupt","split","value","fromMatrix","min","getSize","rows","padMatrix","_ref","nextRow","nextColumn","nextData","unset","concat","prevCell","nextCell","undefined","currentValue","add","lastCommit","stop","edit","view","clear","_state$active","cell","toArray","go","rowDelta","columnDelta","event","modifyEdge","field","delta","edgeOffsets","shrinkEdge","extendEdge","blur","keyDownHandlers","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","Tab","Enter","Backspace","Escape","editKeyDownHandlers","shiftKeyDownHandlers","shiftMetaKeyDownHandlers","metaKeyDownHandlers","getActive","activeCell","Boolean","readOnly","keyPress","metaKey","getKeyDownHandler","key","handlers","shiftKey","keyDown","handler","dragStart","dragging","dragEnd","changes"],"mappings":"AAAA,OAAOA,mBAAP,MAAgC,4BAAhC;AACA,OAAOC,kBAAP,MAA+B,8CAA/B;AACA,OAAOC,iBAAP,MAA8B,6CAA9B;AACA,OAAOC,eAAP,MAA4B,2CAA5B;AACA,OAAOC,aAAP,MAA0B,yCAA1B;AACA,OAAO,KAAKC,QAAZ,MAA0B,aAA1B;AACA,OAAO,KAAKC,QAAZ,MAA0B,aAA1B;AACA,OAAO,KAAKC,MAAZ,MAAwB,UAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AACA,SAASC,QAAT,EAAmBC,OAAnB,EAA4BC,UAA5B,QAA8C,QAA9C;AACA,OAAO,IAAIC,OAAO,GAAG,SAASA,OAAT,CAAiBC,KAAjB,EAAwBC,IAAxB,EAA8B;AACjD,MAAIC,UAAU,GAAGF,KAAK,CAACG,MAAN,IAAgBT,MAAM,CAACU,GAAP,CAAWJ,KAAK,CAACG,MAAN,CAAaE,GAAxB,EAA6BL,KAAK,CAACG,MAAN,CAAaG,MAA1C,EAAkDL,IAAlD,CAAhB,GAA0ED,KAAK,CAACG,MAAhF,GAAyF,IAA1G;AACA,MAAII,YAAY,GAAGf,QAAQ,CAACgB,MAAT,CAAgB,UAAUC,KAAV,EAAiB;AAClD,WAAOf,MAAM,CAACU,GAAP,CAAWK,KAAK,CAACJ,GAAjB,EAAsBI,KAAK,CAACH,MAA5B,EAAoCL,IAApC,CAAP;AACD,GAFkB,EAEhBD,KAAK,CAACU,QAFU,CAAnB;AAGA,MAAIC,YAAY,GAAGlB,QAAQ,CAACmB,GAAT,CAAa,UAAUC,QAAV,EAAoB;AAClD,WAAOrB,QAAQ,CAACgB,MAAT,CAAgB,UAAUC,KAAV,EAAiB;AACtC,aAAOf,MAAM,CAACU,GAAP,CAAWK,KAAK,CAACJ,GAAjB,EAAsBI,KAAK,CAACH,MAA5B,EAAoCL,IAApC,CAAP;AACD,KAFM,EAEJY,QAFI,CAAP;AAGD,GAJkB,EAIhBpB,QAAQ,CAACe,MAAT,CAAgB,UAAUM,CAAV,EAAaL,KAAb,EAAoB;AACrC,WAAOf,MAAM,CAACU,GAAP,CAAWK,KAAK,CAACJ,GAAjB,EAAsBI,KAAK,CAACH,MAA5B,EAAoCL,IAApC,CAAP;AACD,GAFE,EAEAD,KAAK,CAACa,QAFN,CAJgB,CAAnB;AAOA,SAAO;AACLZ,IAAAA,IAAI,EAAEA,IADD;AAELE,IAAAA,MAAM,EAAED,UAFH;AAGLQ,IAAAA,QAAQ,EAAEH,YAHL;AAILM,IAAAA,QAAQ,EAAEF;AAJL,GAAP;AAMD,CAlBM;AAmBP,OAAO,IAAII,MAAM,GAAG,SAASA,MAAT,CAAgBf,KAAhB,EAAuBgB,WAAvB,EAAoC;AACtD,MAAIhB,KAAK,CAACG,MAAN,IAAgB,CAACP,QAAQ,CAACI,KAAK,CAACG,MAAP,EAAea,WAAf,CAA7B,EAA0D;AACxD,WAAO;AACLN,MAAAA,QAAQ,EAAElB,QAAQ,CAACyB,IAAT,CAAcvB,MAAM,CAACwB,cAAP,CAAsB;AAC5Cb,QAAAA,GAAG,EAAEW,WAAW,CAACX,GAD2B;AAE5CC,QAAAA,MAAM,EAAEU,WAAW,CAACV;AAFwB,OAAtB,EAGrB;AACDD,QAAAA,GAAG,EAAEL,KAAK,CAACG,MAAN,CAAaE,GADjB;AAEDC,QAAAA,MAAM,EAAEN,KAAK,CAACG,MAAN,CAAaG;AAFpB,OAHqB,CAAd,CADL;AAQLa,MAAAA,IAAI,EAAE;AARD,KAAP;AAUD;;AAED,SAAO,IAAP;AACD,CAfM;AAgBP,OAAO,IAAIC,QAAQ,GAAG,SAASA,QAAT,CAAkBpB,KAAlB,EAAyBgB,WAAzB,EAAsC;AAC1D,SAAO;AACLN,IAAAA,QAAQ,EAAElB,QAAQ,CAACyB,IAAT,CAAc,CAACD,WAAD,CAAd,CADL;AAELb,IAAAA,MAAM,EAAEa,WAFH;AAGLG,IAAAA,IAAI,EAAEvB,QAAQ,CAACI,KAAK,CAACG,MAAP,EAAea,WAAf,CAAR,GAAsC,MAAtC,GAA+C;AAHhD,GAAP;AAKD,CANM;AAOP,OAAO,SAASK,WAAT,CAAqBrB,KAArB,EAA4BG,MAA5B,EAAoCF,IAApC,EAA0CY,QAA1C,EAAoD;AACzD,MAAIS,gBAAgB,CAACtB,KAAD,CAApB,EAA6B;AAC3B,WAAO,IAAP;AACD;;AAED,SAAO;AACLmB,IAAAA,IAAI,EAAE,MADD;AAELlB,IAAAA,IAAI,EAAEJ,OAAO,CAACG,KAAD,EAAQG,MAAR,EAAgBF,IAAhB,CAFR;AAGLsB,IAAAA,WAAW,EAAEpB,MAHR;AAILU,IAAAA,QAAQ,EAAEpB,QAAQ,CAAC+B,GAAT,CAAarB,MAAb,EAAqBX,QAAQ,CAACyB,IAAT,CAAcJ,QAAd,CAArB,EAA8Cb,KAAK,CAACa,QAApD;AAJL,GAAP;AAMD;AACD,OAAO,SAASY,iBAAT,CAA2BzB,KAA3B,EAAkCS,KAAlC,EAAyCiB,UAAzC,EAAqD;AAC1D,MAAIC,iBAAiB,GAAG3B,KAAK,CAAC4B,aAAN,CAAoBnB,KAAK,CAACJ,GAA1B,CAAxB;AACA,MAAIwB,oBAAoB,GAAG7B,KAAK,CAAC8B,gBAAN,CAAuBrB,KAAK,CAACH,MAA7B,CAA3B;;AAEA,MAAIqB,iBAAiB,IAAIE,oBAArB,IAA6CF,iBAAiB,CAACI,GAAlB,KAA0BL,UAAU,CAACK,GAAlF,IAAyFJ,iBAAiB,CAACK,MAAlB,KAA6BN,UAAU,CAACM,MAAjI,IAA2IH,oBAAoB,CAACI,IAArB,KAA8BP,UAAU,CAACO,IAApL,IAA4LJ,oBAAoB,CAACK,KAArB,KAA+BR,UAAU,CAACQ,KAA1O,EAAiP;AAC/O,WAAO,IAAP;AACD;;AAED,SAAO;AACLN,IAAAA,aAAa,EAAErC,aAAa,CAAC,EAAD,EAAKS,KAAK,CAAC4B,aAAX,EAA0BtC,eAAe,CAAC,EAAD,EAAKmB,KAAK,CAACJ,GAAX,EAAgB;AACnF0B,MAAAA,GAAG,EAAEL,UAAU,CAACK,GADmE;AAEnFC,MAAAA,MAAM,EAAEN,UAAU,CAACM;AAFgE,KAAhB,CAAzC,CADvB;AAKLF,IAAAA,gBAAgB,EAAEvC,aAAa,CAAC,EAAD,EAAKS,KAAK,CAAC8B,gBAAX,EAA6BxC,eAAe,CAAC,EAAD,EAAKmB,KAAK,CAACH,MAAX,EAAmB;AAC5F2B,MAAAA,IAAI,EAAEP,UAAU,CAACO,IAD2E;AAE5FC,MAAAA,KAAK,EAAER,UAAU,CAACQ;AAF0E,KAAnB,CAA5C;AAL1B,GAAP;AAUD;AACD,OAAO,SAASC,IAAT,CAAcnC,KAAd,EAAqB;AAC1B,SAAO;AACLoC,IAAAA,MAAM,EAAE5C,QAAQ,CAAC6C,MAAT,CAAgB,UAAUC,GAAV,EAAe7B,KAAf,EAAsB;AAC5C,aAAOhB,QAAQ,CAAC+B,GAAT,CAAaf,KAAb,EAAoBf,MAAM,CAAC6C,GAAP,CAAW9B,KAAK,CAACJ,GAAjB,EAAsBI,KAAK,CAACH,MAA5B,EAAoCN,KAAK,CAACC,IAA1C,CAApB,EAAqEqC,GAArE,CAAP;AACD,KAFO,EAELtC,KAAK,CAACU,QAFD,EAEWjB,QAAQ,CAACwB,IAAT,CAAc,EAAd,CAFX,CADH;AAILuB,IAAAA,GAAG,EAAE,KAJA;AAKLC,IAAAA,SAAS,EAAE;AALN,GAAP;AAOD;AACD,OAAO,IAAID,GAAG,GAAG,SAASA,GAAT,CAAaxC,KAAb,EAAoB;AACnC,SAAOT,aAAa,CAAC,EAAD,EAAK4C,IAAI,CAACnC,KAAD,CAAT,EAAkB;AACpCwC,IAAAA,GAAG,EAAE;AAD+B,GAAlB,CAApB;AAGD,CAJM;AAKP,OAAO,SAASE,KAAT,CAAeC,EAAf,EAAmBC,GAAnB,EAAwB;AAC7B,SAAOC,MAAM,CAACC,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAP;AACD;;AAED,SAASF,MAAT,GAAkB;AAChBA,EAAAA,MAAM,GAAGxD,iBAAiB,EAAE,aAAaF,mBAAmB,CAAC6D,IAApB,CAAyB,SAASC,OAAT,CAAiBjD,KAAjB,EAAwBkD,IAAxB,EAA8B;AAC9F,QAAIC,YAAJ,EAAkBf,MAAlB,EAA0BgB,QAA1B,EAAoCC,YAApC,EAAkDC,UAAlD,EAA8DC,gBAA9D,EAAgFtD,IAAhF,EAAsFS,QAAtF,EAAgG8C,MAAhG;;AAEA,WAAOrE,mBAAmB,CAACsE,IAApB,CAAyB,SAASC,QAAT,CAAkBC,QAAlB,EAA4B;AAC1D,aAAO,CAAP,EAAU;AACR,gBAAQA,QAAQ,CAACC,IAAT,GAAgBD,QAAQ,CAACE,IAAjC;AACE,eAAK,CAAL;AACE,gBAAIX,IAAJ,EAAU;AACRS,cAAAA,QAAQ,CAACE,IAAT,GAAgB,CAAhB;AACA;AACD;;AAED,mBAAOF,QAAQ,CAACG,MAAT,CAAgB,QAAhB,EAA0B,IAA1B,CAAP;;AAEF,eAAK,CAAL;AACEX,YAAAA,YAAY,GAAGzD,MAAM,CAACqE,KAAP,CAAab,IAAb,EAAmB,UAAUc,KAAV,EAAiB;AACjD,qBAAO;AACLA,gBAAAA,KAAK,EAAEA;AADF,eAAP;AAGD,aAJc,CAAf;AAKA5B,YAAAA,MAAM,GAAG3C,QAAQ,CAACwE,UAAT,CAAoBd,YAApB,CAAT;AACAC,YAAAA,QAAQ,GAAG5D,QAAQ,CAAC0E,GAAT,CAAa9B,MAAb,CAAX;AACAiB,YAAAA,YAAY,GAAGrD,KAAK,CAACG,MAAN,CAAaE,GAAb,GAAmBX,MAAM,CAACyE,OAAP,CAAehB,YAAf,EAA6BiB,IAA/D;AACAd,YAAAA,UAAU,GAAG5D,MAAM,CAAC2E,SAAP,CAAiBrE,KAAK,CAACC,IAAvB,EAA6BoD,YAA7B,CAAb;AACAE,YAAAA,gBAAgB,GAAG9D,QAAQ,CAAC4C,MAAT,CAAgB,UAAUC,GAAV,EAAe0B,KAAf,EAAsBM,IAAtB,EAA4B;AAC7D,kBAAIjE,GAAG,GAAGiE,IAAI,CAACjE,GAAf;AAAA,kBACIC,MAAM,GAAGgE,IAAI,CAAChE,MADlB;;AAGA,kBAAI,CAACN,KAAK,CAACG,MAAX,EAAmB;AACjB,uBAAOmC,GAAP;AACD;;AAED,kBAAIkB,MAAM,GAAGlB,GAAG,CAACkB,MAAJ,IAAc,EAA3B;AACA,kBAAIe,OAAO,GAAGlE,GAAG,GAAG+C,QAAQ,CAAC/C,GAAf,GAAqBL,KAAK,CAACG,MAAN,CAAaE,GAAhD;AACA,kBAAImE,UAAU,GAAGlE,MAAM,GAAG8C,QAAQ,CAAC9C,MAAlB,GAA2BN,KAAK,CAACG,MAAN,CAAaG,MAAzD;AACA,kBAAImE,QAAQ,GAAGzE,KAAK,CAACwC,GAAN,GAAY9C,MAAM,CAACgF,KAAP,CAAarE,GAAb,EAAkBC,MAAlB,EAA0BgC,GAAG,CAACrC,IAA9B,CAAZ,GAAkDqC,GAAG,CAACrC,IAArE;;AAEA,kBAAID,KAAK,CAACwC,GAAV,EAAe;AACbgB,gBAAAA,MAAM,GAAG,GAAGmB,MAAH,CAAUvF,kBAAkB,CAACoE,MAAD,CAA5B,EAAsC,CAAC;AAC9CoB,kBAAAA,QAAQ,EAAEZ,KADoC;AAE9Ca,kBAAAA,QAAQ,EAAEC;AAFoC,iBAAD,CAAtC,CAAT;AAID;;AAED,kBAAI,CAACpF,MAAM,CAACU,GAAP,CAAWmE,OAAX,EAAoBC,UAApB,EAAgClB,UAAhC,CAAL,EAAkD;AAChD,uBAAO;AACLrD,kBAAAA,IAAI,EAAEwE,QADD;AAEL/D,kBAAAA,QAAQ,EAAE4B,GAAG,CAAC5B,QAFT;AAGL8C,kBAAAA,MAAM,EAAEA;AAHH,iBAAP;AAKD;;AAED,kBAAIuB,YAAY,GAAGrF,MAAM,CAAC6C,GAAP,CAAWgC,OAAX,EAAoBC,UAApB,EAAgCC,QAAhC,KAA6C,EAAhE;AACAjB,cAAAA,MAAM,GAAG,GAAGmB,MAAH,CAAUvF,kBAAkB,CAACoE,MAAD,CAA5B,EAAsC,CAAC;AAC9CoB,gBAAAA,QAAQ,EAAEG,YADoC;AAE9CF,gBAAAA,QAAQ,EAAEb;AAFoC,eAAD,CAAtC,CAAT;AAIA,qBAAO;AACL/D,gBAAAA,IAAI,EAAEP,MAAM,CAAC8B,GAAP,CAAW+C,OAAX,EAAoBC,UAApB,EAAgCjF,aAAa,CAAC,EAAD,EAAKwF,YAAL,EAAmBf,KAAnB,CAA7C,EAAwES,QAAxE,CADD;AAEL/D,gBAAAA,QAAQ,EAAElB,QAAQ,CAACwF,GAAT,CAAa1C,GAAG,CAAC5B,QAAjB,EAA2B;AACnCL,kBAAAA,GAAG,EAAEkE,OAD8B;AAEnCjE,kBAAAA,MAAM,EAAEkE;AAF2B,iBAA3B,CAFL;AAMLhB,gBAAAA,MAAM,EAAEA;AANH,eAAP;AAQD,aAzCkB,EAyChBpB,MAzCgB,EAyCR;AACTnC,cAAAA,IAAI,EAAEqD,UADG;AAET5C,cAAAA,QAAQ,EAAElB,QAAQ,CAACyB,IAAT,CAAc,EAAd,CAFD;AAGTuC,cAAAA,MAAM,EAAE;AAHC,aAzCQ,CAAnB,EA6CIvD,IAAI,GAAGsD,gBAAgB,CAACtD,IA7C5B,EA6CkCS,QAAQ,GAAG6C,gBAAgB,CAAC7C,QA7C9D,EA6CwE8C,MAAM,GAAGD,gBAAgB,CAACC,MA7ClG;AA8CA,mBAAOG,QAAQ,CAACG,MAAT,CAAgB,QAAhB,EAA0B;AAC/B7D,cAAAA,IAAI,EAAEA,IADyB;AAE/BS,cAAAA,QAAQ,EAAEA,QAFqB;AAG/B8B,cAAAA,GAAG,EAAE,KAH0B;AAI/BC,cAAAA,SAAS,EAAE,IAJoB;AAK/BtB,cAAAA,IAAI,EAAE,MALyB;AAM/B8D,cAAAA,UAAU,EAAEzB;AANmB,aAA1B,CAAP;;AASF,eAAK,CAAL;AACA,eAAK,KAAL;AACE,mBAAOG,QAAQ,CAACuB,IAAT,EAAP;AA5EJ;AA8ED;AACF,KAjFM,EAiFJjC,OAjFI,CAAP;AAkFD,GArFwC,CAAf,CAA1B;AAsFA,SAAOJ,MAAM,CAACC,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAP;AACD;;AAED,OAAO,IAAIoC,IAAI,GAAG,SAASA,IAAT,CAAcnF,KAAd,EAAqB;AACrC,MAAIsB,gBAAgB,CAACtB,KAAD,CAApB,EAA6B;AAC3B,WAAO,IAAP;AACD;;AAED,SAAO;AACLmB,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CARM;AASP,OAAO,IAAIiE,IAAI,GAAG,SAASA,IAAT,GAAgB;AAChC,SAAO;AACLjE,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;AAKP,OAAO,IAAIkE,KAAK,GAAG,SAASA,KAAT,CAAerF,KAAf,EAAsB;AACvC,MAAI,CAACA,KAAK,CAACG,MAAX,EAAmB;AACjB,WAAO,IAAP;AACD;;AAED,MAAImF,aAAa,GAAGtF,KAAK,CAACG,MAA1B;AAAA,MACIE,GAAG,GAAGiF,aAAa,CAACjF,GADxB;AAAA,MAEIC,MAAM,GAAGgF,aAAa,CAAChF,MAF3B;AAGA,MAAIiF,IAAI,GAAG7F,MAAM,CAAC6C,GAAP,CAAWlC,GAAX,EAAgBC,MAAhB,EAAwBN,KAAK,CAACC,IAA9B,CAAX;AACA,SAAOV,aAAa,CAAC;AACnBU,IAAAA,IAAI,EAAET,QAAQ,CAAC6C,MAAT,CAAgB,UAAUC,GAAV,EAAe7B,KAAf,EAAsB;AAC1C,aAAOX,UAAU,CAACwC,GAAD,EAAM/C,aAAa,CAAC,EAAD,EAAKkB,KAAL,EAAY;AAC9CR,QAAAA,IAAI,EAAEV,aAAa,CAAC,EAAD,EAAKgG,IAAL,EAAW;AAC5BvB,UAAAA,KAAK,EAAE;AADqB,SAAX;AAD2B,OAAZ,CAAnB,CAAjB;AAKD,KANK,EAMHhE,KAAK,CAACU,QANH,EAMaV,KAAK,CAACC,IANnB;AADa,GAAD,EAQjBuD,MAAM,CAACxD,KAAD,EAAQR,QAAQ,CAACgG,OAAT,CAAiBxF,KAAK,CAACU,QAAvB,EAAiCE,GAAjC,CAAqC,UAAUH,KAAV,EAAiB;AACrE,QAAI8E,IAAI,GAAG7F,MAAM,CAAC6C,GAAP,CAAW9B,KAAK,CAACJ,GAAjB,EAAsBI,KAAK,CAACH,MAA5B,EAAoCN,KAAK,CAACC,IAA1C,CAAX;AACA,WAAO;AACL2E,MAAAA,QAAQ,EAAEW,IADL;AAELV,MAAAA,QAAQ,EAAEtF,aAAa,CAAC,EAAD,EAAKgG,IAAL,EAAW;AAChCvB,QAAAA,KAAK,EAAE;AADyB,OAAX;AAFlB,KAAP;AAMD,GARgB,CAAR,CARW,CAApB;AAiBD,CA1BM;AA2BP,OAAO,IAAIyB,EAAE,GAAG,SAASA,EAAT,CAAYC,QAAZ,EAAsBC,WAAtB,EAAmC;AACjD,SAAO,UAAU3F,KAAV,EAAiB4F,KAAjB,EAAwB;AAC7B,QAAI,CAAC5F,KAAK,CAACG,MAAX,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,QAAID,UAAU,GAAG;AACfG,MAAAA,GAAG,EAAEL,KAAK,CAACG,MAAN,CAAaE,GAAb,GAAmBqF,QADT;AAEfpF,MAAAA,MAAM,EAAEN,KAAK,CAACG,MAAN,CAAaG,MAAb,GAAsBqF;AAFf,KAAjB;;AAKA,QAAI,CAACjG,MAAM,CAACU,GAAP,CAAWF,UAAU,CAACG,GAAtB,EAA2BH,UAAU,CAACI,MAAtC,EAA8CN,KAAK,CAACC,IAApD,CAAL,EAAgE;AAC9D,aAAO;AACLkB,QAAAA,IAAI,EAAE;AADD,OAAP;AAGD;;AAED,WAAO;AACLhB,MAAAA,MAAM,EAAED,UADH;AAELQ,MAAAA,QAAQ,EAAElB,QAAQ,CAACyB,IAAT,CAAc,CAACf,UAAD,CAAd,CAFL;AAGLiB,MAAAA,IAAI,EAAE;AAHD,KAAP;AAKD,GArBD;AAsBD,CAvBM;AAwBP,OAAO,IAAI0E,UAAU,GAAG,SAASA,UAAT,CAAoBC,KAApB,EAA2BC,KAA3B,EAAkC;AACxD,SAAO,UAAU/F,KAAV,EAAiB4F,KAAjB,EAAwB;AAC7B,QAAI,CAAC5F,KAAK,CAACG,MAAX,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,QAAI6F,WAAW,GAAGxG,QAAQ,CAACY,GAAT,CAAaJ,KAAK,CAACU,QAAnB,EAA6BnB,aAAa,CAAC,EAAD,EAAKS,KAAK,CAACG,MAAX,EAAmBb,eAAe,CAAC,EAAD,EAAKwG,KAAL,EAAY9F,KAAK,CAACG,MAAN,CAAa2F,KAAb,IAAsBC,KAAK,GAAG,CAAC,CAA3C,CAAlC,CAA1C,CAAlB;AACA,QAAIxF,YAAY,GAAGyF,WAAW,GAAGxG,QAAQ,CAACyG,UAAT,CAAoBjG,KAAK,CAACU,QAA1B,EAAoCoF,KAApC,EAA2CC,KAAK,GAAG,CAAC,CAApD,CAAH,GAA4DvG,QAAQ,CAAC0G,UAAT,CAAoBlG,KAAK,CAACU,QAA1B,EAAoCoF,KAApC,EAA2CC,KAA3C,CAA1F;AACA,WAAO;AACLrF,MAAAA,QAAQ,EAAElB,QAAQ,CAACgB,MAAT,CAAgB,UAAUC,KAAV,EAAiB;AACzC,eAAOf,MAAM,CAACU,GAAP,CAAWK,KAAK,CAACJ,GAAjB,EAAsBI,KAAK,CAACH,MAA5B,EAAoCN,KAAK,CAACC,IAA1C,CAAP;AACD,OAFS,EAEPM,YAFO;AADL,KAAP;AAKD,GAZD;AAaD,CAdM;AAeP,OAAO,IAAI4F,IAAI,GAAG,SAASA,IAAT,GAAgB;AAChC,SAAO;AACLhG,IAAAA,MAAM,EAAE;AADH,GAAP;AAGD,CAJM,C,CAIJ;;AAEH;;AACA,IAAIiG,eAAe,GAAG;AACpBC,EAAAA,OAAO,EAAEZ,EAAE,CAAC,CAAC,CAAF,EAAK,CAAL,CADS;AAEpBa,EAAAA,SAAS,EAAEb,EAAE,CAAC,CAAC,CAAF,EAAK,CAAL,CAFO;AAGpBc,EAAAA,SAAS,EAAEd,EAAE,CAAC,CAAD,EAAI,CAAC,CAAL,CAHO;AAIpBe,EAAAA,UAAU,EAAEf,EAAE,CAAC,CAAD,EAAI,CAAC,CAAL,CAJM;AAKpBgB,EAAAA,GAAG,EAAEhB,EAAE,CAAC,CAAD,EAAI,CAAC,CAAL,CALa;AAMpBiB,EAAAA,KAAK,EAAEvB,IANa;AAOpBwB,EAAAA,SAAS,EAAEtB,KAPS;AAQpBuB,EAAAA,MAAM,EAAET;AARY,CAAtB;AAUA,IAAIU,mBAAmB,GAAG;AACxBD,EAAAA,MAAM,EAAExB,IADgB;AAExBqB,EAAAA,GAAG,EAAEL,eAAe,CAACK,GAFG;AAGxBC,EAAAA,KAAK,EAAEN,eAAe,CAACE;AAHC,CAA1B;AAKA,IAAIQ,oBAAoB,GAAG;AACzBT,EAAAA,OAAO,EAAER,UAAU,CAAC,KAAD,EAAQ,CAAC,CAAT,CADM;AAEzBS,EAAAA,SAAS,EAAET,UAAU,CAAC,KAAD,EAAQ,CAAR,CAFI;AAGzBU,EAAAA,SAAS,EAAEV,UAAU,CAAC,QAAD,EAAW,CAAC,CAAZ,CAHI;AAIzBW,EAAAA,UAAU,EAAEX,UAAU,CAAC,QAAD,EAAW,CAAX;AAJG,CAA3B;AAMA,IAAIkB,wBAAwB,GAAG,EAA/B;AACA,IAAIC,mBAAmB,GAAG,EAA1B;;AAEA,SAASC,SAAT,CAAmBjH,KAAnB,EAA0B;AACxB,SAAOA,KAAK,CAACG,MAAN,IAAgBT,MAAM,CAAC6C,GAAP,CAAWvC,KAAK,CAACG,MAAN,CAAaE,GAAxB,EAA6BL,KAAK,CAACG,MAAN,CAAaG,MAA1C,EAAkDN,KAAK,CAACC,IAAxD,CAAvB;AACD;;AAED,IAAIqB,gBAAgB,GAAG,SAASA,gBAAT,CAA0BtB,KAA1B,EAAiC;AACtD,MAAIkH,UAAU,GAAGD,SAAS,CAACjH,KAAD,CAA1B;AACA,SAAOmH,OAAO,CAACD,UAAU,IAAIA,UAAU,CAACE,QAA1B,CAAd;AACD,CAHD;;AAKA,OAAO,SAASC,QAAT,CAAkBrH,KAAlB,EAAyB4F,KAAzB,EAAgC;AACrC,MAAItE,gBAAgB,CAACtB,KAAD,CAAhB,IAA2B4F,KAAK,CAAC0B,OAArC,EAA8C;AAC5C,WAAO,IAAP;AACD;;AAED,MAAItH,KAAK,CAACmB,IAAN,KAAe,MAAf,IAAyBnB,KAAK,CAACG,MAAnC,EAA2C;AACzC,WAAO;AACLgB,MAAAA,IAAI,EAAE;AADD,KAAP;AAGD;;AAED,SAAO,IAAP;AACD;AACD,OAAO,SAASoG,iBAAT,CAA2BvH,KAA3B,EAAkC4F,KAAlC,EAAyC;AAC9C,MAAI4B,GAAG,GAAG5B,KAAK,CAAC4B,GAAhB;AACA,MAAIC,QAAJ,CAF8C,CAEhC;;AAEd,MAAIzH,KAAK,CAACmB,IAAN,KAAe,MAAnB,EAA2B;AACzBsG,IAAAA,QAAQ,GAAGZ,mBAAX;AACD,GAFD,MAEO,IAAIjB,KAAK,CAAC8B,QAAN,IAAkB9B,KAAK,CAAC0B,OAA5B,EAAqC;AAC1CG,IAAAA,QAAQ,GAAGV,wBAAX;AACD,GAFM,MAEA,IAAInB,KAAK,CAAC8B,QAAV,EAAoB;AACzBD,IAAAA,QAAQ,GAAGX,oBAAX;AACD,GAFM,MAEA,IAAIlB,KAAK,CAAC0B,OAAV,EAAmB;AACxBG,IAAAA,QAAQ,GAAGT,mBAAX;AACD,GAFM,MAEA;AACLS,IAAAA,QAAQ,GAAGrB,eAAX;AACD;;AAED,SAAOqB,QAAQ,CAACD,GAAD,CAAf;AACD;AACD,OAAO,SAASG,OAAT,CAAiB3H,KAAjB,EAAwB4F,KAAxB,EAA+B;AACpC,MAAIgC,OAAO,GAAGL,iBAAiB,CAACvH,KAAD,EAAQ4F,KAAR,CAA/B;;AAEA,MAAIgC,OAAJ,EAAa;AACX,WAAOA,OAAO,CAAC5H,KAAD,EAAQ4F,KAAR,CAAd;AACD;;AAED,SAAO,IAAP;AACD;AACD,OAAO,SAASiC,SAAT,CAAmB7H,KAAnB,EAA0B;AAC/B,SAAO;AACL8H,IAAAA,QAAQ,EAAE;AADL,GAAP;AAGD;AACD,OAAO,SAASC,OAAT,CAAiB/H,KAAjB,EAAwB;AAC7B,SAAO;AACL8H,IAAAA,QAAQ,EAAE;AADL,GAAP;AAGD;AACD,OAAO,SAAStE,MAAT,CAAgBxD,KAAhB,EAAuBgI,OAAvB,EAAgC;AACrC,SAAO;AACL/C,IAAAA,UAAU,EAAE+C;AADP,GAAP;AAGD","sourcesContent":["import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport * as PointSet from \"./point-set\";\nimport * as PointMap from \"./point-map\";\nimport * as Matrix from \"./matrix\";\nimport * as Types from \"./types\";\nimport { isActive, setCell, updateData } from \"./util\";\nexport var setData = function setData(state, data) {\n  var nextActive = state.active && Matrix.has(state.active.row, state.active.column, data) ? state.active : null;\n  var nextSelected = PointSet.filter(function (point) {\n    return Matrix.has(point.row, point.column, data);\n  }, state.selected);\n  var nextBindings = PointMap.map(function (bindings) {\n    return PointSet.filter(function (point) {\n      return Matrix.has(point.row, point.column, data);\n    }, bindings);\n  }, PointMap.filter(function (_, point) {\n    return Matrix.has(point.row, point.column, data);\n  }, state.bindings));\n  return {\n    data: data,\n    active: nextActive,\n    selected: nextSelected,\n    bindings: nextBindings\n  };\n};\nexport var select = function select(state, cellPointer) {\n  if (state.active && !isActive(state.active, cellPointer)) {\n    return {\n      selected: PointSet.from(Matrix.inclusiveRange({\n        row: cellPointer.row,\n        column: cellPointer.column\n      }, {\n        row: state.active.row,\n        column: state.active.column\n      })),\n      mode: \"view\"\n    };\n  }\n\n  return null;\n};\nexport var activate = function activate(state, cellPointer) {\n  return {\n    selected: PointSet.from([cellPointer]),\n    active: cellPointer,\n    mode: isActive(state.active, cellPointer) ? \"edit\" : \"view\"\n  };\n};\nexport function setCellData(state, active, data, bindings) {\n  if (isActiveReadOnly(state)) {\n    return null;\n  }\n\n  return {\n    mode: \"edit\",\n    data: setCell(state, active, data),\n    lastChanged: active,\n    bindings: PointMap.set(active, PointSet.from(bindings), state.bindings)\n  };\n}\nexport function setCellDimensions(state, point, dimensions) {\n  var prevRowDimensions = state.rowDimensions[point.row];\n  var prevColumnDimensions = state.columnDimensions[point.column];\n\n  if (prevRowDimensions && prevColumnDimensions && prevRowDimensions.top === dimensions.top && prevRowDimensions.height === dimensions.height && prevColumnDimensions.left === dimensions.left && prevColumnDimensions.width === dimensions.width) {\n    return null;\n  }\n\n  return {\n    rowDimensions: _objectSpread({}, state.rowDimensions, _defineProperty({}, point.row, {\n      top: dimensions.top,\n      height: dimensions.height\n    })),\n    columnDimensions: _objectSpread({}, state.columnDimensions, _defineProperty({}, point.column, {\n      left: dimensions.left,\n      width: dimensions.width\n    }))\n  };\n}\nexport function copy(state) {\n  return {\n    copied: PointSet.reduce(function (acc, point) {\n      return PointMap.set(point, Matrix.get(point.row, point.column, state.data), acc);\n    }, state.selected, PointMap.from([])),\n    cut: false,\n    hasPasted: false\n  };\n}\nexport var cut = function cut(state) {\n  return _objectSpread({}, copy(state), {\n    cut: true\n  });\n};\nexport function paste(_x, _x2) {\n  return _paste.apply(this, arguments);\n}\n\nfunction _paste() {\n  _paste = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(state, text) {\n    var copiedMatrix, copied, minPoint, requiredRows, paddedData, _PointMap$reduce, data, selected, commit;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (text) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", null);\n\n          case 2:\n            copiedMatrix = Matrix.split(text, function (value) {\n              return {\n                value: value\n              };\n            });\n            copied = PointMap.fromMatrix(copiedMatrix);\n            minPoint = PointSet.min(copied);\n            requiredRows = state.active.row + Matrix.getSize(copiedMatrix).rows;\n            paddedData = Matrix.padMatrix(state.data, requiredRows);\n            _PointMap$reduce = PointMap.reduce(function (acc, value, _ref) {\n              var row = _ref.row,\n                  column = _ref.column;\n\n              if (!state.active) {\n                return acc;\n              }\n\n              var commit = acc.commit || [];\n              var nextRow = row - minPoint.row + state.active.row;\n              var nextColumn = column - minPoint.column + state.active.column;\n              var nextData = state.cut ? Matrix.unset(row, column, acc.data) : acc.data;\n\n              if (state.cut) {\n                commit = [].concat(_toConsumableArray(commit), [{\n                  prevCell: value,\n                  nextCell: undefined\n                }]);\n              }\n\n              if (!Matrix.has(nextRow, nextColumn, paddedData)) {\n                return {\n                  data: nextData,\n                  selected: acc.selected,\n                  commit: commit\n                };\n              }\n\n              var currentValue = Matrix.get(nextRow, nextColumn, nextData) || {};\n              commit = [].concat(_toConsumableArray(commit), [{\n                prevCell: currentValue,\n                nextCell: value\n              }]);\n              return {\n                data: Matrix.set(nextRow, nextColumn, _objectSpread({}, currentValue, value), nextData),\n                selected: PointSet.add(acc.selected, {\n                  row: nextRow,\n                  column: nextColumn\n                }),\n                commit: commit\n              };\n            }, copied, {\n              data: paddedData,\n              selected: PointSet.from([]),\n              commit: []\n            }), data = _PointMap$reduce.data, selected = _PointMap$reduce.selected, commit = _PointMap$reduce.commit;\n            return _context.abrupt(\"return\", {\n              data: data,\n              selected: selected,\n              cut: false,\n              hasPasted: true,\n              mode: \"view\",\n              lastCommit: commit\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _paste.apply(this, arguments);\n}\n\nexport var edit = function edit(state) {\n  if (isActiveReadOnly(state)) {\n    return null;\n  }\n\n  return {\n    mode: \"edit\"\n  };\n};\nexport var view = function view() {\n  return {\n    mode: \"view\"\n  };\n};\nexport var clear = function clear(state) {\n  if (!state.active) {\n    return null;\n  }\n\n  var _state$active = state.active,\n      row = _state$active.row,\n      column = _state$active.column;\n  var cell = Matrix.get(row, column, state.data);\n  return _objectSpread({\n    data: PointSet.reduce(function (acc, point) {\n      return updateData(acc, _objectSpread({}, point, {\n        data: _objectSpread({}, cell, {\n          value: \"\"\n        })\n      }));\n    }, state.selected, state.data)\n  }, commit(state, PointSet.toArray(state.selected).map(function (point) {\n    var cell = Matrix.get(point.row, point.column, state.data);\n    return {\n      prevCell: cell,\n      nextCell: _objectSpread({}, cell, {\n        value: \"\"\n      })\n    };\n  })));\n};\nexport var go = function go(rowDelta, columnDelta) {\n  return function (state, event) {\n    if (!state.active) {\n      return null;\n    }\n\n    var nextActive = {\n      row: state.active.row + rowDelta,\n      column: state.active.column + columnDelta\n    };\n\n    if (!Matrix.has(nextActive.row, nextActive.column, state.data)) {\n      return {\n        mode: \"view\"\n      };\n    }\n\n    return {\n      active: nextActive,\n      selected: PointSet.from([nextActive]),\n      mode: \"view\"\n    };\n  };\n};\nexport var modifyEdge = function modifyEdge(field, delta) {\n  return function (state, event) {\n    if (!state.active) {\n      return null;\n    }\n\n    var edgeOffsets = PointSet.has(state.selected, _objectSpread({}, state.active, _defineProperty({}, field, state.active[field] + delta * -1)));\n    var nextSelected = edgeOffsets ? PointSet.shrinkEdge(state.selected, field, delta * -1) : PointSet.extendEdge(state.selected, field, delta);\n    return {\n      selected: PointSet.filter(function (point) {\n        return Matrix.has(point.row, point.column, state.data);\n      }, nextSelected)\n    };\n  };\n};\nexport var blur = function blur() {\n  return {\n    active: null\n  };\n}; // Key Bindings\n\n/** @todo handle inactive state? */\nvar keyDownHandlers = {\n  ArrowUp: go(-1, 0),\n  ArrowDown: go(+1, 0),\n  ArrowLeft: go(0, -1),\n  ArrowRight: go(0, +1),\n  Tab: go(0, +1),\n  Enter: edit,\n  Backspace: clear,\n  Escape: blur\n};\nvar editKeyDownHandlers = {\n  Escape: view,\n  Tab: keyDownHandlers.Tab,\n  Enter: keyDownHandlers.ArrowDown\n};\nvar shiftKeyDownHandlers = {\n  ArrowUp: modifyEdge(\"row\", -1),\n  ArrowDown: modifyEdge(\"row\", 1),\n  ArrowLeft: modifyEdge(\"column\", -1),\n  ArrowRight: modifyEdge(\"column\", 1)\n};\nvar shiftMetaKeyDownHandlers = {};\nvar metaKeyDownHandlers = {};\n\nfunction getActive(state) {\n  return state.active && Matrix.get(state.active.row, state.active.column, state.data);\n}\n\nvar isActiveReadOnly = function isActiveReadOnly(state) {\n  var activeCell = getActive(state);\n  return Boolean(activeCell && activeCell.readOnly);\n};\n\nexport function keyPress(state, event) {\n  if (isActiveReadOnly(state) || event.metaKey) {\n    return null;\n  }\n\n  if (state.mode === \"view\" && state.active) {\n    return {\n      mode: \"edit\"\n    };\n  }\n\n  return null;\n}\nexport function getKeyDownHandler(state, event) {\n  var key = event.key;\n  var handlers; // Order matters\n\n  if (state.mode === \"edit\") {\n    handlers = editKeyDownHandlers;\n  } else if (event.shiftKey && event.metaKey) {\n    handlers = shiftMetaKeyDownHandlers;\n  } else if (event.shiftKey) {\n    handlers = shiftKeyDownHandlers;\n  } else if (event.metaKey) {\n    handlers = metaKeyDownHandlers;\n  } else {\n    handlers = keyDownHandlers;\n  }\n\n  return handlers[key];\n}\nexport function keyDown(state, event) {\n  var handler = getKeyDownHandler(state, event);\n\n  if (handler) {\n    return handler(state, event);\n  }\n\n  return null;\n}\nexport function dragStart(state) {\n  return {\n    dragging: true\n  };\n}\nexport function dragEnd(state) {\n  return {\n    dragging: false\n  };\n}\nexport function commit(state, changes) {\n  return {\n    lastCommit: changes\n  };\n}"]},"metadata":{},"sourceType":"module"}