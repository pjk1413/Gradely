{"ast":null,"code":"/* eslint-disable import/prefer-default-export */\nimport { isEmpty } from '../../../helpers/mixed';\nimport { DO_NOT_SWAP, FIRST_BEFORE_SECOND, FIRST_AFTER_SECOND } from '../sortService';\n/**\n * Default sorting compare function factory. Method get as parameters `sortOrder` and `columnMeta` and return compare function.\n *\n * @param {String} sortOrder Sort order (`asc` for ascending, `desc` for descending).\n * @param {Object} columnMeta Column meta object.\n * @param {Object} columnPluginSettings Plugin settings for the column.\n * @returns {Function} The compare function.\n */\n\nexport function compareFunctionFactory(sortOrder, columnMeta, columnPluginSettings) {\n  return function (value, nextValue) {\n    var sortEmptyCells = columnPluginSettings.sortEmptyCells;\n\n    if (typeof value === 'string') {\n      value = value.toLowerCase();\n    }\n\n    if (typeof nextValue === 'string') {\n      nextValue = nextValue.toLowerCase();\n    }\n\n    if (value === nextValue) {\n      return DO_NOT_SWAP;\n    }\n\n    if (isEmpty(value)) {\n      if (isEmpty(nextValue)) {\n        return DO_NOT_SWAP;\n      } // Just fist value is empty and `sortEmptyCells` option was set\n\n\n      if (sortEmptyCells) {\n        return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n      }\n\n      return FIRST_AFTER_SECOND;\n    }\n\n    if (isEmpty(nextValue)) {\n      // Just second value is empty and `sortEmptyCells` option was set\n      if (sortEmptyCells) {\n        return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n      }\n\n      return FIRST_BEFORE_SECOND;\n    }\n\n    if (isNaN(value) && !isNaN(nextValue)) {\n      return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n    } else if (!isNaN(value) && isNaN(nextValue)) {\n      return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n    } else if (!(isNaN(value) || isNaN(nextValue))) {\n      value = parseFloat(value);\n      nextValue = parseFloat(nextValue);\n    }\n\n    if (value < nextValue) {\n      return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n    }\n\n    if (value > nextValue) {\n      return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n    }\n\n    return DO_NOT_SWAP;\n  };\n}\nexport var COLUMN_DATA_TYPE = 'default';","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react/node_modules/handsontable/es/plugins/columnSorting/sortFunction/default.js"],"names":["isEmpty","DO_NOT_SWAP","FIRST_BEFORE_SECOND","FIRST_AFTER_SECOND","compareFunctionFactory","sortOrder","columnMeta","columnPluginSettings","value","nextValue","sortEmptyCells","toLowerCase","isNaN","parseFloat","COLUMN_DATA_TYPE"],"mappings":"AAAA;AACA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,WAAT,EAAsBC,mBAAtB,EAA2CC,kBAA3C,QAAqE,gBAArE;AACA;;;;;;;;;AASA,OAAO,SAASC,sBAAT,CAAgCC,SAAhC,EAA2CC,UAA3C,EAAuDC,oBAAvD,EAA6E;AAClF,SAAO,UAAUC,KAAV,EAAiBC,SAAjB,EAA4B;AACjC,QAAIC,cAAc,GAAGH,oBAAoB,CAACG,cAA1C;;AAEA,QAAI,OAAOF,KAAP,KAAiB,QAArB,EAA+B;AAC7BA,MAAAA,KAAK,GAAGA,KAAK,CAACG,WAAN,EAAR;AACD;;AAED,QAAI,OAAOF,SAAP,KAAqB,QAAzB,EAAmC;AACjCA,MAAAA,SAAS,GAAGA,SAAS,CAACE,WAAV,EAAZ;AACD;;AAED,QAAIH,KAAK,KAAKC,SAAd,EAAyB;AACvB,aAAOR,WAAP;AACD;;AAED,QAAID,OAAO,CAACQ,KAAD,CAAX,EAAoB;AAClB,UAAIR,OAAO,CAACS,SAAD,CAAX,EAAwB;AACtB,eAAOR,WAAP;AACD,OAHiB,CAGhB;;;AAGF,UAAIS,cAAJ,EAAoB;AAClB,eAAOL,SAAS,KAAK,KAAd,GAAsBH,mBAAtB,GAA4CC,kBAAnD;AACD;;AAED,aAAOA,kBAAP;AACD;;AAED,QAAIH,OAAO,CAACS,SAAD,CAAX,EAAwB;AACtB;AACA,UAAIC,cAAJ,EAAoB;AAClB,eAAOL,SAAS,KAAK,KAAd,GAAsBF,kBAAtB,GAA2CD,mBAAlD;AACD;;AAED,aAAOA,mBAAP;AACD;;AAED,QAAIU,KAAK,CAACJ,KAAD,CAAL,IAAgB,CAACI,KAAK,CAACH,SAAD,CAA1B,EAAuC;AACrC,aAAOJ,SAAS,KAAK,KAAd,GAAsBF,kBAAtB,GAA2CD,mBAAlD;AACD,KAFD,MAEO,IAAI,CAACU,KAAK,CAACJ,KAAD,CAAN,IAAiBI,KAAK,CAACH,SAAD,CAA1B,EAAuC;AAC5C,aAAOJ,SAAS,KAAK,KAAd,GAAsBH,mBAAtB,GAA4CC,kBAAnD;AACD,KAFM,MAEA,IAAI,EAAES,KAAK,CAACJ,KAAD,CAAL,IAAgBI,KAAK,CAACH,SAAD,CAAvB,CAAJ,EAAyC;AAC9CD,MAAAA,KAAK,GAAGK,UAAU,CAACL,KAAD,CAAlB;AACAC,MAAAA,SAAS,GAAGI,UAAU,CAACJ,SAAD,CAAtB;AACD;;AAED,QAAID,KAAK,GAAGC,SAAZ,EAAuB;AACrB,aAAOJ,SAAS,KAAK,KAAd,GAAsBH,mBAAtB,GAA4CC,kBAAnD;AACD;;AAED,QAAIK,KAAK,GAAGC,SAAZ,EAAuB;AACrB,aAAOJ,SAAS,KAAK,KAAd,GAAsBF,kBAAtB,GAA2CD,mBAAlD;AACD;;AAED,WAAOD,WAAP;AACD,GAvDD;AAwDD;AACD,OAAO,IAAIa,gBAAgB,GAAG,SAAvB","sourcesContent":["/* eslint-disable import/prefer-default-export */\nimport { isEmpty } from '../../../helpers/mixed';\nimport { DO_NOT_SWAP, FIRST_BEFORE_SECOND, FIRST_AFTER_SECOND } from '../sortService';\n/**\n * Default sorting compare function factory. Method get as parameters `sortOrder` and `columnMeta` and return compare function.\n *\n * @param {String} sortOrder Sort order (`asc` for ascending, `desc` for descending).\n * @param {Object} columnMeta Column meta object.\n * @param {Object} columnPluginSettings Plugin settings for the column.\n * @returns {Function} The compare function.\n */\n\nexport function compareFunctionFactory(sortOrder, columnMeta, columnPluginSettings) {\n  return function (value, nextValue) {\n    var sortEmptyCells = columnPluginSettings.sortEmptyCells;\n\n    if (typeof value === 'string') {\n      value = value.toLowerCase();\n    }\n\n    if (typeof nextValue === 'string') {\n      nextValue = nextValue.toLowerCase();\n    }\n\n    if (value === nextValue) {\n      return DO_NOT_SWAP;\n    }\n\n    if (isEmpty(value)) {\n      if (isEmpty(nextValue)) {\n        return DO_NOT_SWAP;\n      } // Just fist value is empty and `sortEmptyCells` option was set\n\n\n      if (sortEmptyCells) {\n        return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n      }\n\n      return FIRST_AFTER_SECOND;\n    }\n\n    if (isEmpty(nextValue)) {\n      // Just second value is empty and `sortEmptyCells` option was set\n      if (sortEmptyCells) {\n        return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n      }\n\n      return FIRST_BEFORE_SECOND;\n    }\n\n    if (isNaN(value) && !isNaN(nextValue)) {\n      return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n    } else if (!isNaN(value) && isNaN(nextValue)) {\n      return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n    } else if (!(isNaN(value) || isNaN(nextValue))) {\n      value = parseFloat(value);\n      nextValue = parseFloat(nextValue);\n    }\n\n    if (value < nextValue) {\n      return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n    }\n\n    if (value > nextValue) {\n      return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n    }\n\n    return DO_NOT_SWAP;\n  };\n}\nexport var COLUMN_DATA_TYPE = 'default';"]},"metadata":{},"sourceType":"module"}