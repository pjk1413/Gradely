{"ast":null,"code":"function _templateObject() {\n  var data = _taggedTemplateLiteral([\"The column of index \", \" has been already applied with a `\", \"`\\n        filter operation. Use `removeConditions` to clear the current conditions and then add new ones.\\n        Mind that you cannot mix different types of operations (for instance, if you use `conjunction`,\\n        use it consequently for a particular column).\"], [\"The column of index \", \" has been already applied with a \\\\`\", \"\\\\`\\n        filter operation. Use \\\\`removeConditions\\\\` to clear the current conditions and then add new ones.\\n        Mind that you cannot mix different types of operations (for instance, if you use \\\\`conjunction\\\\`,\\n        use it consequently for a particular column).\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport { arrayEach, arrayMap, arrayFilter } from '../../helpers/array';\nimport { objectEach, mixin } from '../../helpers/object';\nimport { toSingleLine } from '../../helpers/templateLiteralTag';\nimport localHooks from '../../mixins/localHooks';\nimport { getCondition } from './conditionRegisterer';\nimport { OPERATION_ID as OPERATION_AND } from './logicalOperations/conjunction';\nimport { operations, getOperationFunc } from './logicalOperationRegisterer';\n/**\n * @class ConditionCollection\n * @plugin Filters\n */\n\nvar ConditionCollection = /*#__PURE__*/function () {\n  function ConditionCollection() {\n    _classCallCheck(this, ConditionCollection);\n    /**\n     * Conditions collection grouped by operation type and then column index.\n     *\n     * @type {Object}\n     */\n\n\n    this.conditions = this.initConditionsCollection();\n    /**\n     * Types of operations grouped by column index.\n     *\n     * @type {Object}\n     */\n\n    this.columnTypes = {};\n    /**\n     * Order of added condition filters.\n     *\n     * @type {Array}\n     */\n\n    this.orderStack = [];\n  }\n  /**\n   * Check if condition collection is empty (so no needed to filter data).\n   *\n   * @returns {Boolean}\n   */\n\n\n  _createClass(ConditionCollection, [{\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return !this.orderStack.length;\n    }\n    /**\n     * Check if value is matched to the criteria of conditions chain.\n     *\n     * @param {Object} value Object with `value` and `meta` keys.\n     * @param {Number} [column] Column index.\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isMatch\",\n    value: function isMatch(value, column) {\n      var _this = this;\n\n      var result = true;\n\n      if (column === void 0) {\n        objectEach(this.columnTypes, function (columnType, columnIndex) {\n          result = _this.isMatchInConditions(_this.conditions[columnType][columnIndex], value, columnType);\n          return result;\n        });\n      } else {\n        var columnType = this.columnTypes[column];\n        result = this.isMatchInConditions(this.getConditions(column), value, columnType);\n      }\n\n      return result;\n    }\n    /**\n     * Check if the value is matches the conditions.\n     *\n     * @param {Array} conditions List of conditions.\n     * @param {Object} value Object with `value` and `meta` keys.\n     * @param {String} [operationType='conjunction'] Type of conditions operation\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isMatchInConditions\",\n    value: function isMatchInConditions(conditions, value) {\n      var operationType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : OPERATION_AND;\n      var result = false;\n\n      if (conditions.length) {\n        result = getOperationFunc(operationType)(conditions, value);\n      } else {\n        result = true;\n      }\n\n      return result;\n    }\n    /**\n     * Add condition to the collection.\n     *\n     * @param {Number} column Column index.\n     * @param {Object} conditionDefinition Object with keys:\n     *  * `command` Object, Command object with condition name as `key` property.\n     *  * `args` Array, Condition arguments.\n     * @param {String} [operation='conjunction'] Type of conditions operation\n     * @fires ConditionCollection#beforeAdd\n     * @fires ConditionCollection#afterAdd\n     */\n\n  }, {\n    key: \"addCondition\",\n    value: function addCondition(column, conditionDefinition) {\n      var operation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : OPERATION_AND;\n      var args = arrayMap(conditionDefinition.args, function (v) {\n        return typeof v === 'string' ? v.toLowerCase() : v;\n      });\n      var name = conditionDefinition.name || conditionDefinition.command.key;\n      this.runLocalHooks('beforeAdd', column);\n\n      if (this.orderStack.indexOf(column) === -1) {\n        this.orderStack.push(column);\n      }\n\n      var columnType = this.columnTypes[column];\n\n      if (columnType) {\n        if (columnType !== operation) {\n          throw Error(toSingleLine(_templateObject(), column, columnType));\n        }\n      } else {\n        if (!this.conditions[operation]) {\n          throw new Error(\"Unexpected operation named `\".concat(operation, \"`. Possible ones are `disjunction` and `conjunction`.\"));\n        }\n\n        this.columnTypes[column] = operation;\n      } // Add condition\n\n\n      this.getConditions(column).push({\n        name: name,\n        args: args,\n        func: getCondition(name, args)\n      });\n      this.runLocalHooks('afterAdd', column);\n    }\n    /**\n     * Get all added conditions from the collection at specified column index.\n     *\n     * @param {Number} column Column index.\n     * @returns {Array} Returns conditions collection as an array.\n     */\n\n  }, {\n    key: \"getConditions\",\n    value: function getConditions(column) {\n      var columnType = this.columnTypes[column];\n\n      if (!columnType) {\n        return [];\n      }\n\n      if (!this.conditions[columnType][column]) {\n        this.conditions[columnType][column] = [];\n      }\n\n      return this.conditions[columnType][column];\n    }\n    /**\n     * Export all previously added conditions.\n     *\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"exportAllConditions\",\n    value: function exportAllConditions() {\n      var _this2 = this;\n\n      var result = [];\n      arrayEach(this.orderStack, function (column) {\n        var conditions = arrayMap(_this2.getConditions(column), function (_ref) {\n          var name = _ref.name,\n              args = _ref.args;\n          return {\n            name: name,\n            args: args\n          };\n        });\n        var operation = _this2.columnTypes[column];\n        result.push({\n          column: column,\n          operation: operation,\n          conditions: conditions\n        });\n      });\n      return result;\n    }\n    /**\n     * Import conditions to the collection.\n     */\n\n  }, {\n    key: \"importAllConditions\",\n    value: function importAllConditions(conditions) {\n      var _this3 = this;\n\n      this.clean();\n      arrayEach(conditions, function (stack) {\n        _this3.orderStack.push(stack.column);\n\n        arrayEach(stack.conditions, function (condition) {\n          return _this3.addCondition(stack.column, condition);\n        });\n      });\n    }\n    /**\n     * Remove conditions at given column index.\n     *\n     * @param {Number} column Column index.\n     * @fires ConditionCollection#beforeRemove\n     * @fires ConditionCollection#afterRemove\n     */\n\n  }, {\n    key: \"removeConditions\",\n    value: function removeConditions(column) {\n      this.runLocalHooks('beforeRemove', column);\n\n      if (this.orderStack.indexOf(column) >= 0) {\n        this.orderStack.splice(this.orderStack.indexOf(column), 1);\n      }\n\n      this.clearConditions(column);\n      this.runLocalHooks('afterRemove', column);\n    }\n    /**\n     * Clear conditions at specified column index but without clearing stack order.\n     *\n     * @param {Number }column Column index.\n     * @fires ConditionCollection#beforeClear\n     * @fires ConditionCollection#afterClear\n     */\n\n  }, {\n    key: \"clearConditions\",\n    value: function clearConditions(column) {\n      this.runLocalHooks('beforeClear', column);\n      this.getConditions(column).length = 0;\n      delete this.columnTypes[column];\n      this.runLocalHooks('afterClear', column);\n    }\n    /**\n     * Check if at least one condition was added at specified column index. And if second parameter is passed then additionally\n     * check if condition exists under its name.\n     *\n     * @param {Number} column Column index.\n     * @param {String} [name] Condition name.\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"hasConditions\",\n    value: function hasConditions(column, name) {\n      var columnType = this.columnTypes[column];\n      var result = false;\n\n      if (!columnType) {\n        return false;\n      }\n\n      var conditions = this.getConditions(column);\n\n      if (name) {\n        result = arrayFilter(conditions, function (condition) {\n          return condition.name === name;\n        }).length > 0;\n      } else {\n        result = conditions.length > 0;\n      }\n\n      return result;\n    }\n    /**\n     * Clean all conditions collection and reset order stack.\n     *\n     * @fires ConditionCollection#beforeClean\n     * @fires ConditionCollection#afterClean\n     */\n\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      this.runLocalHooks('beforeClean');\n      this.columnTypes = Object.create(null);\n      this.orderStack.length = 0;\n      this.conditions = this.initConditionsCollection();\n      this.runLocalHooks('afterClean');\n    }\n    /**\n     * Destroy object.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.clearLocalHooks();\n      this.conditions = null;\n      this.orderStack = null;\n      this.columnTypes = null;\n    }\n    /**\n     * Init conditions collection\n     *\n     * @private\n     */\n\n  }, {\n    key: \"initConditionsCollection\",\n    value: function initConditionsCollection() {\n      var conditions = Object.create(null);\n      objectEach(operations, function (_, operation) {\n        conditions[operation] = Object.create(null);\n      });\n      return conditions;\n    }\n  }]);\n\n  return ConditionCollection;\n}();\n\nmixin(ConditionCollection, localHooks);\nexport default ConditionCollection;","map":{"version":3,"sources":["C:/Users/pjk14/Desktop/Gradely/gradely-react/node_modules/handsontable/es/plugins/filters/conditionCollection.js"],"names":["_templateObject","data","_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties","value","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","prototype","arrayEach","arrayMap","arrayFilter","objectEach","mixin","toSingleLine","localHooks","getCondition","OPERATION_ID","OPERATION_AND","operations","getOperationFunc","ConditionCollection","conditions","initConditionsCollection","columnTypes","orderStack","isEmpty","isMatch","column","_this","result","columnType","columnIndex","isMatchInConditions","getConditions","operationType","arguments","undefined","addCondition","conditionDefinition","operation","args","v","toLowerCase","name","command","runLocalHooks","indexOf","push","Error","concat","func","exportAllConditions","_this2","_ref","importAllConditions","_this3","clean","stack","condition","removeConditions","splice","clearConditions","hasConditions","create","destroy","clearLocalHooks","_"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.index-of\";\nimport \"core-js/modules/es.array.slice\";\nimport \"core-js/modules/es.array.splice\";\nimport \"core-js/modules/es.function.name\";\nimport \"core-js/modules/es.object.freeze\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"The column of index \", \" has been already applied with a `\", \"`\\n        filter operation. Use `removeConditions` to clear the current conditions and then add new ones.\\n        Mind that you cannot mix different types of operations (for instance, if you use `conjunction`,\\n        use it consequently for a particular column).\"], [\"The column of index \", \" has been already applied with a \\\\`\", \"\\\\`\\n        filter operation. Use \\\\`removeConditions\\\\` to clear the current conditions and then add new ones.\\n        Mind that you cannot mix different types of operations (for instance, if you use \\\\`conjunction\\\\`,\\n        use it consequently for a particular column).\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { arrayEach, arrayMap, arrayFilter } from '../../helpers/array';\nimport { objectEach, mixin } from '../../helpers/object';\nimport { toSingleLine } from '../../helpers/templateLiteralTag';\nimport localHooks from '../../mixins/localHooks';\nimport { getCondition } from './conditionRegisterer';\nimport { OPERATION_ID as OPERATION_AND } from './logicalOperations/conjunction';\nimport { operations, getOperationFunc } from './logicalOperationRegisterer';\n/**\n * @class ConditionCollection\n * @plugin Filters\n */\n\nvar ConditionCollection =\n/*#__PURE__*/\nfunction () {\n  function ConditionCollection() {\n    _classCallCheck(this, ConditionCollection);\n\n    /**\n     * Conditions collection grouped by operation type and then column index.\n     *\n     * @type {Object}\n     */\n    this.conditions = this.initConditionsCollection();\n    /**\n     * Types of operations grouped by column index.\n     *\n     * @type {Object}\n     */\n\n    this.columnTypes = {};\n    /**\n     * Order of added condition filters.\n     *\n     * @type {Array}\n     */\n\n    this.orderStack = [];\n  }\n  /**\n   * Check if condition collection is empty (so no needed to filter data).\n   *\n   * @returns {Boolean}\n   */\n\n\n  _createClass(ConditionCollection, [{\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return !this.orderStack.length;\n    }\n    /**\n     * Check if value is matched to the criteria of conditions chain.\n     *\n     * @param {Object} value Object with `value` and `meta` keys.\n     * @param {Number} [column] Column index.\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isMatch\",\n    value: function isMatch(value, column) {\n      var _this = this;\n\n      var result = true;\n\n      if (column === void 0) {\n        objectEach(this.columnTypes, function (columnType, columnIndex) {\n          result = _this.isMatchInConditions(_this.conditions[columnType][columnIndex], value, columnType);\n          return result;\n        });\n      } else {\n        var columnType = this.columnTypes[column];\n        result = this.isMatchInConditions(this.getConditions(column), value, columnType);\n      }\n\n      return result;\n    }\n    /**\n     * Check if the value is matches the conditions.\n     *\n     * @param {Array} conditions List of conditions.\n     * @param {Object} value Object with `value` and `meta` keys.\n     * @param {String} [operationType='conjunction'] Type of conditions operation\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isMatchInConditions\",\n    value: function isMatchInConditions(conditions, value) {\n      var operationType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : OPERATION_AND;\n      var result = false;\n\n      if (conditions.length) {\n        result = getOperationFunc(operationType)(conditions, value);\n      } else {\n        result = true;\n      }\n\n      return result;\n    }\n    /**\n     * Add condition to the collection.\n     *\n     * @param {Number} column Column index.\n     * @param {Object} conditionDefinition Object with keys:\n     *  * `command` Object, Command object with condition name as `key` property.\n     *  * `args` Array, Condition arguments.\n     * @param {String} [operation='conjunction'] Type of conditions operation\n     * @fires ConditionCollection#beforeAdd\n     * @fires ConditionCollection#afterAdd\n     */\n\n  }, {\n    key: \"addCondition\",\n    value: function addCondition(column, conditionDefinition) {\n      var operation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : OPERATION_AND;\n      var args = arrayMap(conditionDefinition.args, function (v) {\n        return typeof v === 'string' ? v.toLowerCase() : v;\n      });\n      var name = conditionDefinition.name || conditionDefinition.command.key;\n      this.runLocalHooks('beforeAdd', column);\n\n      if (this.orderStack.indexOf(column) === -1) {\n        this.orderStack.push(column);\n      }\n\n      var columnType = this.columnTypes[column];\n\n      if (columnType) {\n        if (columnType !== operation) {\n          throw Error(toSingleLine(_templateObject(), column, columnType));\n        }\n      } else {\n        if (!this.conditions[operation]) {\n          throw new Error(\"Unexpected operation named `\".concat(operation, \"`. Possible ones are `disjunction` and `conjunction`.\"));\n        }\n\n        this.columnTypes[column] = operation;\n      } // Add condition\n\n\n      this.getConditions(column).push({\n        name: name,\n        args: args,\n        func: getCondition(name, args)\n      });\n      this.runLocalHooks('afterAdd', column);\n    }\n    /**\n     * Get all added conditions from the collection at specified column index.\n     *\n     * @param {Number} column Column index.\n     * @returns {Array} Returns conditions collection as an array.\n     */\n\n  }, {\n    key: \"getConditions\",\n    value: function getConditions(column) {\n      var columnType = this.columnTypes[column];\n\n      if (!columnType) {\n        return [];\n      }\n\n      if (!this.conditions[columnType][column]) {\n        this.conditions[columnType][column] = [];\n      }\n\n      return this.conditions[columnType][column];\n    }\n    /**\n     * Export all previously added conditions.\n     *\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"exportAllConditions\",\n    value: function exportAllConditions() {\n      var _this2 = this;\n\n      var result = [];\n      arrayEach(this.orderStack, function (column) {\n        var conditions = arrayMap(_this2.getConditions(column), function (_ref) {\n          var name = _ref.name,\n              args = _ref.args;\n          return {\n            name: name,\n            args: args\n          };\n        });\n        var operation = _this2.columnTypes[column];\n        result.push({\n          column: column,\n          operation: operation,\n          conditions: conditions\n        });\n      });\n      return result;\n    }\n    /**\n     * Import conditions to the collection.\n     */\n\n  }, {\n    key: \"importAllConditions\",\n    value: function importAllConditions(conditions) {\n      var _this3 = this;\n\n      this.clean();\n      arrayEach(conditions, function (stack) {\n        _this3.orderStack.push(stack.column);\n\n        arrayEach(stack.conditions, function (condition) {\n          return _this3.addCondition(stack.column, condition);\n        });\n      });\n    }\n    /**\n     * Remove conditions at given column index.\n     *\n     * @param {Number} column Column index.\n     * @fires ConditionCollection#beforeRemove\n     * @fires ConditionCollection#afterRemove\n     */\n\n  }, {\n    key: \"removeConditions\",\n    value: function removeConditions(column) {\n      this.runLocalHooks('beforeRemove', column);\n\n      if (this.orderStack.indexOf(column) >= 0) {\n        this.orderStack.splice(this.orderStack.indexOf(column), 1);\n      }\n\n      this.clearConditions(column);\n      this.runLocalHooks('afterRemove', column);\n    }\n    /**\n     * Clear conditions at specified column index but without clearing stack order.\n     *\n     * @param {Number }column Column index.\n     * @fires ConditionCollection#beforeClear\n     * @fires ConditionCollection#afterClear\n     */\n\n  }, {\n    key: \"clearConditions\",\n    value: function clearConditions(column) {\n      this.runLocalHooks('beforeClear', column);\n      this.getConditions(column).length = 0;\n      delete this.columnTypes[column];\n      this.runLocalHooks('afterClear', column);\n    }\n    /**\n     * Check if at least one condition was added at specified column index. And if second parameter is passed then additionally\n     * check if condition exists under its name.\n     *\n     * @param {Number} column Column index.\n     * @param {String} [name] Condition name.\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"hasConditions\",\n    value: function hasConditions(column, name) {\n      var columnType = this.columnTypes[column];\n      var result = false;\n\n      if (!columnType) {\n        return false;\n      }\n\n      var conditions = this.getConditions(column);\n\n      if (name) {\n        result = arrayFilter(conditions, function (condition) {\n          return condition.name === name;\n        }).length > 0;\n      } else {\n        result = conditions.length > 0;\n      }\n\n      return result;\n    }\n    /**\n     * Clean all conditions collection and reset order stack.\n     *\n     * @fires ConditionCollection#beforeClean\n     * @fires ConditionCollection#afterClean\n     */\n\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      this.runLocalHooks('beforeClean');\n      this.columnTypes = Object.create(null);\n      this.orderStack.length = 0;\n      this.conditions = this.initConditionsCollection();\n      this.runLocalHooks('afterClean');\n    }\n    /**\n     * Destroy object.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.clearLocalHooks();\n      this.conditions = null;\n      this.orderStack = null;\n      this.columnTypes = null;\n    }\n    /**\n     * Init conditions collection\n     *\n     * @private\n     */\n\n  }, {\n    key: \"initConditionsCollection\",\n    value: function initConditionsCollection() {\n      var conditions = Object.create(null);\n      objectEach(operations, function (_, operation) {\n        conditions[operation] = Object.create(null);\n      });\n      return conditions;\n    }\n  }]);\n\n  return ConditionCollection;\n}();\n\nmixin(ConditionCollection, localHooks);\nexport default ConditionCollection;"]},"metadata":{},"sourceType":"module"}